import { BehaviorSubject } from 'rxjs';
export class CaseEditDataService {
    constructor() {
        this.details$ = new BehaviorSubject(null);
        this.title$ = new BehaviorSubject(null);
        this.formValidationErrors$ = new BehaviorSubject([]);
        this.editForm$ = new BehaviorSubject(null);
        this.isLinkedCasesJourneyAtFinalStep$ = new BehaviorSubject(null);
        this.eventTriggerName$ = new BehaviorSubject(null);
        this.triggerSubmitEvent$ = new BehaviorSubject(null);
        this.caseDetails$ = this.details$.asObservable();
        this.caseTitle$ = this.title$.asObservable();
        this.caseEditForm$ = this.editForm$.asObservable();
        this.caseFormValidationErrors$ = this.formValidationErrors$.asObservable();
        this.caseIsLinkedCasesJourneyAtFinalStep$ = this.isLinkedCasesJourneyAtFinalStep$.asObservable();
        this.caseEventTriggerName$ = this.eventTriggerName$.asObservable();
        this.caseTriggerSubmitEvent$ = this.triggerSubmitEvent$.asObservable();
    }
    setCaseDetails(caseDetails) {
        this.details$.next(caseDetails);
    }
    setCaseTitle(caseTitle) {
        this.title$.next(caseTitle);
    }
    setCaseEventTriggerName(triggerName) {
        this.eventTriggerName$.next(triggerName);
    }
    setFormValidationErrors(validationErrors) {
        this.formValidationErrors$.next(validationErrors);
    }
    setCaseEditForm(editForm) {
        this.editForm$.next(editForm);
    }
    clearFormValidationErrors() {
        this.formValidationErrors$.next([]);
    }
    setLinkedCasesJourneyAtFinalStep(isAtFinalStep) {
        this.isLinkedCasesJourneyAtFinalStep$.next(isAtFinalStep);
    }
    addFormValidationError(validationError) {
        this.formValidationErrors$.next(this.formValidationErrors$.getValue().concat([validationError]));
    }
    setTriggerSubmitEvent(state) {
        this.triggerSubmitEvent$.next(state);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS1lZGl0LWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NjZC1jYXNlLXVpLXRvb2xraXQvc3JjL2xpYi9zaGFyZWQvY29tbW9ucy9jYXNlLWVkaXQtZGF0YS9jYXNlLWVkaXQtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJdkMsTUFBTSxPQUFPLG1CQUFtQjtJQWlCOUI7UUFoQlEsYUFBUSxHQUFHLElBQUksZUFBZSxDQUFXLElBQUksQ0FBQyxDQUFDO1FBQy9DLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsQ0FBQztRQUMzQywwQkFBcUIsR0FBRyxJQUFJLGVBQWUsQ0FBNEIsRUFBRSxDQUFDLENBQUM7UUFDM0UsY0FBUyxHQUFHLElBQUksZUFBZSxDQUFtQixJQUFJLENBQUMsQ0FBQztRQUN4RCxxQ0FBZ0MsR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztRQUN0RSxzQkFBaUIsR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsQ0FBQztRQUN0RCx3QkFBbUIsR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztRQUUxRCxpQkFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUMsZUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEMsa0JBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzlDLDhCQUF5QixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RSx5Q0FBb0MsR0FBRyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUYsMEJBQXFCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzlELDRCQUF1QixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUV6RCxDQUFDO0lBRVYsY0FBYyxDQUFDLFdBQXFCO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxZQUFZLENBQUMsU0FBaUI7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLHVCQUF1QixDQUFDLFdBQW1CO1FBQ2hELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLHVCQUF1QixDQUFDLGdCQUF1QjtRQUNwRCxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLGVBQWUsQ0FBQyxRQUEwQjtRQUMvQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0seUJBQXlCO1FBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLGdDQUFnQyxDQUFDLGFBQXNCO1FBQzVELElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLHNCQUFzQixDQUFDLGVBQXdDO1FBQ3BFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQzdCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUNoRSxDQUFDO0lBQ0osQ0FBQztJQUVNLHFCQUFxQixDQUFDLEtBQWM7UUFDekMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbnR5cGVkRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDYXNlVmlldyB9IGZyb20gJy4uLy4uL2RvbWFpbic7XG5pbXBvcnQgeyBDYXNlRWRpdFZhbGlkYXRpb25FcnJvciB9IGZyb20gJy4vY2FzZS1lZGl0LXZhbGlkYXRpb24ubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgQ2FzZUVkaXREYXRhU2VydmljZSB7XG4gIHByaXZhdGUgZGV0YWlscyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PENhc2VWaWV3PihudWxsKTtcbiAgcHJpdmF0ZSB0aXRsZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4obnVsbCk7XG4gIHByaXZhdGUgZm9ybVZhbGlkYXRpb25FcnJvcnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxDYXNlRWRpdFZhbGlkYXRpb25FcnJvcltdPihbXSk7XG4gIHByaXZhdGUgZWRpdEZvcm0kID0gbmV3IEJlaGF2aW9yU3ViamVjdDxVbnR5cGVkRm9ybUdyb3VwPihudWxsKTtcbiAgcHJpdmF0ZSBpc0xpbmtlZENhc2VzSm91cm5leUF0RmluYWxTdGVwJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4obnVsbCk7XG4gIHByaXZhdGUgZXZlbnRUcmlnZ2VyTmFtZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4obnVsbCk7XG4gIHByaXZhdGUgdHJpZ2dlclN1Ym1pdEV2ZW50JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4obnVsbCk7XG5cbiAgcHVibGljIGNhc2VEZXRhaWxzJCA9IHRoaXMuZGV0YWlscyQuYXNPYnNlcnZhYmxlKCk7XG4gIHB1YmxpYyBjYXNlVGl0bGUkID0gdGhpcy50aXRsZSQuYXNPYnNlcnZhYmxlKCk7XG4gIHB1YmxpYyBjYXNlRWRpdEZvcm0kID0gdGhpcy5lZGl0Rm9ybSQuYXNPYnNlcnZhYmxlKCk7XG4gIHB1YmxpYyBjYXNlRm9ybVZhbGlkYXRpb25FcnJvcnMkID0gdGhpcy5mb3JtVmFsaWRhdGlvbkVycm9ycyQuYXNPYnNlcnZhYmxlKCk7XG4gIHB1YmxpYyBjYXNlSXNMaW5rZWRDYXNlc0pvdXJuZXlBdEZpbmFsU3RlcCQgPSB0aGlzLmlzTGlua2VkQ2FzZXNKb3VybmV5QXRGaW5hbFN0ZXAkLmFzT2JzZXJ2YWJsZSgpO1xuICBwdWJsaWMgY2FzZUV2ZW50VHJpZ2dlck5hbWUkID0gdGhpcy5ldmVudFRyaWdnZXJOYW1lJC5hc09ic2VydmFibGUoKTtcbiAgcHVibGljIGNhc2VUcmlnZ2VyU3VibWl0RXZlbnQkID0gdGhpcy50cmlnZ2VyU3VibWl0RXZlbnQkLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljIHNldENhc2VEZXRhaWxzKGNhc2VEZXRhaWxzOiBDYXNlVmlldyk6IHZvaWQge1xuICAgIHRoaXMuZGV0YWlscyQubmV4dChjYXNlRGV0YWlscyk7XG4gIH1cblxuICBwdWJsaWMgc2V0Q2FzZVRpdGxlKGNhc2VUaXRsZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy50aXRsZSQubmV4dChjYXNlVGl0bGUpO1xuICB9XG5cbiAgcHVibGljIHNldENhc2VFdmVudFRyaWdnZXJOYW1lKHRyaWdnZXJOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50VHJpZ2dlck5hbWUkLm5leHQodHJpZ2dlck5hbWUpO1xuICB9XG5cbiAgcHVibGljIHNldEZvcm1WYWxpZGF0aW9uRXJyb3JzKHZhbGlkYXRpb25FcnJvcnM6IGFueVtdKTogdm9pZCB7XG4gICAgdGhpcy5mb3JtVmFsaWRhdGlvbkVycm9ycyQubmV4dCh2YWxpZGF0aW9uRXJyb3JzKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDYXNlRWRpdEZvcm0oZWRpdEZvcm06IFVudHlwZWRGb3JtR3JvdXApOiB2b2lkIHtcbiAgICB0aGlzLmVkaXRGb3JtJC5uZXh0KGVkaXRGb3JtKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhckZvcm1WYWxpZGF0aW9uRXJyb3JzKCk6IHZvaWQge1xuICAgIHRoaXMuZm9ybVZhbGlkYXRpb25FcnJvcnMkLm5leHQoW10pO1xuICB9XG5cbiAgcHVibGljIHNldExpbmtlZENhc2VzSm91cm5leUF0RmluYWxTdGVwKGlzQXRGaW5hbFN0ZXA6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmlzTGlua2VkQ2FzZXNKb3VybmV5QXRGaW5hbFN0ZXAkLm5leHQoaXNBdEZpbmFsU3RlcCk7XG4gIH1cblxuICBwdWJsaWMgYWRkRm9ybVZhbGlkYXRpb25FcnJvcih2YWxpZGF0aW9uRXJyb3I6IENhc2VFZGl0VmFsaWRhdGlvbkVycm9yKTogdm9pZCB7XG4gICAgdGhpcy5mb3JtVmFsaWRhdGlvbkVycm9ycyQubmV4dChcbiAgICAgIHRoaXMuZm9ybVZhbGlkYXRpb25FcnJvcnMkLmdldFZhbHVlKCkuY29uY2F0KFt2YWxpZGF0aW9uRXJyb3JdKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc2V0VHJpZ2dlclN1Ym1pdEV2ZW50KHN0YXRlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy50cmlnZ2VyU3VibWl0RXZlbnQkLm5leHQoc3RhdGUpO1xuICB9XG59XG4iXX0=