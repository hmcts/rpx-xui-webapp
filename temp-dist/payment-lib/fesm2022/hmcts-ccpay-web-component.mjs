import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, Output, Pipe, ViewChild, NgModule } from '@angular/core';
import { BehaviorSubject, throwError } from 'rxjs';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpClientModule } from '@angular/common/http';
import * as i3 from '@angular/common';
import { formatDate, CommonModule } from '@angular/common';
import { catchError } from 'rxjs/operators';
import * as i2 from '@angular/platform-browser';
import * as i1$1 from '@angular/forms';
import { FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i1$2 from '@angular/router';
import * as i6 from '@angular/material/table';
import { MatTableDataSource, MatTableModule } from '@angular/material/table';
import * as i8 from '@angular/material/sort';
import { MatSort, MatSortModule } from '@angular/material/sort';
import * as i7 from '@angular/material/paginator';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import * as FileSaver from 'file-saver';
import * as XLSX from 'xlsx';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';

class PaymentLibService {
    API_ROOT;
    BULKSCAN_API_ROOT;
    REFUNDS_API_ROOT;
    NOTIFICATION_API_ROOT;
    CARDPAYMENTRETURNURL;
    constructor() { }
    setApiRootUrl(apiRoot) {
        this.API_ROOT = apiRoot;
    }
    getApiRootUrl() {
        return this.API_ROOT;
    }
    setBulkScanApiRootUrl(bulkscanapiRoot) {
        this.BULKSCAN_API_ROOT = bulkscanapiRoot;
    }
    getBulkScanApiRootUrl() {
        return this.BULKSCAN_API_ROOT;
    }
    setRefundndsApiRootUrl(refundsapiRoot) {
        this.REFUNDS_API_ROOT = refundsapiRoot;
    }
    getRefundsApiRootUrl() {
        return this.REFUNDS_API_ROOT;
    }
    setNoticationApiRootUrl(notificationapiRoot) {
        this.NOTIFICATION_API_ROOT = notificationapiRoot;
    }
    getNoticationApiRootUrl() {
        return this.NOTIFICATION_API_ROOT;
    }
    setCardPaymentReturnUrl(cardPaymentReturnUrl) {
        this.CARDPAYMENTRETURNURL = cardPaymentReturnUrl;
    }
    getCardPaymentReturnUrl() {
        return this.CARDPAYMENTRETURNURL;
    }
    static ɵfac = function PaymentLibService_Factory(t) { return new (t || PaymentLibService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentLibService, factory: PaymentLibService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentLibService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class OrderslistService {
    ordersList = new BehaviorSubject(null);
    refundView = new BehaviorSubject(null);
    caseType = new BehaviorSubject("");
    getcaseType = this.caseType.asObservable();
    feeExists = new BehaviorSubject(null);
    getFeeExist = this.feeExists.asObservable();
    ccdCaseNumber = new BehaviorSubject("");
    getCCDCaseNumberforRefund = this.ccdCaseNumber.asObservable();
    isFromServiceRequestPage = new BehaviorSubject(null);
    getisFromServiceRequestPage = this.isFromServiceRequestPage.asObservable();
    OrderRefId = new BehaviorSubject("");
    getOrderRefId = this.OrderRefId.asObservable();
    navigationPage = new BehaviorSubject("");
    getnavigationPage = this.navigationPage.asObservable();
    orderRef = new BehaviorSubject("");
    getorderRef = this.orderRef.asObservable();
    orderCCDEvent = new BehaviorSubject("");
    getorderCCDEvent = this.caseType.asObservable();
    orderCreated = new BehaviorSubject(null);
    getorderCreated = this.orderCreated.asObservable();
    orderParty = new BehaviorSubject("");
    getorderParty = this.orderParty.asObservable();
    orderRemissionTotal = new BehaviorSubject(null);
    getorderRemissionTotal = this.orderRemissionTotal.asObservable();
    orderFeesTotal = new BehaviorSubject(null);
    getorderFeesTotal = this.orderFeesTotal.asObservable();
    orderTotalPayments = new BehaviorSubject(null);
    getorderTotalPayments = this.orderTotalPayments.asObservable();
    rolesList = new BehaviorSubject(null);
    orderDetail = new BehaviorSubject(null);
    paymentPageView = new BehaviorSubject(null);
    constructor() { }
    setOrdersList(orderLevelFees) {
        this.ordersList.next(Object.assign([], orderLevelFees));
    }
    getOrdersList() {
        return this.ordersList;
    }
    setRefundView(refundList) {
        this.refundView.next(Object.assign([], refundList));
    }
    getRefundView() {
        return this.refundView;
    }
    setCaseType(caseType) {
        this.caseType.next(caseType);
    }
    getCaseType() {
        return this.caseType;
    }
    setCCDCaseNumber(ccdCaseNumber) {
        this.ccdCaseNumber.next(ccdCaseNumber);
    }
    getCCDCaseNumber() {
        return this.ccdCaseNumber;
    }
    setFeeExists(feeExists) {
        this.feeExists.next(feeExists);
    }
    getFeeExists() {
        return this.feeExists;
    }
    setisFromServiceRequestPage(isFromServiceRequestPage) {
        this.isFromServiceRequestPage.next(isFromServiceRequestPage);
    }
    getisFromServiceRequestPages() {
        return this.isFromServiceRequestPage;
    }
    setOrderRefId(OrderRefId) {
        this.OrderRefId.next(OrderRefId);
    }
    getSelectedOrderRefId() {
        return this.OrderRefId;
    }
    setnavigationPage(navigationPage) {
        this.navigationPage.next(navigationPage);
    }
    getnavigationPageValue() {
        return this.navigationPage;
    }
    setpaymentPageView(paymentpageList) {
        this.paymentPageView.next(Object.assign([], paymentpageList));
    }
    getpaymentPageView() {
        return this.paymentPageView;
    }
    setUserRolesList(rolesList) {
        this.rolesList.next(Object.assign([], rolesList));
    }
    getUserRolesList() {
        return this.rolesList;
    }
    setorderDetail(orderDetail) {
        this.orderDetail.next(Object.assign([], orderDetail));
    }
    getorderDetail() {
        return this.orderDetail;
    }
    setOrderRef(orderRef) {
        this.orderRef.next(orderRef);
    }
    getorderRefs() {
        return this.orderRef;
    }
    setorderCCDEvent(orderCCDEvent) {
        this.orderCCDEvent.next(orderCCDEvent);
    }
    getorderCCDEvents() {
        return this.orderCCDEvent;
    }
    setorderCreated(orderCreated) {
        this.orderCreated.next(orderCreated);
    }
    getorderCreateds() {
        return this.orderCreated;
    }
    setorderParty(orderParty) {
        this.orderParty.next(orderParty);
    }
    getorderPartys() {
        return this.orderParty;
    }
    setorderRemissionTotal(orderRemissionTotal) {
        this.orderRemissionTotal.next(orderRemissionTotal);
    }
    getorderRemissionTotals() {
        return this.orderRemissionTotal;
    }
    setorderFeesTotal(orderFeesTotal) {
        this.orderFeesTotal.next(orderFeesTotal);
    }
    getorderFeesTotals() {
        return this.orderFeesTotal;
    }
    setorderTotalPayments(orderTotalPayments) {
        this.orderTotalPayments.next(orderTotalPayments);
    }
    getoorderTotalPaymentss() {
        return this.orderTotalPayments;
    }
    static ɵfac = function OrderslistService_Factory(t) { return new (t || OrderslistService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderslistService, factory: OrderslistService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OrderslistService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

function PaymentLibComponent_ccpay_refund_list_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-refund-list", 11);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("USERID", ctx_r0.USERID)("LOGGEDINUSERROLES", ctx_r0.LOGGEDINUSERROLES)("LOGGEDINUSEREMAIL", ctx_r0.LOGGEDINUSEREMAIL);
} }
function PaymentLibComponent_ccpay_payment_list_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-payment-list");
} }
function PaymentLibComponent_ccpay_refund_status_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-refund-status", 12);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("LOGGEDINUSERROLES", ctx_r2.LOGGEDINUSERROLES)("API_ROOT", ctx_r2.API_ROOT);
} }
function PaymentLibComponent_ccpay_payment_view_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-payment-view", 13);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("LOGGEDINUSERROLES", ctx_r3.LOGGEDINUSERROLES)("isTurnOff", ctx_r3.ISTURNOFF)("isTakePayment", ctx_r3.TAKEPAYMENT)("caseType", ctx_r3.CASETYPE)("ISPAYMENTSTATUSENABLED", ctx_r3.ISPAYMENTSTATUSENABLED);
} }
function PaymentLibComponent_ccpay_process_refund_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-process-refund", 14);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("refundReference", ctx_r4.refundReference)("refundlistsource", ctx_r4.refundlistsource);
} }
function PaymentLibComponent_ccpay_pba_payment_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-pba-payment", 15);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("pbaPayOrderRef", ctx_r5.pbaPayOrderRef);
} }
function PaymentLibComponent_ccpay_case_transactions_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-case-transactions", 16);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTakePayment", ctx_r6.isTakePayment)("isFromServiceRequestPage", ctx_r6.isFromServiceRequestPage)("LOGGEDINUSERROLES", ctx_r6.LOGGEDINUSERROLES);
} }
function PaymentLibComponent_app_mark_unidentified_payment_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-mark-unidentified-payment", 17);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("caseType", ctx_r7.CASETYPE);
} }
function PaymentLibComponent_app_mark_unsolicited_payment_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-mark-unsolicited-payment", 17);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵproperty("caseType", ctx_r8.CASETYPE);
} }
function PaymentLibComponent_app_allocate_payments_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-allocate-payments", 18);
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r9.ISTURNOFF)("caseType", ctx_r9.CASETYPE);
} }
function PaymentLibComponent_ccpay_fee_summary_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-fee-summary", 19);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ccdCaseNumber", ctx_r10.CCD_CASE_NUMBER)("paymentGroupRef", ctx_r10.paymentGroupReference)("isTurnOff", ctx_r10.ISTURNOFF)("caseType", ctx_r10.CASETYPE);
} }
function PaymentLibComponent_ccpay_reports_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-reports", 20);
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ISPAYMENTSTATUSENABLED", ctx_r11.ISPAYMENTSTATUSENABLED);
} }
class PaymentLibComponent {
    paymentLibService;
    cd;
    OrderslistService;
    API_ROOT;
    BULKSCAN_API_ROOT;
    REFUNDS_API_ROOT;
    NOTIFICATION_API_ROOT;
    CARDPAYMENTRETURNURL;
    CCD_CASE_NUMBER;
    EXC_REFERENCE;
    PAYMENT_METHOD;
    VIEW;
    VIEWSERVICE;
    PAYMENT_GROUP_REF;
    TAKEPAYMENT;
    SERVICEREQUEST;
    DCN_NUMBER;
    SELECTED_OPTION;
    ISBSENABLE;
    ISSFENABLE;
    ISTURNOFF;
    CASETYPE;
    ISPAYMENTSTATUSENABLED;
    rootUrl;
    REFUNDLIST;
    USERID;
    LOGGEDINUSERROLES;
    LOGGEDINUSEREMAIL;
    isFromServiceRequestPage;
    paymentMethod;
    bspaymentdcn;
    unProcessedPaymentServiceId = null;
    paymentGroupReference;
    paymentReference;
    refundReference;
    isFromPayBubble = false;
    refundlistsource;
    viewName;
    isTurnOff;
    caseType;
    unProcessedPayment = null;
    isRefundStatusView;
    isRedirectFromCaseTransactionPage;
    isCallFromRefundList;
    isFromRefundStatusPage;
    iscancelClicked;
    isFromPaymentDetailPage;
    pbaPayOrderRef;
    isTakePayment;
    orderDetail;
    orderRef;
    orderStatus;
    orderParty;
    orderCreated;
    orderCCDEvent;
    serviceRequestValue;
    orderAddBtnEnable;
    orderFeesTotal = 0.00;
    orderRemissionTotal = 0.00;
    orderTotalPayments = 0.00;
    orderPendingPayments = 0.00;
    constructor(paymentLibService, cd, OrderslistService) {
        this.paymentLibService = paymentLibService;
        this.cd = cd;
        this.OrderslistService = OrderslistService;
    }
    ngAfterContentChecked() {
        this.cd.detectChanges();
    }
    ngOnInit() {
        this.paymentLibService.setApiRootUrl(this.API_ROOT);
        this.paymentLibService.setBulkScanApiRootUrl(this.BULKSCAN_API_ROOT);
        this.paymentLibService.setRefundndsApiRootUrl(this.REFUNDS_API_ROOT);
        this.paymentLibService.setNoticationApiRootUrl(this.NOTIFICATION_API_ROOT);
        this.paymentLibService.setCardPaymentReturnUrl(this.CARDPAYMENTRETURNURL);
        if (this.LOGGEDINUSERROLES.length > 0) {
            this.OrderslistService.setUserRolesList(this.LOGGEDINUSERROLES);
        }
        if (this.PAYMENT_GROUP_REF) {
            this.paymentGroupReference = this.PAYMENT_GROUP_REF;
        }
        if (this.DCN_NUMBER) {
            this.bspaymentdcn = this.DCN_NUMBER;
        }
        if (this.REFUNDLIST === "true") {
            this.VIEW = 'refund-list';
            this.viewName = this.VIEW;
        }
        if (this.VIEW === 'fee-summary') {
            this.viewName = 'fee-summary';
        }
        else if (this.VIEW !== 'reports' && this.VIEW !== 'refund-list') {
            this.viewName = 'case-transactions';
        }
        else {
            this.viewName = this.VIEW;
        }
        if (this.isTakePayment) {
            this.TAKEPAYMENT = true;
        }
        if (this.API_ROOT == 'api/payment-history') {
            this.isFromPayBubble = true;
        }
    }
    static ɵfac = function PaymentLibComponent_Factory(t) { return new (t || PaymentLibComponent)(i0.ɵɵdirectiveInject(PaymentLibService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PaymentLibComponent, selectors: [["ccpay-payment-lib"]], inputs: { API_ROOT: "API_ROOT", BULKSCAN_API_ROOT: "BULKSCAN_API_ROOT", REFUNDS_API_ROOT: "REFUNDS_API_ROOT", NOTIFICATION_API_ROOT: "NOTIFICATION_API_ROOT", CARDPAYMENTRETURNURL: "CARDPAYMENTRETURNURL", CCD_CASE_NUMBER: "CCD_CASE_NUMBER", EXC_REFERENCE: "EXC_REFERENCE", PAYMENT_METHOD: "PAYMENT_METHOD", VIEW: "VIEW", VIEWSERVICE: "VIEWSERVICE", PAYMENT_GROUP_REF: "PAYMENT_GROUP_REF", TAKEPAYMENT: "TAKEPAYMENT", SERVICEREQUEST: "SERVICEREQUEST", DCN_NUMBER: "DCN_NUMBER", SELECTED_OPTION: "SELECTED_OPTION", ISBSENABLE: "ISBSENABLE", ISSFENABLE: "ISSFENABLE", ISTURNOFF: "ISTURNOFF", CASETYPE: "CASETYPE", ISPAYMENTSTATUSENABLED: "ISPAYMENTSTATUSENABLED", rootUrl: "rootUrl", REFUNDLIST: "REFUNDLIST", USERID: "USERID", LOGGEDINUSERROLES: "LOGGEDINUSERROLES", LOGGEDINUSEREMAIL: "LOGGEDINUSEREMAIL", isFromServiceRequestPage: "isFromServiceRequestPage" }, decls: 12, vars: 12, consts: [[3, "USERID", "LOGGEDINUSERROLES", "LOGGEDINUSEREMAIL", 4, "ngIf"], [4, "ngIf"], [3, "LOGGEDINUSERROLES", "API_ROOT", 4, "ngIf"], [3, "LOGGEDINUSERROLES", "isTurnOff", "isTakePayment", "caseType", "ISPAYMENTSTATUSENABLED", 4, "ngIf"], [3, "refundReference", "refundlistsource", 4, "ngIf"], [3, "pbaPayOrderRef", 4, "ngIf"], [3, "isTakePayment", "isFromServiceRequestPage", "LOGGEDINUSERROLES", 4, "ngIf"], [3, "caseType", 4, "ngIf"], [3, "isTurnOff", "caseType", 4, "ngIf"], [3, "ccdCaseNumber", "paymentGroupRef", "isTurnOff", "caseType", 4, "ngIf"], [3, "ISPAYMENTSTATUSENABLED", 4, "ngIf"], [3, "USERID", "LOGGEDINUSERROLES", "LOGGEDINUSEREMAIL"], [3, "LOGGEDINUSERROLES", "API_ROOT"], [3, "LOGGEDINUSERROLES", "isTurnOff", "isTakePayment", "caseType", "ISPAYMENTSTATUSENABLED"], [3, "refundReference", "refundlistsource"], [3, "pbaPayOrderRef"], [3, "isTakePayment", "isFromServiceRequestPage", "LOGGEDINUSERROLES"], [3, "caseType"], [3, "isTurnOff", "caseType"], [3, "ccdCaseNumber", "paymentGroupRef", "isTurnOff", "caseType"], [3, "ISPAYMENTSTATUSENABLED"]], template: function PaymentLibComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PaymentLibComponent_ccpay_refund_list_0_Template, 1, 3, "ccpay-refund-list", 0);
            i0.ɵɵtemplate(1, PaymentLibComponent_ccpay_payment_list_1_Template, 1, 0, "ccpay-payment-list", 1);
            i0.ɵɵtemplate(2, PaymentLibComponent_ccpay_refund_status_2_Template, 1, 2, "ccpay-refund-status", 2);
            i0.ɵɵtemplate(3, PaymentLibComponent_ccpay_payment_view_3_Template, 1, 5, "ccpay-payment-view", 3);
            i0.ɵɵtemplate(4, PaymentLibComponent_ccpay_process_refund_4_Template, 1, 2, "ccpay-process-refund", 4);
            i0.ɵɵtemplate(5, PaymentLibComponent_ccpay_pba_payment_5_Template, 1, 1, "ccpay-pba-payment", 5);
            i0.ɵɵtemplate(6, PaymentLibComponent_ccpay_case_transactions_6_Template, 1, 3, "ccpay-case-transactions", 6);
            i0.ɵɵtemplate(7, PaymentLibComponent_app_mark_unidentified_payment_7_Template, 1, 1, "app-mark-unidentified-payment", 7);
            i0.ɵɵtemplate(8, PaymentLibComponent_app_mark_unsolicited_payment_8_Template, 1, 1, "app-mark-unsolicited-payment", 7);
            i0.ɵɵtemplate(9, PaymentLibComponent_app_allocate_payments_9_Template, 1, 2, "app-allocate-payments", 8);
            i0.ɵɵtemplate(10, PaymentLibComponent_ccpay_fee_summary_10_Template, 1, 4, "ccpay-fee-summary", 9);
            i0.ɵɵtemplate(11, PaymentLibComponent_ccpay_reports_11_Template, 1, 1, "ccpay-reports", 10);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.viewName === "refund-list");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "payment-list");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "refundstatuslist");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "payment-view");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "process-refund");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "pba-payment");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "case-transactions");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "unidentifiedPage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "unsolicitedPage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "allocate-payments");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "fee-summary");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "reports");
        } }, encapsulation: 2 });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentLibComponent, [{
        type: Component,
        args: [{
                selector: 'ccpay-payment-lib',
                template: `
  <ccpay-refund-list [USERID]="USERID" [LOGGEDINUSERROLES]="LOGGEDINUSERROLES" [LOGGEDINUSEREMAIL]="LOGGEDINUSEREMAIL" *ngIf="viewName === 'refund-list'"></ccpay-refund-list>
    <ccpay-payment-list *ngIf="viewName === 'payment-list'"></ccpay-payment-list>
    <ccpay-refund-status
    [LOGGEDINUSERROLES]="LOGGEDINUSERROLES"
    [API_ROOT]="API_ROOT"
    *ngIf="viewName === 'refundstatuslist'"> </ccpay-refund-status >
    <ccpay-payment-view [LOGGEDINUSERROLES]="LOGGEDINUSERROLES" *ngIf="viewName === 'payment-view'"
    [isTurnOff]="ISTURNOFF" [isTakePayment]="TAKEPAYMENT"  [caseType]="CASETYPE"
    [ISPAYMENTSTATUSENABLED] = "ISPAYMENTSTATUSENABLED"
    ></ccpay-payment-view>

    <ccpay-process-refund *ngIf="viewName === 'process-refund'"
    [refundReference]="refundReference"
    [refundlistsource]="refundlistsource"
    ></ccpay-process-refund>
    <ccpay-pba-payment *ngIf="viewName === 'pba-payment'"
    [pbaPayOrderRef]="pbaPayOrderRef"
    ></ccpay-pba-payment>
    <ccpay-case-transactions [isTakePayment]="isTakePayment" [isFromServiceRequestPage]="isFromServiceRequestPage" [LOGGEDINUSERROLES]="LOGGEDINUSERROLES" *ngIf="viewName === 'case-transactions'"></ccpay-case-transactions>
    <app-mark-unidentified-payment *ngIf="viewName === 'unidentifiedPage'"
    [caseType]="CASETYPE"></app-mark-unidentified-payment>
    <app-mark-unsolicited-payment *ngIf="viewName === 'unsolicitedPage'"
    [caseType]="CASETYPE"></app-mark-unsolicited-payment>
    <app-allocate-payments *ngIf="viewName === 'allocate-payments'"
    [isTurnOff]="ISTURNOFF"
    [caseType]="CASETYPE"
    ></app-allocate-payments>
    <ccpay-fee-summary *ngIf="viewName === 'fee-summary'"
      [ccdCaseNumber]="CCD_CASE_NUMBER"
      [paymentGroupRef]="paymentGroupReference"
      [isTurnOff]="ISTURNOFF"
      [caseType]="CASETYPE"
      ></ccpay-fee-summary>
    <ccpay-reports *ngIf="viewName === 'reports'"
    [ISPAYMENTSTATUSENABLED] = "ISPAYMENTSTATUSENABLED"
    ></ccpay-reports>
    `
            }]
    }], function () { return [{ type: PaymentLibService }, { type: i0.ChangeDetectorRef }, { type: OrderslistService }]; }, { API_ROOT: [{
            type: Input,
            args: ['API_ROOT']
        }], BULKSCAN_API_ROOT: [{
            type: Input,
            args: ['BULKSCAN_API_ROOT']
        }], REFUNDS_API_ROOT: [{
            type: Input,
            args: ['REFUNDS_API_ROOT']
        }], NOTIFICATION_API_ROOT: [{
            type: Input,
            args: ['NOTIFICATION_API_ROOT']
        }], CARDPAYMENTRETURNURL: [{
            type: Input,
            args: ['CARDPAYMENTRETURNURL']
        }], CCD_CASE_NUMBER: [{
            type: Input,
            args: ['CCD_CASE_NUMBER']
        }], EXC_REFERENCE: [{
            type: Input,
            args: ['EXC_REFERENCE']
        }], PAYMENT_METHOD: [{
            type: Input,
            args: ['PAYMENT_METHOD']
        }], VIEW: [{
            type: Input,
            args: ['VIEW']
        }], VIEWSERVICE: [{
            type: Input,
            args: ['VIEWSERVICE']
        }], PAYMENT_GROUP_REF: [{
            type: Input,
            args: ['PAYMENT_GROUP_REF']
        }], TAKEPAYMENT: [{
            type: Input,
            args: ['TAKEPAYMENT']
        }], SERVICEREQUEST: [{
            type: Input,
            args: ['SERVICEREQUEST']
        }], DCN_NUMBER: [{
            type: Input,
            args: ['DCN_NUMBER']
        }], SELECTED_OPTION: [{
            type: Input,
            args: ['SELECTED_OPTION']
        }], ISBSENABLE: [{
            type: Input,
            args: ['ISBSENABLE']
        }], ISSFENABLE: [{
            type: Input,
            args: ['ISSFENABLE']
        }], ISTURNOFF: [{
            type: Input,
            args: ['ISTURNOFF']
        }], CASETYPE: [{
            type: Input,
            args: ['CASETYPE']
        }], ISPAYMENTSTATUSENABLED: [{
            type: Input,
            args: ['ISPAYMENTSTATUSENABLED']
        }], rootUrl: [{
            type: Input,
            args: ['rootUrl']
        }], REFUNDLIST: [{
            type: Input,
            args: ['REFUNDLIST']
        }], USERID: [{
            type: Input,
            args: ['USERID']
        }], LOGGEDINUSERROLES: [{
            type: Input,
            args: ['LOGGEDINUSERROLES']
        }], LOGGEDINUSEREMAIL: [{
            type: Input,
            args: ['LOGGEDINUSEREMAIL']
        }], isFromServiceRequestPage: [{
            type: Input,
            args: ['isFromServiceRequestPage']
        }] }); })();

class ErrorHandlerService {
    constructor() { }
    handleError(err) {
        let errorMessage;
        if (err.error instanceof Error) {
            // A client-side or network error occurred.
            errorMessage = `An error occurred: ${err.error.message}`;
        }
        else {
            // The backend returned an unsuccessful response code.
            if (err.status === 404) {
                if (typeof err.error === 'string' && err.error !== undefined) {
                    if (err.error.length > 60) {
                        if (JSON.parse(err.error).statusCode !== undefined && JSON.parse(err.error).statusCode === 500) {
                            errorMessage = 'Internal server error';
                        }
                        else {
                            if (err.error.length > 60) {
                                errorMessage = JSON.parse(err.error).error;
                            }
                            else {
                                errorMessage = err.error;
                            }
                        }
                    }
                    else {
                        errorMessage = err.error;
                    }
                }
                else {
                    errorMessage = JSON.parse(err.error).error;
                }
            }
            else if (err.status === 500) {
                errorMessage = 'Internal server error';
            }
            else if (err.error.messsage === undefined) {
                if (typeof err.error === 'object') {
                    errorMessage = JSON.parse(JSON.stringify(err.error)).error;
                }
                else {
                    if (typeof err.error === 'string' && err.error !== undefined) {
                        if (err.error.length > 60) {
                            if (JSON.parse(err.error).statusCode !== undefined && JSON.parse(err.error).statusCode === 500) {
                                errorMessage = 'Internal server error';
                            }
                            else {
                                if (err.error.length > 60) {
                                    errorMessage = JSON.parse(err.error).error;
                                }
                                else {
                                    errorMessage = err.error;
                                }
                            }
                        }
                        else {
                            errorMessage = err.error;
                        }
                    }
                    else {
                        errorMessage = JSON.parse(err.error).error;
                    }
                }
            }
            else {
                if (err.error.message !== undefined) {
                    errorMessage = `${err.error.message}`;
                }
                else {
                    errorMessage = `${err.error}`;
                }
            }
        }
        return throwError(errorMessage);
    }
    getServerErrorMessage(isErrorExist, isDataNotExist = false, error = '') {
        const bodyContent = isDataNotExist ? error : 'Try again later';
        return {
            title: "There is a problem with the service",
            body: bodyContent,
            showError: isErrorExist
        };
    }
    static ɵfac = function ErrorHandlerService_Factory(t) { return new (t || ErrorHandlerService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ErrorHandlerService, factory: ErrorHandlerService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ErrorHandlerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

const noop$1 = () => undefined;
class Logger {
    info;
    warn;
    error;
}
class LoggerService {
    info;
    warn;
    error;
    invokeConsoleMethod(type, args) { }
    static ɵfac = function LoggerService_Factory(t) { return new (t || LoggerService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LoggerService, factory: LoggerService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(LoggerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

class PaymentListService {
    http;
    logger;
    errorHandlerService;
    paymentLibService;
    payments;
    constructor(http, logger, errorHandlerService, paymentLibService) {
        this.http = http;
        this.logger = logger;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getPaymentByCcdCaseNumber(ccdCaseNumber, paymentMethod) {
        this.logger.info('Payment-list-service getPaymentByCcdCaseNumber for: ', ccdCaseNumber);
        return this.http.get(`${this.paymentLibService.API_ROOT}/cases/${ccdCaseNumber}/payments`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function PaymentListService_Factory(t) { return new (t || PaymentListService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(LoggerService), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentListService, factory: PaymentListService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentListService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: LoggerService }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

function PaymentListComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 2)(2, "h2", 3);
    i0.ɵɵtext(3, " Payments list could not be retrieved ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.errorMessage, " ");
} }
function PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 8);
    i0.ɵɵtext(1, " Payment rejected due to payment method selected or payment information entered, for example, failed fraud check, a 3D Secure authentication failure, or the user does not have enough money in account ");
    i0.ɵɵelementEnd();
} }
function PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 8);
    i0.ɵɵtext(1, " Payment was not confirmed and completed within 90 minutes of being created ");
    i0.ɵɵelementEnd();
} }
function PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 8);
    i0.ɵɵtext(1, " User clicked on the \u201CCancel payment\u201D button during the payment journey ");
    i0.ɵɵelementEnd();
} }
function PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 8);
    i0.ɵɵtext(1, " Multiple possible causes, for example a configuration problem with the payment provider, or incorrect login credentials ");
    i0.ɵɵelementEnd();
} }
function PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_1_Template, 2, 0, "p", 10);
    i0.ɵɵtemplate(2, PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_2_Template, 2, 0, "p", 10);
    i0.ɵɵtemplate(3, PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_3_Template, 2, 0, "p", 10);
    i0.ɵɵtemplate(4, PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_p_4_Template, 2, 0, "p", 10);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const statusHistory_r9 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", statusHistory_r9.error_code === "P0010");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", statusHistory_r9.error_code === "P0020");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", statusHistory_r9.error_code === "P0030");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", statusHistory_r9.error_code === "P0050");
} }
function PaymentListComponent_div_2_tr_17_td_18_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵtemplate(1, PaymentListComponent_div_2_tr_17_td_18_div_5_div_1_Template, 5, 4, "div", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const payment_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", payment_r3.status_histories);
} }
function PaymentListComponent_div_2_tr_17_td_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td")(1, "details")(2, "summary")(3, "span", 11);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(5, PaymentListComponent_div_2_tr_17_td_18_div_5_Template, 2, 1, "div", 12);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const payment_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(payment_r3.status);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", payment_r3.status === "Failed");
} }
function PaymentListComponent_div_2_tr_17_td_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 8);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const payment_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", payment_r3.status, " ");
} }
function PaymentListComponent_div_2_tr_17_td_20_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 13)(1, "p", 8);
    i0.ɵɵtext(2, "This means the transaction is being processed by Liberata.");
    i0.ɵɵelementEnd()();
} }
function PaymentListComponent_div_2_tr_17_td_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td")(1, "details")(2, "summary")(3, "span", 11);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(5, PaymentListComponent_div_2_tr_17_td_20_div_5_Template, 3, 0, "div", 12);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const payment_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(payment_r3.status);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", payment_r3.status === "Pending");
} }
function PaymentListComponent_div_2_tr_17_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr")(1, "td", 8)(2, "a", 9);
    i0.ɵɵlistener("click", function PaymentListComponent_div_2_tr_17_Template_a_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r20); const payment_r3 = restoredCtx.$implicit; const ctx_r19 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r19.loadPaymentViewComponent(payment_r3.payment_group_reference, payment_r3.payment_reference, payment_r3.method)); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "td", 8);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 8);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 8);
    i0.ɵɵtext(10);
    i0.ɵɵpipe(11, "titlecase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 8);
    i0.ɵɵtext(13);
    i0.ɵɵpipe(14, "titlecase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 8);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "number");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(18, PaymentListComponent_div_2_tr_17_td_18_Template, 6, 2, "td", 1);
    i0.ɵɵtemplate(19, PaymentListComponent_div_2_tr_17_td_19_Template, 2, 1, "td", 10);
    i0.ɵɵtemplate(20, PaymentListComponent_div_2_tr_17_td_20_Template, 6, 2, "td", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const payment_r3 = ctx.$implicit;
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r3.payment_group_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r3.payment_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 9, payment_r3.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 12, payment_r3.channel));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 14, payment_r3.method));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(17, 16, payment_r3.amount, ".2"), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", payment_r3.method === "card" && payment_r3.channel === "online");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", payment_r3.method === "card" && payment_r3.channel === "telephony");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", payment_r3.method === "payment by account");
} }
function PaymentListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "table", 5)(2, "tr")(3, "th", 6);
    i0.ɵɵtext(4, "Payment group reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "th", 6);
    i0.ɵɵtext(6, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "th", 6);
    i0.ɵɵtext(8, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "th", 6);
    i0.ɵɵtext(10, "Channel");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "th", 6);
    i0.ɵɵtext(12, "Method");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "th", 6);
    i0.ɵɵtext(14, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "th", 6);
    i0.ɵɵtext(16, "Status");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(17, PaymentListComponent_div_2_tr_17_Template, 21, 19, "tr", 7);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(17);
    i0.ɵɵproperty("ngForOf", ctx_r1.payments.payments);
} }
class PaymentListComponent {
    paymentListService;
    paymentLibComponent;
    payments;
    errorMessage;
    code;
    constructor(paymentListService, paymentLibComponent) {
        this.paymentListService = paymentListService;
        this.paymentLibComponent = paymentLibComponent;
    }
    ngOnInit() {
        this.paymentListService.getPaymentByCcdCaseNumber(this.paymentLibComponent.CCD_CASE_NUMBER, this.paymentLibComponent.PAYMENT_METHOD)
            .subscribe(payments => this.payments = payments, (error) => this.errorMessage = error);
    }
    loadPaymentViewComponent(paymentGroupReference, paymentReference, paymentMethod) {
        this.paymentLibComponent.paymentMethod = paymentMethod;
        this.paymentLibComponent.paymentGroupReference = paymentGroupReference;
        this.paymentLibComponent.paymentReference = paymentReference;
        this.paymentLibComponent.viewName = 'payment-view';
    }
    static ɵfac = function PaymentListComponent_Factory(t) { return new (t || PaymentListComponent)(i0.ɵɵdirectiveInject(PaymentListService), i0.ɵɵdirectiveInject(PaymentLibComponent)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PaymentListComponent, selectors: [["ccpay-payment-list"]], decls: 3, vars: 2, consts: [[1, "govuk-width-container"], [4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], [1, "table"], [1, "bold", "font-xsmall"], [4, "ngFor", "ngForOf"], [1, "font-xsmall"], ["href", "javascript:void(0)", 3, "click"], ["class", "font-xsmall", 4, "ngIf"], [1, "summary", "font-xsmall"], ["class", "panel panel-border-narrow", 4, "ngIf"], [1, "panel", "panel-border-narrow"]], template: function PaymentListComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PaymentListComponent_div_1_Template, 6, 1, "div", 1);
            i0.ɵɵtemplate(2, PaymentListComponent_div_2_Template, 18, 1, "div", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.errorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.errorMessage && ctx.payments);
        } }, dependencies: [i3.NgForOf, i3.NgIf, i3.DecimalPipe, i3.TitleCasePipe, i3.DatePipe] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentListComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-payment-list', template: "<div class=\"govuk-width-container\">\n\n  <div *ngIf=\"errorMessage\">\n    <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n      <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n        Payments list could not be retrieved\n      </h2>\n      <div class=\"govuk-error-summary__body\">\n        {{ errorMessage }}\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"!errorMessage && payments\">\n\n    <table class=\"table\">\n      <tr>\n        <th class=\"bold font-xsmall\">Payment group reference</th>\n        <th class=\"bold font-xsmall\">Payment reference</th>\n        <th class=\"bold font-xsmall\">Date created</th>\n        <th class=\"bold font-xsmall\">Channel</th>\n        <th class=\"bold font-xsmall\">Method</th>\n        <th class=\"bold font-xsmall\">Amount</th>\n        <th class=\"bold font-xsmall\">Status</th>\n      </tr>\n      <tr *ngFor=\"let payment of payments.payments\">\n        <td class=\"font-xsmall\">\n          <a href=\"javascript:void(0)\" (click)=\"loadPaymentViewComponent(payment.payment_group_reference, payment.payment_reference, payment.method)\">{{ payment.payment_group_reference }}</a>\n        <td class=\"font-xsmall\">{{ payment.payment_reference }}</td>\n        <td class=\"font-xsmall\">{{ payment.date_created | date:'dd MMM yyyy' }}</td>\n        <td class=\"font-xsmall\">{{ payment.channel | titlecase }}</td>\n        <td class=\"font-xsmall\">{{ payment.method | titlecase }}</td>\n        <td class=\"font-xsmall\">\u00A3{{ payment.amount | number:'.2' }}</td>\n        <td *ngIf=\"payment.method === 'card' && payment.channel === 'online'\">\n          <details>\n            <summary><span class=\"summary font-xsmall\">{{ payment.status }}</span></summary>\n            <div class=\"panel panel-border-narrow\" *ngIf=\"payment.status === 'Failed'\">\n              <div *ngFor=\"let statusHistory of payment.status_histories\">\n                <p class=\"font-xsmall\" *ngIf=\"statusHistory.error_code === 'P0010'\">\n                  Payment rejected due to payment method selected or payment information entered, for example, failed fraud check, a 3D Secure authentication failure, or the user does not have enough money in account\n                </p>\n                <p class=\"font-xsmall\" *ngIf=\"statusHistory.error_code === 'P0020'\">\n                  Payment was not confirmed and completed within 90 minutes of being created\n                </p>\n                <p class=\"font-xsmall\" *ngIf=\"statusHistory.error_code === 'P0030'\">\n                  User clicked on the \u201CCancel payment\u201D button during the payment journey\n                </p>\n                <p class=\"font-xsmall\" *ngIf=\"statusHistory.error_code === 'P0050'\">\n                  Multiple possible causes, for example a configuration problem with the payment provider, or incorrect login credentials\n                </p>\n              </div>\n            </div>\n          </details>\n        </td>\n        <td *ngIf=\"payment.method === 'card' && payment.channel === 'telephony'\" class=\"font-xsmall\">\n          {{ payment.status}}\n        </td>\n        <td *ngIf=\"payment.method === 'payment by account'\">\n          <details>\n            <summary><span class=\"summary font-xsmall\">{{ payment.status }}</span></summary>\n            <div class=\"panel panel-border-narrow\" *ngIf=\"payment.status === 'Pending'\">\n              <p class=\"font-xsmall\">This means the transaction is being processed by Liberata.</p>\n            </div>\n          </details>\n        </td>\n      </tr>\n    </table>\n\n  </div>\n\n</div>\n" }]
    }], function () { return [{ type: PaymentListService }, { type: PaymentLibComponent }]; }, null); })();

class WebComponentHttpClient {
    http;
    meta;
    constructor(http, meta) {
        this.http = http;
        this.meta = meta;
    }
    post(url, body, options) {
        const opts = this.addHeaders(options || {});
        return this.http.post(url, body, opts);
    }
    put(url, body, options) {
        const opts = this.addHeaders(options || {});
        return this.http.put(url, body, opts);
    }
    get(url, options) {
        const opts = this.addHeaders(options || {});
        return this.http.get(url, opts);
    }
    delete(url, options) {
        const opts = this.addHeaders(options || {});
        return this.http.delete(url, opts);
    }
    patch(url, body, options) {
        const opts = this.addHeaders(options || {});
        return this.http.patch(url, body, opts);
    }
    addHeaders(options) {
        const csrfToken = this.meta.getTag('name=csrf-token');
        const headers = {};
        if (options.headers) {
            options.headers.forEach(element => {
                headers[element] = options.headers.get(element);
            });
        }
        headers['X-Requested-With'] = 'XMLHttpRequest';
        if (csrfToken === null) {
            if (document.cookie.split(';').find(row => row.startsWith('XSRF-TOKEN')) !== undefined) {
                headers['CSRF-Token'] = document.cookie.split(';').find(row => row.startsWith('XSRF-TOKEN')).split('=')[1];
            }
            else {
                headers['CSRF-Token'] = document.cookie.split(';').find(row => row.startsWith(' XSRF-TOKEN')).split('=')[1];
            }
        }
        else {
            headers['CSRF-Token'] = csrfToken.content;
        }
        options.headers = new HttpHeaders(headers);
        options.responseType = 'text';
        return options;
    }
    static ɵfac = function WebComponentHttpClient_Factory(t) { return new (t || WebComponentHttpClient)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Meta)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WebComponentHttpClient, factory: WebComponentHttpClient.ɵfac });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(WebComponentHttpClient, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpClient }, { type: i2.Meta }]; }, null); })();

//import { error } from '@angular/compiler/src/util';
class PaymentViewService {
    http;
    https;
    logger;
    errorHandlerService;
    paymentLibService;
    ordersList = new BehaviorSubject([]);
    meta;
    constructor(http, https, logger, errorHandlerService, paymentLibService) {
        this.http = http;
        this.https = https;
        this.logger = logger;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getPaymentDetails(paymentReference, paymentMethod) {
        this.logger.info('Payment-view-service getPaymentDetails for: ', paymentReference);
        if (paymentMethod == undefined || paymentMethod == null) {
            return this.http.get(`${this.paymentLibService.API_ROOT}/payments/${paymentReference}`, {
                withCredentials: true
            })
                .pipe(catchError(this.errorHandlerService.handleError));
        }
        else {
            return this.http.get(paymentMethod === 'card' || paymentMethod === 'cash' || paymentMethod === 'cheque' || paymentMethod === 'postal order' ?
                `${this.paymentLibService.API_ROOT}/card-payments/${paymentReference}` :
                `${this.paymentLibService.API_ROOT}/credit-account-payments/${paymentReference}`, {
                withCredentials: true
            })
                .pipe(catchError(this.errorHandlerService.handleError));
        }
    }
    getPaymentGroupDetails(paymentGroupReference) {
        this.logger.info('Payment-view-service getPaymentGroupDetails for: ', paymentGroupReference);
        return this.http.get(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupReference}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getApportionPaymentDetails(paymentReference) {
        this.logger.info('Payment-view-service getPaymentGroupDetails for: ', paymentReference);
        return this.http.get(`${this.paymentLibService.API_ROOT}/payment-groups/fee-pay-apportion/${paymentReference}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getPBAaccountDetails() {
        const url = `${this.paymentLibService.API_ROOT}/pba-accounts`;
        return this.http.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    postWays2PayCardPayment(serviceRef, body) {
        const url = `${this.paymentLibService.API_ROOT}/service-request/${serviceRef}/card-payments`;
        const rurl = this.paymentLibService.CARDPAYMENTRETURNURL.replace('.prod', '');
        body['return-url'] = `${rurl}/payment`;
        return this.https.post(url, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPBAaccountPayment(serviceRef, body) {
        let randomKey = 'idam-key-' + Math.random().toString().split('.').join('-');
        body['idempotency_key'] = randomKey;
        const url = `${this.paymentLibService.API_ROOT}/service-request/${serviceRef}/pba-payments`;
        return this.https.post(url, body);
    }
    postBSPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/bulk-scan-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSUnidentifiedPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-allocations`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSUnsolicitedPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-allocations`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSAllocationPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-allocations`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPaymentGroupWithRemissions(paymentGroupReference, feeId, body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupReference}/fees/${feeId}/remissions`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    deleteFeeFromPaymentGroup(feeId) {
        this.logger.info('Payment-view-service deleteFeeFromPaymentGroup for: ', feeId);
        return this.https.delete(`${this.paymentLibService.API_ROOT}/fees/${feeId}`).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPaymentToPayHub(body, paymentGroupRef) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupRef}/card-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPaymentAntennaToPayHub(body, paymentGroupRef) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupRef}/telephony-card-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    downloadSelectedReport(reportName, startDate, endDate) {
        const url = `${this.paymentLibService.API_ROOT}/report/data?date_from=${startDate}&date_to=${endDate}&report_type=${reportName}`;
        return this.https.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    downloadFailureReport(startDate, endDate) {
        const url = `${this.paymentLibService.API_ROOT}/payment-failures/failure-report?date_from=${startDate}&date_to=${endDate}`;
        return this.https.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    getBSfeature() {
        return this.https.get('api/payment-history/bulk-scan-feature', { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    getSiteID() {
        return this.https.get('api/payment-history/refdata/legacy-sites', { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    getPartyDetails(caseNumber) {
        const url = `${this.paymentLibService.API_ROOT}/case-payment-orders?case_ids=${caseNumber}`;
        return this.https.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    setOrdersList(orderLevelFees) {
        this.ordersList.next(Object.assign([], orderLevelFees));
    }
    getOrdersList() {
        return this.ordersList;
    }
    //issue refund
    postRefundsReason(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/refund-for-payment`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    // retro remissions
    postPaymentGroupWithRetroRemissions(paymentGroupReference, feeId, body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupReference}/fees/${feeId}/retro-remission`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postRefundRetroRemission(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/refund-retro-remission`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    getPaymentFailure(paymentReference) {
        return this.https.get(`${this.paymentLibService.API_ROOT}/payment-failures/${paymentReference}`, {
            withCredentials: true
        }).pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function PaymentViewService_Factory(t) { return new (t || PaymentViewService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(WebComponentHttpClient), i0.ɵɵinject(LoggerService), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentViewService, factory: PaymentViewService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentViewService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: WebComponentHttpClient }, { type: LoggerService }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

class NotificationService {
    http;
    https;
    errorHandlerService;
    paymentLibService;
    constructor(http, https, errorHandlerService, paymentLibService) {
        this.http = http;
        this.https = https;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getRefundNotification(reference) {
        return this.http.get(`${this.paymentLibService.NOTIFICATION_API_ROOT}/${reference}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getAddressByPostcode(postcode) {
        return this.http.get(`${this.paymentLibService.NOTIFICATION_API_ROOT}/postcode-lookup/${postcode}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getNotificationPreview(body) {
        return this.https.post(`${this.paymentLibService.NOTIFICATION_API_ROOT}/doc-preview`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    getNotificationInstructionType(paymentChannel, paymentMethod) {
        if (paymentChannel === 'bulk scan' && paymentMethod === 'postal order') {
            return 'RefundWhenContacted';
        }
        else if (paymentChannel === 'bulk scan' && paymentMethod === 'cash') {
            return 'RefundWhenContacted';
        }
        else if (paymentChannel === 'online' && paymentMethod === 'card') {
            return 'SendRefund';
        }
        else if (paymentChannel === 'telephony' && paymentMethod === 'card') {
            return 'SendRefund';
        }
        else if (paymentChannel === 'online' && paymentMethod === 'payment by account') {
            return 'SendRefund';
        }
        else if (paymentChannel === 'bulk scan' && paymentMethod === 'cheque') {
            return 'SendRefund';
        }
        else {
            return 'Template';
        }
    }
    static ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(WebComponentHttpClient), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NotificationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: WebComponentHttpClient }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

class PostRefundRetroRemission {
    ccd_case_number;
    payment_reference;
    refund_reason;
    total_refund_amount;
    fees;
    is_over_payment;
    contact_details;
    constructor(contact_details, fees, payment_reference, refund_reason, total_refund_amount, is_over_payment) {
        this.contact_details = contact_details;
        this.fees = fees;
        this.payment_reference = payment_reference;
        this.refund_reason = refund_reason;
        this.total_refund_amount = total_refund_amount;
        this.is_over_payment = is_over_payment === 'op';
    }
}

function ContactDetailsComponent_div_14_p_8_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a email address.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_14_p_8_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid email address.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_14_p_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_14_p_8_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵtemplate(2, ContactDetailsComponent_div_14_p_8_span_2_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.isEmailEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.emailHasError);
} }
const _c0$8 = function (a0) { return { "inline-error-class": a0 }; };
function ContactDetailsComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 18)(1, "form", 19)(2, "div", 2)(3, "label", 20)(4, "span", 21);
    i0.ɵɵtext(5, "Information about this refund will be sent to this email address.");
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(6, "div", 22)(7, "input", 23);
    i0.ɵɵtemplate(8, ContactDetailsComponent_div_14_p_8_Template, 3, 2, "p", 24);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("formGroup", ctx_r0.emailAddressForm);
    i0.ɵɵadvance(6);
    i0.ɵɵpropertyInterpolate("value", ctx_r0.addressObj == null ? null : ctx_r0.addressObj.contact_details == null ? null : ctx_r0.addressObj.contact_details.email);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c0$8, ctx_r0.isEmailEmpty || ctx_r0.emailHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isEmailEmpty || ctx_r0.emailHasError);
} }
function ContactDetailsComponent_div_19_p_9_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a postcode.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_19_p_9_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid postcode.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_19_p_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_19_p_9_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵtemplate(2, ContactDetailsComponent_div_19_p_9_span_2_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.isPostcodeEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.postcodeHasError);
} }
function ContactDetailsComponent_div_19_div_13_option_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 42);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const address_r12 = ctx.$implicit;
    i0.ɵɵproperty("ngValue", address_r12.DPA);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", address_r12.DPA.ADDRESS, "");
} }
function ContactDetailsComponent_div_19_div_13_p_5_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Please select an address.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_19_div_13_p_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_19_div_13_p_5_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.isAddressBoxEmpty);
} }
function ContactDetailsComponent_div_19_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 38)(1, "label", 39);
    i0.ɵɵtext(2, " Pick an address ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "select", 40);
    i0.ɵɵlistener("ngModelChange", function ContactDetailsComponent_div_19_div_13_Template_select_ngModelChange_3_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.postcodeAddress = $event); });
    i0.ɵɵtemplate(4, ContactDetailsComponent_div_19_div_13_option_4_Template, 2, 2, "option", 41);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, ContactDetailsComponent_div_19_div_13_p_5_Template, 2, 1, "p", 24);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngModel", ctx_r7.postcodeAddress)("ngClass", i0.ɵɵpureFunction1(4, _c0$8, ctx_r7.isAddressBoxEmpty));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r7.addressPostcodeList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.isAddressBoxEmpty);
} }
function ContactDetailsComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 27)(1, "form", 19)(2, "label", 28)(3, "span", 21);
    i0.ɵɵtext(4, "Information about this refund will be sent to this address.");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "Postcode ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "div", 29)(7, "div", 30);
    i0.ɵɵelement(8, "input", 31);
    i0.ɵɵtemplate(9, ContactDetailsComponent_div_19_p_9_Template, 3, 2, "p", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "div", 15)(11, "button", 32);
    i0.ɵɵlistener("click", function ContactDetailsComponent_div_19_Template_button_click_11_listener() { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.postcodeValidation("FA")); });
    i0.ɵɵtext(12, " Find address ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵtemplate(13, ContactDetailsComponent_div_19_div_13_Template, 6, 6, "div", 33);
    i0.ɵɵelementStart(14, "details", 34)(15, "summary", 35)(16, "span", 36)(17, "a", 37);
    i0.ɵɵlistener("click", function ContactDetailsComponent_div_19_Template_a_click_17_listener() { i0.ɵɵrestoreView(_r17); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.selectContactOption("Postcode", "true")); });
    i0.ɵɵtext(18, " Enter address manually");
    i0.ɵɵelementEnd()()()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("formGroup", ctx_r1.postCodeForm);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c0$8, ctx_r1.isPostcodeEmpty || ctx_r1.postcodeHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.isPostcodeEmpty || ctx_r1.postcodeHasError);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r1.isShowPickAddress);
} }
function ContactDetailsComponent_div_20_p_10_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a Building and street.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_10_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid Building and street.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_20_p_10_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵtemplate(2, ContactDetailsComponent_div_20_p_10_span_2_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r19.isaddressLine1Empty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r19.addressLine1HasError);
} }
function ContactDetailsComponent_div_20_p_16_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid Building and street line 2 of 2.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_20_p_16_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r20.addressLine2HasError);
} }
function ContactDetailsComponent_div_20_p_21_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a town or city.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_21_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a town or city.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_20_p_21_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵtemplate(2, ContactDetailsComponent_div_20_p_21_span_2_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r21.isTownOrCityEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r21.townOrCityHasError);
} }
function ContactDetailsComponent_div_20_p_26_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a County.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_26_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid County.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_20_p_26_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵtemplate(2, ContactDetailsComponent_div_20_p_26_span_2_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r22.isCountyEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r22.countyHasError);
} }
function ContactDetailsComponent_div_20_p_31_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a postcode.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_31_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid postcode.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_31_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_20_p_31_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵtemplate(2, ContactDetailsComponent_div_20_p_31_span_2_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r23.isMPostcodeEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r23.mpostcodeHasError);
} }
function ContactDetailsComponent_div_20_p_40_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Select a Country.");
    i0.ɵɵelementEnd();
} }
function ContactDetailsComponent_div_20_p_40_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtemplate(1, ContactDetailsComponent_div_20_p_40_span_1_Template, 2, 0, "span", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r24.isCountryEmpty);
} }
function ContactDetailsComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 43)(1, "form", 19)(2, "div", 2)(3, "label", 44)(4, "span", 21);
    i0.ɵɵtext(5, "Information about this refund will be sent to this address.");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "Building and street ");
    i0.ɵɵelementStart(7, "span", 45);
    i0.ɵɵtext(8, "line 1 of 2");
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(9, "input", 46);
    i0.ɵɵtemplate(10, ContactDetailsComponent_div_20_p_10_Template, 3, 2, "p", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "div", 2)(12, "label", 47)(13, "span", 48);
    i0.ɵɵtext(14, "Building and street line 2 of 2");
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(15, "input", 49);
    i0.ɵɵtemplate(16, ContactDetailsComponent_div_20_p_16_Template, 2, 1, "p", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "div", 2)(18, "label", 50);
    i0.ɵɵtext(19, " Town or city ");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(20, "input", 51);
    i0.ɵɵtemplate(21, ContactDetailsComponent_div_20_p_21_Template, 3, 2, "p", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "div", 2)(23, "label", 52);
    i0.ɵɵtext(24, " County ");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(25, "input", 53);
    i0.ɵɵtemplate(26, ContactDetailsComponent_div_20_p_26_Template, 3, 2, "p", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "div", 2)(28, "label", 28);
    i0.ɵɵtext(29, " Postcode ");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(30, "input", 54);
    i0.ɵɵtemplate(31, ContactDetailsComponent_div_20_p_31_Template, 3, 2, "p", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(32, "div", 2)(33, "label", 39);
    i0.ɵɵtext(34, " Country ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(35, "select", 55)(36, "option", 56);
    i0.ɵɵtext(37, "Please select");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(38, "option", 57);
    i0.ɵɵtext(39, "United Kingdom");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(40, ContactDetailsComponent_div_20_p_40_Template, 2, 1, "p", 24);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("formGroup", ctx_r2.manualAddressForm);
    i0.ɵɵadvance(8);
    i0.ɵɵpropertyInterpolate("value", ctx_r2.addressObj == null ? null : ctx_r2.addressObj.contact_details == null ? null : ctx_r2.addressObj.contact_details.address_line);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(18, _c0$8, ctx_r2.isaddressLine1Empty || ctx_r2.addressLine1HasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isaddressLine1Empty || ctx_r2.addressLine1HasError);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(20, _c0$8, ctx_r2.addressLine2HasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.addressLine2HasError);
    i0.ɵɵadvance(4);
    i0.ɵɵpropertyInterpolate("value", ctx_r2.addressObj == null ? null : ctx_r2.addressObj.contact_details == null ? null : ctx_r2.addressObj.contact_details.city);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(22, _c0$8, ctx_r2.isTownOrCityEmpty || ctx_r2.townOrCityHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isTownOrCityEmpty || ctx_r2.townOrCityHasError);
    i0.ɵɵadvance(4);
    i0.ɵɵpropertyInterpolate("value", ctx_r2.addressObj == null ? null : ctx_r2.addressObj.contact_details == null ? null : ctx_r2.addressObj.contact_details.county);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(24, _c0$8, ctx_r2.isCountyEmpty || ctx_r2.countyHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isCountyEmpty || ctx_r2.countyHasError);
    i0.ɵɵadvance(4);
    i0.ɵɵpropertyInterpolate("value", ctx_r2.addressObj == null ? null : ctx_r2.addressObj.contact_details == null ? null : ctx_r2.addressObj.contact_details.postal_code);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c0$8, ctx_r2.isMPostcodeEmpty || ctx_r2.mpostcodeHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isMPostcodeEmpty || ctx_r2.mpostcodeHasError);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(28, _c0$8, ctx_r2.isCountryEmpty));
    i0.ɵɵadvance(3);
    i0.ɵɵpropertyInterpolate("selected", (ctx_r2.addressObj == null ? null : ctx_r2.addressObj.contact_details == null ? null : ctx_r2.addressObj.contact_details.country) ? "selected" : "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.isCountryEmpty);
} }
class ContactDetailsComponent {
    formBuilder;
    notificationService;
    paymentLibComponent;
    isEditOperation;
    isEditOperationInRefundList;
    addressObj;
    assignContactDetails = new EventEmitter();
    assignContactDetailsInFefundsList = new EventEmitter();
    redirectToIssueRefund = new EventEmitter();
    pageTitle = 'Payment status history';
    errorMessage;
    isEmailSAddressClicked = true;
    isShowPickAddress = false;
    isPostcodeClicked = false;
    isManualAddressClicked = false;
    emailAddressForm;
    postCodeForm;
    manualAddressForm;
    addressPostcodeList = [];
    postcodeAddress;
    isAddressBoxEmpty = false;
    isEmailEmpty = false;
    emailHasError = false;
    isPostcodeEmpty = false;
    postcodeHasError = false;
    isaddressLine1Empty = false;
    addressLine1HasError = false;
    addressLine2HasError = false;
    isTownOrCityEmpty = false;
    townOrCityHasError = false;
    isCountyEmpty = false;
    countyHasError = false;
    isMPostcodeEmpty = false;
    mpostcodeHasError = false;
    isCountryEmpty = false;
    constructor(formBuilder, notificationService, paymentLibComponent) {
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.paymentLibComponent = paymentLibComponent;
    }
    ngOnInit() {
        this.resetForm([false, false, false, false, false, false, false, false, false, false, false, false, false, false], 'all');
        this.emailAddressForm = this.formBuilder.group({
            email: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('.+@+.+\\.+.+')
            ]))
        });
        this.postCodeForm = this.formBuilder.group({
            postcode: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^([A-Za-z]{1,2}[0-9]{1,2}[A-Za-z]{0,1} ?[0-9][A-Za-z]{2})')
            ]))
        });
        this.manualAddressForm = this.formBuilder.group({
            addressl1: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^[a-zA-Z0-9\\s,\'-]*$')
            ])),
            addressl2: new FormControl('', Validators.compose([
                Validators.pattern('^[a-zA-Z0-9\\s,\'-]*$')
            ])),
            townorcity: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^[a-zA-Z0-9\\s,\'-]*$')
            ])),
            county: new FormControl('', Validators.compose([
                Validators.pattern('^[a-zA-Z0-9\\s,\'-]*$')
            ])),
            mpostcode: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^([A-Za-z]{1,2}[0-9]{1,2}[A-Za-z]{0,1} ?[0-9][A-Za-z]{2})')
            ])),
            country: new FormControl('', Validators.compose([
                Validators.required
            ]))
        });
        if (this.addressObj !== undefined && this.addressObj !== '') {
            this.setEditDetails();
        }
        if (this.isEditOperationInRefundList === undefined) {
            this.isEditOperationInRefundList = false;
        }
    }
    setEditDetails() {
        if (this.addressObj.notification_type === 'EMAIL') {
            this.isEmailSAddressClicked = true;
            this.isPostcodeClicked = false;
            this.isManualAddressClicked = false;
            this.emailAddressForm.setValue({ email: this.addressObj.contact_details.email });
        }
        else if (this.addressObj.notification_type === 'LETTER') {
            this.isEmailSAddressClicked = false;
            this.isPostcodeClicked = true;
            this.isManualAddressClicked = true;
            this.manualAddressForm.patchValue({
                addressl1: this.addressObj.contact_details.address_line,
                townorcity: this.addressObj.contact_details.city,
                county: this.addressObj.contact_details.county,
                country: this.addressObj.contact_details.country,
                mpostcode: this.addressObj.contact_details.postal_code
            });
        }
    }
    selectContactOption(type, isLinkedClied) {
        this.resetForm([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], 'all');
        if (type === 'Email' && isLinkedClied === 'false') {
            this.isEmailSAddressClicked = true;
            this.isPostcodeClicked = false;
            this.isManualAddressClicked = false;
        }
        else if (type === 'Postcode' && isLinkedClied === 'false') {
            this.isEmailSAddressClicked = false;
            this.isPostcodeClicked = true;
            this.isManualAddressClicked = false;
        }
        else if (type === 'Postcode' && isLinkedClied === 'true') {
            this.isEmailSAddressClicked = false;
            this.isPostcodeClicked = true;
            this.isManualAddressClicked = true;
        }
    }
    finalFormSubmit() {
        this.resetForm([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], 'all');
        if (this.isEmailSAddressClicked) {
            const emailField = this.emailAddressForm.controls.email;
            if (this.emailAddressForm.valid) {
                if (!this.isEditOperationInRefundList) {
                    this.assignContactDetails.emit({
                        email: emailField.value,
                        notification_type: 'EMAIL'
                    });
                }
                else {
                    this.assignContactDetailsInFefundsList.emit({
                        email: emailField.value,
                        notification_type: 'EMAIL'
                    });
                }
            }
            else {
                if (emailField.value == '') {
                    this.resetForm([true, false, false, false, false, false, false, false, false, false, false, false, false, false], 'email');
                }
                if (emailField.value != '' && emailField.invalid) {
                    this.resetForm([false, true, false, false, false, false, false, false, false, false, false, false, false, false], 'email');
                }
            }
        }
        else if (this.isPostcodeClicked && !this.isManualAddressClicked) {
            this.postcodeValidation('FS');
        }
        else if (this.isPostcodeClicked && this.isManualAddressClicked) {
            const fieldCtrls = this.manualAddressForm.controls;
            if (this.manualAddressForm.valid) {
                if (!this.isEditOperationInRefundList) {
                    this.assignContactDetails.emit({
                        address_line: fieldCtrls.addressl1.value + ' ' + fieldCtrls.addressl2.value,
                        city: fieldCtrls.townorcity.value,
                        county: fieldCtrls.county.value,
                        postal_code: fieldCtrls.mpostcode.value,
                        country: fieldCtrls.country.value,
                        notification_type: 'LETTER'
                    });
                }
                else {
                    this.assignContactDetailsInFefundsList.emit({
                        address_line: fieldCtrls.addressl1.value + ' ' + fieldCtrls.addressl2.value,
                        city: fieldCtrls.townorcity.value,
                        county: fieldCtrls.county.value,
                        postal_code: fieldCtrls.mpostcode.value,
                        country: fieldCtrls.country.value,
                        notification_type: 'LETTER'
                    });
                }
            }
            else {
                if (fieldCtrls.addressl1.value == '') {
                    this.resetForm([false, false, false, false, true, false, false, false, false, false, false, false, false, false], 'address1');
                }
                if (fieldCtrls.addressl1.value != '' && fieldCtrls.addressl1.invalid) {
                    this.resetForm([false, false, false, false, false, true, false, false, false, false, false, false, false, false], 'address1');
                }
                if (fieldCtrls.addressl2.value != '' && fieldCtrls.addressl2.invalid) {
                    this.resetForm([false, false, false, false, false, false, true, false, false, false, false, false, false, false], 'address2');
                }
                if (fieldCtrls.townorcity.value == '') {
                    this.resetForm([false, false, false, false, false, false, false, true, false, false, false, false, false, false], 'town');
                }
                if (fieldCtrls.townorcity.value != '' && fieldCtrls.townorcity.invalid) {
                    this.resetForm([false, false, false, false, false, false, false, false, true, false, false, false, false, false], 'town');
                }
                if (fieldCtrls.county.value == '') {
                    this.resetForm([false, false, false, false, false, false, false, false, false, true, false, false, false, false], 'county');
                }
                if (fieldCtrls.county.value != '' && fieldCtrls.county.invalid) {
                    this.resetForm([false, false, false, false, false, false, false, false, false, false, true, false, false, false], 'county');
                }
                if (fieldCtrls.mpostcode.value == '') {
                    this.resetForm([false, false, false, false, false, false, false, false, false, false, false, true, false, false], 'mpostcode');
                }
                if (fieldCtrls.mpostcode.value != '' && fieldCtrls.mpostcode.invalid) {
                    this.resetForm([false, false, false, false, false, false, false, false, false, false, false, false, true, false], 'mpostcode');
                }
                if (fieldCtrls.country.value == '') {
                    this.resetForm([false, false, false, false, false, false, false, false, false, false, false, false, false, true], 'country');
                }
            }
        }
    }
    postcodeValidation(str) {
        this.resetForm([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], 'all');
        const postcodeField = this.postCodeForm.controls.postcode;
        if (this.postCodeForm.valid) {
            if (str === 'FA') {
                this.notificationService.getAddressByPostcode(postcodeField.value).subscribe(refundsNotification => {
                    this.addressPostcodeList = refundsNotification['results'];
                    this.isShowPickAddress = refundsNotification['header'].totalresults > 0;
                    if (!this.isShowPickAddress) {
                        this.resetForm([false, false, false, true, false, false, false, false, false, false, false, false, false], 'postcode');
                    }
                }),
                    (error) => {
                        this.isShowPickAddress = false;
                        this.errorMessage = error.replace(/"/g, "");
                    };
            }
            else if (str === 'FS') {
                if (this.postcodeAddress !== undefined && this.postcodeAddress) {
                    this.isAddressBoxEmpty = false;
                    let addressLine = "";
                    let addressArray = this.postcodeAddress.ADDRESS.split(",");
                    for (let i = 0; i < addressArray.length - 2; i++) {
                        addressLine += addressArray[i];
                    }
                    const addressObject = {
                        address_line: addressLine,
                        city: this.postcodeAddress.POST_TOWN,
                        county: this.postcodeAddress.LOCAL_CUSTODIAN_CODE_DESCRIPTION,
                        postal_code: this.postcodeAddress.POSTCODE,
                        country: 'United Kingdom',
                        notification_type: 'LETTER'
                    };
                    if (!this.isEditOperationInRefundList) {
                        this.assignContactDetails.emit(addressObject);
                    }
                    else {
                        this.assignContactDetailsInFefundsList.emit(addressObject);
                    }
                }
                else {
                    this.isAddressBoxEmpty = true;
                }
            }
        }
        else {
            if (postcodeField.value == '') {
                this.resetForm([false, false, true, false, false, false, false, false, false, false, false, false, false], 'postcode');
            }
            if (postcodeField.value != '' && postcodeField.invalid) {
                this.resetForm([false, false, false, true, false, false, false, false, false, false, false, false, false], 'postcode');
            }
        }
    }
    redirection(event) {
        this.redirectToIssueRefund.emit(event);
    }
    resetForm(val, field) {
        if (field === 'email' || field === 'all') {
            this.isEmailEmpty = val[0];
            this.emailHasError = val[1];
        }
        if (field === 'postcode' || field === 'all') {
            this.isPostcodeEmpty = val[2];
            this.postcodeHasError = val[3];
        }
        if (field === 'address1' || field === 'all') {
            this.isaddressLine1Empty = val[4];
            this.addressLine1HasError = val[5];
        }
        if (field === 'address2' || field === 'all') {
            this.addressLine2HasError = val[6];
        }
        if (field === 'town' || field === 'all') {
            this.isTownOrCityEmpty = val[7];
            this.townOrCityHasError = val[8];
        }
        if (field === 'county' || field === 'all') {
            this.isCountyEmpty = val[9];
            this.countyHasError = val[10];
        }
        if (field === 'mpostcode' || field === 'all') {
            this.isMPostcodeEmpty = val[11];
            this.mpostcodeHasError = val[12];
        }
        if (field === 'country' || field === 'all') {
            this.isCountryEmpty = val[13];
        }
    }
    static ɵfac = function ContactDetailsComponent_Factory(t) { return new (t || ContactDetailsComponent)(i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(NotificationService), i0.ɵɵdirectiveInject(PaymentLibComponent)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ContactDetailsComponent, selectors: [["ccpay-contact-details"]], inputs: { isEditOperation: "isEditOperation", isEditOperationInRefundList: "isEditOperationInRefundList", addressObj: "addressObj" }, outputs: { assignContactDetails: "assignContactDetails", assignContactDetailsInFefundsList: "assignContactDetailsInFefundsList", redirectToIssueRefund: "redirectToIssueRefund" }, decls: 28, vars: 6, consts: [[1, "govuk-fieldset", "contact-details--size"], [1, "govuk-section-break", "govuk-section-break--m", "govuk-section-break--visible"], [1, "govuk-form-group"], [1, "govuk-fieldset__legend", "govuk-fieldset__legend--s", "govuk-font19px"], ["id", "contact-hint", 1, "govuk-hint", "govuk-font19px"], [1, "govuk-fieldset"], ["data-module", "govuk-radios", 1, "govuk-radios", "govuk-radios--conditional"], [1, "govuk-radios__item"], ["id", "contact", "name", "contact", "type", "radio", "value", "email", "aria-controls", "conditional-contact", "aria-expanded", "true", 1, "govuk-radios__input", 3, "checked", "click"], ["for", "contact", 1, "govuk-label", "govuk-radios__label", "govuk-font19px"], ["class", "govuk-radios__conditional", "id", "conditional-contact-email", 4, "ngIf"], ["id", "contact-2", "name", "contact", "type", "radio", "value", "post", "aria-controls", "conditional-contact-2", "aria-expanded", "false", 1, "govuk-radios__input", 3, "checked", "click"], ["for", "contact-2", 1, "govuk-label", "govuk-radios__label", "govuk-font19px"], ["class", "govuk-radios__conditional", "id", "conditional-contact-postcode", 4, "ngIf"], ["class", "govuk-radios__conditional", "id", "conditional-contact-manual", 4, "ngIf"], [1, "govuk-button-group"], ["type", "submit", 1, "button", "govuk-button--secondary", "govuk-font19px", 3, "click"], ["type", "submit", 1, "button", "govuk-button", "govuk-font19px", 3, "click"], ["id", "conditional-contact-email", 1, "govuk-radios__conditional"], ["novalidate", "", 3, "formGroup"], ["for", "email", 1, "govuk-label"], [1, "govuk-hint", "govuk-font19px"], ["id", "email-hint", 1, "govuk-hint"], ["id", "email", "name", "", "type", "email", "formControlName", "email", "aria-describedby", "email-hint", 1, "govuk-input", "govuk-font19px", 3, "ngClass", "value"], ["class", "inline-error-message", 4, "ngIf"], [1, "inline-error-message"], [4, "ngIf"], ["id", "conditional-contact-postcode", 1, "govuk-radios__conditional"], ["for", "address-postcode", 1, "govuk-label", "govuk-font19px"], [1, "postcode-align-css"], [1, "govuk-form-group", "govuk-margin-right-10px"], ["id", "address-postcode", "name", "address-postcode", "formControlName", "postcode", "type", "text", "autocomplete", "postal-code", 1, "govuk-input", "govuk-input--width-10", 3, "ngClass"], ["data-module", "govuk-button", 1, "govuk-button", "govuk-button--secondary", "govuk-font19px", 3, "click"], ["class", "govuk-form-group govuk-margin-btm-20px", 4, "ngIf"], ["data-module", "govuk-details", 1, "govuk-details"], [1, "govuk-details__summary"], [1, "govuk-details__summary-text", "govuk-font19px"], ["href", "Javascript:void(0);", 3, "click"], [1, "govuk-form-group", "govuk-margin-btm-20px"], ["for", "country", 1, "govuk-label", "govuk-font19px"], ["id", "postcodeAddress", "name", "postcodeAddress", 1, "govuk-select", "govuk-font19px", 3, "ngModel", "ngClass", "ngModelChange"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"], ["id", "conditional-contact-manual", 1, "govuk-radios__conditional"], ["for", "address-line-1", 1, "govuk-label", "govuk-font19px"], [1, "govuk-visually-hidden"], ["id", "address-line-1", "name", "address-line-1", "formControlName", "addressl1", "type", "text", "autocomplete", "address-line1", 1, "govuk-input", "govuk-font19px", 3, "ngClass", "value"], ["for", "address-line-2", 1, "govuk-label"], [1, "govuk-visually-hidden", "govuk-font19px"], ["id", "address-line-2", "name", "address-line-2", "formControlName", "addressl2", "type", "text", "autocomplete", "address-line2", 1, "govuk-input", "govuk-font19px", 3, "ngClass"], ["for", "address-town", 1, "govuk-label", "govuk-font19px"], ["id", "address-town", "name", "address-town", "formControlName", "townorcity", "type", "text", "autocomplete", "address-level2", 1, "govuk-input", "govuk-!-width-two-thirds", "govuk-font19px", 3, "ngClass", "value"], ["for", "address-county", 1, "govuk-label", "govuk-font19px"], ["id", "address-county", "formControlName", "county", "name", "address-county", "type", "text", 1, "govuk-input", "govuk-!-width-two-thirds", "govuk-font19px", 3, "ngClass", "value"], ["id", "address-postcode", "formControlName", "mpostcode", "name", "address-postcode", "type", "text", "autocomplete", "postal-code", 1, "govuk-input", "govuk-input--width-10", "govuk-font19px", 3, "ngClass", "value"], ["id", "country", "name", "country", "formControlName", "country", 1, "govuk-select", "govuk-font19px", 3, "ngClass"], ["value", "", "selected", "selected"], ["value", "United Kingdom", 3, "selected"]], template: function ContactDetailsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "fieldset", 0);
            i0.ɵɵelement(1, "hr", 1);
            i0.ɵɵelementStart(2, "div", 2)(3, "legend", 3);
            i0.ɵɵtext(4);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(5, "div", 4);
            i0.ɵɵtext(6, " Notifications will be sent via email or post when this refund is issued or rejected. You can only choose one option. ");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(7, "div", 2)(8, "fieldset", 5)(9, "div", 6)(10, "div", 7)(11, "input", 8);
            i0.ɵɵlistener("click", function ContactDetailsComponent_Template_input_click_11_listener() { return ctx.selectContactOption("Email", "false"); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(12, "label", 9);
            i0.ɵɵtext(13, " Email ");
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(14, ContactDetailsComponent_div_14_Template, 9, 6, "div", 10);
            i0.ɵɵelementStart(15, "div", 7)(16, "input", 11);
            i0.ɵɵlistener("click", function ContactDetailsComponent_Template_input_click_16_listener() { return ctx.selectContactOption("Postcode", "false"); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(17, "label", 12);
            i0.ɵɵtext(18, " Post ");
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(19, ContactDetailsComponent_div_19_Template, 19, 6, "div", 13);
            i0.ɵɵtemplate(20, ContactDetailsComponent_div_20_Template, 41, 30, "div", 14);
            i0.ɵɵelementEnd()()()();
            i0.ɵɵelement(21, "hr", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(22, "div", 15)(23, "button", 16);
            i0.ɵɵlistener("click", function ContactDetailsComponent_Template_button_click_23_listener($event) { return ctx.redirection($event); });
            i0.ɵɵtext(24, " Previous ");
            i0.ɵɵelementEnd();
            i0.ɵɵtext(25, "\n\u00A0\n");
            i0.ɵɵelementStart(26, "button", 17);
            i0.ɵɵlistener("click", function ContactDetailsComponent_Template_button_click_26_listener() { return ctx.finalFormSubmit(); });
            i0.ɵɵtext(27, " Continue\n");
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵtextInterpolate1(" ", ctx.isEditOperation ? "Edit contact information" : "Contact information", " ");
            i0.ɵɵadvance(7);
            i0.ɵɵproperty("checked", ctx.isEmailSAddressClicked);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.isEmailSAddressClicked);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("checked", ctx.isPostcodeClicked);
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.isPostcodeClicked && !ctx.isManualAddressClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isPostcodeClicked && ctx.isManualAddressClicked);
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.NgSelectOption, i1$1.ɵNgSelectMultipleOption, i1$1.DefaultValueAccessor, i1$1.SelectControlValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.NgModel, i1$1.FormGroupDirective, i1$1.FormControlName], styles: [".govuk-font19px[_ngcontent-%COMP%]{font-size:19px}.inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0}.inline-error-message[_ngcontent-%COMP%]{color:#a71414;font-weight:700;margin-top:10px}.contact-details--size[_ngcontent-%COMP%]{width:50%}.postcode-align-css[_ngcontent-%COMP%]{display:flex;flex-direction:row}.govuk-margin-right-10px[_ngcontent-%COMP%]{margin-right:10px}.govuk-margin-btm-20px[_ngcontent-%COMP%]{margin-bottom:20px!important}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ContactDetailsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-contact-details', template: "<fieldset class=\"govuk-fieldset contact-details--size\">\n  <hr class=\"govuk-section-break govuk-section-break--m govuk-section-break--visible\">\n  <div class=\"govuk-form-group\">\n    <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--s govuk-font19px\">\n      {{ isEditOperation ? 'Edit contact information' : 'Contact information' }}\n    </legend>\n    <div id=\"contact-hint\" class=\"govuk-hint govuk-font19px\">\n      Notifications will be sent via email or post when this refund is issued or rejected. You can only choose one option.\n    </div>\n    <div class=\"govuk-form-group\">\n      <fieldset class=\"govuk-fieldset\">\n        <div class=\"govuk-radios govuk-radios--conditional\" data-module=\"govuk-radios\">\n          <div class=\"govuk-radios__item\">\n            <input class=\"govuk-radios__input\" id=\"contact\" name=\"contact\" (click)=\"selectContactOption('Email', 'false')\" type=\"radio\" value=\"email\" [checked]=\"isEmailSAddressClicked\"  aria-controls=\"conditional-contact\" aria-expanded=\"true\">\n            <label class=\"govuk-label govuk-radios__label govuk-font19px\" for=\"contact\">\n              Email\n            </label>\n          </div>\n          <div class=\"govuk-radios__conditional\" id=\"conditional-contact-email\" *ngIf=\"isEmailSAddressClicked\">\n            <form [formGroup]=\"emailAddressForm\" novalidate>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label \" for=\"email\">\n                <span class=\"govuk-hint govuk-font19px\">Information about this refund will be sent to this email address.</span>\n              </label>\n\n              <div id=\"email-hint\" class=\"govuk-hint\">\n              </div>\n              <input class=\"govuk-input govuk-font19px\" id=\"email\" name=\"\" type=\"email\" [ngClass]=\"{ 'inline-error-class': isEmailEmpty || emailHasError }\" value=\"{{addressObj?.contact_details?.email}}\" formControlName=\"email\" aria-describedby=\"email-hint\">\n              <p class=\"inline-error-message\" *ngIf=\"isEmailEmpty || emailHasError\">\n                <span *ngIf=\"isEmailEmpty\">Enter a email address.</span>\n                <span *ngIf=\"emailHasError\">Enter a valid email address.</span>\n              </p>\n            </div>\n            </form>\n          </div>\n          <div class=\"govuk-radios__item\">\n            <input class=\"govuk-radios__input\" id=\"contact-2\" name=\"contact\" (click)=\"selectContactOption('Postcode', 'false')\" type=\"radio\" [checked]=\"isPostcodeClicked\" value=\"post\" aria-controls=\"conditional-contact-2\" aria-expanded=\"false\">\n            <label class=\"govuk-label govuk-radios__label govuk-font19px\" for=\"contact-2\">\n              Post\n            </label>\n          </div>\n          <div class=\"govuk-radios__conditional\" id=\"conditional-contact-postcode\" *ngIf=\"isPostcodeClicked && !isManualAddressClicked\">\n            <form [formGroup]=\"postCodeForm\" novalidate>\n              <label class=\"govuk-label govuk-font19px\" for=\"address-postcode\">\n                <span class=\"govuk-hint govuk-font19px\">Information about this refund will be sent to this address.</span>Postcode\n              </label>\n              <div class=\"postcode-align-css\">\n              <div class=\"govuk-form-group govuk-margin-right-10px\">\n              <input class=\"govuk-input govuk-input--width-10\" id=\"address-postcode\" name=\"address-postcode\" [ngClass]=\"{ 'inline-error-class': isPostcodeEmpty || postcodeHasError }\" formControlName=\"postcode\" type=\"text\" autocomplete=\"postal-code\">\n              <p class=\"inline-error-message\" *ngIf=\"isPostcodeEmpty || postcodeHasError\">\n                <span *ngIf=\"isPostcodeEmpty\">Enter a postcode.</span>\n                <span *ngIf=\"postcodeHasError\">Enter a valid postcode.</span>\n              </p>\n            </div>\n            <div class=\"govuk-button-group\">\n              <button class=\"govuk-button govuk-button--secondary govuk-font19px\" (click)=\"postcodeValidation('FA')\" data-module=\"govuk-button\">\n                Find address\n              </button>\n            </div>\n          </div>\n            </form>\n            <div class=\"govuk-form-group govuk-margin-btm-20px\" *ngIf=\"isShowPickAddress\">\n              <label class=\"govuk-label govuk-font19px\" for=\"country\">\n                Pick an address\n              </label>\n              <select class=\"govuk-select govuk-font19px\" [(ngModel)]=\"postcodeAddress\" id=\"postcodeAddress\" [ngClass]=\"{ 'inline-error-class': isAddressBoxEmpty }\" name=\"postcodeAddress\">\n                <option *ngFor=\"let address of addressPostcodeList;\" [ngValue]=\"address.DPA\" > {{address.DPA.ADDRESS}}</option>\n              </select> \n              <p class=\"inline-error-message\" *ngIf=\"isAddressBoxEmpty\">\n                <span *ngIf=\"isAddressBoxEmpty\">Please select an address.</span>\n              </p>\n            </div>\n            <details class=\"govuk-details\" data-module=\"govuk-details\">\n              <summary class=\"govuk-details__summary\">\n                <span class=\"govuk-details__summary-text govuk-font19px\">\n                  <a href=\"Javascript:void(0);\" (click)=\"selectContactOption('Postcode', 'true')\">  Enter address manually</a>\n                </span>\n              </summary>\n            </details>\n          </div>\n          <div class=\"govuk-radios__conditional\" id=\"conditional-contact-manual\" *ngIf=\"isPostcodeClicked && isManualAddressClicked\">\n            <form [formGroup]=\"manualAddressForm\" novalidate>\n\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label govuk-font19px\" for=\"address-line-1\">\n                <span class=\"govuk-hint govuk-font19px\">Information about this refund will be sent to this address.</span>Building and street <span class=\"govuk-visually-hidden\">line 1 of 2</span>\n              </label>\n              <input class=\"govuk-input govuk-font19px\" id=\"address-line-1\" name=\"address-line-1\" [ngClass]=\"{ 'inline-error-class': isaddressLine1Empty || addressLine1HasError }\" value=\"{{addressObj?.contact_details?.address_line}}\" formControlName=\"addressl1\" type=\"text\" autocomplete=\"address-line1\">\n              <p class=\"inline-error-message\" *ngIf=\"isaddressLine1Empty || addressLine1HasError\">\n                <span *ngIf=\"isaddressLine1Empty\">Enter a Building and street.</span>\n                <span *ngIf=\"addressLine1HasError\">Enter a valid Building and street.</span>\n              </p>  \n            </div>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label\" for=\"address-line-2\">\n                <span class=\"govuk-visually-hidden govuk-font19px\">Building and street line 2 of 2</span>\n              </label>\n              <input class=\"govuk-input govuk-font19px\" id=\"address-line-2\" name=\"address-line-2\" [ngClass]=\"{ 'inline-error-class': addressLine2HasError}\" formControlName=\"addressl2\" type=\"text\" autocomplete=\"address-line2\">\n              <p class=\"inline-error-message\" *ngIf=\"addressLine2HasError\">\n                <span *ngIf=\"addressLine2HasError\">Enter a valid Building and street line 2 of 2.</span>\n              </p>  \n            </div>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label govuk-font19px\" for=\"address-town\">\n                Town or city\n              </label>\n              <input class=\"govuk-input govuk-!-width-two-thirds govuk-font19px\" id=\"address-town\" name=\"address-town\" [ngClass]=\"{ 'inline-error-class': isTownOrCityEmpty || townOrCityHasError}\" value=\"{{addressObj?.contact_details?.city}}\" formControlName=\"townorcity\" type=\"text\" autocomplete=\"address-level2\">\n              <p class=\"inline-error-message\" *ngIf=\"isTownOrCityEmpty || townOrCityHasError\">\n                <span *ngIf=\"isTownOrCityEmpty\">Enter a town or city.</span>\n                <span *ngIf=\"townOrCityHasError\">Enter a town or city.</span>\n              </p>  \n            </div>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label govuk-font19px\" for=\"address-county\">\n                County\n              </label>\n              <input class=\"govuk-input govuk-!-width-two-thirds govuk-font19px\" id=\"address-county\" [ngClass]=\"{ 'inline-error-class': isCountyEmpty || countyHasError}\" value=\"{{addressObj?.contact_details?.county}}\" formControlName=\"county\" name=\"address-county\" type=\"text\">\n              <p class=\"inline-error-message\" *ngIf=\"isCountyEmpty || countyHasError\">\n                <span *ngIf=\"isCountyEmpty\">Enter a County.</span>\n                <span *ngIf=\"countyHasError\">Enter a valid County.</span>\n              </p>  \n            </div>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label govuk-font19px\" for=\"address-postcode\">\n                Postcode\n              </label>\n              <input class=\"govuk-input govuk-input--width-10 govuk-font19px\" id=\"address-postcode\" formControlName=\"mpostcode\" name=\"address-postcode\" [ngClass]=\"{ 'inline-error-class': isMPostcodeEmpty || mpostcodeHasError}\" value=\"{{addressObj?.contact_details?.postal_code}}\" type=\"text\" autocomplete=\"postal-code\">\n              <p class=\"inline-error-message\" *ngIf=\"isMPostcodeEmpty || mpostcodeHasError\">\n                <span *ngIf=\"isMPostcodeEmpty\">Enter a postcode.</span>\n                <span *ngIf=\"mpostcodeHasError\">Enter a valid postcode.</span>\n              </p>  \n            </div>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label govuk-font19px\" for=\"country\">\n                Country\n              </label>\n              <select class=\"govuk-select govuk-font19px\" id=\"country\" name=\"country\" [ngClass]=\"{'inline-error-class': isCountryEmpty}\" formControlName=\"country\">\n                <option value=\"\" selected=\"selected\">Please select</option>\n                <option value=\"United Kingdom\" selected=\"{{ addressObj?.contact_details?.country ? 'selected' : '' }}\">United Kingdom</option>\n              </select>\n              <p class=\"inline-error-message\" *ngIf=\"isCountryEmpty\">\n                <span *ngIf=\"isCountryEmpty\">Select a Country.</span>\n              </p>  \n            </div>\n            </form>\n          </div>\n        </div>\n      </fieldset>\n    </div>\n    <!---FORM--->\n  </div>\n\n<hr class=\"govuk-section-break govuk-section-break--m govuk-section-break--visible\">\n</fieldset>\n<div class=\"govuk-button-group\">\n<button type=\"submit\" class=\"button govuk-button--secondary govuk-font19px\" (click)=\"redirection($event)\"> Previous </button>\n&nbsp;\n<button type=\"submit\" class=\"button govuk-button govuk-font19px\" (click)=\"finalFormSubmit()\">\n  Continue\n</button>\n</div>", styles: [".govuk-font19px{font-size:19px}.inline-error-class{outline:3px solid #a71414;outline-offset:0}.inline-error-message{color:#a71414;font-weight:700;margin-top:10px}.contact-details--size{width:50%}.postcode-align-css{display:flex;flex-direction:row}.govuk-margin-right-10px{margin-right:10px}.govuk-margin-btm-20px{margin-bottom:20px!important}\n"] }]
    }], function () { return [{ type: i1$1.FormBuilder }, { type: NotificationService }, { type: PaymentLibComponent }]; }, { isEditOperation: [{
            type: Input,
            args: ['isEditOperation']
        }], isEditOperationInRefundList: [{
            type: Input,
            args: ['isEditOperationInRefundList']
        }], addressObj: [{
            type: Input,
            args: ['addressObj']
        }], assignContactDetails: [{
            type: Output
        }], assignContactDetailsInFefundsList: [{
            type: Output
        }], redirectToIssueRefund: [{
            type: Output
        }] }); })();

class StatusHistoryService {
    http;
    logger;
    errorHandlerService;
    paymentLibService;
    constructor(http, logger, errorHandlerService, paymentLibService) {
        this.http = http;
        this.logger = logger;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getPaymentStatusesByReference(paymentReference, paymentMethod) {
        this.logger.info('Status-history-service getPaymentStatusesByReference for: ', paymentReference);
        return this.http.get(paymentMethod === 'card' || paymentMethod === 'cash' || paymentMethod === 'cheque' || paymentMethod === 'postal order' ?
            `${this.paymentLibService.API_ROOT}/card-payments/${paymentReference}/statuses` :
            `${this.paymentLibService.API_ROOT}/credit-account-payments/${paymentReference}/statuses`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function StatusHistoryService_Factory(t) { return new (t || StatusHistoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(LoggerService), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: StatusHistoryService, factory: StatusHistoryService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(StatusHistoryService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: LoggerService }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

function StatusHistoryComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4)(1, "h2", 5);
    i0.ɵɵtext(2, " Payment status history could not be retrieved ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 6);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.errorMessage, " ");
} }
function StatusHistoryComponent_div_4_th_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th");
    i0.ɵɵtext(1, "Amount");
    i0.ɵɵelementEnd();
} }
function StatusHistoryComponent_div_4_tr_10_td_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td");
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "number");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(2, 1, ctx_r5.statuses.amount, ".2"), "");
} }
function StatusHistoryComponent_div_4_tr_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, StatusHistoryComponent_div_4_tr_10_td_3_Template, 3, 4, "td", 3);
    i0.ɵɵelementStart(4, "td");
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "date");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const status_r4 = ctx.$implicit;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(status_r4.status);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.isTakePayment);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, status_r4.date_created, "dd MMMM yyyy HH:mm:ss"));
} }
function StatusHistoryComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "table")(2, "thead")(3, "tr")(4, "th");
    i0.ɵɵtext(5, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, StatusHistoryComponent_div_4_th_6_Template, 2, 0, "th", 3);
    i0.ɵɵelementStart(7, "th");
    i0.ɵɵtext(8, "Date and time");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(9, "tbody");
    i0.ɵɵtemplate(10, StatusHistoryComponent_div_4_tr_10_Template, 7, 6, "tr", 7);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", ctx_r1.isTakePayment);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngForOf", ctx_r1.statuses.status_histories);
} }
class StatusHistoryComponent {
    statusHistoryService;
    paymentLibComponent;
    isTakePayment;
    pageTitle = 'Payment status history';
    statuses;
    errorMessage;
    constructor(statusHistoryService, paymentLibComponent) {
        this.statusHistoryService = statusHistoryService;
        this.paymentLibComponent = paymentLibComponent;
    }
    ngOnInit() {
        this.statusHistoryService.getPaymentStatusesByReference(this.paymentLibComponent.paymentReference, this.paymentLibComponent.paymentMethod).subscribe(statuses => this.statuses = statuses, (error) => this.errorMessage = error.replace(/"/g, ""));
    }
    static ɵfac = function StatusHistoryComponent_Factory(t) { return new (t || StatusHistoryComponent)(i0.ɵɵdirectiveInject(StatusHistoryService), i0.ɵɵdirectiveInject(PaymentLibComponent)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: StatusHistoryComponent, selectors: [["ccpay-payment-statuses"]], inputs: { isTakePayment: "isTakePayment" }, decls: 5, vars: 3, consts: [[1, "column"], [1, "heading-medium"], ["class", "error-summary", "role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 4, "ngIf"], [4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], [4, "ngFor", "ngForOf"]], template: function StatusHistoryComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "h2", 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(3, StatusHistoryComponent_div_3_Template, 5, 1, "div", 2);
            i0.ɵɵtemplate(4, StatusHistoryComponent_div_4_Template, 11, 2, "div", 3);
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate(ctx.pageTitle);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.errorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.errorMessage && ctx.statuses);
        } }, dependencies: [i3.NgForOf, i3.NgIf, i3.DecimalPipe, i3.DatePipe] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(StatusHistoryComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-payment-statuses', template: "<div class=\"column\">\n  <h2 class=\"heading-medium\">{{ pageTitle }}</h2>\n</div>\n\n\n<div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\" *ngIf=\"errorMessage\">\n  <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n    Payment status history could not be retrieved\n  </h2>\n  <div class=\"govuk-error-summary__body\">\n    {{ errorMessage }}\n  </div>\n</div>\n\n<div *ngIf=\"!errorMessage && statuses\">\n  <table>\n      <thead>\n        <tr>\n          <th>Status</th>\n          <th *ngIf=\"isTakePayment\">Amount</th>\n          <th>Date and time</th>\n        </tr>\n      </thead> \n      <tbody>\n        <tr *ngFor=\"let status of statuses.status_histories\">\n          <td>{{ status.status }}</td>\n          <td *ngIf=\"isTakePayment\">\u00A3{{ statuses.amount | number:'.2' }}</td>\n          <td>{{ status.date_created | date:'dd MMMM yyyy HH:mm:ss'}}</td>\n        </tr>\n    </tbody>\n  </table>\n</div>\n" }]
    }], function () { return [{ type: StatusHistoryService }, { type: PaymentLibComponent }]; }, { isTakePayment: [{
            type: Input
        }] }); })();

class AddRemissionRequest {
    beneficiary_name;
    ccd_case_number;
    fee;
    hwf_amount;
    hwf_reference;
    payment_group_reference;
    case_type;
    constructor(ccd_case_number, fee, hwf_amount, hwf_reference, caseType) {
        this.ccd_case_number = ccd_case_number;
        this.fee = fee;
        this.hwf_amount = hwf_amount;
        this.hwf_reference = hwf_reference;
        this.case_type = caseType;
    }
}

class RefundsService {
    http;
    https;
    errorHandlerService;
    paymentLibService;
    meta;
    constructor(http, https, errorHandlerService, paymentLibService, meta) {
        this.http = http;
        this.https = https;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
        this.meta = meta;
    }
    getRefundReasons() {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}/reasons`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getRefundRejectReasons() {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}/rejection-reasons`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getRefundActions(refundReference) {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}/${refundReference}/actions`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    patchRefundActions(body, refundReference, reviewerAction) {
        // const opts = this.addHeaders({});
        return this.https.patch(`${this.paymentLibService.REFUNDS_API_ROOT}/${refundReference}/action/${reviewerAction}`, body)
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getRefundList(refundstatus, selfexclusive) {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}?status=${refundstatus}&excludeCurrentUser=${selfexclusive}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getRefundStatusHistory(reference) {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}/${reference}/status-history`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getRefundStatusList(ccdCaseNumber) {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}?ccdCaseNumber=${ccdCaseNumber}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getUserDetails() {
        return this.http.get(`${this.paymentLibService.REFUNDS_API_ROOT}/get-user-details`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    postIssueRefund(body) {
        return this.https.post(`${this.paymentLibService.REFUNDS_API_ROOT}/refund`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    putResendOrEdit(body, refundRef, notificationType) {
        return this.https.put(`${this.paymentLibService.REFUNDS_API_ROOT}/resend/notification/${refundRef}?notificationType=${notificationType}`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    patchResubmitRefund(body, refund_reference) {
        // const opts = this.addHeaders({});
        return this.https.patch(`${this.paymentLibService.REFUNDS_API_ROOT}/resubmit/${refund_reference}`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    addHeaders(options) {
        const csrfToken = this.meta.getTag('name=csrf-token');
        const headers = {};
        if (options.headers) {
            options.headers.forEach(element => {
                headers[element] = options.headers.get(element);
            });
        }
        headers['X-Requested-With'] = 'XMLHttpRequest';
        if (csrfToken.content === null) {
            if (document.cookie.split(';').find(row => row.startsWith('XSRF-TOKEN')) !== undefined) {
                headers['CSRF-Token'] = document.cookie.split(';').find(row => row.startsWith('XSRF-TOKEN')).split('=')[1];
            }
            else {
                headers['CSRF-Token'] = document.cookie.split(';').find(row => row.startsWith(' XSRF-TOKEN')).split('=')[1];
            }
        }
        else {
            headers['CSRF-Token'] = csrfToken.content;
        }
        options.headers = new HttpHeaders(headers);
        options.responseType = 'text';
        return options;
    }
    static ɵfac = function RefundsService_Factory(t) { return new (t || RefundsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(WebComponentHttpClient), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService), i0.ɵɵinject(i2.Meta)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RefundsService, factory: RefundsService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RefundsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: WebComponentHttpClient }, { type: ErrorHandlerService }, { type: PaymentLibService }, { type: i2.Meta }]; }, null); })();

class AddRetroRemissionRequest {
    hwf_amount;
    hwf_reference;
    constructor(hwf_amount, hwf_reference) {
        this.hwf_amount = hwf_amount;
        this.hwf_reference = hwf_reference;
    }
}

class PostIssueRefundRetroRemission {
    remissionReference;
    contact_details;
    constructor(remissionReference, contactDeatils) {
        this.remissionReference = remissionReference;
        this.contact_details = contactDeatils;
    }
}

function AddRemissionComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 2)(2, "h2", 3);
    i0.ɵɵtext(3, " Error in processing the request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.errorMessage, " ");
} }
function AddRemissionComponent_div_2_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4)(1, "li");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const err_r21 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(err_r21);
} }
function AddRemissionComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 2)(2, "h2", 3);
    i0.ɵɵtext(3, " Error in processing the request ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(4, AddRemissionComponent_div_2_div_4_Template, 3, 1, "div", 5);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngForOf", ctx_r1.errorMsg);
} }
function AddRemissionComponent_ng_container_3_p_14_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a remission code");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_3_p_14_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a vaild remission code");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_3_p_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_3_p_14_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, AddRemissionComponent_ng_container_3_p_14_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r24.isRemissionCodeEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r24.remissionCodeHasError);
} }
function AddRemissionComponent_ng_container_3_p_24_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_3_p_24_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a vaild amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_3_p_24_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "The remission amount must be less than the total fee");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_3_p_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_3_p_24_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, AddRemissionComponent_ng_container_3_p_24_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(3, AddRemissionComponent_ng_container_3_p_24_span_3_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r25.isAmountEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r25.amountHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r25.isRemissionLessThanFeeError);
} }
const _c0$7 = function (a0) { return { "inline-error-class": a0 }; };
function AddRemissionComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r32 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 6, 7);
    i0.ɵɵelementStart(3, "h1", 8);
    i0.ɵɵtext(4, "Add remission ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "form", 9)(6, "div", 10)(7, "form", 11)(8, "div", 10)(9, "label", 12);
    i0.ɵɵtext(10);
    i0.ɵɵelementStart(11, "span", 13);
    i0.ɵɵtext(12, "Enter remission for reference. For example: HWF-A1B-23C OR PA21-123456");
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(13, "input", 14);
    i0.ɵɵtemplate(14, AddRemissionComponent_ng_container_3_p_14_Template, 3, 2, "p", 15);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "div", 10)(16, "label", 16);
    i0.ɵɵtext(17, " How much does the applicant need to pay? ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "div", 17);
    i0.ɵɵtext(19, "in pounds");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(20, "div", 18)(21, "div", 19);
    i0.ɵɵtext(22, "\u00A3");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(23, "input", 20);
    i0.ɵɵtemplate(24, AddRemissionComponent_ng_container_3_p_24_Template, 4, 3, "p", 15);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(25, "button", 21);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_3_Template_button_click_25_listener() { i0.ɵɵrestoreView(_r32); const ctx_r31 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r31.addRemission()); });
    i0.ɵɵtext(26, " Submit ");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("formGroup", ctx_r2.remissionForm);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate2(" Add remission to ", ctx_r2.fee == null ? null : ctx_r2.fee.code, ": ", ctx_r2.fee == null ? null : ctx_r2.fee.description, " ");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c0$7, ctx_r2.isRemissionCodeEmpty || ctx_r2.remissionCodeHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isRemissionCodeEmpty || ctx_r2.remissionCodeHasError);
    i0.ɵɵadvance(9);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c0$7, ctx_r2.isAmountEmpty || ctx_r2.amountHasError || ctx_r2.isRemissionLessThanFeeError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isAmountEmpty || ctx_r2.amountHasError || ctx_r2.isRemissionLessThanFeeError);
} }
function AddRemissionComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r35 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 23, 7);
    i0.ɵɵelementStart(3, "div", 24)(4, "span", 25);
    i0.ɵɵtext(5, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "strong", 26)(7, "span", 27);
    i0.ɵɵtext(8, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, " Are you sure you want to add remission to this fee? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(10, "table", 28)(11, "tr", 29)(12, "td", 30);
    i0.ɵɵtext(13, "Remission code:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td", 31);
    i0.ɵɵtext(15);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(16, "tr", 29)(17, "td", 30);
    i0.ɵɵtext(18, "Fee code:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td", 31);
    i0.ɵɵtext(20);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(21, "tr", 29)(22, "td", 30);
    i0.ɵɵtext(23, "Fee description:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "td", 31);
    i0.ɵɵtext(25);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(26, "tr", 29)(27, "td", 30);
    i0.ɵɵtext(28, "Amount the applicant must pay:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(29, "td", 31);
    i0.ɵɵtext(30);
    i0.ɵɵpipe(31, "currency");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(32, "button", 32);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_4_Template_button_click_32_listener() { i0.ɵɵrestoreView(_r35); const ctx_r34 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r34.cancelRemission.emit()); });
    i0.ɵɵtext(33, " Cancel ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(34, "button", 33);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_4_Template_button_click_34_listener() { i0.ɵɵrestoreView(_r35); const ctx_r36 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r36.confirmRemission()); });
    i0.ɵɵtext(35, " Confirm ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(15);
    i0.ɵɵtextInterpolate(ctx_r3.remissionForm.controls.remissionCode.value);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r3.fee.code);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r3.fee.description);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(31, 6, ctx_r3.remissionForm.controls.amount.value, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("disabled", ctx_r3.isConfirmationBtnDisabled)("ngClass", ctx_r3.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function AddRemissionComponent_ng_container_5_p_17_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a remission code");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_5_p_17_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a vaild remission code");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_5_p_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_5_p_17_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, AddRemissionComponent_ng_container_5_p_17_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r38 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r38.isRemissionCodeEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r38.remissionCodeHasError);
} }
function AddRemissionComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r42 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 34, 7);
    i0.ɵɵelementStart(3, "h1", 8);
    i0.ɵɵtext(4, "Process remission");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h1", 35);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "h1", 8);
    i0.ɵɵtext(9, "Enter help with fees or remission reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "form", 9)(11, "div", 10)(12, "form", 11)(13, "div", 10)(14, "label", 12)(15, "span", 13);
    i0.ɵɵtext(16, "For example: HWF-A1B-23C OR PA21-123456");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(17, AddRemissionComponent_ng_container_5_p_17_Template, 3, 2, "p", 15);
    i0.ɵɵelement(18, "input", 14);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(19, "div", 36)(20, "button", 37);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_5_Template_button_click_20_listener($event) { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.gotoServiceRequestPage($event)); });
    i0.ɵɵtext(21, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "button", 38);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_5_Template_button_click_22_listener() { i0.ɵɵrestoreView(_r42); const ctx_r43 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r43.addRemissionCode()); });
    i0.ɵɵtext(23, " Continue");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(24, "p")(25, "a", 39);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_5_Template_a_click_25_listener($event) { i0.ɵɵrestoreView(_r42); const ctx_r44 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r44.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(26, "Cancel");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("#", i0.ɵɵpipeBind1(7, 4, ctx_r4.ccdCaseNumber), "");
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("formGroup", ctx_r4.remissionForm);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r4.isRemissionCodeEmpty || ctx_r4.remissionCodeHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c0$7, ctx_r4.isRemissionCodeEmpty || ctx_r4.remissionCodeHasError));
} }
function AddRemissionComponent_ng_container_6_h1_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "h1", 35);
    i0.ɵɵtext(1, " Enter the amount to be refunded ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_6_h1_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "h1", 35);
    i0.ɵɵtext(1, " Enter the remission amount ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_6_h1_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "h1", 35);
    i0.ɵɵtext(1, " Enter the amount ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_6_p_19_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_6_p_19_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a vaild amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_6_p_19_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "You cannot add a remission that's more than the fee amount.");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_6_p_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_6_p_19_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, AddRemissionComponent_ng_container_6_p_19_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(3, AddRemissionComponent_ng_container_6_p_19_span_3_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r49 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r49.isAmountEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r49.amountHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r49.isRemissionLessThanFeeError);
} }
function AddRemissionComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r54 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 40, 7);
    i0.ɵɵelementStart(3, "h1", 8);
    i0.ɵɵtext(4, "Process remission");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h1", 35);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "div", 10)(9, "form", 9)(10, "div", 10)(11, "form", 11)(12, "fieldset", 41)(13, "legend", 42);
    i0.ɵɵtemplate(14, AddRemissionComponent_ng_container_6_h1_14_Template, 2, 0, "h1", 43);
    i0.ɵɵtemplate(15, AddRemissionComponent_ng_container_6_h1_15_Template, 2, 0, "h1", 43);
    i0.ɵɵtemplate(16, AddRemissionComponent_ng_container_6_h1_16_Template, 2, 0, "h1", 43);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "div", 17);
    i0.ɵɵtext(18, "in pounds");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(19, AddRemissionComponent_ng_container_6_p_19_Template, 4, 3, "p", 15);
    i0.ɵɵelementStart(20, "div", 18)(21, "div", 19);
    i0.ɵɵtext(22, "\u00A3");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(23, "input", 44);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(24, "div", 36)(25, "button", 37);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_6_Template_button_click_25_listener() { i0.ɵɵrestoreView(_r54); const ctx_r53 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r53.gotoAddRetroRemissionCodePage()); });
    i0.ɵɵtext(26, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "button", 38);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_6_Template_button_click_27_listener() { i0.ɵɵrestoreView(_r54); const ctx_r55 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r55.gotoCheckRetroRemissionPage(ctx_r55.payment)); });
    i0.ɵɵtext(28, " Continue");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(29, "p")(30, "a", 45);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_6_Template_a_click_30_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r56 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r56.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(31, "Cancel");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("#", i0.ɵɵpipeBind1(7, 7, ctx_r5.ccdCaseNumber), "");
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("formGroup", ctx_r5.remissionForm);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", (ctx_r5.remessionPayment == null ? null : ctx_r5.remessionPayment.status) === "Success" || ctx_r5.isFromRefundListPage);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r5.remessionPayment == null ? null : ctx_r5.remessionPayment.status) !== "Success" && !ctx_r5.isFromRefundListPage);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r5.remessionPayment == null ? null : ctx_r5.remessionPayment.status) === "undefined");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r5.isAmountEmpty || ctx_r5.amountHasError || ctx_r5.isRemissionLessThanFeeError);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c0$7, ctx_r5.isAmountEmpty || ctx_r5.amountHasError || ctx_r5.isRemissionLessThanFeeError));
} }
function AddRemissionComponent_ng_container_7_td_42_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 30);
    i0.ɵɵtext(1, "Refund amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_7_td_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 30);
    i0.ɵɵtext(1, "Remission amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r61 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 46, 7);
    i0.ɵɵelementStart(3, "div", 24)(4, "h1", 8);
    i0.ɵɵtext(5, " Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "table", 28)(7, "tr", 29)(8, "td", 30);
    i0.ɵɵtext(9, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 31);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 29)(13, "td", 30);
    i0.ɵɵtext(14, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 31);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(18, "tr", 29)(19, "td", 30);
    i0.ɵɵtext(20, "Payment status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 31);
    i0.ɵɵtext(22);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(23, "tr", 29)(24, "td", 30);
    i0.ɵɵtext(25, "Fee");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "td", 31);
    i0.ɵɵtext(27);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(28, "tr", 29)(29, "td", 30);
    i0.ɵɵtext(30, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(31, "td", 31);
    i0.ɵɵtext(32);
    i0.ɵɵpipe(33, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(34, "tr", 29)(35, "td", 30);
    i0.ɵɵtext(36, "Help with fees or remission reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(37, "td", 31);
    i0.ɵɵtext(38);
    i0.ɵɵelementStart(39, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_7_Template_a_click_39_listener() { i0.ɵɵrestoreView(_r61); const ctx_r60 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r60.gotoProcessRetroRemissionPage()); });
    i0.ɵɵtext(40, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(41, "tr", 29);
    i0.ɵɵtemplate(42, AddRemissionComponent_ng_container_7_td_42_Template, 2, 0, "td", 48);
    i0.ɵɵtemplate(43, AddRemissionComponent_ng_container_7_td_43_Template, 2, 0, "td", 48);
    i0.ɵɵelementStart(44, "td", 31);
    i0.ɵɵtext(45);
    i0.ɵɵpipe(46, "currency");
    i0.ɵɵelementStart(47, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_7_Template_a_click_47_listener() { i0.ɵɵrestoreView(_r61); const ctx_r62 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r62.gotoAmountRetroRemission()); });
    i0.ɵɵtext(48, "Change");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(49, "button", 32);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_7_Template_button_click_49_listener() { i0.ɵɵrestoreView(_r61); const ctx_r63 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r63.gotoAmountRetroRemission()); });
    i0.ɵɵtext(50, "Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(51, "button", 33);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_7_Template_button_click_51_listener() { i0.ɵɵrestoreView(_r61); const ctx_r64 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r64.confirmRetroRemission()); });
    i0.ɵɵtext(52, " Add remission ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(53, "p")(54, "a", 45);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_7_Template_a_click_54_listener($event) { i0.ɵɵrestoreView(_r61); const ctx_r65 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r65.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(55, " Cancel");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r6.remessionPayment ? ctx_r6.remessionPayment.reference : " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\u00A3", ctx_r6.remessionPayment ? ctx_r6.getFormattedCurrency(ctx_r6.remessionPayment.amount) : i0.ɵɵpipeBind4(17, 12, " ", "GBP", "symbol", "1.2-2"), " ");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r6.remessionPayment ? ctx_r6.remessionPayment.status : "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate2("", ctx_r6.fee.code, " - ", ctx_r6.fee.description, " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(33, 17, ctx_r6.fee.calculated_amount / ctx_r6.fee.volume, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("", ctx_r6.remissionForm.controls.remissionCode.value == null ? null : ctx_r6.remissionForm.controls.remissionCode.value.trim(), " ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r6.remessionPayment.status === "Success");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.remessionPayment.status !== "Success");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind4(46, 22, ctx_r6.remissionForm.controls.amount.value, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("disabled", ctx_r6.isConfirmationBtnDisabled)("ngClass", ctx_r6.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function AddRemissionComponent_ng_container_8_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 55)(1, "p", 54)(2, "strong");
    i0.ɵɵtext(3);
    i0.ɵɵpipe(4, "currency");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r67 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("The amount to be refunded should be ", i0.ɵɵpipeBind4(4, 1, ctx_r67.remissionForm.controls.amount.value, "GBP", "symbol-narrow", "1.2-2"), "");
} }
function AddRemissionComponent_ng_container_8_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r70 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "button", 33);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_8_div_9_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r70); const ctx_r69 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r69.gotoProcessRetroRemission()); });
    i0.ɵɵtext(2, "Continue ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r68 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", !ctx_r68.isRemissionApplied)("ngClass", ctx_r68.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function AddRemissionComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r72 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 49, 7);
    i0.ɵɵelementStart(3, "div", 50)(4, "div")(5, "div", 51)(6, "h1", 52);
    i0.ɵɵtext(7, " Remission added ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(8, AddRemissionComponent_ng_container_8_div_8_Template, 5, 6, "div", 53);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, AddRemissionComponent_ng_container_8_div_9_Template, 3, 2, "div", 1);
    i0.ɵɵelementStart(10, "p", 54)(11, "a", 39);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_8_Template_a_click_11_listener($event) { i0.ɵɵrestoreView(_r72); const ctx_r71 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r71.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(12, " Return to case ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(8);
    i0.ɵɵproperty("ngIf", ctx_r7.remessionPayment.status === "Success");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.remessionPayment.status === "Success");
} }
function AddRemissionComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r75 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 56, 7);
    i0.ɵɵelementStart(3, "h1", 57);
    i0.ɵɵtext(4, "Process refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 58);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "ccpay-contact-details", 59);
    i0.ɵɵlistener("assignContactDetails", function AddRemissionComponent_ng_container_9_Template_ccpay_contact_details_assignContactDetails_8_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r74 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r74.getContactDetails($event, "checkaddRefundpage")); })("redirectToIssueRefund", function AddRemissionComponent_ng_container_9_Template_ccpay_contact_details_redirectToIssueRefund_8_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r76 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r76.gotoRemissionSuccess($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "p")(10, "a", 60);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_9_Template_a_click_10_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r77 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r77.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(11, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 2, ctx_r8.ccdCaseNumber), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("addressObj", ctx_r8.notification);
} }
function AddRemissionComponent_ng_container_10_td_35_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 30);
    i0.ɵɵtext(1, "Refund amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_10_td_36_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 30);
    i0.ɵɵtext(1, "Remission amount");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_10_div_49_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r81 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r81.contactDetailsObj == null ? null : ctx_r81.contactDetailsObj.email == null ? null : ctx_r81.contactDetailsObj.email.trim(), " ");
} }
function AddRemissionComponent_ng_container_10_div_50_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r82 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r82.contactDetailsObj == null ? null : ctx_r82.contactDetailsObj.address_line == null ? null : ctx_r82.contactDetailsObj.address_line.trim(), "\u00A0", ctx_r82.contactDetailsObj == null ? null : ctx_r82.contactDetailsObj.city == null ? null : ctx_r82.contactDetailsObj.city.trim(), "\u00A0", ctx_r82.contactDetailsObj == null ? null : ctx_r82.contactDetailsObj.county == null ? null : ctx_r82.contactDetailsObj.county.trim(), "\u00A0", ctx_r82.contactDetailsObj == null ? null : ctx_r82.contactDetailsObj.country == null ? null : ctx_r82.contactDetailsObj.country.trim(), "\u00A0", ctx_r82.contactDetailsObj == null ? null : ctx_r82.contactDetailsObj.postal_code == null ? null : ctx_r82.contactDetailsObj.postal_code.trim(), " ");
} }
function AddRemissionComponent_ng_container_10_a_58_Template(rf, ctx) { if (rf & 1) {
    const _r87 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 66);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_10_a_58_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r87); const ctx_r86 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r86.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_10_a_59_Template(rf, ctx) { if (rf & 1) {
    const _r89 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 66);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_10_a_59_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r89); const ctx_r88 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r88.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_10_app_notification_preview_60_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 67);
} if (rf & 2) {
    const ctx_r85 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("payment", ctx_r85.remessionPayment)("contactDetails", ctx_r85.contactDetailsObj)("refundReason", "RR036")("refundAmount", ctx_r85.remissionForm.controls.amount.value);
} }
function AddRemissionComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r91 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 46, 7);
    i0.ɵɵelementStart(3, "div", 24)(4, "h1", 8);
    i0.ɵɵtext(5, " Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "table", 28)(7, "tr", 29)(8, "td", 30);
    i0.ɵɵtext(9, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 31);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 29)(13, "td", 30);
    i0.ɵɵtext(14, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 31);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(18, "tr", 29)(19, "td", 30);
    i0.ɵɵtext(20, "Payment status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 31);
    i0.ɵɵtext(22);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(23, "tr", 29)(24, "td", 30);
    i0.ɵɵtext(25, "Fee");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "td", 31);
    i0.ɵɵtext(27);
    i0.ɵɵpipe(28, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(29, "tr", 29)(30, "td", 30);
    i0.ɵɵtext(31, "Help with fees or remission reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(32, "td", 31);
    i0.ɵɵtext(33);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(34, "tr", 29);
    i0.ɵɵtemplate(35, AddRemissionComponent_ng_container_10_td_35_Template, 2, 0, "td", 48);
    i0.ɵɵtemplate(36, AddRemissionComponent_ng_container_10_td_36_Template, 2, 0, "td", 48);
    i0.ɵɵelementStart(37, "td", 31);
    i0.ɵɵtext(38);
    i0.ɵɵpipe(39, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(40, "tr", 29)(41, "td", 30);
    i0.ɵɵtext(42, "Send to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(43, "td", 31);
    i0.ɵɵtext(44);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(45, "tr", 29)(46, "td", 30);
    i0.ɵɵtext(47, "Send via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(48, "td", 61);
    i0.ɵɵtemplate(49, AddRemissionComponent_ng_container_10_div_49_Template, 5, 1, "div", 62);
    i0.ɵɵtemplate(50, AddRemissionComponent_ng_container_10_div_50_Template, 5, 5, "div", 62);
    i0.ɵɵelementStart(51, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_10_Template_a_click_51_listener() { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r90.gotoProcessRetroRemission(ctx_r90.contactDetailsObj)); });
    i0.ɵɵtext(52, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(53, "tr", 29)(54, "td", 30);
    i0.ɵɵtext(55, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(56, "td", 31);
    i0.ɵɵtext(57);
    i0.ɵɵtemplate(58, AddRemissionComponent_ng_container_10_a_58_Template, 2, 0, "a", 63);
    i0.ɵɵtemplate(59, AddRemissionComponent_ng_container_10_a_59_Template, 2, 0, "a", 63);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(60, AddRemissionComponent_ng_container_10_app_notification_preview_60_Template, 1, 4, "app-notification-preview", 64);
    i0.ɵɵelementStart(61, "button", 32);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_10_Template_button_click_61_listener() { i0.ɵɵrestoreView(_r91); const ctx_r92 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r92.gotoProcessRetroRemission(ctx_r92.contactDetailsObj)); });
    i0.ɵɵtext(62, "Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(63, "button", 33);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_10_Template_button_click_63_listener() { i0.ɵɵrestoreView(_r91); const ctx_r93 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r93.processRefund()); });
    i0.ɵɵtext(64, " Submit refund ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(65, "p")(66, "a", 45);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_10_Template_a_click_66_listener($event) { i0.ɵɵrestoreView(_r91); const ctx_r94 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r94.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(67, " Cancel");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r9.remessionPayment ? ctx_r9.remessionPayment.reference : " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\u00A3", ctx_r9.remessionPayment ? ctx_r9.getFormattedCurrency(ctx_r9.remessionPayment.amount) : i0.ɵɵpipeBind4(17, 19, " ", "GBP", "symbol", "1.2-2"), " ");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r9.remessionPayment ? ctx_r9.remessionPayment.status : "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate3("", ctx_r9.fee.code, " - ", ctx_r9.fee.description, " (", i0.ɵɵpipeBind4(28, 24, ctx_r9.fee.calculated_amount / ctx_r9.fee.volume, "GBP", "symbol-narrow", "1.2-2"), ") ");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("", ctx_r9.remissionForm.controls.remissionCode.value == null ? null : ctx_r9.remissionForm.controls.remissionCode.value.trim(), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.remessionPayment.status === "Success");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.remessionPayment.status !== "Success");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind4(39, 29, ctx_r9.remissionForm.controls.amount.value, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r9.orderParty);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r9.contactDetailsObj == null ? null : ctx_r9.contactDetailsObj.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r9.contactDetailsObj == null ? null : ctx_r9.contactDetailsObj.notification_type) === "LETTER");
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("", ctx_r9.templateInstructionType, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r9.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.notificationPreview);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", ctx_r9.isConfirmationBtnDisabled)("ngClass", ctx_r9.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function AddRemissionComponent_ng_container_11_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "h2", 57);
    i0.ɵɵtext(2, "What happens next");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "p", 54);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r96 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" A refund request for ", i0.ɵɵpipeBind4(5, 1, ctx_r96.refundAmount, "GBP", "symbol-narrow", "1.2-2"), " has been created and will be passed to a team leader to approve. ");
} }
function AddRemissionComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r98 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 68, 7);
    i0.ɵɵelementStart(3, "div", 50)(4, "div")(5, "div", 69)(6, "h1", 52);
    i0.ɵɵtext(7, " Refund submitted ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "div", 55)(9, "p", 70)(10, "strong");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵtemplate(12, AddRemissionComponent_ng_container_11_div_12_Template, 6, 6, "div", 1);
    i0.ɵɵelementStart(13, "p", 54)(14, "a", 39);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_11_Template_a_click_14_listener($event) { i0.ɵɵrestoreView(_r98); const ctx_r97 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r97.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(15, " Return to case ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate1("Refund reference: ", ctx_r10.refundReference, "");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r10.isPaymentSuccess);
} }
function AddRemissionComponent_ng_container_12_tbody_29_tr_1_td_18_Template(rf, ctx) { if (rf & 1) {
    const _r111 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 90)(1, "div", 99)(2, "input", 100);
    i0.ɵɵlistener("keyup", function AddRemissionComponent_ng_container_12_tbody_29_tr_1_td_18_Template_input_keyup_2_listener($event) { i0.ɵɵrestoreView(_r111); const ctx_r110 = i0.ɵɵnextContext(); const fee_r105 = ctx_r110.$implicit; const i_r106 = ctx_r110.index; const ctx_r109 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r109.calAmtToRefund($event.target.value, fee_r105.controls["calculated_amount"].value, fee_r105.controls["volume"].value, i_r106)); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r112 = i0.ɵɵnextContext();
    const i_r106 = ctx_r112.index;
    const fee_r105 = ctx_r112.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("formGroupName", i_r106);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "feeVolumeUpdated_", fee_r105.controls["id"].value, "");
    i0.ɵɵpropertyInterpolate("value", fee_r105.controls["updated_volume"].value);
    i0.ɵɵpropertyInterpolate1("name", "feeVolumeUpdated_", fee_r105.controls["id"].value, "");
} }
function AddRemissionComponent_ng_container_12_tbody_29_tr_1_td_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 90);
    i0.ɵɵelement(1, "input", 101);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r105 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "VolumeUpdated_", fee_r105.controls["id"].value, "")("name", "VolumeUpdated_", fee_r105.controls["id"].value, "");
    i0.ɵɵpropertyInterpolate("value", fee_r105.controls["volume"].value);
} }
function AddRemissionComponent_ng_container_12_tbody_29_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r115 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 84)(1, "td", 31)(2, "div", 85)(3, "div", 86)(4, "input", 87);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_12_tbody_29_tr_1_Template_input_click_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r115); const i_r106 = restoredCtx.index; const fee_r105 = restoredCtx.$implicit; const ctx_r114 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r114.check_en(i_r106, fee_r105.controls["id"].value, fee_r105.controls["apportion_amount"].value, fee_r105.controls["volume"].value)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "label", 88)(6, "span", 89);
    i0.ɵɵtext(7, "Select");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementStart(8, "td", 61);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 90)(11, "div", 91);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13);
    i0.ɵɵpipe(14, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 90);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(18, AddRemissionComponent_ng_container_12_tbody_29_tr_1_td_18_Template, 3, 4, "td", 92);
    i0.ɵɵtemplate(19, AddRemissionComponent_ng_container_12_tbody_29_tr_1_td_19_Template, 2, 3, "td", 92);
    i0.ɵɵelementStart(20, "td", 93)(21, "div", 94)(22, "div", 19);
    i0.ɵɵtext(23, "\u00A3");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(24, "input", 95)(25, "input", 96)(26, "input", 97)(27, "input", 98);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const fee_r105 = ctx.$implicit;
    const i_r106 = ctx.index;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("formGroupName", i_r106);
    i0.ɵɵadvance(2);
    i0.ɵɵpropertyInterpolate("id", fee_r105.controls["id"].value);
    i0.ɵɵpropertyInterpolate("value", fee_r105.controls["id"].value);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("for", fee_r105.controls["id"].value);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("", fee_r105.controls["description"].value, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵpropertyInterpolate1("id", "feeVOl_", fee_r105.controls["id"].value, "");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(fee_r105.controls["calculated_amount"].value / fee_r105.controls["volume"].value);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(14, 23, fee_r105.controls["calculated_amount"].value / fee_r105.controls["volume"].value, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind4(17, 28, fee_r105.controls["apportion_amount"].value, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", fee_r105.controls["volume"].value > 1);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", fee_r105.controls["volume"].value === 1);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("formGroupName", i_r106);
    i0.ɵɵadvance(3);
    i0.ɵɵpropertyInterpolate1("id", "feeAmount_", fee_r105.controls["id"].value, "")("name", "feeAmount_", fee_r105.controls["id"].value, "");
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "feeVolume_", fee_r105.controls["id"].value, "")("name", "feeVolume_", fee_r105.controls["id"].value, "");
    i0.ɵɵpropertyInterpolate("value", fee_r105.controls["volume"].value);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "feeApportionAmount_", fee_r105.controls["id"].value, "")("name", "feeApportionAmount_", fee_r105.controls["id"].value, "");
    i0.ɵɵpropertyInterpolate("value", fee_r105.controls["apportion_amount"].value);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "calculatedAmount_", fee_r105.controls["id"].value, "")("name", "calculatedAmount_", fee_r105.controls["id"].value, "");
    i0.ɵɵpropertyInterpolate("value", fee_r105.controls["calculated_amount"].value);
} }
function AddRemissionComponent_ng_container_12_tbody_29_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 82);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_12_tbody_29_tr_1_Template, 28, 33, "tr", 83);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r99 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r99.feesList == null ? null : ctx_r99.feesList.controls);
} }
function AddRemissionComponent_ng_container_12_tbody_30_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 29)(1, "td", 31)(2, "div", 103)(3, "div", 86);
    i0.ɵɵelement(4, "input", 104);
    i0.ɵɵelementStart(5, "label", 88)(6, "span", 89);
    i0.ɵɵtext(7, "Select");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementStart(8, "td", 61);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 90)(11, "div", 91);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13);
    i0.ɵɵpipe(14, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 90);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td", 90)(19, "div");
    i0.ɵɵelement(20, "input", 105);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(21, "td", 93)(22, "div", 18)(23, "div", 19);
    i0.ɵɵtext(24, "\u00A3");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(25, "input", 106);
    i0.ɵɵpipe(26, "currency");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const fee_r117 = ctx.$implicit;
    const ctx_r116 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵpropertyInterpolate("id", fee_r117.id);
    i0.ɵɵpropertyInterpolate("value", fee_r117.id);
    i0.ɵɵproperty("checked", true);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("for", fee_r117.id);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("", fee_r117.description, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵpropertyInterpolate1("id", "feeVOl_", fee_r117.id, "");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(fee_r117.calculated_amount / fee_r117.volume);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(14, 15, fee_r117.calculated_amount / fee_r117.volume, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind4(17, 20, ctx_r116.payment.amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(4);
    i0.ɵɵpropertyInterpolate1("id", "feeVolumeUpdated_", fee_r117.id, "");
    i0.ɵɵpropertyInterpolate("value", fee_r117.volume);
    i0.ɵɵpropertyInterpolate1("name", "feeVolumeUpdated_", fee_r117.id, "");
    i0.ɵɵadvance(5);
    i0.ɵɵpropertyInterpolate1("id", "feeAmount_", fee_r117.id, "")("name", "feeAmount_", fee_r117.id, "");
    i0.ɵɵpropertyInterpolate("value", i0.ɵɵpipeBind4(26, 25, ctx_r116.payment.amount, "GBP", "symbol-narrow", "1.2-2"));
} }
function AddRemissionComponent_ng_container_12_tbody_30_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 82);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_12_tbody_30_tr_1_Template, 27, 30, "tr", 102);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r100 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r100.fees);
} }
function AddRemissionComponent_ng_container_12_tbody_31_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 82)(1, "td", 107);
    i0.ɵɵtext(2, "No fees recorded");
    i0.ɵɵelementEnd()();
} }
function AddRemissionComponent_ng_container_12_a_33_Template(rf, ctx) { if (rf & 1) {
    const _r120 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 108);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_12_a_33_Template_a_click_0_listener($event) { i0.ɵɵrestoreView(_r120); const ctx_r119 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r119.gotoServiceRequestPage($event)); });
    i0.ɵɵtext(1, " Previous ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_12_a_34_Template(rf, ctx) { if (rf & 1) {
    const _r122 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 108);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_12_a_34_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r122); const ctx_r121 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r121.goToPaymentViewComponent()); });
    i0.ɵɵtext(1, " Previous ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    const _r124 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 10)(2, "form", 11)(3, "h1", 8);
    i0.ɵɵtext(4, "Process refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 35);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 71);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "h3", 72);
    i0.ɵɵtext(11, "Select fees to be refunded");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "div")(13, "table", 28)(14, "thead", 73)(15, "tr", 29)(16, "td", 74);
    i0.ɵɵtext(17, "Select");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td", 75);
    i0.ɵɵtext(19, "Fee description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(20, "td", 76);
    i0.ɵɵtext(21, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "td", 76);
    i0.ɵɵtext(23, "Total paid");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "td", 76);
    i0.ɵɵtext(25, "Quantity");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "td", 77);
    i0.ɵɵtext(27, "Amount to refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(28, "td", 78);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(29, AddRemissionComponent_ng_container_12_tbody_29_Template, 2, 1, "tbody", 79);
    i0.ɵɵtemplate(30, AddRemissionComponent_ng_container_12_tbody_30_Template, 2, 1, "tbody", 79);
    i0.ɵɵtemplate(31, AddRemissionComponent_ng_container_12_tbody_31_Template, 3, 0, "tbody", 79);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(32, "div", 36);
    i0.ɵɵtemplate(33, AddRemissionComponent_ng_container_12_a_33_Template, 2, 0, "a", 80);
    i0.ɵɵtemplate(34, AddRemissionComponent_ng_container_12_a_34_Template, 2, 0, "a", 80);
    i0.ɵɵelementStart(35, "button", 81);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_12_Template_button_click_35_listener() { i0.ɵɵrestoreView(_r124); const ctx_r123 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r123.gotoIssuePage(ctx_r123.isFullyRefund)); });
    i0.ɵɵtext(36, " Continue ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(37, "p")(38, "a", 60);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_12_Template_a_click_38_listener($event) { i0.ɵɵrestoreView(_r124); const ctx_r125 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r125.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(39, "Cancel");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("formGroup", ctx_r11.remissionForm);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("Case reference:", i0.ɵɵpipeBind1(7, 9, ctx_r11.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r11.paymentReference, " ");
    i0.ɵɵadvance(20);
    i0.ɵɵproperty("ngIf", !ctx_r11.isFullyRefund);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.isFullyRefund);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.fees == null ? null : ctx_r11.fees.length) === 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r11.isFullyRefund);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.isFullyRefund);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", ctx_r11.noneSelected());
} }
function AddRemissionComponent_ng_container_13_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 120);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r127 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r127.paymentReference, " ");
} }
function AddRemissionComponent_ng_container_13_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 120);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r128 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r128.refundPaymentReference, " ");
} }
function AddRemissionComponent_ng_container_13_p_18_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Select a reason why you\u2019re making this refund");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_13_p_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_13_p_18_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r129 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r129.refundHasError);
} }
function AddRemissionComponent_ng_container_13_div_21_div_4_p_4_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a reason why you\u2019re making this refund");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_13_div_21_div_4_p_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_13_div_21_div_4_p_4_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r137 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r137.isReasonEmpty);
} }
const _c1$2 = function (a0) { return { "form-group-error": a0 }; };
function AddRemissionComponent_ng_container_13_div_21_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 124)(1, "label", 125);
    i0.ɵɵtext(2, " Enter reason ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 126);
    i0.ɵɵtemplate(4, AddRemissionComponent_ng_container_13_div_21_div_4_p_4_Template, 2, 1, "p", 15);
    i0.ɵɵelement(5, "input", 127);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const refund_r134 = i0.ɵɵnextContext().$implicit;
    const ctx_r136 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("for", refund_r134.name);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c1$2, ctx_r136.isReasonEmpty));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r136.isReasonEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c0$7, ctx_r136.isReasonEmpty));
} }
function AddRemissionComponent_ng_container_13_div_21_Template(rf, ctx) { if (rf & 1) {
    const _r141 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 121)(1, "input", 122);
    i0.ɵɵlistener("change", function AddRemissionComponent_ng_container_13_div_21_Template_input_change_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r141); const refund_r134 = restoredCtx.$implicit; const ctx_r140 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r140.selectRadioButton(refund_r134.code, refund_r134.name)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 123);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(4, AddRemissionComponent_ng_container_13_div_21_div_4_Template, 6, 8, "div", 119);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const refund_r134 = ctx.$implicit;
    const ctx_r130 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("id", refund_r134.name);
    i0.ɵɵpropertyInterpolate("value", refund_r134.code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", refund_r134.name, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r130.isRefundReasonsSelected && ctx_r130.showReasonText && ctx_r130.selectedRefundReason === refund_r134.name);
} }
function AddRemissionComponent_ng_container_13_option_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 128);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const refund_r142 = ctx.$implicit;
    i0.ɵɵpropertyInterpolate("id", refund_r142.name);
    i0.ɵɵpropertyInterpolate("value", refund_r142.code);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(refund_r142.name);
} }
function AddRemissionComponent_ng_container_13_div_29_p_4_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a reason why you\u2019re making this refund");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_13_div_29_p_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtemplate(1, AddRemissionComponent_ng_container_13_div_29_p_4_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r143 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r143.isReasonEmpty);
} }
function AddRemissionComponent_ng_container_13_div_29_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 124)(1, "div", 126)(2, "label", 129);
    i0.ɵɵtext(3, " Enter reason ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(4, AddRemissionComponent_ng_container_13_div_29_p_4_Template, 2, 1, "p", 15);
    i0.ɵɵelement(5, "input", 130);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r132 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c1$2, ctx_r132.isReasonEmpty));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r132.isReasonEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("maxlength", ctx_r132.reasonLength);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c0$7, ctx_r132.isReasonEmpty));
} }
function AddRemissionComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    const _r146 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 109, 7);
    i0.ɵɵelementStart(3, "h1", 8);
    i0.ɵɵtext(4, "Process refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h1", 35);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(8, AddRemissionComponent_ng_container_13_span_8_Template, 2, 1, "span", 110);
    i0.ɵɵtemplate(9, AddRemissionComponent_ng_container_13_span_9_Template, 2, 1, "span", 110);
    i0.ɵɵelementStart(10, "h1", 8);
    i0.ɵɵtext(11, "Why are you making this refund? ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "div", 10)(13, "form", 9)(14, "div", 10)(15, "form", 11)(16, "fieldset", 111)(17, "div", 112);
    i0.ɵɵtemplate(18, AddRemissionComponent_ng_container_13_p_18_Template, 2, 1, "p", 15);
    i0.ɵɵelementStart(19, "div", 113)(20, "div", 114);
    i0.ɵɵtemplate(21, AddRemissionComponent_ng_container_13_div_21_Template, 5, 4, "div", 115);
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(22, "br");
    i0.ɵɵelementStart(23, "div")(24, "select", 116);
    i0.ɵɵlistener("change", function AddRemissionComponent_ng_container_13_Template_select_change_24_listener($event) { i0.ɵɵrestoreView(_r146); const ctx_r145 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r145.selectchange($event)); });
    i0.ɵɵelementStart(25, "option", 117);
    i0.ɵɵtext(26);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(27, AddRemissionComponent_ng_container_13_option_27_Template, 2, 3, "option", 118);
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(28, "br");
    i0.ɵɵtemplate(29, AddRemissionComponent_ng_container_13_div_29_Template, 6, 8, "div", 119);
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementStart(30, "div", 36)(31, "button", 37);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_13_Template_button_click_31_listener() { i0.ɵɵrestoreView(_r146); const ctx_r147 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r147.gotoPartialFeeRefundScreen()); });
    i0.ɵɵtext(32, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(33, "button", 38);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_13_Template_button_click_33_listener() { i0.ɵɵrestoreView(_r146); const ctx_r148 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r148.gotoIssueRefundConfirmation(ctx_r148.payment)); });
    i0.ɵɵtext(34, " Continue");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(35, "p")(36, "a", 45);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_13_Template_a_click_36_listener($event) { i0.ɵɵrestoreView(_r146); const ctx_r149 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r149.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(37, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 12, ctx_r12.ccdCaseNumber), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r12.payment);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r12.refundPaymentReference);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("formGroup", ctx_r12.remissionForm);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", ctx_r12.refundHasError ? "govuk-radios govuk-radios--conditional form-group-error" : "govuk-radios govuk-radios--conditional");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r12.refundHasError);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r12.commonRefundReasons);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("defaultSelected", true)("value", ctx_r12.default);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r12.default);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r12.refundReasons);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r12.showReasonText && !ctx_r12.isRefundReasonsSelected);
} }
function AddRemissionComponent_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    const _r152 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 131, 7);
    i0.ɵɵelementStart(3, "h1", 57);
    i0.ɵɵtext(4, "Process refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 58);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 132);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "ccpay-contact-details", 59);
    i0.ɵɵlistener("assignContactDetails", function AddRemissionComponent_ng_container_14_Template_ccpay_contact_details_assignContactDetails_10_listener($event) { i0.ɵɵrestoreView(_r152); const ctx_r151 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r151.getContactDetails($event, "checkissuerefundpage")); })("redirectToIssueRefund", function AddRemissionComponent_ng_container_14_Template_ccpay_contact_details_redirectToIssueRefund_10_listener() { i0.ɵɵrestoreView(_r152); const ctx_r153 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r153.gotoRefundReasonPage()); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "p")(12, "a", 60);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_14_Template_a_click_12_listener($event) { i0.ɵɵrestoreView(_r152); const ctx_r154 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r154.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 3, ctx_r13.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r13.paymentReference, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("addressObj", ctx_r13.notification);
} }
function AddRemissionComponent_ng_container_15_tr_25_Template(rf, ctx) { if (rf & 1) {
    const _r164 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 29)(1, "td", 30);
    i0.ɵɵtext(2, "Refund amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 31);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementStart(6, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_tr_25_Template_a_click_6_listener() { i0.ɵɵrestoreView(_r164); const ctx_r163 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r163.changeRefundAmount()); });
    i0.ɵɵtext(7, "Change");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r156 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind4(5, 1, ctx_r156.totalRefundAmount, "GBP", "symbol-narrow", "1.2-2"), " ");
} }
function AddRemissionComponent_ng_container_15_tr_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 29)(1, "td", 30);
    i0.ɵɵtext(2, "Refund amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 31);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r157 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 1, ctx_r157.payment.amount, "GBP", "symbol-narrow", "1.2-2"));
} }
function AddRemissionComponent_ng_container_15_div_36_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r158 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r158.contactDetailsObj == null ? null : ctx_r158.contactDetailsObj.email == null ? null : ctx_r158.contactDetailsObj.email.trim(), " ");
} }
function AddRemissionComponent_ng_container_15_div_37_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r159 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r159.contactDetailsObj == null ? null : ctx_r159.contactDetailsObj.address_line == null ? null : ctx_r159.contactDetailsObj.address_line.trim(), "\u00A0", ctx_r159.contactDetailsObj == null ? null : ctx_r159.contactDetailsObj.city == null ? null : ctx_r159.contactDetailsObj.city.trim(), "\u00A0", ctx_r159.contactDetailsObj == null ? null : ctx_r159.contactDetailsObj.county == null ? null : ctx_r159.contactDetailsObj.county.trim(), "\u00A0", ctx_r159.contactDetailsObj == null ? null : ctx_r159.contactDetailsObj.country == null ? null : ctx_r159.contactDetailsObj.country.trim(), "\u00A0", ctx_r159.contactDetailsObj == null ? null : ctx_r159.contactDetailsObj.postal_code == null ? null : ctx_r159.contactDetailsObj.postal_code.trim(), " ");
} }
function AddRemissionComponent_ng_container_15_a_45_Template(rf, ctx) { if (rf & 1) {
    const _r166 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 66);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_a_45_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r166); const ctx_r165 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r165.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_15_a_46_Template(rf, ctx) { if (rf & 1) {
    const _r168 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 66);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_a_46_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r168); const ctx_r167 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r167.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_15_app_notification_preview_47_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 67);
} if (rf & 2) {
    const ctx_r162 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("payment", ctx_r162.payment)("contactDetails", ctx_r162.contactDetailsObj)("refundReason", ctx_r162.selectedRefundReasonCode)("refundAmount", ctx_r162.isFullyRefund ? ctx_r162.payment.amount : ctx_r162.totalRefundAmount);
} }
function AddRemissionComponent_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    const _r170 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 133, 7);
    i0.ɵɵelementStart(3, "div", 24)(4, "h1", 8);
    i0.ɵɵtext(5, " Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "table", 28)(7, "tr", 29)(8, "td", 30);
    i0.ɵɵtext(9, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 31);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 29)(13, "td", 30);
    i0.ɵɵtext(14, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 31);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(18, "tr")(19, "td", 30);
    i0.ɵɵtext(20, "Reason for refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 31);
    i0.ɵɵtext(22);
    i0.ɵɵelementStart(23, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_Template_a_click_23_listener() { i0.ɵɵrestoreView(_r170); const ctx_r169 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r169.changeIssueRefundReason()); });
    i0.ɵɵtext(24, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(25, AddRemissionComponent_ng_container_15_tr_25_Template, 8, 6, "tr", 134);
    i0.ɵɵtemplate(26, AddRemissionComponent_ng_container_15_tr_26_Template, 6, 6, "tr", 134);
    i0.ɵɵelementStart(27, "tr", 29)(28, "td", 30);
    i0.ɵɵtext(29, "Send to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(30, "td", 31);
    i0.ɵɵtext(31);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(32, "tr", 29)(33, "td", 30);
    i0.ɵɵtext(34, "Send via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(35, "td", 61);
    i0.ɵɵtemplate(36, AddRemissionComponent_ng_container_15_div_36_Template, 5, 1, "div", 62);
    i0.ɵɵtemplate(37, AddRemissionComponent_ng_container_15_div_37_Template, 5, 5, "div", 62);
    i0.ɵɵelementStart(38, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_Template_a_click_38_listener() { i0.ɵɵrestoreView(_r170); const ctx_r171 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r171.gotoContactDetailsPage(ctx_r171.contactDetailsObj)); });
    i0.ɵɵtext(39, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(40, "tr", 29)(41, "td", 30);
    i0.ɵɵtext(42, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(43, "td", 31);
    i0.ɵɵtext(44);
    i0.ɵɵtemplate(45, AddRemissionComponent_ng_container_15_a_45_Template, 2, 0, "a", 63);
    i0.ɵɵtemplate(46, AddRemissionComponent_ng_container_15_a_46_Template, 2, 0, "a", 63);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(47, AddRemissionComponent_ng_container_15_app_notification_preview_47_Template, 1, 4, "app-notification-preview", 64);
    i0.ɵɵelementStart(48, "div", 36)(49, "button", 32);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_Template_button_click_49_listener() { i0.ɵɵrestoreView(_r170); const ctx_r172 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r172.gotoContactDetailsPage(ctx_r172.contactDetailsObj)); });
    i0.ɵɵtext(50, " Previous ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(51, "button", 33);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_Template_button_click_51_listener() { i0.ɵɵrestoreView(_r170); const ctx_r173 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r173.confirmIssueRefund(ctx_r173.isFullyRefund)); });
    i0.ɵɵtext(52, " Submit refund ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(53, "p")(54, "a", 60);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_15_Template_a_click_54_listener($event) { i0.ɵɵrestoreView(_r170); const ctx_r174 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r174.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(55, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r14.paymentReference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(17, 14, ctx_r14.payment.amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("", ctx_r14.displayRefundReason == null ? null : ctx_r14.displayRefundReason.trim(), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r14.isFullyRefund);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r14.isFullyRefund);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r14.orderParty);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r14.contactDetailsObj == null ? null : ctx_r14.contactDetailsObj.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r14.contactDetailsObj == null ? null : ctx_r14.contactDetailsObj.notification_type) === "LETTER");
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("", ctx_r14.templateInstructionType, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r14.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r14.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r14.notificationPreview);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("disabled", ctx_r14.isConfirmationBtnDisabled)("ngClass", ctx_r14.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function AddRemissionComponent_ng_container_16_Template(rf, ctx) { if (rf & 1) {
    const _r177 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 56, 7);
    i0.ɵɵelementStart(3, "h1", 57);
    i0.ɵɵtext(4, "Process refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 58);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 132);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "ccpay-contact-details", 59);
    i0.ɵɵlistener("assignContactDetails", function AddRemissionComponent_ng_container_16_Template_ccpay_contact_details_assignContactDetails_10_listener($event) { i0.ɵɵrestoreView(_r177); const ctx_r176 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r176.getContactDetails($event, "addrefundcheckandanswer")); })("redirectToIssueRefund", function AddRemissionComponent_ng_container_16_Template_ccpay_contact_details_redirectToIssueRefund_10_listener($event) { i0.ɵɵrestoreView(_r177); const ctx_r178 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r178.gotoServiceRequestPage($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "p")(12, "a", 60);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_16_Template_a_click_12_listener($event) { i0.ɵɵrestoreView(_r177); const ctx_r179 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r179.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 3, ctx_r15.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r15.paymentReference, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("addressObj", ctx_r15.notification);
} }
function AddRemissionComponent_ng_container_17_div_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r181 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r181.contactDetailsObj == null ? null : ctx_r181.contactDetailsObj.email == null ? null : ctx_r181.contactDetailsObj.email.trim(), " ");
} }
function AddRemissionComponent_ng_container_17_div_44_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r182 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r182.contactDetailsObj == null ? null : ctx_r182.contactDetailsObj.address_line == null ? null : ctx_r182.contactDetailsObj.address_line.trim(), "\u00A0", ctx_r182.contactDetailsObj == null ? null : ctx_r182.contactDetailsObj.city == null ? null : ctx_r182.contactDetailsObj.city.trim(), "\u00A0", ctx_r182.contactDetailsObj == null ? null : ctx_r182.contactDetailsObj.county == null ? null : ctx_r182.contactDetailsObj.county.trim(), "\u00A0", ctx_r182.contactDetailsObj == null ? null : ctx_r182.contactDetailsObj.country == null ? null : ctx_r182.contactDetailsObj.country.trim(), "\u00A0", ctx_r182.contactDetailsObj == null ? null : ctx_r182.contactDetailsObj.postal_code == null ? null : ctx_r182.contactDetailsObj.postal_code.trim(), " ");
} }
function AddRemissionComponent_ng_container_17_a_52_Template(rf, ctx) { if (rf & 1) {
    const _r187 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 66);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_17_a_52_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r187); const ctx_r186 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r186.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_17_a_53_Template(rf, ctx) { if (rf & 1) {
    const _r189 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 66);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_17_a_53_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r189); const ctx_r188 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r188.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function AddRemissionComponent_ng_container_17_app_notification_preview_54_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 137);
} if (rf & 2) {
    const ctx_r185 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("contactDetails", ctx_r185.contactDetailsObj)("paymentReference", ctx_r185.paymentReference)("payment", ctx_r185.paymentObj)("refundReason", "RR036")("refundAmount", ctx_r185.remission.hwf_amount);
} }
function AddRemissionComponent_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    const _r191 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 135, 7);
    i0.ɵɵelementStart(3, "div", 24)(4, "h1", 8);
    i0.ɵɵtext(5, " Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "table", 28)(7, "tr", 29)(8, "td", 30);
    i0.ɵɵtext(9, "Reason for refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 31);
    i0.ɵɵtext(11, "Retrospective remission");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 29)(13, "td", 30);
    i0.ɵɵtext(14, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 31);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(17, "tr", 29)(18, "td", 30);
    i0.ɵɵtext(19, "Refund amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(20, "td", 31);
    i0.ɵɵtext(21);
    i0.ɵɵpipe(22, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(23, "tr", 29)(24, "td", 30);
    i0.ɵɵtext(25, "Fee code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "td", 31);
    i0.ɵɵtext(27);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(28, "tr", 29)(29, "td", 30);
    i0.ɵɵtext(30, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(31, "td", 31);
    i0.ɵɵtext(32);
    i0.ɵɵpipe(33, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(34, "tr", 29)(35, "td", 30);
    i0.ɵɵtext(36, "Send to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(37, "td", 31);
    i0.ɵɵtext(38);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(39, "tr", 29)(40, "td", 30);
    i0.ɵɵtext(41, "Send via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(42, "td", 61);
    i0.ɵɵtemplate(43, AddRemissionComponent_ng_container_17_div_43_Template, 5, 1, "div", 62);
    i0.ɵɵtemplate(44, AddRemissionComponent_ng_container_17_div_44_Template, 5, 5, "div", 62);
    i0.ɵɵelementStart(45, "a", 47);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_17_Template_a_click_45_listener() { i0.ɵɵrestoreView(_r191); const ctx_r190 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r190.gotoAddressPage(ctx_r190.contactDetailsObj)); });
    i0.ɵɵtext(46, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(47, "tr", 29)(48, "td", 30);
    i0.ɵɵtext(49, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(50, "td", 31);
    i0.ɵɵtext(51);
    i0.ɵɵtemplate(52, AddRemissionComponent_ng_container_17_a_52_Template, 2, 0, "a", 63);
    i0.ɵɵtemplate(53, AddRemissionComponent_ng_container_17_a_53_Template, 2, 0, "a", 63);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(54, AddRemissionComponent_ng_container_17_app_notification_preview_54_Template, 1, 5, "app-notification-preview", 136);
    i0.ɵɵelementStart(55, "div", 36)(56, "button", 32);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_17_Template_button_click_56_listener() { i0.ɵɵrestoreView(_r191); const ctx_r192 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r192.gotoAddressPage(ctx_r192.contactDetailsObj)); });
    i0.ɵɵtext(57, "Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(58, "button", 33);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_17_Template_button_click_58_listener() { i0.ɵɵrestoreView(_r191); const ctx_r193 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r193.processRefund()); });
    i0.ɵɵtext(59, " Submit refund ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(60, "p")(61, "a", 45);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_17_Template_a_click_61_listener($event) { i0.ɵɵrestoreView(_r191); const ctx_r194 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r194.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(62, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext();
    i0.ɵɵadvance(16);
    i0.ɵɵtextInterpolate(ctx_r16.paymentReference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(22, 13, ctx_r16.remission.hwf_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r16.remission.fee_code);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(33, 18, ctx_r16.feeamount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r16.orderParty);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r16.contactDetailsObj == null ? null : ctx_r16.contactDetailsObj.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r16.contactDetailsObj == null ? null : ctx_r16.contactDetailsObj.notification_type) === "LETTER");
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("", ctx_r16.templateInstructionType, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r16.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r16.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r16.notificationPreview);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("disabled", ctx_r16.isConfirmationBtnDisabled)("ngClass", ctx_r16.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function AddRemissionComponent_ng_container_18_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "h2", 57);
    i0.ɵɵtext(2, "What happens next");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "p", 54);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r195 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" A refund request for ", i0.ɵɵpipeBind4(5, 1, ctx_r195.refundAmount, "GBP", "symbol-narrow", "1.2-2"), " has been passed to a team leader to approve. ");
} }
function AddRemissionComponent_ng_container_18_Template(rf, ctx) { if (rf & 1) {
    const _r197 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 50)(2, "div")(3, "div", 69)(4, "h1", 52);
    i0.ɵɵtext(5, " Refund submitted ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "div", 55)(7, "p", 70)(8, "strong");
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵtemplate(10, AddRemissionComponent_ng_container_18_div_10_Template, 6, 6, "div", 1);
    i0.ɵɵelementStart(11, "p", 54)(12, "a", 39);
    i0.ɵɵlistener("click", function AddRemissionComponent_ng_container_18_Template_a_click_12_listener($event) { i0.ɵɵrestoreView(_r197); const ctx_r196 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r196.gotoCasetransationPageCancelBtnClicked($event)); });
    i0.ɵɵtext(13, " Return to case ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext();
    i0.ɵɵadvance(9);
    i0.ɵɵtextInterpolate1("Refund reference: ", ctx_r17.refundReference, "");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r17.isPaymentSuccess);
} }
function AddRemissionComponent_ng_container_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "ccpay-service-request", 138);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("viewStatus", ctx_r18.viewStatus)("orderRef", ctx_r18.orderRef)("isServiceRequest", ctx_r18.isServiceRequest)("orderStatus", ctx_r18.orderStatus)("orderCreated", ctx_r18.orderCreated)("orderParty", ctx_r18.orderParty)("orderCCDEvent", ctx_r18.orderCCDEvent)("orderDetail", ctx_r18.orderDetail)("LOGGEDINUSERROLES", ctx_r18.LOGGEDINUSERROLES)("takePayment", ctx_r18.takePayment)("ccdCaseNumber", ctx_r18.ccdCaseNumber)("orderFeesTotal", ctx_r18.orderFeesTotal)("orderTotalPayments", ctx_r18.orderTotalPayments)("orderRemissionTotal", ctx_r18.orderRemissionTotal);
} }
function AddRemissionComponent_ng_container_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "ccpay-payment-view", 139);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("LOGGEDINUSERROLES", ctx_r19.LOGGEDINUSERROLES)("isTurnOff", ctx_r19.isTurnOff)("isTakePayment", ctx_r19.takePayment)("caseType", ctx_r19.caseType)("isServiceRequest", ctx_r19.isServiceRequest)("orderRef", ctx_r19.orderRef)("orderStatus", ctx_r19.orderStatus)("orderCreated", ctx_r19.orderCreated)("orderParty", ctx_r19.orderParty)("orderCCDEvent", ctx_r19.orderCCDEvent)("orderDetail", ctx_r19.orderDetail)("orderFeesTotal", ctx_r19.orderFeesTotal)("orderTotalPayments", ctx_r19.orderTotalPayments)("orderRemissionTotal", ctx_r19.orderRemissionTotal);
} }
const BS_ENABLE_FLAG$4 = 'bulk-scan-enabling-fe';
const resolvedPromise = Promise.resolve(null);
class AddRemissionComponent {
    formBuilder;
    router;
    paymentViewService;
    notificationService;
    paymentLibComponent;
    refundService;
    cd;
    OrderslistService;
    fee;
    fees;
    payment;
    remission;
    ccdCaseNumber;
    caseType;
    viewCompStatus;
    paymentGroupRef;
    isTurnOff;
    isRefundRemission;
    isStrategicFixEnable;
    paidAmount;
    isFromRefundListPage;
    isFromPaymentDetailPage;
    isFromServiceRequestPage;
    isFullyRefund;
    feeamount;
    refundPaymentReference;
    isFromRefundStatusPage;
    changeRefundReason;
    isServiceRequest;
    LOGGEDINUSERROLES;
    orderDetail;
    orderRef;
    orderStatus;
    orderParty;
    orderCreated;
    orderCCDEvent;
    takePayment;
    orderFeesTotal;
    orderTotalPayments;
    orderRemissionTotal;
    cancelRemission = new EventEmitter();
    //@Output() refundListReason: EventEmitter<any> = new EventEmitter({reason:string, code:string});
    refundListReason = new EventEmitter();
    refundListAmount = new EventEmitter();
    refundFees = new EventEmitter();
    refund = {
        reason: {
            duplicate: 'Duplicate payment',
            humanerror: 'Human error',
            caseWithdrawn: 'Case withdrawn',
            other: 'Other'
        }
    };
    contactDetailsObj;
    notification;
    remissionForm;
    hasErrors = false;
    viewStatus = 'main';
    errorMessage = null;
    option = null;
    isConfirmationBtnDisabled = false;
    bsPaymentDcnNumber;
    selectedValue = 'yes';
    amount;
    retroRemission = false;
    remissionReference = '';
    refundReference;
    refundAmount;
    paymentExplanationHasError = false;
    refundReason;
    selectedRefundReason;
    selectedRefundReasonCode;
    displayRefundReason;
    refundCode;
    remessionPayment;
    isRemissionCodeEmpty = false;
    remissionCodeHasError = false;
    isAmountEmpty = false;
    isReasonEmpty = false;
    amountHasError = false;
    isRemissionLessThanFeeError = false;
    refundHasError = false;
    isPaymentSuccess = false;
    isRemissionApplied = false;
    remissionamt;
    elementId;
    // refundReasons: any[] = [];
    commonRefundReasons = [];
    showReasonText;
    isRefundReasonsSelected;
    default;
    reasonLength;
    refundReasons;
    pattern1;
    pattern2;
    sendOrderDetail;
    sendOrderRef;
    paymentReference;
    class = '';
    errorMsg = new Array();
    totalRefundAmount;
    quantityUpdated;
    fullRefund;
    allowedRefundAmount;
    isRemissionsMatch;
    paymentFees;
    paymentGroup;
    isStatusAllocated;
    isFromCheckAnsPage;
    refundAmtForFeeVolumes;
    paymentObj;
    templateInstructionType;
    notificationPreview;
    component;
    constructor(formBuilder, router, paymentViewService, notificationService, paymentLibComponent, refundService, cd, OrderslistService) {
        this.formBuilder = formBuilder;
        this.router = router;
        this.paymentViewService = paymentViewService;
        this.notificationService = notificationService;
        this.paymentLibComponent = paymentLibComponent;
        this.refundService = refundService;
        this.cd = cd;
        this.OrderslistService = OrderslistService;
    }
    ngOnInit() {
        this.errorMessage = '';
        this.errorMsg = [];
        this.default = 'Select a different reason';
        this.pattern1 = '^([a-zA-Z0-9]{3})-([a-zA-Z0-9]{3})-([a-zA-Z0-9]{3})$';
        this.pattern2 = '^([A-Za-z]{2}[0-9]{2})-([0-9]{6})$';
        if (this.viewCompStatus !== '' && this.viewCompStatus !== undefined) {
            this.viewStatus = '';
        }
        if (this.remission) {
        }
        if (this.fee) {
            this.amount = (this.fee.volume * this.fee.calculated_amount);
        }
        if (this.payment) {
            this.paymentReference = this.payment.reference;
            this.remessionPayment = this.payment;
            if (this.payment.status === 'Success') {
                this.isPaymentSuccess = true;
            }
        }
        this.option = this.paymentLibComponent.SELECTED_OPTION;
        this.bsPaymentDcnNumber = this.paymentLibComponent.bspaymentdcn;
        this.remissionForm = this.formBuilder.group({
            remissionCode: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern(`(${this.pattern1})|(${this.pattern2})`)
            ])),
            amount: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^[0-9]+(\.[0-9]{1,2})?$')
            ])),
            refundReason: new FormControl('', Validators.compose([Validators.required])),
            refundDDReason: new FormControl('', Validators.compose([Validators.required])),
            reason: new FormControl(),
            feeAmount: new FormControl(),
            feesList: this.formBuilder.array([])
        });
        const remissionctrls = this.remissionForm.controls;
        remissionctrls['refundDDReason'].setValue('Select a different reason', { onlySelf: true });
        if (this.refundPaymentReference !== undefined && this.refundPaymentReference.length > 0) {
            this.paymentReference = this.refundPaymentReference;
        }
        else {
            this.paymentReference = (this.payment !== undefined) ? this.payment.reference : '';
        }
        if (this.isFromServiceRequestPage) {
            this.paymentViewService.getApportionPaymentDetails(this.paymentReference).subscribe(paymentGroup => {
                let fees = [];
                paymentGroup.fees.forEach(fee => {
                    this.isRemissionsMatch = false;
                    paymentGroup.remissions.forEach(rem => {
                        if (rem.fee_code === fee.code) {
                            this.isRemissionsMatch = true;
                            fee['remissions'] = rem;
                            fees.push(fee);
                        }
                    });
                    if (!this.isRemissionsMatch) {
                        fees.push(fee);
                    }
                });
                paymentGroup.fees = fees;
                this.paymentFees = fees;
                this.fees = fees;
                this.paymentGroup = paymentGroup;
                this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(this.paymentLibComponent.paymentReference));
                // const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
                // this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
                this.refundFeesList();
            }, (error) => this.errorMessage = error);
        }
        if (this.fees && this.viewCompStatus === 'issuerefund') {
            this.refundFeesList();
        }
        if (this.viewCompStatus === '') {
            this.viewStatus = 'main';
        }
        if (this.viewCompStatus === 'issuerefundpage1') {
            this.refundService.getRefundReasons().subscribe(refundReasons => {
                this.refundReasons = refundReasons.filter((data) => data.recently_used === false);
                this.refundReasons = this.refundReasons.filter((data) => data.name !== 'Retrospective remission' && data.name !== 'Overpayment');
                this.cd.detectChanges();
                this.commonRefundReasons = refundReasons.filter((data) => data.recently_used === true);
                this.commonRefundReasons.sort((a, b) => a.toString().localeCompare(b));
                this.cd.detectChanges();
            });
            this.refundReason = this.changeRefundReason;
        }
        if (this.viewCompStatus === 'processretroremissonpage' && this.isFromRefundListPage) {
            this.viewStatus = 'processretroremissonpage';
        }
        if (this.orderDetail !== undefined) {
            this.paymentViewService.getApportionPaymentDetails(this.orderDetail[0].payments[0].reference).subscribe(paymentGroup => {
                this.fees = paymentGroup.fees;
                this.paymentReference = paymentGroup.payments[0].reference;
            }, (error) => this.errorMessage = error);
        }
    }
    goToPaymentViewComponent() {
        this.paymentLibComponent.paymentMethod = this.payment.method;
        this.paymentLibComponent.paymentGroupReference = this.paymentGroupRef;
        this.paymentLibComponent.paymentReference = this.paymentReference;
        //this.PaymentViewComponent.viewCompStatus = 'overpayment';
        this.paymentLibComponent.viewName = 'payment-view';
    }
    refundFeesList() {
        const creds = this.remissionForm.controls.feesList;
        // if(creds.controls.length > 0) {
        for (var i = 0; i < this.fees.length; i++) {
            creds.push(this.formBuilder.group({
                id: this.fees[i].id,
                code: this.fees[i].code,
                volume: this.fees[i].volume,
                calculated_amount: this.fees[i].calculated_amount,
                apportion_amount: this.fees[i].apportion_amount,
                ccd_case_number: this.fees[i].ccd_case_number,
                description: this.fees[i].description,
                net_amount: this.fees[i].net_amount,
                version: this.fees[i].version,
                refund_amount: [''],
                selected: [''],
                updated_volume: this.fees[i].volume
            }));
        }
        this.cd.detectChanges();
        //}
    }
    get feesList() {
        const dd = this.remissionForm.get('feesList');
        return this.remissionForm.get('feesList');
    }
    noneSelected() {
        if (this.isFullyRefund) {
            return false;
        }
        else {
            if (!this.feesList.controls.some(item => item.get('selected').value === true)) {
                this.errorMsg = [];
                [].forEach.call(document.querySelectorAll('input'), function (el) {
                    el.classList.remove('inline-error-class');
                });
            }
            return !this.feesList.controls.some(item => item.get('selected').value === true);
        }
    }
    check_en(i, v1, AppAmt, Volume) {
        const ele = document.getElementById(v1);
        const formArray = this.remissionForm.controls.feesList;
        if (ele.checked) {
            formArray.at(i).get('refund_amount').setValue(AppAmt);
            formArray.at(i).get('volume').setValue(Volume);
            formArray.at(i).get('selected').setValue(true);
            formArray.at(i).get('updated_volume').setValue(Volume);
            document.getElementById('feeAmount_' + v1).value = AppAmt;
            document.getElementById('feeAmount_' + v1).removeAttribute("disabled");
            if (Volume === 1) {
                document.getElementById('VolumeUpdated_' + v1).value = Volume;
            }
            else {
                document.getElementById('feeVolumeUpdated_' + v1).value = Volume;
            }
            if (document.getElementById('feeVolumeUpdated_' + v1) !== null) {
                document.getElementById('feeAmount_' + v1).removeAttribute("disabled");
                document.getElementById('feeVolumeUpdated_' + v1).removeAttribute("disabled");
            }
            this.cd.detectChanges();
        }
        else {
            this.errorMsg = [];
            document.getElementById('feeAmount_' + v1).setAttribute("disabled", "true");
            this.remissionForm.value.feesList[i]["refund_amount"] = '';
            this.remissionForm.value.feesList[i]["volume"] = '';
            this.remissionForm.value.feesList[i]["selected"] = false;
            document.getElementById('feeAmount_' + v1).value = '';
            if (Volume > 1) {
                this.remissionForm.value.feesList[i]["volume"] = '';
                document.getElementById('feeVolumeUpdated_' + v1).value = '';
            }
            if (document.getElementById('feeVolumeUpdated_' + v1) !== null) {
                document.getElementById('feeVolumeUpdated_' + v1).removeAttribute("disabled");
            }
            this.cd.detectChanges();
        }
    }
    addRemission() {
        this.resetRemissionForm([false, false, false, false, false, false], 'All');
        const remissionctrls = this.remissionForm.controls, isRemissionLessThanFee = this.fee.calculated_amount > remissionctrls.amount.value;
        this.remissionForm.controls['refundReason'].setErrors(null);
        this.remissionForm.controls['refundDDReason'].setErrors(null);
        if (this.remissionForm.dirty && this.remissionForm.valid && isRemissionLessThanFee) {
            this.viewStatus = 'confirmation';
        }
        else {
            if (remissionctrls['remissionCode'].value == '') {
                this.resetRemissionForm([true, false, false, false, false, false], 'remissionCode');
            }
            if (remissionctrls['remissionCode'].value != '' && remissionctrls['remissionCode'].invalid) {
                this.resetRemissionForm([false, true, false, false, false, false], 'remissionCode');
            }
            if (remissionctrls['amount'].value == '') {
                this.resetRemissionForm([false, false, true, false, false, false], 'amount');
            }
            if (remissionctrls['amount'].value != '' && remissionctrls['amount'].invalid) {
                this.resetRemissionForm([false, true, false, true, false, false], 'amount');
            }
            if (remissionctrls.amount.valid && !isRemissionLessThanFee) {
                this.resetRemissionForm([false, false, false, false, true, false], 'amount');
            }
        }
    }
    confirmRemission() {
        this.isConfirmationBtnDisabled = true;
        const newNetAmount = this.remissionForm.controls.amount.value, remissionAmount = this.fee.net_amount - newNetAmount, requestBody = new AddRemissionRequest(this.ccdCaseNumber, this.fee, remissionAmount, this.remissionForm.controls.remissionCode.value, this.caseType);
        this.paymentViewService.postPaymentGroupWithRemissions(decodeURIComponent(this.paymentGroupRef).trim(), this.fee.id, requestBody).subscribe(response => {
            if (JSON.parse(response).success) {
                let LDUrl = this.isTurnOff ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
                LDUrl += `&caseType=${this.caseType}`;
                if (this.paymentLibComponent.bspaymentdcn) {
                    this.router.routeReuseStrategy.shouldReuseRoute = () => false;
                    this.router.onSameUrlNavigation = 'reload';
                    this.router.navigateByUrl(`/payment-history/${this.ccdCaseNumber}?view=fee-summary&selectedOption=${this.option}&paymentGroupRef=${this.paymentGroupRef}&dcn=${this.paymentLibComponent.bspaymentdcn}${LDUrl}`);
                }
                else {
                    this.gotoCasetransationPage();
                }
            }
        }, (error) => {
            this.errorMessage = error;
            this.isConfirmationBtnDisabled = false;
        });
    }
    resetRemissionForm(val, field) {
        if (field === 'All') {
            this.isRemissionCodeEmpty = val[0];
            this.remissionCodeHasError = val[1];
            this.isAmountEmpty = val[2];
            this.amountHasError = val[3];
            this.isRemissionLessThanFeeError = val[4];
            this.isReasonEmpty = val[5];
        }
        else if (field === 'remissionCode' || field === 'All') {
            this.isRemissionCodeEmpty = val[0];
            this.remissionCodeHasError = val[1];
        }
        else if (field === 'amount' || field === 'All') {
            this.isAmountEmpty = val[2];
            this.amountHasError = val[3];
            this.isRemissionLessThanFeeError = val[4];
        }
        else if (field === 'reason' || field === 'All') {
            this.isReasonEmpty = val[5];
        }
    }
    // Add retro remission changes
    addRemissionCode() {
        this.errorMessage = false;
        // this.isFromCheckAnsPage = true;
        this.errorMsg = [];
        this.viewStatus = '';
        this.isRefundRemission = false;
        this.resetRemissionForm([false, false, false, false, false, false], 'All');
        const remissionctrls = this.remissionForm.controls;
        // isRemissionLessThanFee = this.fee.calculated_amount >= remissionctrls.amount.value;
        this.remissionForm.controls['refundReason'].setErrors(null);
        this.remissionForm.controls['refundDDReason'].setErrors(null);
        this.remissionForm.controls['amount'].setErrors(null);
        if (this.remissionForm.dirty && this.remissionForm.valid) {
            if (!this.isFromCheckAnsPage) {
                this.viewCompStatus = '';
                this.viewStatus = "processretroremissonpage";
            }
            else {
                this.viewCompStatus = '';
                this.viewStatus = 'checkretroremissionpage';
            }
        }
        else {
            if (remissionctrls['remissionCode'].value == '') {
                this.resetRemissionForm([true, false, false, false, false], 'remissionCode');
            }
            if (remissionctrls['remissionCode'].value != '' && remissionctrls['remissionCode'].invalid) {
                this.resetRemissionForm([false, true, false, false, false], 'remissionCode');
            }
            if (remissionctrls['amount'].value == '') {
                this.resetRemissionForm([false, false, true, false, false], 'amount');
            }
            if (remissionctrls['amount'].value != '' && remissionctrls['amount'].invalid) {
                this.resetRemissionForm([false, true, false, true, false], 'amount');
            }
            if (remissionctrls['reason'].value == '') {
                this.resetRemissionForm([false, false, false, true, false, true], 'reason');
            }
            if (remissionctrls.amount.valid) {
                this.resetRemissionForm([false, false, false, false, true], 'amount');
            }
        }
    }
    gotoAddRetroRemissionCodePage() {
        this.errorMessage = false;
        this.isFromCheckAnsPage = false;
        this.errorMsg = [];
        if (this.isRefundRemission) {
            this.refundListAmount.emit();
            this.paymentLibComponent.isFromRefundStatusPage = true;
            return;
        }
        if (this.isFromRefundListPage) {
            this.paymentLibComponent.iscancelClicked = true;
            this.refundListReason.emit({ reason: this.selectedRefundReason, code: this.refundReason });
            this.paymentLibComponent.isFromRefundStatusPage = true;
            return;
        }
        this.viewStatus = '';
        this.selectedValue = 'yes';
        this.viewCompStatus = "addremission";
        this.isRefundRemission = true;
        this.errorMessage = '';
        this.errorMsg = [];
        if (this.isFromPaymentDetailPage) {
            this.paymentLibComponent.viewName = 'payment-view';
        }
    }
    gotoCheckRetroRemissionPage(payment) {
        this.paymentLibComponent.iscancelClicked = false;
        this.errorMessage = '';
        this.resetRemissionForm([false, false, false, false, false], 'All');
        if (!this.isRefundRemission) {
            var remissionctrls = this.remissionForm.controls, isRemissionLessThanFee = this.fee.calculated_amount >= remissionctrls.amount.value;
            if (this.remissionForm.dirty) {
                if (remissionctrls['amount'].value == '' || remissionctrls['amount'].value < 0) {
                    this.resetRemissionForm([false, false, true, false, false], 'amount');
                }
                else if (remissionctrls['amount'].value != '' && remissionctrls['amount'].invalid) {
                    this.resetRemissionForm([false, false, false, true, false], 'amount');
                }
                else if (remissionctrls.amount.valid && !isRemissionLessThanFee) {
                    this.resetRemissionForm([false, false, false, false, true], 'amount');
                }
                else {
                    this.viewCompStatus = '';
                    this.viewStatus = "checkretroremissionpage";
                }
            }
        }
        else {
            var remissionctrls = this.remissionForm.controls;
            //if (this.remissionForm.dirty ) {
            if (remissionctrls['amount'].value == '' || remissionctrls['amount'].value < 0) {
                this.resetRemissionForm([false, false, true, false, false], 'amount');
            }
            else {
                this.viewCompStatus = '';
                this.viewStatus = "checkretroremissionpage";
                this.refundListAmount.emit(remissionctrls['amount'].value);
            }
            //}
        }
    }
    gotoAmountRetroRemission() {
        this.isFromCheckAnsPage = false;
        this.viewStatus = 'processretroremissonpage';
        this.viewCompStatus = '';
        // this.isRefundRemission = true;
        this.errorMessage = '';
    }
    gotoProcessRetroRemissionPage() {
        this.isFromCheckAnsPage = true;
        this.viewStatus = '';
        this.viewCompStatus = 'addremission';
        this.isRefundRemission = true;
        this.errorMessage = '';
        this.errorMsg = [];
    }
    gotoProcessRetroRemission(note) {
        if (note) {
            this.notification = { contact_details: note, notification_type: note.notification_type };
        }
        this.isFromCheckAnsPage = true;
        this.viewStatus = 'remissionAddressPage';
        this.viewCompStatus = '';
        this.isRefundRemission = true;
        this.errorMessage = '';
    }
    confirmRetroRemission() {
        if (!this.isConfirmationBtnDisabled) {
            this.retroRemission = true;
            this.remissionamt = this.remissionForm.controls.amount.value;
            const requestBody = new AddRetroRemissionRequest(this.remissionamt, this.remissionForm.controls.remissionCode.value);
            this.paymentViewService.postPaymentGroupWithRetroRemissions(decodeURIComponent(this.paymentGroupRef).trim(), this.fee.id, requestBody).subscribe(response => {
                if (JSON.parse(response)) {
                    this.isRemissionApplied = true;
                    this.viewCompStatus = '';
                    this.viewStatus = 'retroremissionconfirmationpage';
                    this.remissionReference = JSON.parse(response).remission_reference;
                }
            }, (error) => {
                this.errorMessage = error;
                this.isConfirmationBtnDisabled = false;
                this.cd.detectChanges();
            });
        }
    }
    processRefund() {
        this.errorMessage = '';
        this.errorMsg = [];
        this.isConfirmationBtnDisabled = true;
        if (this.isRefundRemission) {
            this.retroRemission = true;
        }
        if (this.remissionReference === undefined || this.remissionReference === '') {
            this.remissionReference = this.remission.remission_reference;
        }
        const requestBody = new PostIssueRefundRetroRemission(this.remissionReference, this.contactDetailsObj);
        this.paymentViewService.postRefundRetroRemission(requestBody).subscribe(response => {
            if (JSON.parse(response)) {
                this.viewCompStatus = '';
                this.viewStatus = 'refundconfirmationpage';
                this.refundReference = JSON.parse(response).refund_reference;
                this.refundAmount = JSON.parse(response).refund_amount;
            }
        }, (error) => {
            this.errorMessage = error;
            this.isConfirmationBtnDisabled = false;
        });
    }
    // Issue Refund changes
    gotoIssueRefundConfirmation(payment) {
        this.paymentLibComponent.iscancelClicked = false;
        if (this.paymentLibComponent.REFUNDLIST === "true") {
            this.isFromRefundListPage = true;
        }
        this.totalRefundAmount = this.remissionForm.value.feesList.reduce((a, c) => a + c.refund_amount * c.selected, 0);
        this.errorMessage = '';
        this.errorMsg = [];
        this.refundReason = this.remissionForm.controls['refundReason'].value === null ? this.remissionForm.controls['refundDDReason'].value : this.remissionForm.controls['refundReason'].value;
        if (!this.refundReason || this.refundReason === 'Select a different reason') {
            this.refundHasError = true;
        }
        else if (this.selectedRefundReason.includes('Other') && (this.remissionForm.controls['reason'].value == '' || this.remissionForm.controls['reason'].value == null)) {
            this.resetRemissionForm([false, false, false, true, false, true], 'reason');
        }
        else if (this.selectedRefundReason.includes('Other') && this.remissionForm.controls['reason'].value !== '') {
            this.refundHasError = false;
            this.refundReason += '-' + this.remissionForm.controls['reason'].value;
            this.displayRefundReason = this.selectedRefundReason + '-' + this.remissionForm.controls['reason'].value;
            if (this.isFromRefundListPage) {
                this.refundListReason.emit({ reason: this.displayRefundReason, code: this.refundReason });
            }
            else {
                if (this.isFromCheckAnsPage) {
                    this.totalRefundAmount = this.remissionForm.value.feesList.reduce((a, c) => a + c.refund_amount * c.selected, 0);
                    this.isFromCheckAnsPage = false;
                    this.viewStatus = 'checkissuerefundpage';
                    this.viewCompStatus = '';
                    this.notificationPreview = false;
                    return;
                }
                this.viewCompStatus = '';
                this.viewStatus = 'contactDetailsPage';
            }
        }
        else {
            this.displayRefundReason = this.selectedRefundReason;
            if (this.isFromCheckAnsPage) {
                this.totalRefundAmount = this.remissionForm.value.feesList.reduce((a, c) => a + c.refund_amount * c.selected, 0);
                this.isFromCheckAnsPage = false;
                this.viewStatus = 'checkissuerefundpage';
                this.viewCompStatus = '';
                this.notificationPreview = false;
                return;
            }
            if (this.isFromRefundListPage) {
                this.paymentLibComponent.isFromRefundStatusPage = true;
                this.refundListReason.emit({ reason: this.selectedRefundReason, code: this.refundReason });
            }
            else {
                this.viewCompStatus = '';
                this.viewStatus = 'contactDetailsPage';
            }
        }
    }
    gotoIssueRefundPage() {
        this.errorMessage = '';
        this.viewCompStatus = 'issuerefund';
        this.viewStatus = '';
        this.isRefundRemission = true;
        this.errorMessage = false;
        this.errorMsg = [];
        this.refundHasError = false;
        this.isReasonEmpty = false;
    }
    gotoIssuePage(isFullyRefund) {
        if (isFullyRefund) {
            this.viewCompStatus = 'issuerefundpage1';
            this.getRefundReasons();
        }
        else {
            [].forEach.call(document.querySelectorAll('input'), function (el) {
                el.classList.remove('inline-error-class');
            });
            var checkboxs = document.getElementsByTagName('input');
            this.errorMessage = '';
            this.totalRefundAmount = 0;
            this.errorMsg = [];
            for (var j = 0; j < checkboxs.length; j++) {
                if (checkboxs[j].checked) {
                    this.fullRefund = false;
                    let quantity = +document.getElementById('feeVolume_' + checkboxs[j].value).value;
                    let amountToRefund = +document.getElementById('feeAmount_' + checkboxs[j].value).value;
                    let apportionAmount = +document.getElementById('feeApportionAmount_' + checkboxs[j].value).value;
                    let calculatedAmount = +document.getElementById('calculatedAmount_' + checkboxs[j].value).value;
                    if (amountToRefund === apportionAmount) {
                        this.fullRefund = true;
                    }
                    if (amountToRefund === 0) {
                        this.elementId = 'feeAmount_' + checkboxs[j].value;
                        this.errorMsg.push('You need to enter a refund amount');
                        this.getErrorClass(this.elementId);
                    }
                    if (quantity === 1) {
                        if (amountToRefund > 0 && amountToRefund > apportionAmount) {
                            this.elementId = 'feeAmount_' + checkboxs[j].value;
                            this.errorMsg.push('The amount you want to refund is more than the amount paid');
                            this.getErrorClass(this.elementId);
                        }
                    }
                    if (quantity > 1) {
                        this.quantityUpdated = +document.getElementById('feeVolumeUpdated_' + checkboxs[j].value).value;
                        if (this.quantityUpdated === 0) {
                            this.elementId = 'feeVolumeUpdated_' + checkboxs[j].value;
                            this.errorMsg.push('You need to enter quantity');
                            this.getErrorClass(this.elementId);
                        }
                        if (this.fullRefund && quantity !== this.quantityUpdated) {
                            this.elementId = 'feeVolumeUpdated_' + checkboxs[j].value;
                            this.errorMsg.push('The quantity you want to refund should be maximun available quantity');
                            this.getErrorClass(this.elementId);
                        }
                        if (!this.fullRefund && this.quantityUpdated > 0 && amountToRefund > 0) {
                            this.refundAmtForFeeVolumes = +document.getElementById('feeVOl_' + checkboxs[j].value).innerText;
                            this.allowedRefundAmount = this.quantityUpdated * this.refundAmtForFeeVolumes;
                            if (this.allowedRefundAmount !== amountToRefund) {
                                this.elementId = 'feeAmount_' + checkboxs[j].value;
                                this.errorMsg.push('The Amount to Refund should be equal to the product of Fee Amount and quantity');
                                this.getErrorClass(this.elementId);
                            }
                        }
                        if (!this.fullRefund && amountToRefund > apportionAmount) {
                            this.elementId = 'feeAmount_' + checkboxs[j].value;
                            this.errorMsg.push('The amount you want to refund is more than the amount paid');
                            this.getErrorClass(this.elementId);
                        }
                        if (!this.fullRefund && this.quantityUpdated > 0 && this.quantityUpdated > quantity) {
                            this.elementId = 'feeVolumeUpdated_' + checkboxs[j].value;
                            this.errorMsg.push('The quantity you want to refund is more than the available quantity');
                            this.getErrorClass(this.elementId);
                        }
                    }
                    //this.remissionForm.value.feesList.find(id=>id=checkboxs[j].value)['refund_amount'] = apportionAmount;
                }
            }
            if (this.errorMsg.length === 0) {
                if (this.isFromCheckAnsPage) {
                    this.isFromCheckAnsPage = false;
                    this.totalRefundAmount = this.remissionForm.value.feesList.reduce((a, c) => a + c.refund_amount * c.selected, 0);
                    this.fees = this.remissionForm.value.feesList.filter(value => value.selected === true);
                    this.viewStatus = 'checkissuerefundpage';
                    this.viewCompStatus = '';
                    this.notificationPreview = false;
                    return;
                }
                else if (this.isFromRefundStatusPage) {
                    var remissionctrls = this.remissionForm.controls;
                    this.totalRefundAmount = this.remissionForm.value.feesList.reduce((a, c) => a + c.refund_amount * c.selected, 0);
                    this.refundListAmount.emit(this.totalRefundAmount.toString());
                    this.fees = this.remissionForm.value.feesList.filter(value => value.selected === true);
                    this.refundFees.emit(this.fees);
                    return;
                }
                this.viewCompStatus = 'issuerefundpage1';
                this.getRefundReasons();
            }
        }
    }
    calAmtToRefund(value, amount, volume, i) {
        const volumeFee = amount / volume;
        const amtToRefund = value * volumeFee;
        const formArray = this.remissionForm.controls.feesList;
        formArray.at(i).get('refund_amount').setValue(amtToRefund);
        // formArray.at(i).get('volume').setValue(value);
        //  (<HTMLInputElement>document.getElementById('feeAmount_'+i)).value = +amtToRefund;
        //  const formControl = this.remissionForm.controls.feesList['volume'].at(i);
        //  formControl.setValue(value);
    }
    gotoContactDetailsPage(note) {
        if (note) {
            this.notification = { contact_details: note, notification_type: note.notification_type };
        }
        this.errorMessage = '';
        this.viewCompStatus = '';
        this.viewStatus = 'contactDetailsPage';
        this.isRefundRemission = true;
        this.errorMessage = false;
    }
    getRefundReasons() {
        if (this.viewCompStatus === 'issuerefundpage1') {
            this.refundService.getRefundReasons().subscribe(refundReasons => {
                this.refundReasons = refundReasons.filter((data) => data.recently_used === false);
                this.refundReasons = this.refundReasons.filter((data) => data.name !== 'Retrospective remission');
                this.cd.detectChanges();
                this.commonRefundReasons = refundReasons.filter((data) => data.recently_used === true);
                this.commonRefundReasons.sort((a, b) => a.toString().localeCompare(b));
                this.cd.detectChanges();
            });
        }
    }
    getErrorClass(elementId) {
        if (this.errorMsg.length > 0) {
            const ele = document.getElementById(elementId);
            ele.classList.add('inline-error-class');
        }
    }
    changeIssueRefundReason() {
        this.isFromCheckAnsPage = true;
        this.errorMessage = '';
        this.errorMsg = [];
        this.refundHasError = false;
        this.isReasonEmpty = false;
        this.viewCompStatus = 'issuerefundpage1';
        this.viewStatus = '';
        this.isRefundRemission = true;
    }
    confirmIssueRefund(isFullyRefund) {
        this.isConfirmationBtnDisabled = true;
        this.errorMessage = '';
        this.errorMsg = [];
        if (this.isRefundRemission) {
            this.retroRemission = true;
        }
        if (isFullyRefund) {
            this.totalRefundAmount = this.payment.amount;
        }
        if (!isFullyRefund) {
            this.fees = this.remissionForm.value.feesList.filter(value => value.selected === true);
        }
        this.fees = this.fees.map(obj => ({ id: obj.id,
            code: obj.code,
            version: obj.version,
            apportion_amount: obj.apportion_amount,
            calculated_amount: obj.calculated_amount,
            updated_volume: obj.updated_volume ? obj.updated_volume : obj.volume,
            refund_amount: obj.refund_amount ? obj.refund_amount : this.totalRefundAmount }));
        const requestBody = new PostRefundRetroRemission(this.contactDetailsObj, this.fees, this.payment.reference, this.refundReason, this.totalRefundAmount, 'op');
        this.paymentViewService.postRefundsReason(requestBody).subscribe(response => {
            if (JSON.parse(response)) {
                this.viewCompStatus = '';
                this.viewStatus = 'refundconfirmationpage';
                this.refundReference = JSON.parse(response).refund_reference;
                if (JSON.parse(response).refund_amount) {
                    this.refundAmount = JSON.parse(response).refund_amount;
                }
            }
        }, (error) => {
            this.errorMessage = error;
            this.isConfirmationBtnDisabled = false;
            this.cd.detectChanges();
        });
    }
    gotoRefundReasonPage() {
        this.viewStatus = '';
        this.viewCompStatus = 'issuerefundpage1';
    }
    // Retro Refund
    // confirmRetroRefund() {
    //   this.isConfirmationBtnDisabled = true;
    //   this.errorMessage = '';
    //   this.errorMsg = [];
    //   if( this.isRefundRemission) {
    //     this.retroRemission = true;
    //   }
    //   const requestBody = new PostRefundRetroRemission(this.payment.reference,'RR004-Retrospective remission', this.contactDetailsObj);
    //   this.paymentViewService.postRefundsReason(requestBody).subscribe(
    //     response => {
    //         if (JSON.parse(response)) {
    //           this.viewCompStatus  = '';
    //           this.viewStatus = 'retrorefundconfirmationpage';
    //           this.refundReference =JSON.parse(response).refund_reference;
    //           if(JSON.parse(response).refund_amount) {
    //             this.refundAmount = JSON.parse(response).refund_amount;
    //             }
    //         }
    //     },
    //     (error: any) => {
    //       this.errorMessage = error;
    //       this.isConfirmationBtnDisabled = false;
    //     });
    // }
    selectRadioButton(key, value) {
        localStorage.setItem("myradio", value);
        const remissionctrls = this.remissionForm.controls;
        remissionctrls['refundDDReason'].setValue('Select a different reason', { onlySelf: true });
        remissionctrls['reason'].reset();
        this.isRefundReasonsSelected = true;
        this.errorMessage = false;
        this.errorMsg = [];
        this.isReasonEmpty = false;
        this.showReasonText = false;
        this.refundHasError = false;
        this.selectedRefundReason = value;
        this.selectedRefundReasonCode = key;
        if (this.selectedRefundReason.includes('Other')) {
            this.showReasonText = true;
            this.refundHasError = false;
            this.refundReason = value;
        }
    }
    selectchange(args) {
        const remissionctrls = this.remissionForm.controls;
        remissionctrls['refundReason'].reset();
        remissionctrls['reason'].reset();
        this.isRefundReasonsSelected = false;
        this.showReasonText = false;
        this.refundHasError = false;
        this.selectedRefundReason = args.target.options[args.target.options.selectedIndex].id;
        this.selectedRefundReasonCode = args.target.options[args.target.options.selectedIndex].value;
        this.reasonLength = (29 - this.selectedRefundReason.split('- ')[1].length);
        if (this.selectedRefundReason.includes('Other')) {
            this.showReasonText = true;
            this.refundHasError = false;
            this.refundReason = args.target.options[args.target.options.selectedIndex].id;
        }
    }
    getContactDetails(obj, type) {
        this.contactDetailsObj = obj;
        this.viewCompStatus = '';
        this.notificationPreview = false;
        if (type == 'checkaddRefundpage') {
            this.getTemplateInstructionType(this.remessionPayment.reference, this.remessionPayment);
        }
        else if (type == 'checkissuerefundpage') {
            this.getTemplateInstructionType(this.payment.reference, this.payment);
        }
        else if (type == 'addrefundcheckandanswer') {
            this.getTemplateInstructionType(this.paymentReference, this.paymentObj);
        }
        this.viewStatus = type;
    }
    gotoPartialFeeRefundScreen() {
        if (this.isFromRefundStatusPage) {
            var remissionctrls = this.remissionForm.controls;
            this.refundListReason.emit({ reason: this.displayRefundReason, code: this.refundReason });
            return;
        }
        this.refundHasError = false;
        this.viewCompStatus = 'issuerefund';
        this.viewStatus = '';
    }
    gotoServiceRequestPage(event) {
        this.errorMessage = '';
        this.errorMsg = [];
        this.isFromCheckAnsPage = false;
        event.preventDefault();
        if (this.isFromRefundStatusPage) {
            var remissionctrls = this.remissionForm.controls;
            this.totalRefundAmount = 0;
            this.refundListAmount.emit(this.totalRefundAmount.toString());
            return;
        }
        if (this.isFromServiceRequestPage && !this.isFromPaymentDetailPage) {
            this.viewStatus = 'order-full-view';
            this.viewCompStatus = '';
        }
        else if (this.isFromRefundListPage) {
            this.paymentLibComponent.iscancelClicked = true;
            this.refundListReason.emit({ reason: this.selectedRefundReason, code: this.refundReason });
            this.paymentLibComponent.isFromRefundStatusPage = true;
        }
        else {
            this.paymentLibComponent.paymentMethod = this.payment.method;
            this.paymentLibComponent.paymentGroupReference = this.paymentLibComponent.paymentGroupReference;
            this.paymentLibComponent.paymentReference = this.payment.reference;
            this.paymentLibComponent.viewName = 'payment-view';
            this.OrderslistService.setOrderRef(this.orderRef);
            this.OrderslistService.setorderCCDEvent(this.orderCCDEvent);
            this.OrderslistService.setorderCreated(this.orderCreated);
            this.OrderslistService.setorderDetail(this.orderDetail);
            this.OrderslistService.setorderParty(this.orderParty);
            this.OrderslistService.setorderTotalPayments(this.orderTotalPayments);
            this.OrderslistService.setorderRemissionTotal(this.orderRemissionTotal);
            this.OrderslistService.setorderFeesTotal(this.orderFeesTotal);
            this.viewStatus = 'payment-view';
            this.sendOrderDetail = this.orderDetail;
            this.sendOrderRef = this.orderRef;
            if (this.LOGGEDINUSERROLES === undefined) {
                this.OrderslistService.getUserRolesList().subscribe((data) => this.LOGGEDINUSERROLES = data);
            }
            this.viewCompStatus = '';
        }
    }
    gotoAddressPage(note) {
        if (note) {
            this.notification = { contact_details: note, notification_type: note.notification_type };
        }
        this.errorMessage = '';
        this.viewCompStatus = 'addrefundforremission';
        this.viewStatus = '';
        this.isRefundRemission = true;
        this.errorMessage = false;
    }
    gotoRemissionSuccess(event) {
        event.preventDefault();
        this.errorMessage = '';
        this.viewCompStatus = '';
        this.viewStatus = 'retroremissionconfirmationpage';
        this.isRefundRemission = true;
        this.errorMessage = false;
    }
    gotoCasetransationPage() {
        this.OrderslistService.setnavigationPage('casetransactions');
        this.errorMessage = '';
        this.errorMsg = [];
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.VIEW = 'case-transactions';
        this.paymentLibComponent.ISTURNOFF = this.isTurnOff;
        this.paymentLibComponent.isFromServiceRequestPage = true;
        this.resetOrderData();
        let partUrl = this.bsPaymentDcnNumber ? `&dcn=${this.bsPaymentDcnNumber}` : '';
        partUrl += this.paymentLibComponent.ISBSENABLE ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
        partUrl += this.paymentLibComponent.ISTURNOFF ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
        partUrl += this.isStrategicFixEnable ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
        partUrl += `&caseType=${this.caseType}`;
        const url = `/payment-history/${this.ccdCaseNumber}?view=case-transactions&takePayment=${this.paymentLibComponent.TAKEPAYMENT}&selectedOption=${this.option}${partUrl}`;
        this.router.routeReuseStrategy.shouldReuseRoute = () => false;
        this.router.onSameUrlNavigation = 'reload';
        this.router.navigateByUrl(url);
    }
    gotoCasetransationPageCancelBtnClicked(event) {
        event.preventDefault();
        this.errorMsg = [];
        if (this.paymentLibComponent.isFromServiceRequestPage !== undefined && !this.paymentLibComponent.isFromServiceRequestPage) {
            this.OrderslistService.setnavigationPage('casetransactions');
            this.OrderslistService.setisFromServiceRequestPage(false);
            this.paymentLibComponent.VIEW = 'case-transactions';
            this.paymentLibComponent.viewName = 'case-transactions';
            this.paymentLibComponent.ISBSENABLE = true;
            this.paymentLibComponent.isRefundStatusView = false;
        }
        else {
            if (this.paymentLibComponent.REFUNDLIST) {
                this.paymentLibComponent.viewName = 'refund-list';
                return;
            }
            if (this.paymentLibComponent.TAKEPAYMENT === undefined && this.paymentLibComponent.SERVICEREQUEST === undefined) {
                this.paymentLibComponent.SERVICEREQUEST = 'false';
            }
            this.OrderslistService.setisFromServiceRequestPage(false);
            this.OrderslistService.setpaymentPageView({ method: '', payment_group_reference: '', reference: '' });
            this.OrderslistService.setnavigationPage('casetransactions');
            this.errorMessage = '';
            this.paymentLibComponent.viewName = 'case-transactions';
            this.paymentLibComponent.ISTURNOFF = this.isTurnOff;
            this.paymentLibComponent.isFromServiceRequestPage = true;
            this.paymentLibComponent.ISBSENABLE = true;
            let partUrl = this.bsPaymentDcnNumber ? `&dcn=${this.bsPaymentDcnNumber}` : '';
            partUrl += this.paymentLibComponent.ISBSENABLE ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
            partUrl += this.paymentLibComponent.ISTURNOFF ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
            partUrl += this.isStrategicFixEnable ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
            partUrl += `&caseType=${this.caseType}`;
            if (this.isFromPaymentDetailPage) {
                partUrl += this.paymentLibComponent.isFromPaymentDetailPage;
            }
            if (!this.paymentLibComponent.SERVICEREQUEST) {
                const url = `/payment-history/${this.ccdCaseNumber}?view=case-transactions&takePayment=${this.paymentLibComponent.TAKEPAYMENT}&selectedOption=${this.option}${partUrl}`;
                this.router.routeReuseStrategy.shouldReuseRoute = () => false;
                this.router.onSameUrlNavigation = 'reload';
                this.router.navigateByUrl(url);
            }
            else {
                const url = `/payment-history/${this.ccdCaseNumber}?selectedOption=${this.option}${partUrl}`;
                this.router.routeReuseStrategy.shouldReuseRoute = () => false;
                this.router.onSameUrlNavigation = 'reload';
                this.router.navigateByUrl(url);
            }
        }
    }
    resetOrderData() {
        this.OrderslistService.setOrderRef(null);
        this.OrderslistService.setorderCCDEvent(null);
        this.OrderslistService.setorderCreated(null);
        this.OrderslistService.setorderDetail(null);
        this.OrderslistService.setorderParty(null);
        this.OrderslistService.setorderTotalPayments(null);
        this.OrderslistService.setorderRemissionTotal(null);
        this.OrderslistService.setorderFeesTotal(null);
    }
    changeRefundAmount() {
        this.isFromCheckAnsPage = true;
        this.viewCompStatus = 'issuerefund';
        this.viewStatus = '';
    }
    getFormattedCurrency(currency) {
        if (currency.toString().includes(".")) {
            return currency;
        }
        return currency.toString().concat(".00");
    }
    showNotificationPreview() {
        this.notificationPreview = true;
    }
    hideNotificationPreview() {
        this.notificationPreview = false;
    }
    getTemplateInstructionType(paymentReference, payment) {
        if (payment == undefined || payment == null || payment.reference != paymentReference) {
            this.paymentViewService.getPaymentDetails(paymentReference).subscribe(payment => {
                this.paymentObj = payment;
                this.paymentObj.reference = paymentReference;
                this.templateInstructionType = this.notificationService.getNotificationInstructionType(this.paymentObj.channel, this.paymentObj.method);
            }, (error) => {
                this.templateInstructionType = 'Template';
            });
        }
        else {
            this.templateInstructionType = this.notificationService.getNotificationInstructionType(payment.channel, payment.method);
        }
    }
    static ɵfac = function AddRemissionComponent_Factory(t) { return new (t || AddRemissionComponent)(i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(NotificationService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(RefundsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AddRemissionComponent, selectors: [["ccpay-add-remission"]], inputs: { fee: "fee", fees: "fees", payment: "payment", remission: "remission", ccdCaseNumber: "ccdCaseNumber", caseType: "caseType", viewCompStatus: "viewCompStatus", paymentGroupRef: "paymentGroupRef", isTurnOff: "isTurnOff", isRefundRemission: "isRefundRemission", isStrategicFixEnable: "isStrategicFixEnable", paidAmount: "paidAmount", isFromRefundListPage: "isFromRefundListPage", isFromPaymentDetailPage: "isFromPaymentDetailPage", isFromServiceRequestPage: "isFromServiceRequestPage", isFullyRefund: "isFullyRefund", feeamount: "feeamount", refundPaymentReference: "refundPaymentReference", isFromRefundStatusPage: "isFromRefundStatusPage", changeRefundReason: "changeRefundReason", isServiceRequest: "isServiceRequest", LOGGEDINUSERROLES: "LOGGEDINUSERROLES", orderDetail: "orderDetail", orderRef: "orderRef", orderStatus: "orderStatus", orderParty: "orderParty", orderCreated: "orderCreated", orderCCDEvent: "orderCCDEvent", takePayment: ["takepayment", "takePayment"], orderFeesTotal: "orderFeesTotal", orderTotalPayments: "orderTotalPayments", orderRemissionTotal: "orderRemissionTotal" }, outputs: { cancelRemission: "cancelRemission", refundListReason: "refundListReason", refundListAmount: "refundListAmount", refundFees: "refundFees" }, decls: 21, vars: 20, consts: [[1, "add-remission", "pagesize"], [4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], ["class", "govuk-error-summary__body", 4, "ngFor", "ngForOf"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ADDREMISSION"], ["myInput", ""], [1, "heading-large"], ["novalidate", ""], [1, "govuk-form-group"], ["novalidate", "", 3, "formGroup"], ["for", "remission-code", 1, "govuk-label", "govuk-label--s"], [1, "form-hint"], ["id", "remissionCode", "aria-label", "remissionCode", "name", "remissionCode", "type", "text", "formControlName", "remissionCode", 1, "govuk-input", "govuk-input--width-20", "govuk-!-margin-right-1", 3, "ngClass"], ["class", "inline-error-message", 4, "ngIf"], ["for", "amount", 1, "govuk-label", "govuk-label--s"], ["id", "amount-currency", 1, "govuk-visually-hidden"], [1, "hmcts-currency-input"], ["aria-hidden", "true", 1, "hmcts-currency-input__symbol"], ["id", "amount", "aria-label", "amount", "name", "amount", "type", "text", "aria-describedby", "amount-currency", "formControlName", "amount", 1, "govuk-input", "govuk-input--width-10", 3, "ngClass"], ["type", "submit", 1, "button", 3, "click"], [1, "inline-error-message"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ADDREMISSIONCONFIRMATION"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "govuk-table"], [1, "govuk-table__row"], [1, "govuk-table__cell", "govuk-!-font-weight-bold"], [1, "govuk-table__cell"], ["type", "submit", 1, "button", "govuk-button--secondary", 3, "click"], ["type", "submit", 3, "disabled", "ngClass", "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "PROCESSADDRETROREMISSIONPAGE"], [1, "heading-medium"], [1, "govuk-button-group"], [1, "govuk-button", "govuk-button--secondary", 3, "click"], [1, "govuk-button", 3, "click"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", "pointer", 3, "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "PROCESSRETROREMISSIONPAGE"], [1, "govuk-fieldset"], [1, "govuk-fieldset__legend", "govuk-fieldset__legend--m"], ["class", "heading-medium", 4, "ngIf"], ["id", "amount", "aria-label", "amount", "name", "amount", "type", "number", "aria-describedby", "amount-currency", "formControlName", "amount", 1, "govuk-input", "govuk-input--width-10", 3, "ngClass"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", 3, "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "CHECKRETROREMISSIONCONFIRMATION"], [1, "govuk-link", "right", 3, "click"], ["class", "govuk-table__cell govuk-!-font-weight-bold", 4, "ngIf"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "RETROREMISSIONCONFIRMATIONPAGE"], [1, "govuk-grid-row"], [1, "govuk-panel", "govuk-panel-border--confirmation"], [1, "govuk-panel__title"], ["class", "govuk-panel__body", 4, "ngIf"], [1, "govuk-body"], [1, "govuk-panel__body"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ADDRESSDETAILSRETROREMISSIONPAGE"], [1, "govuk-heading-l"], [1, "govuk-heading-m", "govuk-font19px"], [3, "addressObj", "assignContactDetails", "redirectToIssueRefund"], ["data-module", "govuk-button", 1, "govuk-link", 3, "click"], [1, "govuk-table__cell", "whitespace-inherit"], ["class", "contactDetails-width", 4, "ngIf"], ["href", "Javascript:void(0)", "class", "govuk-link right", 3, "click", 4, "ngIf"], [3, "payment", "contactDetails", "refundReason", "refundAmount", 4, "ngIf"], [1, "contactDetails-width"], ["href", "Javascript:void(0)", 1, "govuk-link", "right", 3, "click"], [3, "payment", "contactDetails", "refundReason", "refundAmount"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "RETROREMISSIONREFUNDCONFIRMATIONPAGE"], [1, "govuk-panel", "govuk-panel--confirmation"], [1, "govuk-body", "white"], ["id", "how-contacted-conditional-hint", 1, "form-hint", "govuk-font19px"], [1, "heading-small"], [1, "govuk-table__head"], ["scope", "col", 1, "govuk-table__header", "col-1"], ["scope", "col", 1, "govuk-table__header", "col-18"], ["scope", "col", 1, "govuk-table__header", "col-6"], ["scope", "col", 1, "govuk-table__header", "col-8"], ["scope", "col", 1, "govuk-table__header"], ["class", "govuk-table__body", 4, "ngIf"], ["draggable", "false", "class", "govuk-button govuk-button--secondary", "data-module", "govuk-button", 3, "click", 4, "ngIf"], [1, "govuk-button", 3, "disabled", "click"], [1, "govuk-table__body"], ["class", "govuk-table__row", "formArrayName", "feesList", 4, "ngFor", "ngForOf"], ["formArrayName", "feesList", 1, "govuk-table__row"], ["data-module", "govuk-checkboxes", 1, "govuk-checkboxes", "govuk-checkboxes--large", 3, "formGroupName"], [1, "govuk-checkboxes__item"], ["name", "organisation", "type", "checkbox", "formControlName", "selected", 1, "govuk-checkboxes__input", 3, "id", "value", "click"], [1, "govuk-label", "govuk-checkboxes__label", 3, "for"], [2, "display", "none"], [1, "govuk-table__cell", "whitespace-inherit", "left"], ["type", "hidden", 2, "display", "none", "background-color", "white", 3, "id"], ["class", "govuk-table__cell  whitespace-inherit left", 4, "ngIf"], ["scope", "row", 1, "govuk-table__cell", "whitespace-inherit", "center"], [1, "hmcts-currency-input", 3, "formGroupName"], ["disabled", "disabled", "type", "text", "aria-describedby", "amount-currency ", "pattern", "[0-9]*", "formControlName", "refund_amount", 1, "govuk-input", "govuk-input--width-10", 3, "id", "name"], ["type", "hidden", "formControlName", "volume", 3, "id", "name", "value"], ["type", "hidden", "formControlName", "apportion_amount", 3, "id", "name", "value"], ["type", "hidden", "formControlName", "calculated_amount", 3, "id", "name", "value"], [3, "formGroupName"], ["disabled", "disabled", "formControlName", "updated_volume", "type", "text", 1, "govuk-input", "govuk-input--width-4", "center", 3, "id", "value", "name", "keyup"], ["disabled", "disabled", "type", "text", 1, "govuk-input", "govuk-input--width-4", "center", 3, "id", "name", "value"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], ["data-module", "govuk-checkboxes", 1, "govuk-checkboxes", "govuk-checkboxes--large"], ["name", "organisation", "type", "checkbox", "disabled", "disabled", 1, "govuk-checkboxes__input", 3, "id", "value", "checked"], ["disabled", "disabled", "type", "text", 1, "govuk-input", "govuk-input--width-4", "center", 3, "id", "value", "name"], ["disabled", "disabled", "type", "text", "aria-describedby", "amount-currency ", "pattern", "[0-9]*", 1, "govuk-input", "govuk-input--width-10", 3, "id", "name", "value"], ["colspan", "6", 1, "govuk-table__cell"], ["draggable", "false", "data-module", "govuk-button", 1, "govuk-button", "govuk-button--secondary", 3, "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ISSUEREFUNDPAGE"], ["id", "how-contacted-conditional-hint govuk-font19px", "class", "form-hint", 4, "ngIf"], ["aria-describedby", "how-contacted-conditional-hint", 1, "govuk-fieldset"], ["data-module", "govuk-radios", 3, "ngClass"], [1, "container-fluid"], [1, "row"], ["class", "govuk-radios__item col-md-4", 4, "ngFor", "ngForOf"], ["formControlName", "refundDDReason", "id", "sort", 1, "govuk-select", 3, "change"], ["selected", "selected", 3, "defaultSelected", "value"], [3, "id", "value", 4, "ngFor", "ngForOf"], ["class", "govuk-radios__conditional", 4, "ngIf"], ["id", "how-contacted-conditional-hint govuk-font19px", 1, "form-hint"], [1, "govuk-radios__item", "col-md-4"], ["name", "refundReason", "type", "radio", "formControlName", "refundReason", 1, "govuk-radios__input", 3, "id", "value", "change"], ["for", "how-contacted-conditional", 1, "govuk-label--s", "govuk-radios__label", "govuk-font__custom"], [1, "govuk-radios__conditional"], [1, "govuk-label", "govuk-label--m", 3, "for"], [3, "ngClass"], ["id", "reason", "aria-label", "reason", "name", "reason", "type", "text", "aria-describedby", "reason", "maxlength", "30", "formControlName", "reason", 1, "govuk-input", "govuk-input--width-10", 3, "ngClass"], [3, "id", "value"], ["for", "amount", 1, "govuk-label", "govuk-label--m"], ["id", "reason", "aria-label", "reason", "name", "reason", "type", "text", "aria-describedby", "reason", "formControlName", "reason", 1, "govuk-input", "govuk-input--width-10", 3, "ngClass", "maxlength"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "CAPTUREADDRESSDETAILSPAGE"], ["id", "how-contacted-conditional-hint", 1, "govuk-hint", "govuk-font19px"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "CHECKISSUEREFUNDPAGE"], ["class", "govuk-table__row", 4, "ngIf"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ADDREFUNDFORREMISSION"], [3, "contactDetails", "paymentReference", "payment", "refundReason", "refundAmount", 4, "ngIf"], [3, "contactDetails", "paymentReference", "payment", "refundReason", "refundAmount"], [3, "viewStatus", "orderRef", "isServiceRequest", "orderStatus", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES", "takePayment", "ccdCaseNumber", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal"], [3, "LOGGEDINUSERROLES", "isTurnOff", "isTakePayment", "caseType", "isServiceRequest", "orderRef", "orderStatus", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal"]], template: function AddRemissionComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, AddRemissionComponent_div_1_Template, 6, 1, "div", 1);
            i0.ɵɵtemplate(2, AddRemissionComponent_div_2_Template, 5, 1, "div", 1);
            i0.ɵɵtemplate(3, AddRemissionComponent_ng_container_3_Template, 27, 11, "ng-container", 1);
            i0.ɵɵtemplate(4, AddRemissionComponent_ng_container_4_Template, 36, 11, "ng-container", 1);
            i0.ɵɵtemplate(5, AddRemissionComponent_ng_container_5_Template, 27, 8, "ng-container", 1);
            i0.ɵɵtemplate(6, AddRemissionComponent_ng_container_6_Template, 32, 11, "ng-container", 1);
            i0.ɵɵtemplate(7, AddRemissionComponent_ng_container_7_Template, 56, 27, "ng-container", 1);
            i0.ɵɵtemplate(8, AddRemissionComponent_ng_container_8_Template, 13, 2, "ng-container", 1);
            i0.ɵɵtemplate(9, AddRemissionComponent_ng_container_9_Template, 12, 4, "ng-container", 1);
            i0.ɵɵtemplate(10, AddRemissionComponent_ng_container_10_Template, 68, 34, "ng-container", 1);
            i0.ɵɵtemplate(11, AddRemissionComponent_ng_container_11_Template, 16, 2, "ng-container", 1);
            i0.ɵɵtemplate(12, AddRemissionComponent_ng_container_12_Template, 40, 11, "ng-container", 1);
            i0.ɵɵtemplate(13, AddRemissionComponent_ng_container_13_Template, 38, 14, "ng-container", 1);
            i0.ɵɵtemplate(14, AddRemissionComponent_ng_container_14_Template, 14, 5, "ng-container", 1);
            i0.ɵɵtemplate(15, AddRemissionComponent_ng_container_15_Template, 56, 19, "ng-container", 1);
            i0.ɵɵtemplate(16, AddRemissionComponent_ng_container_16_Template, 14, 5, "ng-container", 1);
            i0.ɵɵtemplate(17, AddRemissionComponent_ng_container_17_Template, 63, 23, "ng-container", 1);
            i0.ɵɵtemplate(18, AddRemissionComponent_ng_container_18_Template, 14, 2, "ng-container", 1);
            i0.ɵɵtemplate(19, AddRemissionComponent_ng_container_19_Template, 2, 14, "ng-container", 1);
            i0.ɵɵtemplate(20, AddRemissionComponent_ng_container_20_Template, 2, 14, "ng-container", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.errorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.errorMsg.length > 0);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "main" && !ctx.isRefundRemission);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "confirmation");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "addremission");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "processretroremissonpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "checkretroremissionpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "retroremissionconfirmationpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "remissionAddressPage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "checkaddRefundpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "refundconfirmationpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "issuerefund" && ctx.isRefundRemission);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "issuerefundpage1" && ctx.isRefundRemission);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "contactDetailsPage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "checkissuerefundpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "addrefundforremission");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addrefundcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "retrorefundconfirmationpage");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "order-full-view");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "payment-view");
        } }, styles: [".add-remission[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]{margin:20px 2px;padding:.5em;font-size:19px;font-weight:200}.add-remission[_ngcontent-%COMP%]   td.govuk-table__cell[_ngcontent-%COMP%]{width:50%}.add-remission[_ngcontent-%COMP%]   .govuk-button--secondary[_ngcontent-%COMP%]{background-color:#dee0e2;box-shadow:0 2px #858688;color:#0b0c0c;margin-right:.5em}.add-remission[_ngcontent-%COMP%]   .govuk-warning-text__text[_ngcontent-%COMP%], .add-remission[_ngcontent-%COMP%]   .govuk-label--s[_ngcontent-%COMP%], .add-remission[_ngcontent-%COMP%]   .hmcts-currency-input__symbol[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.add-remission[_ngcontent-%COMP%]   .inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0;border-color:#a71414}.add-remission[_ngcontent-%COMP%]   .inline-error-message[_ngcontent-%COMP%]{color:#a71414;border-color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.add-remission[_ngcontent-%COMP%]   .govuk-button[_ngcontent-%COMP%], .add-remission[_ngcontent-%COMP%]   .govuk-link[_ngcontent-%COMP%]{margin-right:1em;font-size:19px;font-weight:200}.add-remission[_ngcontent-%COMP%]   .govuk-button-group[_ngcontent-%COMP%]{padding-top:2em}.add-remission[_ngcontent-%COMP%]   .heading-medium[_ngcontent-%COMP%]{margin-top:.875em}.add-remission[_ngcontent-%COMP%]   .heading-large[_ngcontent-%COMP%]{margin-top:.25em}.add-remission[_ngcontent-%COMP%]   .govuk-panel--confirmation[_ngcontent-%COMP%]{color:#fff;background:#00703C}.add-remission[_ngcontent-%COMP%]   .govuk-panel__title[_ngcontent-%COMP%]{font-size:5rem}.add-remission[_ngcontent-%COMP%]   .govuk-body-m[_ngcontent-%COMP%], .add-remission[_ngcontent-%COMP%]   .govuk-body[_ngcontent-%COMP%]{font-size:2.1875rem}.add-remission[_ngcontent-%COMP%]   .govuk-radios__item[_ngcontent-%COMP%]{clear:initial!important;display:inline-block;width:45%!important}.add-remission[_ngcontent-%COMP%]   .govuk-radios__conditional[_ngcontent-%COMP%]{padding-top:12px!important}.add-remission[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%]{float:right;cursor:pointer}.add-remission[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]{float:right}.govuk-input[_ngcontent-%COMP%], .govuk-font19px[_ngcontent-%COMP%]{font-size:19px}.govuk-select[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.govuk-input--width-10[_ngcontent-%COMP%]{max-width:50ex}.govuk-label--m[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.govuk-error-summary__body[_ngcontent-%COMP%]{font-size:19px!important}.govuk-error-summary__title[_ngcontent-%COMP%]{font-size:24px!important}.white[_ngcontent-%COMP%]{color:#fff}.pagesize[_ngcontent-%COMP%]{margin:2em;width:97%}.pointer[_ngcontent-%COMP%]{cursor:pointer}.col-18[_ngcontent-%COMP%]{min-width:18em}.col-6[_ngcontent-%COMP%]{min-width:6em}.col-8[_ngcontent-%COMP%]{min-width:8em}.col-1[_ngcontent-%COMP%]{min-width:1em}.col-25[_ngcontent-%COMP%]{width:25%!important}.col-24[_ngcontent-%COMP%]{width:24%!important}.left[_ngcontent-%COMP%]{text-align:left}.center[_ngcontent-%COMP%]{text-align:center}.col-60[_ngcontent-%COMP%]{width:60%;text-align:left}.margin-top--size[_ngcontent-%COMP%]{margin-top:-30px}.contactDetails-width[_ngcontent-%COMP%]{width:70%}.right[_ngcontent-%COMP%]{cursor:pointer}.form-hint[_ngcontent-%COMP%]{font-size:19px!important}.govuk-panel-border--confirmation[_ngcontent-%COMP%]{color:#0b0c0c;border:5px solid #00703C}.whitespace-inherit[_ngcontent-%COMP%]{white-space:inherit!important}.govuk-link[_ngcontent-%COMP%]{cursor:pointer}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AddRemissionComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-add-remission', template: "<div class=\"add-remission pagesize\">\n  <div *ngIf=\"errorMessage\">\n    <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n      <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n        Error in processing the request\n      </h2>\n      <div  class=\"govuk-error-summary__body\">\n        {{ errorMessage }}\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"errorMsg.length > 0\">\n    <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n      <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n        Error in processing the request\n      </h2>\n      <div *ngFor=\"let err of errorMsg; let i = index\" class=\"govuk-error-summary__body\">\n       \n        <li>{{err}}</li>\n      </div>\n    </div>\n  </div>\n\n<ng-container *ngIf=\"viewStatus === 'main' && !isRefundRemission \">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDREMISSION'>\n    <h1 class=\"heading-large\">Add remission </h1>\n    <form novalidate>\n      <div class=\"govuk-form-group\">\n        <form [formGroup]=\"remissionForm\" novalidate>\n          <div class=\"govuk-form-group\">\n            <label class=\"govuk-label govuk-label--s\" for=\"remission-code\">\n                Add remission to {{ fee?.code }}: {{ fee?.description }}\n              <span class=\"form-hint\">Enter remission for reference. For example: HWF-A1B-23C OR PA21-123456</span>\n            </label>\n            <input [ngClass]=\"{'inline-error-class': isRemissionCodeEmpty || remissionCodeHasError}\" class=\"govuk-input govuk-input--width-20 govuk-!-margin-right-1\" id=\"remissionCode\" aria-label=\"remissionCode\"  name=\"remissionCode\" type=\"text\" formControlName=\"remissionCode\">\n            <p class=\"inline-error-message\" *ngIf=\"isRemissionCodeEmpty || remissionCodeHasError\">\n              <span *ngIf=\"isRemissionCodeEmpty\">Enter a remission code</span>\n              <span *ngIf=\"remissionCodeHasError\">Enter a vaild remission code</span>\n            </p>\n          </div>\n          <div class=\"govuk-form-group\">\n            <label class=\"govuk-label govuk-label--s\" for=\"amount\">\n              How much does the applicant need to pay?\n            </label>\n\n            <div id=\"amount-currency\" class=\"govuk-visually-hidden\">in pounds</div>\n              <div class=\"hmcts-currency-input\">\n              <div class=\"hmcts-currency-input__symbol\" aria-hidden=\"true\">\u00A3</div>\n              <input class=\"govuk-input govuk-input--width-10\" [ngClass]=\"{'inline-error-class': isAmountEmpty || amountHasError || isRemissionLessThanFeeError}\" id=\"amount\" aria-label=\"amount\"  name=\"amount\" type=\"text\" aria-describedby=\"amount-currency\" formControlName=\"amount\">\n              <p class=\"inline-error-message\" *ngIf=\"isAmountEmpty || amountHasError || isRemissionLessThanFeeError\">\n                <span *ngIf=\"isAmountEmpty\">Enter a amount</span>\n                <span *ngIf=\"amountHasError\">Enter a vaild amount</span>\n                <span *ngIf=\"isRemissionLessThanFeeError\">The remission amount must be less than the total fee</span>\n              </p>\n            </div>\n          </div>\n        </form>\n        <button class=\"button\" type=\"submit\" (click)=\"addRemission()\">\n            Submit\n          </button>\n      </div>\n    </form>\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'confirmation'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDREMISSIONCONFIRMATION'> \n    <div class=\"govuk-warning-text\">\n      <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n      <strong class=\"govuk-warning-text__text\">\n        <span class=\"govuk-warning-text__assistive\">Warning</span>\n        Are you sure you want to add remission to this fee?\n      </strong>\n    </div>\n    <table class=\"govuk-table\">\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Remission code:</td>\n          <td class=\"govuk-table__cell\">{{ remissionForm.controls.remissionCode.value }}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee code:</td>\n          <td class=\"govuk-table__cell\">{{ fee.code }}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee description:</td>\n          <td class=\"govuk-table__cell\">{{ fee.description }}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Amount the applicant must pay:</td>\n          <td class=\"govuk-table__cell\">{{  remissionForm.controls.amount.value  | currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n      </tr>\n    </table>\n\n    <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"cancelRemission.emit()\">\n      Cancel\n    </button>\n    <button type=\"submit\"\n    [disabled]=\"isConfirmationBtnDisabled\"\n    [ngClass]='isConfirmationBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'\n    (click)=\"confirmRemission()\">\n      Confirm\n    </button>\n\n</ng-container>\n\n<!-- Add retro remission changes-->\n\n<ng-container *ngIf=\"viewCompStatus === 'addremission'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='PROCESSADDRETROREMISSIONPAGE'> \n    <h1 class=\"heading-large\">Process remission</h1>\n    <h1 class=\"heading-medium\">#{{ccdCaseNumber | ccdHyphens}}</h1>\n    <h1 class=\"heading-large\">Enter help with fees or remission reference</h1>\n    <form novalidate>\n        <div class=\"govuk-form-group\">\n          <form [formGroup]=\"remissionForm\" novalidate>\n            <div class=\"govuk-form-group\">\n              <label class=\"govuk-label govuk-label--s\" for=\"remission-code\">\n                <span class=\"form-hint\">For example: HWF-A1B-23C OR PA21-123456</span>\n              </label>\n              <p class=\"inline-error-message\" *ngIf=\"isRemissionCodeEmpty || remissionCodeHasError\">\n                <span *ngIf=\"isRemissionCodeEmpty\">Enter a remission code</span>\n                <span *ngIf=\"remissionCodeHasError\">Enter a vaild remission code</span>\n              </p>\n              <input [ngClass]=\"{'inline-error-class': isRemissionCodeEmpty || remissionCodeHasError}\" class=\"govuk-input govuk-input--width-20 govuk-!-margin-right-1\" id=\"remissionCode\" aria-label=\"remissionCode\"  name=\"remissionCode\" type=\"text\" formControlName=\"remissionCode\">\n           \n            </div>\n          \n          </form>\n          <div class=\"govuk-button-group\">\n              <button (click)=\"gotoServiceRequestPage($event)\" class=\"govuk-button govuk-button--secondary\"> Previous</button>\n              <button (click)=\"addRemissionCode()\" class=\"govuk-button\"> Continue</button>\n          </div>\n          <p><a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link pointer\" data-module=\"govuk-button\">Cancel</a></p>\n        </div>\n    </form>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'processretroremissonpage'\" >\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='PROCESSRETROREMISSIONPAGE'> \n    <h1 class=\"heading-large\">Process remission</h1>\n    <h1 class=\"heading-medium\">#{{ccdCaseNumber | ccdHyphens }}</h1>\n    <div class=\"govuk-form-group\">\n        <form novalidate>\n            <div class=\"govuk-form-group\">\n                <form [formGroup]=\"remissionForm\" novalidate>\n                    <fieldset class=\"govuk-fieldset\">\n                      <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--m\"> \n                          <h1 *ngIf=\"remessionPayment?.status === 'Success' ||   isFromRefundListPage\" class=\"heading-medium\">\n                              Enter the amount to be refunded\n                          </h1> \n                          <h1 *ngIf=\"remessionPayment?.status !== 'Success' && !isFromRefundListPage\" class=\"heading-medium\">\n                              Enter the remission amount\n                          </h1> \n                          <h1 *ngIf=\"remessionPayment?.status === 'undefined'\" class=\"heading-medium\">\n                              Enter the  amount\n                          </h1> \n                        </legend>\n                     <div id=\"amount-currency\" class=\"govuk-visually-hidden\">in pounds</div>\n                     <p class=\"inline-error-message\" *ngIf=\"isAmountEmpty || amountHasError || isRemissionLessThanFeeError\">\n                      <span *ngIf=\"isAmountEmpty\">Enter a amount</span>\n                      <span *ngIf=\"amountHasError\">Enter a vaild amount</span>\n                      <span *ngIf=\"isRemissionLessThanFeeError\">You cannot add a remission that's more than the fee amount.</span>\n                    </p>\n                        <div class=\"hmcts-currency-input\">\n                         \n                            <div class=\"hmcts-currency-input__symbol\" aria-hidden=\"true\">\u00A3</div>\n                            <input class=\"govuk-input govuk-input--width-10\" [ngClass]=\"{'inline-error-class': isAmountEmpty || amountHasError || isRemissionLessThanFeeError}\" id=\"amount\" aria-label=\"amount\"  name=\"amount\"  type=\"number\" aria-describedby=\"amount-currency\" formControlName=\"amount\">\n                            \n            \n                      </div>\n                    </fieldset>\n                </form>\n          \n                <div class=\"govuk-button-group\">\n                    <button (click)=\"gotoAddRetroRemissionCodePage()\" class=\"govuk-button govuk-button--secondary\"> Previous</button>\n                    <button (click)=\"gotoCheckRetroRemissionPage(payment)\" class=\"govuk-button\"> Continue</button>\n                \n                </div>\n                <p>\n                  <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">Cancel</a>\n              </p>\n            </div>\n  \n        </form>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"viewStatus === 'checkretroremissionpage'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='CHECKRETROREMISSIONCONFIRMATION'> \n    <div class=\"govuk-warning-text\">\n        <h1 class=\"heading-large\"> Check your answers</h1>\n    </div>\n    <table class=\"govuk-table\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n            <td class=\"govuk-table__cell\">{{remessionPayment ? remessionPayment.reference: ' '}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment amount</td>\n            <td class=\"govuk-table__cell\">\u00A3{{ remessionPayment ? getFormattedCurrency(remessionPayment.amount): ' ' | currency :'GBP':'symbol':'1.2-2'}} </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment status</td>\n            <td class=\"govuk-table__cell\">{{remessionPayment ? remessionPayment.status: ''}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee</td>\n            <td class=\"govuk-table__cell\">{{ fee.code }} - {{ fee.description }} </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee amount</td>\n          <td class=\"govuk-table__cell\">{{ fee.calculated_amount/fee.volume| currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n      </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Help with fees or remission reference</td>\n            <td class=\"govuk-table__cell\">{{ remissionForm.controls.remissionCode.value?.trim() }}\n             <a (click)=\"gotoProcessRetroRemissionPage()\" class=\"govuk-link right\" >Change</a>\n            </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td *ngIf=\"remessionPayment.status === 'Success'\" class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n            <td *ngIf=\"remessionPayment.status !== 'Success'\" class=\"govuk-table__cell govuk-!-font-weight-bold\">Remission amount</td>\n            <td class=\"govuk-table__cell\">{{remissionForm.controls.amount.value  | currency:'GBP':'symbol-narrow':'1.2-2' }}\n                <a (click)=\"gotoAmountRetroRemission()\" class=\"govuk-link right\" >Change</a>\n            </td>\n        </tr>\n    </table>\n\n    <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"gotoAmountRetroRemission()\">Previous</button>\n    <button type=\"submit\" [disabled]=\"isConfirmationBtnDisabled\" [ngClass]='isConfirmationBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"' (click)=\"confirmRetroRemission()\"> Add remission </button>\n    <p> <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\"> Cancel</a> </p>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'retroremissionconfirmationpage'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='RETROREMISSIONCONFIRMATIONPAGE'> \n  <div class=\"govuk-grid-row\">\n    <div >\n      <div class=\"govuk-panel govuk-panel-border--confirmation\">\n        <h1 class=\"govuk-panel__title\">\n          Remission added\n        </h1>\n        <div *ngIf=\"remessionPayment.status === 'Success'\" class=\"govuk-panel__body\">\n            <p class=\"govuk-body\"><strong>The amount to be refunded should be {{remissionForm.controls.amount.value | currency:'GBP':'symbol-narrow':'1.2-2' }}</strong></p>\n           \n          </div>\n        </div>\n        <div *ngIf=\"remessionPayment.status === 'Success'\" >\n            <button type=\"submit\" [disabled]=\"!isRemissionApplied\" [ngClass]='isConfirmationBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"' (click)=\"gotoProcessRetroRemission()\">Continue </button>\n          </div>\n          <p class=\"govuk-body\">\n          <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link pointer\" data-module=\"govuk-button\">\n            Return to case\n        </a>\n          </p>\n    </div>\n  </div>\n</ng-container>\n\n\n<ng-container *ngIf=\"viewStatus === 'remissionAddressPage'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDRESSDETAILSRETROREMISSIONPAGE'>      \n    <h1 class=\"govuk-heading-l\">Process refund</h1>\n    <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n  <ccpay-contact-details\n  [addressObj] = notification\n  (assignContactDetails)=\"getContactDetails($event, 'checkaddRefundpage')\"\n  (redirectToIssueRefund)=\"gotoRemissionSuccess($event)\" ></ccpay-contact-details>\n  <p>\n      <a (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'checkaddRefundpage'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='CHECKRETROREMISSIONCONFIRMATION'> \n    <div class=\"govuk-warning-text\">\n        <h1 class=\"heading-large\"> Check your answers</h1>\n    </div>\n    <table class=\"govuk-table\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n            <td class=\"govuk-table__cell\">{{remessionPayment ? remessionPayment.reference: ' '}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment amount</td>\n            <td class=\"govuk-table__cell\">\u00A3{{ remessionPayment ? getFormattedCurrency(remessionPayment.amount): ' ' | currency :'GBP':'symbol':'1.2-2'}} </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment status</td>\n            <td class=\"govuk-table__cell\">{{remessionPayment ? remessionPayment.status: ''}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee</td>\n            <td class=\"govuk-table__cell\">{{ fee.code }} - {{ fee.description }} ({{ fee.calculated_amount/fee.volume| currency:'GBP':'symbol-narrow':'1.2-2' }}) </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Help with fees or remission reference</td>\n            <td class=\"govuk-table__cell\">{{ remissionForm.controls.remissionCode.value?.trim() }}\n            </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td *ngIf=\"remessionPayment.status === 'Success'\" class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n            <td *ngIf=\"remessionPayment.status !== 'Success'\" class=\"govuk-table__cell govuk-!-font-weight-bold\">Remission amount</td>\n            <td class=\"govuk-table__cell\">{{remissionForm.controls.amount.value  | currency:'GBP':'symbol-narrow':'1.2-2' }}\n            </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send to</td>\n          <td class=\"govuk-table__cell\">{{orderParty}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send via</td>\n        <td class=\"govuk-table__cell whitespace-inherit\">\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'EMAIL'\" class=\"contactDetails-width\">\n            <strong>Email</strong>\n            <br/>\n            {{contactDetailsObj?.email?.trim()}}\n          </div>\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'LETTER'\" class=\"contactDetails-width\">\n            <strong>Post</strong>\n            <br/>\n            {{contactDetailsObj?.address_line?.trim()}}&nbsp;{{contactDetailsObj?.city?.trim()}}&nbsp;{{contactDetailsObj?.county?.trim()}}&nbsp;{{contactDetailsObj?.country?.trim()}}&nbsp;{{contactDetailsObj?.postal_code?.trim()}}\n          </div>\n          <a (click)=\"gotoProcessRetroRemission(contactDetailsObj)\" class=\"govuk-link right\" >Change</a>\n        </td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Notification</td>\n        <td class=\"govuk-table__cell\">{{templateInstructionType}}\n            <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n              Preview\n            </a>\n            <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n              Hide Preview\n            </a>\n        </td>\n      </tr>\n    </table>\n\n    <app-notification-preview *ngIf=\"notificationPreview\" \n    [payment]=\"remessionPayment\" \n    [contactDetails]=\"contactDetailsObj\"\n    [refundReason]=\"'RR036'\"\n    [refundAmount]=\"remissionForm.controls.amount.value\"></app-notification-preview>\n\n    <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"gotoProcessRetroRemission(contactDetailsObj)\">Previous</button>\n    <button type=\"submit\" [disabled]=\"isConfirmationBtnDisabled\" [ngClass]='isConfirmationBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"' (click)=\"processRefund()\"> Submit refund </button>\n    <p> <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\"> Cancel</a> </p>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'refundconfirmationpage'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='RETROREMISSIONREFUNDCONFIRMATIONPAGE'> \n    <div class=\"govuk-grid-row\">\n      <div >\n        <div class=\"govuk-panel govuk-panel--confirmation\">\n          <h1 class=\"govuk-panel__title\">\n            Refund submitted\n          </h1>\n\n          <div class=\"govuk-panel__body\">\n            <p class=\"govuk-body white\"><strong>Refund reference: {{refundReference}}</strong></p>\n          </div>\n\n        </div>\n        <div *ngIf=\"isPaymentSuccess\">\n        <h2 class=\"govuk-heading-l\">What happens next</h2>\n        <p class=\"govuk-body\">\n          A refund request for {{refundAmount  | currency:'GBP':'symbol-narrow':'1.2-2' }} has been created and will be passed to a team leader to approve.\n        </p>\n      </div>\n      <p class=\"govuk-body\">\n      <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link pointer\" data-module=\"govuk-button\">\n        Return to case\n    </a>\n      </p>\n      </div>\n    </div>\n  \n</ng-container>\n\n<!-- Issue Refund Section -->\n<ng-container *ngIf=\"viewCompStatus === 'issuerefund' && isRefundRemission\">\n  <div class=\"govuk-form-group\">\n    <form [formGroup]=\"remissionForm\" novalidate>\n    <h1 class=\"heading-large\">Process refund</h1>\n    <h2 class=\"heading-medium\">Case reference:{{ccdCaseNumber | ccdHyphens }}</h2>\n    <span id=\"how-contacted-conditional-hint\" class=\"form-hint govuk-font19px\">\n      Payment reference: {{paymentReference}}\n    </span>\n    <h3 class=\"heading-small\">Select fees to be refunded</h3>\n    <!--TABLE-->\n    <div>\n      <table class=\"govuk-table\">\n        <thead class=\"govuk-table__head\">\n          <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header  col-1\" scope=\"col\">Select</td>\n            <td class=\"govuk-table__header col-18\" scope=\"col\">Fee description</td>\n            <td class=\"govuk-table__header col-6\" scope=\"col\">Fee amount</td>\n            <td class=\"govuk-table__header col-6\" scope=\"col\">Total paid</td>\n            <td class=\"govuk-table__header col-6\" scope=\"col\">Quantity</td>\n            <td class=\"govuk-table__header col-8\" scope=\"col\">Amount to refund</td>\n            <td class=\"govuk-table__header\" scope=\"col\"></td>\n          </tr>\n        </thead>\n        <tbody class=\"govuk-table__body\" *ngIf=\"!isFullyRefund\">\n          <tr class=\"govuk-table__row\" formArrayName=\"feesList\" *ngFor=\"let fee of feesList?.controls; let i = index\">\n            <td class=\"govuk-table__cell\">\n              <div  [formGroupName]=\"i\" class=\"govuk-checkboxes govuk-checkboxes--large\" data-module=\"govuk-checkboxes\">\n                <div class=\"govuk-checkboxes__item\">\n\n                  <input\n                  class=\"govuk-checkboxes__input\" \n                  (click)=\"check_en(i,fee.controls['id'].value,fee.controls['apportion_amount'].value,fee.controls['volume'].value)\" \n                  id=\"{{fee.controls['id'].value}}\" \n                  name=\"organisation\" \n                  type=\"checkbox\" \n                  value=\"{{fee.controls['id'].value}}\" \n                  formControlName=\"selected\" >\n                  <label class=\"govuk-label govuk-checkboxes__label\" for=\"{{fee.controls['id'].value}}\">\n                    <span style=\"display:none\">Select</span>\n                  </label>\n                </div>\n              </div>\n            </td>\n            <td class=\"govuk-table__cell  whitespace-inherit\">{{fee.controls['description'].value}} </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\" >\n              <div type=\"hidden\" style=\"display:none;background-color:white;\" id=\"feeVOl_{{fee.controls['id'].value}}\">{{ fee.controls['calculated_amount'].value / fee.controls['volume'].value }}</div>\n              {{ fee.controls['calculated_amount'].value / fee.controls['volume'].value | currency:'GBP':'symbol-narrow':'1.2-2' }}\n            </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\" >{{ fee.controls['apportion_amount'].value | currency:'GBP':'symbol-narrow':'1.2-2'}} </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\"  *ngIf=\"fee.controls['volume'].value >1\">\n              <div [formGroupName]=\"i\">\n              <input disabled=\"disabled\"  class=\"govuk-input govuk-input--width-4 center\"  id=\"feeVolumeUpdated_{{fee.controls['id'].value}}\" (keyup)=\"calAmtToRefund($event.target.value,fee.controls['calculated_amount'].value,fee.controls['volume'].value,i)\" value=\"{{fee.controls['updated_volume'].value}}\"  name=\"feeVolumeUpdated_{{fee.controls['id'].value}}\" formControlName=\"updated_volume\" type=\"text\" >\n            </div>\n            </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\"  *ngIf=\"fee.controls['volume'].value ===1\">\n              <input disabled=\"disabled\"  class=\"govuk-input govuk-input--width-4 center\"  id=\"VolumeUpdated_{{fee.controls['id'].value}}\" name=\"VolumeUpdated_{{fee.controls['id'].value}}\" type=\"text\"   value=\"{{fee.controls['volume'].value}}\">\n            </td>\n            <td class=\"govuk-table__cell  whitespace-inherit center\" scope=\"row\">\n            \n                <div  [formGroupName]=\"i\"  class=\"hmcts-currency-input\">\n                  \n                  <div class=\"hmcts-currency-input__symbol\" aria-hidden=\"true\">\u00A3</div>\n                  <input disabled=\"disabled\" class=\"govuk-input govuk-input--width-10\" id=\"feeAmount_{{fee.controls['id'].value}}\" name=\"feeAmount_{{fee.controls['id'].value}}\" type=\"text\" aria-describedby=\"amount-currency \"  pattern=\"[0-9]*\" formControlName=\"refund_amount\">\n                  <input id=\"feeVolume_{{fee.controls['id'].value}}\" name=\"feeVolume_{{fee.controls['id'].value}}\" value= \"{{fee.controls['volume'].value}}\" type=\"hidden\" formControlName=\"volume\">\n                  <input id=\"feeApportionAmount_{{fee.controls['id'].value}}\" name=\"feeApportionAmount_{{fee.controls['id'].value}}\" value= \"{{fee.controls['apportion_amount'].value}}\" type=\"hidden\" formControlName=\"apportion_amount\">\n                  <input id=\"calculatedAmount_{{fee.controls['id'].value}}\" name=\"calculatedAmount_{{fee.controls['id'].value}}\" value= \"{{fee.controls['calculated_amount'].value}}\" type=\"hidden\" formControlName=\"calculated_amount\">\n               </div> \n \n            </td>\n          </tr>\n        </tbody>\n        <tbody class=\"govuk-table__body\" *ngIf=\"isFullyRefund\">\n          <tr class=\"govuk-table__row\" *ngFor=\"let fee of fees; let i = index\">\n            <td class=\"govuk-table__cell\">\n              <div  class=\"govuk-checkboxes govuk-checkboxes--large\" data-module=\"govuk-checkboxes\">\n                <div class=\"govuk-checkboxes__item\">\n                  <input   \n                  class=\"govuk-checkboxes__input\" \n                \n                  id=\"{{fee.id}}\" \n                  name=\"organisation\" \n                  type=\"checkbox\" \n                  value=\"{{fee.id}}\"\n                  disabled=\"disabled\"\n                  [checked]=\"true\" >\n                  <label class=\"govuk-label govuk-checkboxes__label\" for=\"{{fee.id}}\">\n                    <span style=\"display:none\">Select</span>\n                  </label>\n                </div>\n              </div>\n            </td>\n            <td class=\"govuk-table__cell  whitespace-inherit\">{{fee.description}} </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\" >\n              <div type=\"hidden\" style=\"display:none;background-color:white;\" id=\"feeVOl_{{fee.id}}\">{{ fee.calculated_amount / fee.volume }}</div>\n              {{ fee.calculated_amount / fee.volume| currency:'GBP':'symbol-narrow':'1.2-2' }}\n            </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\" >{{ payment.amount | currency:'GBP':'symbol-narrow':'1.2-2'}} </td>\n            <td class=\"govuk-table__cell  whitespace-inherit left\">\n              <div >\n              <input disabled=\"disabled\"  class=\"govuk-input govuk-input--width-4 center\"  id=\"feeVolumeUpdated_{{fee.id}}\"  value=\"{{fee.volume}}\"  name=\"feeVolumeUpdated_{{fee.id}}\" type=\"text\" >\n            </div>\n            </td>\n        \n            <td class=\"govuk-table__cell  whitespace-inherit center\" scope=\"row\">\n            \n                <div class=\"hmcts-currency-input\">\n                  \n                  <div class=\"hmcts-currency-input__symbol\" aria-hidden=\"true\">\u00A3</div>\n                  <input disabled=\"disabled\" class=\"govuk-input govuk-input--width-10\" id=\"feeAmount_{{fee.id}}\" name=\"feeAmount_{{fee.id}}\" type=\"text\" aria-describedby=\"amount-currency \"  value=\"{{ payment.amount | currency:'GBP':'symbol-narrow':'1.2-2'}}\" pattern=\"[0-9]*\" >\n                </div> \n        \n            </td>\n          </tr>\n        </tbody>\n        <tbody class=\"govuk-table__body\" *ngIf=\"fees?.length === 0\">\n          <td class=\"govuk-table__cell\" colspan=\"6\">No fees recorded</td>\n        </tbody>\n      </table>\n    </div>\n    <div class=\"govuk-button-group\">\n\n  \n  <a  (click)=\"gotoServiceRequestPage($event)\"  *ngIf=\"!isFullyRefund\" draggable=\"false\" class=\"govuk-button govuk-button--secondary\" data-module=\"govuk-button\">\n    Previous\n  </a>\n  <a  (click)=\"goToPaymentViewComponent()\"  *ngIf=\"isFullyRefund\" draggable=\"false\" class=\"govuk-button govuk-button--secondary\" data-module=\"govuk-button\">\n    Previous\n  </a>\n    \n  <button [disabled] = \"noneSelected()\" (click)=\"gotoIssuePage(isFullyRefund)\" class=\"govuk-button\">\n    Continue\n  </button>\n  \n    </div>\n    <p>\n      <a  (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">Cancel</a>\n    </p>\n  </form>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"viewCompStatus === 'issuerefundpage1' && isRefundRemission\">\n\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ISSUEREFUNDPAGE'> \n    <h1 class=\"heading-large\">Process refund</h1>\n    <h1 class=\"heading-medium\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h1>\n    <span id=\"how-contacted-conditional-hint govuk-font19px\" *ngIf=\"payment\" class=\"form-hint\">\n      Payment reference: {{paymentReference}}\n    </span>\n    <span id=\"how-contacted-conditional-hint govuk-font19px\" *ngIf=\"refundPaymentReference\" class=\"form-hint\">\n      Payment reference: {{refundPaymentReference}}\n    </span>\n    <h1 class=\"heading-large\">Why are you making this refund?\n      </h1>\n     \n\n      <div class=\"govuk-form-group\">\n          <form novalidate>\n              <div class=\"govuk-form-group\">\n                <form [formGroup]=\"remissionForm\" novalidate>\n                  <fieldset class=\"govuk-fieldset\" aria-describedby=\"how-contacted-conditional-hint\">\n                     \n                        <div\n                          [ngClass]=\"refundHasError ? 'govuk-radios govuk-radios--conditional form-group-error' : 'govuk-radios govuk-radios--conditional'\"\n                          data-module=\"govuk-radios\" >\n                          <p class=\"inline-error-message\" *ngIf=\"refundHasError\">\n                            <span *ngIf=\"refundHasError\">Select a reason why you\u2019re making this refund</span>\n                          </p>\n\n                         \n\n                          <div class = \"container-fluid\">\n                            <div class=\"row\">\n                            <div class=\"govuk-radios__item col-md-4\" *ngFor=\"let refund of commonRefundReasons; let i = index;\">\n                              <!-- <div *ngIf = \"{{refund.name}} !== 'Retrospective remission'\"> -->\n                                <input   class=\"govuk-radios__input\" id=\"{{refund.name}}\" name=\"refundReason\" type=\"radio\"\n                                formControlName=\"refundReason\" value={{refund.code}}\n                                  (change)=\"selectRadioButton(refund.code, refund.name)\">\n                                <label class=\"govuk-label--s govuk-radios__label govuk-font__custom\" for=\"how-contacted-conditional\">\n                                  {{refund.name}}\n                                </label>\n\n                                <div class=\"govuk-radios__conditional\" *ngIf=\"isRefundReasonsSelected && showReasonText && selectedRefundReason === refund.name \" >\n                                    <label class=\"govuk-label govuk-label--m\" for=\"{{refund.name}}\">\n                                        Enter reason\n                                    </label>\n                                    <div [ngClass]=\"{'form-group-error': isReasonEmpty}\">\n                                    <p  class=\"inline-error-message\" *ngIf=\"isReasonEmpty\">\n                                        <span *ngIf=\"isReasonEmpty\">Enter a reason why you\u2019re making this refund</span>\n                                      </p>\n                                     \n                                  <input class=\"govuk-input govuk-input--width-10\" [ngClass]=\"{'inline-error-class': isReasonEmpty}\" id=\"reason\" aria-label=\"reason\"  name=\"reason\" type=\"text\" aria-describedby=\"reason\" maxlength=\"30\" formControlName=\"reason\">\n                                </div>\n                                </div>\n                              <!-- </div> -->\n                            </div>\n                            </div>\n                          </div>\n                          <br/>\n                          <div>\n                              <select formControlName=\"refundDDReason\" class=\"govuk-select\" id=\"sort\"  (change)=\"selectchange($event)\">\n                                <option selected='selected' [defaultSelected]=true [value]=\"default\" >{{default}}</option>  \n                                <!-- <option value=\"\" selected='selected'>Select a different reason</option> -->\n                                  <option  *ngFor=\"let refund of refundReasons;\" id=\"{{refund.name}}\"  value=\"{{refund.code}}\">{{refund.name}}</option>\n                                </select>\n                            \n                          </div>\n                              <br/>\n                              <div class=\"govuk-radios__conditional\" *ngIf=\"showReasonText &&  !isRefundReasonsSelected\" >\n                                <div [ngClass]=\"{'form-group-error': isReasonEmpty}\">\n                                  <label class=\"govuk-label govuk-label--m\" for=\"amount\">\n                                      Enter reason\n                                  </label>\n                                  <p class=\"inline-error-message\" *ngIf=\"isReasonEmpty\">\n                                      <span *ngIf=\"isReasonEmpty\">Enter a reason why you\u2019re making this refund</span>\n                                    </p>\n                                <input class=\"govuk-input govuk-input--width-10\" [ngClass]=\"{'inline-error-class': isReasonEmpty}\" id=\"reason\" aria-label=\"reason\"  name=\"reason\" type=\"text\" aria-describedby=\"reason\" maxlength=\"{{reasonLength}}\"  formControlName=\"reason\">\n                                </div>\n                              </div>\n\n                        \n                        </div>\n                  </fieldset>\n                </form>\n             </div>\n             </form>\n      </div>\n      <div class=\"govuk-button-group\">\n          <button  (click)=\"gotoPartialFeeRefundScreen()\" class=\"govuk-button govuk-button--secondary\"> Previous</button>\n          <button (click)=\"gotoIssueRefundConfirmation(payment)\" class=\"govuk-button\"> Continue</button>\n      </div>\n      <p>\n        <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n            Cancel\n        </a>\n    </p>\n    \n</ng-container>\n<ng-container *ngIf=\"viewStatus === 'contactDetailsPage'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='CAPTUREADDRESSDETAILSPAGE'>      \n    <h1 class=\"govuk-heading-l\">Process refund</h1>\n    <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n    <span id=\"how-contacted-conditional-hint\" class=\"govuk-hint govuk-font19px\">\n      Payment reference: {{paymentReference}}\n    </span>\n  <ccpay-contact-details\n  [addressObj] = notification\n  (assignContactDetails)=\"getContactDetails($event, 'checkissuerefundpage')\"\n  (redirectToIssueRefund)=\"gotoRefundReasonPage()\" ></ccpay-contact-details>\n  <p>\n      <a (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'checkissuerefundpage'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='CHECKISSUEREFUNDPAGE'> \n    <div class=\"govuk-warning-text\">\n     \n        <h1 class=\"heading-large\"> Check your answers</h1>\n    </div>\n    <table class=\"govuk-table\">\n        \n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n            <td class=\"govuk-table__cell\">{{paymentReference}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment amount</td>\n            <td class=\"govuk-table__cell\">{{payment.amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n        </tr>\n        <tr>\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Reason for refund</td>\n        <td class=\"govuk-table__cell\">{{ displayRefundReason?.trim()  }} \n         <a (click)=\"changeIssueRefundReason()\" class=\"govuk-link right\" >Change</a>\n        </td>\n      </tr>\n      <tr class=\"govuk-table__row\" *ngIf=\"!isFullyRefund\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n        <td class=\"govuk-table__cell\">{{totalRefundAmount | currency:'GBP':'symbol-narrow':'1.2-2'}}\n        <a (click)=\"changeRefundAmount()\" class=\"govuk-link right\" >Change</a>\n        </td>\n      </tr>\n      <tr class=\"govuk-table__row\" *ngIf=\"isFullyRefund\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n        <td class=\"govuk-table__cell\">{{payment.amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send to</td>\n          <td class=\"govuk-table__cell\">{{orderParty}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send via</td>\n        <td class=\"govuk-table__cell whitespace-inherit\">\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'EMAIL'\" class=\"contactDetails-width\">\n            <strong>Email</strong>\n            <br/>\n            {{contactDetailsObj?.email?.trim()}}\n          </div>\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'LETTER'\" class=\"contactDetails-width\">\n            <strong>Post</strong>\n            <br/>\n            {{contactDetailsObj?.address_line?.trim()}}&nbsp;{{contactDetailsObj?.city?.trim()}}&nbsp;{{contactDetailsObj?.county?.trim()}}&nbsp;{{contactDetailsObj?.country?.trim()}}&nbsp;{{contactDetailsObj?.postal_code?.trim()}}\n          </div>\n          <a (click)=\"gotoContactDetailsPage(contactDetailsObj)\" class=\"govuk-link right\" >Change</a>\n        </td>\n      </tr>\n\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Notification</td>\n        <td class=\"govuk-table__cell\">{{templateInstructionType}}\n            <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n              Preview\n            </a>\n            <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n              Hide Preview\n            </a>\n        </td>\n      </tr>\n    </table>\n\n    <app-notification-preview *ngIf=\"notificationPreview\" \n    [payment]=\"payment\" \n    [contactDetails]=\"contactDetailsObj\"\n    [refundReason]=\"selectedRefundReasonCode\"\n    [refundAmount]=\"isFullyRefund ? payment.amount : totalRefundAmount\"></app-notification-preview>\n\n\n    <div class=\"govuk-button-group\">\n    <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"gotoContactDetailsPage(contactDetailsObj)\"> Previous </button>\n    <button type=\"submit\"\n    [disabled]=\"isConfirmationBtnDisabled\"\n    [ngClass]='isConfirmationBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'\n    (click)=\"confirmIssueRefund(isFullyRefund)\">\n      Submit refund\n    </button>\n    </div>\n    <p>\n        <a (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n            Cancel\n        </a>\n    </p>\n\n</ng-container>\n\n<!--Retro Refund-->\n<ng-container *ngIf=\"viewCompStatus === 'addrefundforremission'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDRESSDETAILSRETROREMISSIONPAGE'>      \n  <h1 class=\"govuk-heading-l\">Process refund</h1>\n  <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n  <span id=\"how-contacted-conditional-hint\" class=\"govuk-hint govuk-font19px\">\n    Payment reference: {{paymentReference}}\n  </span>\n<ccpay-contact-details \n[addressObj] = notification\n(assignContactDetails)=\"getContactDetails($event, 'addrefundcheckandanswer')\"\n(redirectToIssueRefund)=\"gotoServiceRequestPage($event)\" ></ccpay-contact-details>\n<p>\n    <a (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n        Cancel\n    </a>\n</p>\n</ng-container>\n<ng-container *ngIf=\"viewStatus === 'addrefundcheckandanswer'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDREFUNDFORREMISSION'> \n    <div class=\"govuk-warning-text\">\n     \n        <h1 class=\"heading-large\"> Check your answers</h1>\n    </div>\n    <table class=\"govuk-table\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Reason for refund</td>\n            <td class=\"govuk-table__cell\">Retrospective remission</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n            <td class=\"govuk-table__cell\">{{paymentReference}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n            <td class=\"govuk-table__cell\">{{remission.hwf_amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee code</td>\n            <td class=\"govuk-table__cell\">{{remission.fee_code}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee amount</td>\n            <td class=\"govuk-table__cell\">{{feeamount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send to</td>\n          <td class=\"govuk-table__cell\">{{orderParty}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send via</td>\n        <td class=\"govuk-table__cell whitespace-inherit\">\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'EMAIL'\" class=\"contactDetails-width\">\n            <strong>Email</strong>\n            <br/>\n            {{contactDetailsObj?.email?.trim()}}\n          </div>\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'LETTER'\" class=\"contactDetails-width\">\n            <strong>Post</strong>\n            <br/>\n            {{contactDetailsObj?.address_line?.trim()}}&nbsp;{{contactDetailsObj?.city?.trim()}}&nbsp;{{contactDetailsObj?.county?.trim()}}&nbsp;{{contactDetailsObj?.country?.trim()}}&nbsp;{{contactDetailsObj?.postal_code?.trim()}}\n          </div>\n          <a (click)=\"gotoAddressPage(contactDetailsObj)\" class=\"govuk-link right\" >Change</a>\n        </td>\n      </tr>\n\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Notification</td>\n        <td class=\"govuk-table__cell\">{{templateInstructionType}}\n            <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n              Preview\n            </a>\n            <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n              Hide Preview\n            </a>\n        </td>\n      </tr>\n    </table>\n\n    <app-notification-preview *ngIf=\"notificationPreview\" \n    [contactDetails]=\"contactDetailsObj\"\n    [paymentReference]=\"paymentReference\"\n    [payment]=\"paymentObj\"\n    [refundReason]=\"'RR036'\"\n    [refundAmount]=\"remission.hwf_amount\"></app-notification-preview>\n\n    <div class=\"govuk-button-group\">\n    <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"gotoAddressPage(contactDetailsObj)\">Previous</button>\n    <button type=\"submit\"\n    [disabled]=\"isConfirmationBtnDisabled\"\n    [ngClass]='isConfirmationBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'\n    (click)=\"processRefund()\">\n      Submit refund\n    </button>\n    </div>\n    <p>\n        <a href=\"javascript:void(0)\"  (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n            Cancel\n        </a>\n    </p>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'retrorefundconfirmationpage'\">\n  <div class=\"govuk-grid-row\">\n    <div >\n      <div class=\"govuk-panel govuk-panel--confirmation\">\n        <h1 class=\"govuk-panel__title\">\n          Refund submitted\n        </h1>\n        \n        <div class=\"govuk-panel__body\">\n          <p class=\"govuk-body white\"><strong>Refund reference: {{refundReference}}</strong></p>\n        </div>\n  \n      </div>\n      <div *ngIf=\"isPaymentSuccess\">\n      <h2 class=\"govuk-heading-l\">What happens next</h2>\n      <p class=\"govuk-body\">\n        A refund request for {{ refundAmount| currency:'GBP':'symbol-narrow':'1.2-2'}} has been passed to a team leader to approve.\n      </p>\n    </div>\n    <p class=\"govuk-body\">\n    <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPageCancelBtnClicked($event)\" class=\"govuk-link pointer\" data-module=\"govuk-button\">\n      Return to case\n  </a>\n    </p>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'order-full-view'\">\n  <ccpay-service-request\n  [viewStatus] = \"viewStatus\"\n  [orderRef] = \"orderRef\"\n  [isServiceRequest]=\"isServiceRequest\"\n  [orderStatus] = \"orderStatus\"\n  [orderCreated] = \"orderCreated\"\n  [orderParty] = \"orderParty\"\n  [orderCCDEvent] = \"orderCCDEvent\"\n  [orderDetail] = \"orderDetail\"\n  [LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n  [takePayment] = \"takePayment\"\n  [ccdCaseNumber] = \"ccdCaseNumber\"\n  [orderFeesTotal] = \"orderFeesTotal\"\n  [orderTotalPayments] = \"orderTotalPayments\"\n  [orderRemissionTotal] = \"orderRemissionTotal\">\n</ccpay-service-request>\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'payment-view'\">\n  <ccpay-payment-view \n  [LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n  [isTurnOff] = \"isTurnOff\" \n  [isTakePayment] = \"takePayment\"  \n  [caseType] = \"caseType\"\n  [isServiceRequest]=\"isServiceRequest\"\n  [orderRef] = \"orderRef\"\n  [orderStatus] = \"orderStatus\"\n  [orderCreated] = \"orderCreated\"\n  [orderParty] = \"orderParty\"\n  [orderCCDEvent] = \"orderCCDEvent\"\n  [orderDetail] = \"orderDetail\"\n  [orderFeesTotal] = \"orderFeesTotal\"\n  [orderTotalPayments] = \"orderTotalPayments\"\n  [orderRemissionTotal] = \"orderRemissionTotal\"\n  >\n</ccpay-payment-view>\n</ng-container>\n\n</div>", styles: [".add-remission .button{margin:20px 2px;padding:.5em;font-size:19px;font-weight:200}.add-remission td.govuk-table__cell{width:50%}.add-remission .govuk-button--secondary{background-color:#dee0e2;box-shadow:0 2px #858688;color:#0b0c0c;margin-right:.5em}.add-remission .govuk-warning-text__text,.add-remission .govuk-label--s,.add-remission .hmcts-currency-input__symbol{font-size:19px;font-weight:400}.add-remission .inline-error-class{outline:3px solid #a71414;outline-offset:0;border-color:#a71414}.add-remission .inline-error-message{color:#a71414;border-color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.add-remission .govuk-button,.add-remission .govuk-link{margin-right:1em;font-size:19px;font-weight:200}.add-remission .govuk-button-group{padding-top:2em}.add-remission .heading-medium{margin-top:.875em}.add-remission .heading-large{margin-top:.25em}.add-remission .govuk-panel--confirmation{color:#fff;background:#00703C}.add-remission .govuk-panel__title{font-size:5rem}.add-remission .govuk-body-m,.add-remission .govuk-body{font-size:2.1875rem}.add-remission .govuk-radios__item{clear:initial!important;display:inline-block;width:45%!important}.add-remission .govuk-radios__conditional{padding-top:12px!important}.add-remission .right{float:right;cursor:pointer}.add-remission .radio{float:right}.govuk-input,.govuk-font19px{font-size:19px}.govuk-select{font-size:19px;font-weight:400}.govuk-input--width-10{max-width:50ex}.govuk-label--m{font-size:19px;font-weight:400}.govuk-error-summary__body{font-size:19px!important}.govuk-error-summary__title{font-size:24px!important}.white{color:#fff}.pagesize{margin:2em;width:97%}.pointer{cursor:pointer}.col-18{min-width:18em}.col-6{min-width:6em}.col-8{min-width:8em}.col-1{min-width:1em}.col-25{width:25%!important}.col-24{width:24%!important}.left{text-align:left}.center{text-align:center}.col-60{width:60%;text-align:left}.margin-top--size{margin-top:-30px}.contactDetails-width{width:70%}.right{cursor:pointer}.form-hint{font-size:19px!important}.govuk-panel-border--confirmation{color:#0b0c0c;border:5px solid #00703C}.whitespace-inherit{white-space:inherit!important}.govuk-link{cursor:pointer}\n"] }]
    }], function () { return [{ type: i1$1.FormBuilder }, { type: i1$2.Router }, { type: PaymentViewService }, { type: NotificationService }, { type: PaymentLibComponent }, { type: RefundsService }, { type: i0.ChangeDetectorRef }, { type: OrderslistService }]; }, { fee: [{
            type: Input
        }], fees: [{
            type: Input
        }], payment: [{
            type: Input
        }], remission: [{
            type: Input
        }], ccdCaseNumber: [{
            type: Input
        }], caseType: [{
            type: Input
        }], viewCompStatus: [{
            type: Input
        }], paymentGroupRef: [{
            type: Input
        }], isTurnOff: [{
            type: Input
        }], isRefundRemission: [{
            type: Input
        }], isStrategicFixEnable: [{
            type: Input
        }], paidAmount: [{
            type: Input
        }], isFromRefundListPage: [{
            type: Input
        }], isFromPaymentDetailPage: [{
            type: Input
        }], isFromServiceRequestPage: [{
            type: Input
        }], isFullyRefund: [{
            type: Input,
            args: ['isFullyRefund']
        }], feeamount: [{
            type: Input
        }], refundPaymentReference: [{
            type: Input
        }], isFromRefundStatusPage: [{
            type: Input
        }], changeRefundReason: [{
            type: Input
        }], isServiceRequest: [{
            type: Input,
            args: ["isServiceRequest"]
        }], LOGGEDINUSERROLES: [{
            type: Input,
            args: ['LOGGEDINUSERROLES']
        }], orderDetail: [{
            type: Input,
            args: ['orderDetail']
        }], orderRef: [{
            type: Input,
            args: ['orderRef']
        }], orderStatus: [{
            type: Input,
            args: ['orderStatus']
        }], orderParty: [{
            type: Input,
            args: ['orderParty']
        }], orderCreated: [{
            type: Input,
            args: ['orderCreated']
        }], orderCCDEvent: [{
            type: Input,
            args: ['orderCCDEvent']
        }], takePayment: [{
            type: Input,
            args: ['takepayment']
        }], orderFeesTotal: [{
            type: Input,
            args: ['orderFeesTotal']
        }], orderTotalPayments: [{
            type: Input,
            args: ['orderTotalPayments']
        }], orderRemissionTotal: [{
            type: Input,
            args: ['orderRemissionTotal']
        }], cancelRemission: [{
            type: Output
        }], refundListReason: [{
            type: Output
        }], refundListAmount: [{
            type: Output
        }], refundFees: [{
            type: Output
        }] }); })();

// import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';
function ServiceRequestComponent_ng_container_0_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 27)(1, "a", 28);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_0_li_3_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r21.goToCaseTransationPage($event)); });
    i0.ɵɵtext(2, "Back");
    i0.ɵɵelementEnd()();
} }
function ServiceRequestComponent_ng_container_0_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 27)(1, "a", 29);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_0_li_4_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r24); const ctx_r23 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r23.goToServiceRequestPage()); });
    i0.ɵɵtext(2, "Back");
    i0.ɵɵelementEnd()();
} }
function ServiceRequestComponent_ng_container_0_td_42_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 30);
    i0.ɵɵtext(1, "Fee");
    i0.ɵɵelementEnd();
} }
function ServiceRequestComponent_ng_container_0_td_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 31);
    i0.ɵɵtext(1, "Fee");
    i0.ɵɵelementEnd();
} }
function ServiceRequestComponent_ng_container_0_td_48_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 21);
} }
function ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 38);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r27 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(fee_r27.description);
} }
function ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 39);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r27 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(fee_r27.description);
} }
function ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_9_Template(rf, ctx) { if (rf & 1) {
    const _r36 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 40)(1, "button", 41);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_9_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r36); const fee_r27 = i0.ɵɵnextContext().$implicit; const ctx_r34 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r34.addRemission(fee_r27)); });
    i0.ɵɵtext(2, " Add remission");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const fee_r27 = i0.ɵɵnextContext().$implicit;
    const ctx_r31 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", !ctx_r31.chkIsAddRemissionBtnEnable(fee_r27));
} }
function ServiceRequestComponent_ng_container_0_tbody_49_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 18);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_1_Template, 2, 1, "td", 34);
    i0.ɵɵtemplate(2, ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_2_Template, 2, 1, "td", 35);
    i0.ɵɵelementStart(3, "td", 36);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 36);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, ServiceRequestComponent_ng_container_0_tbody_49_tr_1_td_9_Template, 3, 1, "td", 37);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r27 = ctx.$implicit;
    const ctx_r26 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r26.isServiceRequest === "false");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r26.isServiceRequest !== "false");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate2("", fee_r27.volume ? fee_r27.volume : "-", " X ", i0.ɵɵpipeBind4(5, 6, fee_r27.calculated_amount / fee_r27.volume, "GBP", "symbol-narrow", "1.2-2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(8, 11, fee_r27 == null ? null : fee_r27.net_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r26.isServiceRequest === "false");
} }
function ServiceRequestComponent_ng_container_0_tbody_49_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 32);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_tbody_49_tr_1_Template, 10, 16, "tr", 33);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const order_r25 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", order_r25.fees);
} }
function ServiceRequestComponent_ng_container_0_tbody_50_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 18)(1, "td", 43);
    i0.ɵɵtext(2, "No fees recorded");
    i0.ɵɵelementEnd()();
} }
function ServiceRequestComponent_ng_container_0_tbody_50_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 32);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_tbody_50_tr_1_Template, 3, 0, "tr", 42);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const order_r38 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (order_r38.fees == null ? null : order_r38.fees.length) === 0);
} }
function ServiceRequestComponent_ng_container_0_ng_container_55_div_1_tbody_13_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r48 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 18)(1, "td", 52);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 52);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "td", 52);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 52);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 53)(11, "button", 41);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_0_ng_container_55_div_1_tbody_13_tr_1_Template_button_click_11_listener() { const restoredCtx = i0.ɵɵrestoreView(_r48); const remission_r45 = restoredCtx.$implicit; const order_r40 = i0.ɵɵnextContext(3).$implicit; const ctx_r46 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r46.addRefundForRemission(order_r40.payments[0], remission_r45, order_r40.fees)); });
    i0.ɵɵtext(12, " Add refund");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const remission_r45 = ctx.$implicit;
    const ctx_r44 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r45 == null ? null : remission_r45.hwf_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r45 == null ? null : remission_r45.remission_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r45 == null ? null : remission_r45.fee_code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(9, 5, remission_r45 == null ? null : remission_r45.hwf_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", !ctx_r44.chkIsAddRefundBtnEnable(remission_r45));
} }
function ServiceRequestComponent_ng_container_0_ng_container_55_div_1_tbody_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 32);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_ng_container_55_div_1_tbody_13_tr_1_Template, 13, 10, "tr", 33);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const order_r40 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", order_r40.remissions);
} }
function ServiceRequestComponent_ng_container_0_ng_container_55_div_1_div_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "span");
    i0.ɵɵtext(2, "No help with fees or remissions.");
    i0.ɵɵelementEnd()();
} }
function ServiceRequestComponent_ng_container_0_ng_container_55_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15)(1, "table", 16)(2, "thead", 17)(3, "tr", 18)(4, "td", 45);
    i0.ɵɵtext(5, "Help with fees or remission code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 46);
    i0.ɵɵtext(7, "Reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 47);
    i0.ɵɵtext(9, "Fee");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 47);
    i0.ɵɵtext(11, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(12, "td", 48);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(13, ServiceRequestComponent_ng_container_0_ng_container_55_div_1_tbody_13_Template, 2, 1, "tbody", 49);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(14, ServiceRequestComponent_ng_container_0_ng_container_55_div_1_div_14_Template, 3, 0, "div", 0);
    i0.ɵɵelementStart(15, "div", 50)(16, "p");
    i0.ɵɵtext(17);
    i0.ɵɵpipe(18, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(19, "div", 50)(20, "p", 51);
    i0.ɵɵtext(21);
    i0.ɵɵpipe(22, "currency");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const order_r40 = i0.ɵɵnextContext().$implicit;
    const ctx_r41 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(13);
    i0.ɵɵproperty("ngIf", (order_r40.remissions == null ? null : order_r40.remissions.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (order_r40.remissions == null ? null : order_r40.remissions.length) === 0);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("Total reductions: ", i0.ɵɵpipeBind4(18, 4, ctx_r41.orderRemissionTotal, "GBP", "symbol-narrow", "1.2-2"), "");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("Total fees to pay: ", i0.ɵɵpipeBind4(22, 9, ctx_r41.orderFeesTotal - ctx_r41.orderRemissionTotal, "GBP", "symbol-narrow", "1.2-2"), "");
} }
function ServiceRequestComponent_ng_container_0_ng_container_55_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_ng_container_55_div_1_Template, 23, 14, "div", 44);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const order_r40 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", order_r40.remissions);
} }
function ServiceRequestComponent_ng_container_0_ng_container_56_div_1_tbody_12_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r58 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 18)(1, "td", 52)(2, "a", 57);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_0_ng_container_56_div_1_tbody_12_tr_1_Template_a_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r58); const payment_r56 = restoredCtx.$implicit; const ctx_r57 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r57.goToPayementView(payment_r56.paymentGroupReference, payment_r56.reference, payment_r56.method)); });
    i0.ɵɵtext(3, "Review");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "td", 52);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 52);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 40)(11, "button", 41);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_0_ng_container_56_div_1_tbody_12_tr_1_Template_button_click_11_listener() { const restoredCtx = i0.ɵɵrestoreView(_r58); const payment_r56 = restoredCtx.$implicit; const ctx_r59 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r59.issueRefund(payment_r56)); });
    i0.ɵɵtext(12, "Issue refund");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const payment_r56 = ctx.$implicit;
    const ctx_r55 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, payment_r56 == null ? null : payment_r56.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(9, 6, payment_r56 == null ? null : payment_r56.amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", !ctx_r55.chkIsIssueRefundBtnEnable(payment_r56));
} }
function ServiceRequestComponent_ng_container_0_ng_container_56_div_1_tbody_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 32);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_ng_container_56_div_1_tbody_12_tr_1_Template, 13, 11, "tr", 33);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const order_r51 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", order_r51.payments);
} }
function ServiceRequestComponent_ng_container_0_ng_container_56_div_1_div_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "span", 58);
    i0.ɵɵtext(2, "No Payments recorded");
    i0.ɵɵelementEnd()();
} }
function ServiceRequestComponent_ng_container_0_ng_container_56_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10)(1, "h3", 55);
    i0.ɵɵtext(2, "Payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "table", 16)(4, "thead", 17)(5, "tr", 18);
    i0.ɵɵelement(6, "td", 56);
    i0.ɵɵelementStart(7, "td", 21);
    i0.ɵɵtext(8, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 21);
    i0.ɵɵtext(10, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(11, "td", 21);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(12, ServiceRequestComponent_ng_container_0_ng_container_56_div_1_tbody_12_Template, 2, 1, "tbody", 49);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(13, ServiceRequestComponent_ng_container_0_ng_container_56_div_1_div_13_Template, 3, 0, "div", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const order_r51 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(12);
    i0.ɵɵproperty("ngIf", (order_r51.payments == null ? null : order_r51.payments.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", order_r51.payments === undefined || order_r51.payments === null);
} }
function ServiceRequestComponent_ng_container_0_ng_container_56_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_ng_container_56_div_1_Template, 14, 2, "div", 54);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const order_r51 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", order_r51.payments);
} }
function ServiceRequestComponent_ng_container_0_div_57_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "p", 59);
    i0.ɵɵtext(2, "Total left to pay: ");
    i0.ɵɵelementStart(3, "b");
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r62 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 1, ctx_r62.orderFeesTotal - ctx_r62.orderRemissionTotal - ctx_r62.orderTotalPayments, "GBP", "symbol-narrow", "1.2-2"));
} }
function ServiceRequestComponent_ng_container_0_div_57_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "p", 59);
    i0.ɵɵtext(2, "Total left to pay: ");
    i0.ɵɵelementStart(3, "b");
    i0.ɵɵtext(4, "0");
    i0.ɵɵelementEnd()()();
} }
function ServiceRequestComponent_ng_container_0_div_57_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, ServiceRequestComponent_ng_container_0_div_57_div_1_Template, 6, 6, "div", 0);
    i0.ɵɵtemplate(2, ServiceRequestComponent_ng_container_0_div_57_div_2_Template, 5, 0, "div", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r20.orderFeesTotal - ctx_r20.orderRemissionTotal - ctx_r20.orderTotalPayments > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r20.orderFeesTotal - ctx_r20.orderRemissionTotal - ctx_r20.orderTotalPayments < 0);
} }
function ServiceRequestComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 7)(2, "ol", 8);
    i0.ɵɵtemplate(3, ServiceRequestComponent_ng_container_0_li_3_Template, 3, 0, "li", 9);
    i0.ɵɵtemplate(4, ServiceRequestComponent_ng_container_0_li_4_Template, 3, 0, "li", 9);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(5, "div", 10)(6, "div", 11)(7, "h1", 12);
    i0.ɵɵtext(8, "Service request");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(9, "table")(10, "tbody")(11, "tr", 13)(12, "td", 14);
    i0.ɵɵtext(13, "Service request reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td");
    i0.ɵɵtext(15);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(16, "tr", 13)(17, "td", 14);
    i0.ɵɵtext(18, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td");
    i0.ɵɵtext(20);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(21, "tr", 13)(22, "td", 14);
    i0.ɵɵtext(23, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "td");
    i0.ɵɵtext(25);
    i0.ɵɵpipe(26, "date");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(27, "tr", 13)(28, "td", 14);
    i0.ɵɵtext(29, "Party");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(30, "td");
    i0.ɵɵtext(31);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(32, "tr", 13)(33, "td", 14);
    i0.ɵɵtext(34, "CCD event");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(35, "td");
    i0.ɵɵtext(36);
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementStart(37, "div", 15)(38, "div", 11)(39, "table", 16)(40, "thead", 17)(41, "tr", 18);
    i0.ɵɵtemplate(42, ServiceRequestComponent_ng_container_0_td_42_Template, 2, 0, "td", 19);
    i0.ɵɵtemplate(43, ServiceRequestComponent_ng_container_0_td_43_Template, 2, 0, "td", 20);
    i0.ɵɵelementStart(44, "td", 21);
    i0.ɵɵtext(45, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(46, "td", 21);
    i0.ɵɵtext(47, "Total");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(48, ServiceRequestComponent_ng_container_0_td_48_Template, 1, 0, "td", 22);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(49, ServiceRequestComponent_ng_container_0_tbody_49_Template, 2, 1, "tbody", 23);
    i0.ɵɵtemplate(50, ServiceRequestComponent_ng_container_0_tbody_50_Template, 2, 1, "tbody", 23);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(51, "div", 24)(52, "p", 25);
    i0.ɵɵtext(53);
    i0.ɵɵpipe(54, "currency");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(55, ServiceRequestComponent_ng_container_0_ng_container_55_Template, 2, 1, "ng-container", 26);
    i0.ɵɵtemplate(56, ServiceRequestComponent_ng_container_0_ng_container_56_Template, 2, 1, "ng-container", 26);
    i0.ɵɵtemplate(57, ServiceRequestComponent_ng_container_0_div_57_Template, 3, 2, "div", 0);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r0.isServiceRequest === "false");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isServiceRequest !== "false");
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r0.orderRef);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r0.orderStatus);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(26, 16, ctx_r0.orderCreated, "dd MMMM yyyy"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r0.orderParty);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r0.orderCCDEvent);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", ctx_r0.isServiceRequest === "false");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isServiceRequest !== "false");
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r0.isServiceRequest === "false");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.orderDetail);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.orderDetail);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("Total fees: ", i0.ɵɵpipeBind4(54, 19, ctx_r0.orderFeesTotal, "GBP", "symbol-narrow", "1.2-2"), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.orderDetail);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.orderDetail);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isServiceRequest === "false");
} }
function ServiceRequestComponent_ccpay_add_remission_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-add-remission", 60);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r1.isTurnOff)("isStrategicFixEnable", ctx_r1.isStrategicFixEnable)("viewCompStatus", ctx_r1.viewStatus)("fee", ctx_r1.feeId)("orderStatus", ctx_r1.orderStatus)("paidAmount", ctx_r1.orderTotalPayments)("isRefundRemission", ctx_r1.isRefundRemission)("caseType", ctx_r1.caseType)("isServiceRequest", ctx_r1.isServiceRequest)("paymentGroupRef", ctx_r1.orderRef)("isFromServiceRequestPage", true)("payment", ctx_r1.payment)("ccdCaseNumber", ctx_r1.ccdCaseNumber)("orderRef", ctx_r1.orderRef)("orderStatus", ctx_r1.orderStatus)("orderCreated", ctx_r1.orderCreated)("orderParty", ctx_r1.orderParty)("orderCCDEvent", ctx_r1.orderCCDEvent)("orderDetail", ctx_r1.orderDetail)("LOGGEDINUSERROLES", ctx_r1.LOGGEDINUSERROLES)("takepayment", ctx_r1.takePayment)("orderFeesTotal", ctx_r1.orderFeesTotal)("orderTotalPayments", ctx_r1.orderTotalPayments)("orderRemissionTotal", ctx_r1.orderRemissionTotal);
} }
function ServiceRequestComponent_ccpay_add_remission_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-add-remission", 61);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r2.isTurnOff)("isStrategicFixEnable", ctx_r2.isStrategicFixEnable)("viewCompStatus", ctx_r2.viewStatus)("isFromServiceRequestPage", ctx_r2.isFromServiceRequestPage)("isFromPaymentDetailPage", ctx_r2.isFromPaymentDetailPage)("payment", ctx_r2.payment)("orderStatus", ctx_r2.orderStatus)("paidAmount", ctx_r2.orderTotalPayments)("isRefundRemission", ctx_r2.isRefundRemission)("caseType", ctx_r2.caseType)("paymentGroupRef", ctx_r2.orderRef)("ccdCaseNumber", ctx_r2.ccdCaseNumber)("orderRef", ctx_r2.orderRef)("orderStatus", ctx_r2.orderStatus)("orderCreated", ctx_r2.orderCreated)("orderParty", ctx_r2.orderParty)("orderCCDEvent", ctx_r2.orderCCDEvent)("orderDetail", ctx_r2.orderDetail)("isFullyRefund", ctx_r2.isFullyRefund)("fees", ctx_r2.paymentFees)("LOGGEDINUSERROLES", ctx_r2.LOGGEDINUSERROLES)("isFromRefundListPage", false)("takepayment", ctx_r2.takePayment)("orderFeesTotal", ctx_r2.orderFeesTotal)("orderTotalPayments", ctx_r2.orderTotalPayments)("orderRemissionTotal", ctx_r2.orderRemissionTotal);
} }
function ServiceRequestComponent_ccpay_add_remission_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-add-remission", 62);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r3.isTurnOff)("isStrategicFixEnable", ctx_r3.isStrategicFixEnable)("viewCompStatus", ctx_r3.viewStatus)("payment", ctx_r3.payment)("orderStatus", ctx_r3.orderStatus)("paidAmount", ctx_r3.orderTotalPayments)("isRefundRemission", ctx_r3.isRefundRemission)("caseType", ctx_r3.caseType)("feeamount", ctx_r3.remissionFeeAmt)("remission", ctx_r3.remissions)("isFromServiceRequestPage", ctx_r3.isServiceRequest)("ccdCaseNumber", ctx_r3.ccdCaseNumber)("orderRef", ctx_r3.orderRef)("orderStatus", ctx_r3.orderStatus)("orderCreated", ctx_r3.orderCreated)("orderParty", ctx_r3.orderParty)("orderCCDEvent", ctx_r3.orderCCDEvent)("orderDetail", ctx_r3.orderDetail)("LOGGEDINUSERROLES", ctx_r3.LOGGEDINUSERROLES)("takepayment", ctx_r3.takePayment)("orderFeesTotal", ctx_r3.orderFeesTotal)("orderTotalPayments", ctx_r3.orderTotalPayments)("orderRemissionTotal", ctx_r3.orderRemissionTotal);
} }
function ServiceRequestComponent_ccpay_payment_view_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-payment-view", 63);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("LOGGEDINUSERROLES", ctx_r4.LOGGEDINUSERROLES)("isTurnOff", ctx_r4.isTurnOff)("isTakePayment", ctx_r4.takePayment)("caseType", ctx_r4.caseType)("orderRef", ctx_r4.orderRef)("orderStatus", ctx_r4.orderStatus)("orderCreated", ctx_r4.orderCreated)("orderParty", ctx_r4.orderParty)("orderCCDEvent", ctx_r4.orderCCDEvent)("orderDetail", ctx_r4.orderDetail)("orderFeesTotal", ctx_r4.orderFeesTotal)("orderTotalPayments", ctx_r4.orderTotalPayments)("orderRemissionTotal", ctx_r4.orderRemissionTotal)("isServiceRequest", ctx_r4.isServiceRequest);
} }
function ServiceRequestComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r65 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 64)(2, "span", 65);
    i0.ɵɵtext(3, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "strong", 66)(5, "span", 67);
    i0.ɵɵtext(6, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, " Are you sure you want to delete this fee? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "div", 68)(9, "form", 69)(10, "button", 70);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_5_Template_button_click_10_listener() { i0.ɵɵrestoreView(_r65); const ctx_r64 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r64.cancelRemoval()); });
    i0.ɵɵtext(11, " Cancel ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "button", 71);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_5_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r65); const ctx_r66 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r66.removeFee(ctx_r66.feeId)); });
    i0.ɵɵtext(13, " Remove ");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(12);
    i0.ɵɵproperty("disabled", ctx_r5.isRemoveBtnDisabled)("ngClass", ctx_r5.isRemoveBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function ServiceRequestComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r69 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 72, 73);
    i0.ɵɵelementStart(3, "h1", 74);
    i0.ɵɵtext(4, "Issue refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h1", 55);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 75);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "div", 76)(11, "fieldset", 77)(12, "legend", 78)(13, "h1", 55);
    i0.ɵɵtext(14, "Select payment to refund");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "div", 79)(16, "div", 80)(17, "input", 81);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_7_Template_input_click_17_listener() { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r68.selectPymentOption("op")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "label", 82);
    i0.ɵɵtext(19);
    i0.ɵɵpipe(20, "number");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(21, "div", 80)(22, "input", 83);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_7_Template_input_click_22_listener() { i0.ɵɵrestoreView(_r69); const ctx_r70 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r70.selectPymentOption("fp")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "label", 84);
    i0.ɵɵtext(24);
    i0.ɵɵpipe(25, "number");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(26, "button", 85);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_7_Template_button_click_26_listener() { i0.ɵɵrestoreView(_r69); const ctx_r71 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r71.goToPaymentViewComp()); });
    i0.ɵɵtext(27, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(28, "button", 86);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_7_Template_button_click_28_listener() { i0.ɵɵrestoreView(_r69); const ctx_r72 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r72.continuePayment(ctx_r72.paymentGroupList)); });
    i0.ɵɵtext(29, " Continue");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 6, ctx_r6.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r6.paymentGroupList == null ? null : ctx_r6.paymentGroupList.payments[0] == null ? null : ctx_r6.paymentGroupList.payments[0].reference, " ");
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate1(" Over payment \u00A3", i0.ɵɵpipeBind2(20, 8, ctx_r6.getOverPaymentValue(), ".2"), " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" Full payment \u00A3", i0.ɵɵpipeBind2(25, 11, ctx_r6.paymentGroupList == null ? null : ctx_r6.paymentGroupList.payments[0] == null ? null : ctx_r6.paymentGroupList.payments[0].amount, ".2"), " ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("disabled", ctx_r6.isContinueBtnDisabled)("ngClass", ctx_r6.isContinueBtnDisabled ? "button button--disabled govuk-!-margin-right-1 govuk-font19px" : "button govuk-!-margin-right-1 govuk-font19px");
} }
function ServiceRequestComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r75 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 87, 73);
    i0.ɵɵelementStart(3, "h1", 88);
    i0.ɵɵtext(4, "Issue refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 89);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 90);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "ccpay-contact-details", 91);
    i0.ɵɵlistener("assignContactDetails", function ServiceRequestComponent_ng_container_8_Template_ccpay_contact_details_assignContactDetails_10_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r74 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r74.getContactDetails($event)); })("redirectToIssueRefund", function ServiceRequestComponent_ng_container_8_Template_ccpay_contact_details_redirectToIssueRefund_10_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r76 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r76.gotoPaymentSelectPage($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "p")(12, "a", 92);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_8_Template_a_click_12_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r77 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r77.goToCaseTransationPage($event)); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 3, ctx_r7.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r7.paymentGroupList == null ? null : ctx_r7.paymentGroupList.payments[0] == null ? null : ctx_r7.paymentGroupList.payments[0].reference, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("addressObj", ctx_r7.notification);
} }
function ServiceRequestComponent_ng_container_9_div_44_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 103)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r79 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r79.contactDetailsObj == null ? null : ctx_r79.contactDetailsObj.email == null ? null : ctx_r79.contactDetailsObj.email.trim(), " ");
} }
function ServiceRequestComponent_ng_container_9_div_45_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 103)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r80 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r80.contactDetailsObj == null ? null : ctx_r80.contactDetailsObj.address_line == null ? null : ctx_r80.contactDetailsObj.address_line.trim(), "\u00A0", ctx_r80.contactDetailsObj == null ? null : ctx_r80.contactDetailsObj.city == null ? null : ctx_r80.contactDetailsObj.city.trim(), "\u00A0", ctx_r80.contactDetailsObj == null ? null : ctx_r80.contactDetailsObj.county == null ? null : ctx_r80.contactDetailsObj.county.trim(), "\u00A0", ctx_r80.contactDetailsObj == null ? null : ctx_r80.contactDetailsObj.country == null ? null : ctx_r80.contactDetailsObj.country.trim(), "\u00A0", ctx_r80.contactDetailsObj == null ? null : ctx_r80.contactDetailsObj.postal_code == null ? null : ctx_r80.contactDetailsObj.postal_code.trim(), " ");
} }
function ServiceRequestComponent_ng_container_9_a_53_Template(rf, ctx) { if (rf & 1) {
    const _r85 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 104);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_9_a_53_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r85); const ctx_r84 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r84.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function ServiceRequestComponent_ng_container_9_a_54_Template(rf, ctx) { if (rf & 1) {
    const _r87 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 104);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_9_a_54_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r87); const ctx_r86 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r86.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function ServiceRequestComponent_ng_container_9_app_notification_preview_55_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 105);
} if (rf & 2) {
    const ctx_r83 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("payment", ctx_r83.paymentGroupList.payments[0])("contactDetails", ctx_r83.contactDetailsObj)("refundReason", "RR037")("refundAmount", ctx_r83.getOverPaymentValue());
} }
function ServiceRequestComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r89 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 93, 73);
    i0.ɵɵelementStart(3, "div", 64)(4, "h1", 74);
    i0.ɵɵtext(5, " Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "table", 94)(7, "tr", 18)(8, "td", 95);
    i0.ɵɵtext(9, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 36);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 18)(13, "td", 95);
    i0.ɵɵtext(14, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 36);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(18, "tr", 18)(19, "td", 95);
    i0.ɵɵtext(20, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 36);
    i0.ɵɵtext(22);
    i0.ɵɵpipe(23, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(24, "tr", 18)(25, "td", 95);
    i0.ɵɵtext(26, "Refund amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "td", 36);
    i0.ɵɵtext(28);
    i0.ɵɵpipe(29, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(30, "tr", 18)(31, "td", 95);
    i0.ɵɵtext(32, "Refund reason");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(33, "td", 36);
    i0.ɵɵtext(34, "Over payment");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(35, "tr", 18)(36, "td", 95);
    i0.ɵɵtext(37, "Send to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(38, "td", 36);
    i0.ɵɵtext(39);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(40, "tr", 18)(41, "td", 95);
    i0.ɵɵtext(42, "Send via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(43, "td", 52);
    i0.ɵɵtemplate(44, ServiceRequestComponent_ng_container_9_div_44_Template, 5, 1, "div", 96);
    i0.ɵɵtemplate(45, ServiceRequestComponent_ng_container_9_div_45_Template, 5, 5, "div", 96);
    i0.ɵɵelementStart(46, "a", 97);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_9_Template_a_click_46_listener() { i0.ɵɵrestoreView(_r89); const ctx_r88 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r88.gotoAddressPage(ctx_r88.contactDetailsObj)); });
    i0.ɵɵtext(47, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(48, "tr", 18)(49, "td", 95);
    i0.ɵɵtext(50, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(51, "td", 36);
    i0.ɵɵtext(52);
    i0.ɵɵtemplate(53, ServiceRequestComponent_ng_container_9_a_53_Template, 2, 0, "a", 98);
    i0.ɵɵtemplate(54, ServiceRequestComponent_ng_container_9_a_54_Template, 2, 0, "a", 98);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(55, ServiceRequestComponent_ng_container_9_app_notification_preview_55_Template, 1, 4, "app-notification-preview", 99);
    i0.ɵɵelementStart(56, "button", 100);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_9_Template_button_click_56_listener() { i0.ɵɵrestoreView(_r89); const ctx_r90 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r90.gotoAddressPage(ctx_r90.contactDetailsObj)); });
    i0.ɵɵtext(57, "Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(58, "button", 101);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_9_Template_button_click_58_listener() { i0.ɵɵrestoreView(_r89); const ctx_r91 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r91.processRefund()); });
    i0.ɵɵtext(59, " Submit refund ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(60, "p")(61, "a", 102);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_9_Template_a_click_61_listener($event) { i0.ɵɵrestoreView(_r89); const ctx_r92 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r92.goToCaseTransationPage($event)); });
    i0.ɵɵtext(62, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r8.paymentGroupList.payments[0].reference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(17, 12, ctx_r8.paymentGroupList.payments[0].amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(23, 17, ctx_r8.paymentGroupList == null ? null : ctx_r8.paymentGroupList.fees[0] == null ? null : ctx_r8.paymentGroupList.fees[0].net_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(29, 22, ctx_r8.getOverPaymentValue(), "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r8.orderParty);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r8.contactDetailsObj == null ? null : ctx_r8.contactDetailsObj.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r8.contactDetailsObj == null ? null : ctx_r8.contactDetailsObj.notification_type) === "LETTER");
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("", ctx_r8.templateInstructionType, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r8.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r8.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r8.notificationPreview);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", ctx_r8.isContinueBtnDisabled ? "button button--disabled govuk-!-margin-right-1 govuk-font19px" : "button govuk-!-margin-right-1 govuk-font19px");
} }
function ServiceRequestComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r95 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 106, 73);
    i0.ɵɵelementStart(3, "div", 107)(4, "div")(5, "div", 108)(6, "h1", 109);
    i0.ɵɵtext(7, " Refund submitted ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "div", 110)(9, "p", 111)(10, "strong");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(12, "h2", 88);
    i0.ɵɵtext(13, "What happens next");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "p", 112);
    i0.ɵɵtext(15);
    i0.ɵɵpipe(16, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "p", 112)(18, "a", 113);
    i0.ɵɵlistener("click", function ServiceRequestComponent_ng_container_10_Template_a_click_18_listener($event) { i0.ɵɵrestoreView(_r95); const ctx_r94 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r94.goToCaseTransationPage($event)); });
    i0.ɵɵtext(19, " Return to case ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate1("Refund reference: ", ctx_r9.refundReference, "");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" A refund request for ", i0.ɵɵpipeBind4(16, 2, ctx_r9.refundAmount, "GBP", "symbol-narrow", "1.2-2"), " has been created and will be passed to a team leader to approve. ");
} }
function ServiceRequestComponent_ccpay_case_transactions_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-case-transactions", 114);
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isFromServiceRequestPage", ctx_r10.isServiceRequest)("LOGGEDINUSERROLES", ctx_r10.LOGGEDINUSERROLES)("isTakePayment", ctx_r10.takePayment);
} }
class ServiceRequestComponent {
    paymentLibComponent;
    paymentViewService;
    OrderslistService;
    notificationService;
    cd;
    router;
    LOGGEDINUSERROLES;
    viewStatus;
    orderDetail;
    orderRef;
    orderStatus;
    orderParty;
    orderCreated;
    orderCCDEvent;
    orderFeesTotal;
    orderTotalPayments;
    orderRemissionTotal;
    paymentGroupList;
    takePayment;
    ccdCaseNumber;
    isServiceRequest;
    goToServiceRquestComponent = new EventEmitter();
    viewCompStatus;
    servicerequest;
    paymentType;
    excReference;
    paymentGroups = [];
    payments = [];
    nonPayments = [];
    allPayments = [];
    remissions = [];
    paymentFees;
    fees;
    errorMessage;
    totalFees;
    totalPayments;
    totalNonOffPayments;
    totalRemissions;
    selectedOption;
    dcnNumber;
    paymentRef;
    isTurnOff;
    isRefundRemission = true;
    isStrategicFixEnable;
    isAddFeeBtnEnabled = true;
    isExceptionRecord = false;
    isUnprocessedRecordSelected = false;
    exceptionRecordReference;
    isAnyFeeGroupAvilable = true;
    isHistoricGroupAvailable = false;
    isBulkScanEnable;
    isRemissionsMatch;
    isRemoveBtnDisabled = false;
    feeId;
    clAmountDue = 0;
    unprocessedRecordCount;
    isFeeRecordsExist = false;
    isGrpOutstandingAmtPositive = false;
    totalRefundAmount;
    caseType;
    isConfirmationBtnDisabled;
    refundReference;
    refundAmount;
    payment;
    paymentGroup;
    paymentView;
    isAddRemissionEnable = false;
    orderRemissionDetails = [];
    orderLevelFees = [];
    cpoDetails = null;
    serviceRequestValue;
    orderAddBtnEnable;
    isFromPaymentDetailPage;
    contactDetailsObj;
    notification;
    isCPODown;
    test;
    isPBA = false;
    isIssueRefunfBtnEnable = false;
    isAddRemissionBtnEnabled = false;
    isRefundRemissionBtnEnable = false;
    allowedRolesToAccessRefund = ['payments-refund-approver', 'payments-refund'];
    isFromServiceRequestPage;
    navigationpage;
    remissionFeeAmt;
    isContinueBtnDisabled = true;
    isFullyRefund;
    templateInstructionType;
    notificationPreview;
    constructor(paymentLibComponent, paymentViewService, OrderslistService, notificationService, cd, router) {
        this.paymentLibComponent = paymentLibComponent;
        this.paymentViewService = paymentViewService;
        this.OrderslistService = OrderslistService;
        this.notificationService = notificationService;
        this.cd = cd;
        this.router = router;
    }
    ngOnInit() {
        this.isTurnOff = this.paymentLibComponent.ISTURNOFF;
        this.isServiceRequest = 'false';
        if (this.viewStatus === undefined) {
            this.viewStatus = this.paymentLibComponent.viewName;
        }
        if (this.paymentLibComponent.isFromServiceRequestPage && this.paymentLibComponent.isFromPaymentDetailPage) {
            this.OrderslistService.getorderRefs().subscribe((data) => this.orderRef = data);
            this.OrderslistService.getorderCCDEvents().subscribe((data) => this.orderCCDEvent = data);
            this.OrderslistService.getorderCreateds().subscribe((data) => this.orderCreated = data);
            this.OrderslistService.getorderDetail().subscribe((data) => this.orderDetail = data);
            this.OrderslistService.getorderPartys().subscribe((data) => this.orderParty = data);
            this.OrderslistService.getorderRemissionTotals().subscribe((data) => this.orderRemissionTotal = data);
            this.OrderslistService.getorderFeesTotals().subscribe((data) => this.orderFeesTotal = data);
            this.OrderslistService.getoorderTotalPaymentss().subscribe((data) => this.orderTotalPayments = data);
        }
        if (this.paymentLibComponent.isFromServiceRequestPage && this.paymentLibComponent.TAKEPAYMENT) {
            this.isServiceRequest = 'false';
        }
    }
    goToServiceRequestPage() {
        this.goToServiceRquestComponent.emit();
    }
    goToCaseTransationPage(event) {
        event.preventDefault();
        this.OrderslistService.setnavigationPage('servicerequestpage');
        this.OrderslistService.setisFromServiceRequestPage(false);
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.ISBSENABLE = true;
        this.paymentLibComponent.isTakePayment = this.paymentLibComponent.TAKEPAYMENT;
        if (this.takePayment) {
            this.paymentLibComponent.isTakePayment = this.takePayment;
        }
        //this.paymentLibComponent.SERVICEREQUEST = "true";
        this.paymentLibComponent.isFromServiceRequestPage = false;
        if (this.isServiceRequest !== 'false') {
            this.paymentLibComponent.isFromServiceRequestPage = true;
        }
        this.paymentLibComponent.isFromRefundStatusPage = false;
        this.paymentLibComponent.viewName = 'case-transactions';
        this.resetOrderData();
        // Check we on XUI
        if (this.router.url.startsWith('/cases/case-details/')) {
            // Use ccpay-case-transactions component
            this.viewStatus = 'case-transactions';
        }
        else {
            // Reload Paybubble case-transactions page.
            let partUrl = this.paymentLibComponent.ISBSENABLE ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
            partUrl += this.paymentLibComponent.ISTURNOFF ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
            if (this.isServiceRequest === 'false') {
                partUrl += this.paymentLibComponent.TAKEPAYMENT ? '&takePayment=true' : '&takePayment=false';
            }
            partUrl += this.isStrategicFixEnable ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
            partUrl += this.isServiceRequest !== 'false' ? '&servicerequest=true' : '&servicerequest=false';
            partUrl += `&caseType=${this.paymentLibComponent.CASETYPE}`;
            const url = `/payment-history/${this.paymentLibComponent.CCD_CASE_NUMBER}?view=case-transactions&selectedOption=${this.paymentLibComponent.SELECTED_OPTION}${partUrl}`;
            this.router.routeReuseStrategy.shouldReuseRoute = () => false;
            this.router.onSameUrlNavigation = 'reload';
            this.router.navigateByUrl(url);
        }
    }
    addRemission(fee) {
        if (this.chkIsAddRemissionBtnEnable(fee)) {
            this.feeId = fee;
            this.viewStatus = 'addremission';
            this.payment = this.orderDetail[0].payments[0];
            this.paymentViewService.getApportionPaymentDetails(this.orderDetail[0].payments[0].reference).subscribe(paymentGroup => {
                this.paymentGroup = paymentGroup;
                this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(this.paymentLibComponent.paymentReference));
                this.payment = this.paymentGroup.payments[0];
                //  const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
                //  this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
            }, (error) => this.errorMessage = error.replace(/"/g, ""));
        }
    }
    addRefundForRemission(payment, remission, fees) {
        this.paymentLibComponent.isFromServiceRequestPage = true;
        this.paymentViewService.getApportionPaymentDetails(payment.reference).subscribe(paymentGroup => {
            this.paymentGroup = paymentGroup;
            this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj.reference === payment.reference);
            this.payment = this.paymentGroup.payments[0];
            this.remissions = remission;
            this.remissionFeeAmt = fees.filter(data => data.code === this.remissions['fee_code'])[0].net_amount;
            this.viewStatus = 'addrefundforremission';
            // const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
            // this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
        }, (error) => this.errorMessage = error);
    }
    cancelRemoval() {
        this.viewStatus = 'main';
    }
    removeFee(fee) {
        this.isRemoveBtnDisabled = true;
        this.paymentViewService.deleteFeeFromPaymentGroup(fee).subscribe((success) => {
            window.location.reload();
        }, (error) => {
            this.errorMessage = error;
            this.isRemoveBtnDisabled = false;
        });
    }
    issueRefund(payment) {
        if (payment !== null && payment !== undefined) {
            if (this.chkIsIssueRefundBtnEnable(payment)) {
                this.paymentViewService.getApportionPaymentDetails(payment.reference).subscribe(paymentGroup => {
                    paymentGroup.payments = paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(payment.reference));
                    if (payment.over_payment > 0) {
                        this.viewStatus = '';
                        this.payment = payment;
                        this.paymentGroupList = paymentGroup;
                        this.viewCompStatus = 'overpayment';
                    }
                    else {
                        this.viewStatus = 'issuerefund';
                        this.viewCompStatus = '';
                        this.paymentFees = paymentGroup.fees;
                        this.payment = payment;
                        this.paymentLibComponent.isFromServiceRequestPage = true;
                        this.isRefundRemission = true;
                    }
                }, (error) => this.errorMessage = error);
            }
        }
    }
    goToPayementView(paymentGroupReference, paymentReference, paymentMethod) {
        this.goToPaymentViewComponent({ paymentGroupReference, paymentReference, paymentMethod });
    }
    goToPaymentViewComponent(paymentGroup) {
        this.paymentLibComponent.paymentMethod = paymentGroup.paymentMethod;
        this.paymentLibComponent.isFromServiceRequestPage = true;
        this.paymentLibComponent.paymentGroupReference = paymentGroup.paymentGroupReference;
        this.paymentLibComponent.paymentReference = paymentGroup.paymentReference;
        this.OrderslistService.setOrderRef(this.orderRef);
        this.OrderslistService.setorderCCDEvent(this.orderCCDEvent);
        this.OrderslistService.setorderCreated(this.orderCreated);
        this.OrderslistService.setorderDetail(this.orderDetail);
        this.OrderslistService.setorderParty(this.orderParty);
        this.OrderslistService.setorderTotalPayments(this.orderTotalPayments);
        this.OrderslistService.setorderRemissionTotal(this.orderRemissionTotal);
        this.OrderslistService.setorderFeesTotal(this.orderFeesTotal);
        this.viewStatus = 'payment-view';
    }
    chkIsIssueRefundBtnEnable(payment) {
        if (payment !== null && payment !== undefined) {
            return payment.issue_refund && payment.refund_enable;
        }
        else {
            return false;
        }
    }
    chkIsAddRefundBtnEnable(remission) {
        if (remission !== null && remission !== undefined) {
            return remission.add_refund;
        }
        else {
            return false;
        }
    }
    chkIsAddRemissionBtnEnable(fee) {
        if (fee !== null && fee !== undefined) {
            return fee.add_remission && fee.remission_enable;
        }
        else {
            return false;
        }
    }
    resetOrderData() {
        this.OrderslistService.setOrderRef(null);
        this.OrderslistService.setorderCCDEvent(null);
        this.OrderslistService.setorderCreated(null);
        this.OrderslistService.setorderDetail(null);
        this.OrderslistService.setorderParty(null);
        this.OrderslistService.setorderTotalPayments(null);
        this.OrderslistService.setorderRemissionTotal(null);
        this.OrderslistService.setorderFeesTotal(null);
    }
    selectPymentOption(paymentType) {
        this.paymentType = paymentType;
        this.isContinueBtnDisabled = false;
    }
    goToPaymentViewComp() {
        this.viewCompStatus = '';
        this.viewStatus = 'paymentview';
    }
    continuePayment(paymentgrp) {
        if (this.paymentType === 'op') {
            this.isFullyRefund = false;
            this.viewStatus = '';
            this.viewCompStatus = 'overPaymentAddressCapture';
        }
        else if (this.paymentType === 'fp') {
            this.isFullyRefund = true;
            this.paymentGroupList = paymentgrp;
            this.viewStatus = 'issuerefund';
            this.viewCompStatus = "";
            this.isRefundRemission = true;
            this.paymentLibComponent.isFromPaymentDetailPage = true;
            this.isFromPaymentDetailPage = true;
            this.isFromServiceRequestPage = this.paymentLibComponent.isFromServiceRequestPage;
        }
    }
    getContactDetails(obj) {
        this.contactDetailsObj = obj;
        this.viewStatus = '';
        this.viewCompStatus = 'overpaymentcheckandanswer';
        this.getTemplateInstructionType(this.paymentGroupList.payments[0]);
        this.notificationPreview = false;
    }
    gotoPaymentSelectPage(event) {
        event.preventDefault();
        this.viewStatus = '';
        this.viewCompStatus = 'overpayment';
    }
    gotoAddressPage(note) {
        if (note) {
            this.notification = { contact_details: note, notification_type: note.notification_type };
        }
        this.errorMessage = '';
        this.viewStatus = '';
        this.viewCompStatus = 'overPaymentAddressCapture';
    }
    processRefund() {
        this.isConfirmationBtnDisabled = true;
        this.errorMessage = '';
        const obj = this.paymentGroupList.fees[0];
        this.fees = [{ id: obj.id,
                code: obj.code,
                version: obj.version,
                apportion_amount: obj.apportion_amount,
                calculated_amount: obj.calculated_amount,
                updated_volume: obj.updated_volume ? obj.updated_volume : obj.volume,
                volume: obj.volume,
                refund_amount: this.getOverPaymentValue() }];
        const requestBody = new PostRefundRetroRemission(this.contactDetailsObj, this.fees, this.paymentGroupList.payments[0].reference, 'RR037', this.getOverPaymentValue(), 'op');
        this.paymentViewService.postRefundsReason(requestBody).subscribe(response => {
            if (JSON.parse(response)) {
                this.viewCompStatus = '';
                this.viewStatus = 'refundconfirmationpage';
                this.refundReference = JSON.parse(response).refund_reference;
                this.refundAmount = JSON.parse(response).refund_amount;
            }
        }, (error) => {
            this.errorMessage = error;
            this.isConfirmationBtnDisabled = false;
            this.cd.detectChanges();
        });
    }
    getOverPaymentValue() {
        let feesOverPayment = 0;
        this.paymentGroupList.fees.forEach(fee => {
            feesOverPayment += fee.over_payment;
        });
        return feesOverPayment > 0 ? feesOverPayment : this.paymentGroupList.payments[0].over_payment;
    }
    getTemplateInstructionType(payment) {
        if (payment == undefined || payment == null) {
            this.templateInstructionType = 'Template';
        }
        else {
            this.templateInstructionType = this.notificationService.getNotificationInstructionType(payment.channel, payment.method);
        }
    }
    showNotificationPreview() {
        this.notificationPreview = true;
    }
    hideNotificationPreview() {
        this.notificationPreview = false;
    }
    static ɵfac = function ServiceRequestComponent_Factory(t) { return new (t || ServiceRequestComponent)(i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(OrderslistService), i0.ɵɵdirectiveInject(NotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$2.Router)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ServiceRequestComponent, selectors: [["ccpay-service-request"]], inputs: { LOGGEDINUSERROLES: "LOGGEDINUSERROLES", viewStatus: "viewStatus", orderDetail: "orderDetail", orderRef: "orderRef", orderStatus: "orderStatus", orderParty: "orderParty", orderCreated: "orderCreated", orderCCDEvent: "orderCCDEvent", orderFeesTotal: "orderFeesTotal", orderTotalPayments: "orderTotalPayments", orderRemissionTotal: "orderRemissionTotal", paymentGroupList: "paymentGroupList", takePayment: "takePayment", ccdCaseNumber: "ccdCaseNumber", isServiceRequest: "isServiceRequest" }, outputs: { goToServiceRquestComponent: "goToServiceRquestComponent" }, decls: 12, vars: 11, consts: [[4, "ngIf"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "fee", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "isServiceRequest", "paymentGroupRef", "isFromServiceRequestPage", "payment", "ccdCaseNumber", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES", "takepayment", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", 4, "ngIf"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "isFromServiceRequestPage", "isFromPaymentDetailPage", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "ccdCaseNumber", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "isFullyRefund", "fees", "LOGGEDINUSERROLES", "isFromRefundListPage", "takepayment", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", 4, "ngIf"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "feeamount", "remission", "isFromServiceRequestPage", "ccdCaseNumber", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES", "takepayment", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", 4, "ngIf"], [3, "LOGGEDINUSERROLES", "isTurnOff", "isTakePayment", "caseType", "orderRef", "orderStatus", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "isServiceRequest", 4, "ngIf"], [1, "over-payment"], [3, "isFromServiceRequestPage", "LOGGEDINUSERROLES", "isTakePayment", 4, "ngIf"], [1, "govuk-breadcrumbs"], [1, "govuk-breadcrumbs__list"], ["class", "govuk-breadcrumbs__list-item", 4, "ngIf"], [1, "govuk-grid-column-full"], [1, "column"], [1, "heading-large", "govuk-!-margin-top-0"], [1, "section"], [1, "bold", "tb-col-w"], [1, "govuk-grid-column-full", "order-class"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["class", "govuk-table__header col-51", "scope", "col", 4, "ngIf"], ["class", "govuk-table__header col-51", "scope", "col", "colspan", "2", 4, "ngIf"], ["scope", "col", 1, "govuk-table__header"], ["class", "govuk-table__header", "scope", "col", 4, "ngIf"], ["class", "govuk-table__body", 4, "ngFor", "ngForOf"], [1, "maxwidth"], [1, "totalfees"], [4, "ngFor", "ngForOf"], [1, "govuk-breadcrumbs__list-item"], ["href", "javascript:void(0)", 1, "govuk-back-link", 3, "click"], ["href", "javascript:void(0)", "id", "bckLnksize", 1, "govuk-back-link", 3, "click"], ["scope", "col", 1, "govuk-table__header", "col-51"], ["scope", "col", "colspan", "2", 1, "govuk-table__header", "col-51"], [1, "govuk-table__body"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], ["class", "govuk-table__cell col-60 whitespace-inherit", 4, "ngIf"], ["class", "govuk-table__cell col-60 whitespace-inherit", "colspan", "2", 4, "ngIf"], [1, "govuk-table__cell"], ["class", "govuk-table__cell alignright", 4, "ngIf"], [1, "govuk-table__cell", "col-60", "whitespace-inherit"], ["colspan", "2", 1, "govuk-table__cell", "col-60", "whitespace-inherit"], [1, "govuk-table__cell", "alignright"], [1, "govuk-button", "govuk-button--secondary", 3, "disabled", "click"], ["class", "govuk-table__row", 4, "ngIf"], ["colspan", "7", 1, "govuk-table__cell", "alignleft"], ["class", "govuk-grid-column-full order-class", 4, "ngIf"], ["scope", "col", 1, "govuk-table__header", "col-24", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "col-27", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "whitespace-inherit", "refundBtn"], ["class", "govuk-table__body", 4, "ngIf"], [1, "summarypagealign"], [1, "summarypage"], [1, "govuk-table__cell", "whitespace-inherit"], [1, "govuk-table__cell", "refundBtn", "whitespace-inherit"], ["class", "govuk-grid-column-full", 4, "ngIf"], [1, "heading-medium"], ["scope", "col", 1, "govuk-table__header", "col-25"], ["href", "javascript:void(0)", 3, "click"], [1, "mar-17"], [1, "totalPay"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "fee", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "isServiceRequest", "paymentGroupRef", "isFromServiceRequestPage", "payment", "ccdCaseNumber", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES", "takepayment", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "isFromServiceRequestPage", "isFromPaymentDetailPage", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "ccdCaseNumber", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "isFullyRefund", "fees", "LOGGEDINUSERROLES", "isFromRefundListPage", "takepayment", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "feeamount", "remission", "isFromServiceRequestPage", "ccdCaseNumber", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES", "takepayment", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal"], [3, "LOGGEDINUSERROLES", "isTurnOff", "isTakePayment", "caseType", "orderRef", "orderStatus", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "isServiceRequest"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "govuk-button-grb"], ["novalidate", ""], ["type", "submit", 1, "button", "govuk-button--secondary", 3, "click"], ["type", "submit", 1, "button", 3, "disabled", "ngClass", "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "OVERPAYMENTPAGE"], ["myInput", ""], [1, "heading-large"], ["id", "how-contacted-conditional-hint govuk-font19px", 1, "form-hint"], [1, "govuk-form-group"], [1, "govuk-fieldset"], [1, "govuk-fieldset__legend", "govuk-fieldset__legend--l"], ["data-module", "govuk-radios", 1, "govuk-radios"], [1, "govuk-radios__item"], ["id", "over-payment", "name", "over-payment", "type", "radio", "value", "op", 1, "govuk-radios__input", 3, "click"], ["for", "where-do-you-live", 1, "govuk-label", "govuk-radios__label", "govuk-font19px"], ["id", "full-payment", "name", "over-payment", "type", "radio", "value", "fp", 1, "govuk-radios__input", 3, "click"], ["for", "where-do-you-live-2", 1, "govuk-label", "govuk-radios__label", "govuk-font19px"], [1, "govuk-button", "govuk-button--secondary", "over-payment-alignment", "govuk-font19px", 3, "click"], [1, "govuk-button", 3, "disabled", "ngClass", "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "OVERPAYMENTADDRESSCAPTUREPAGE"], [1, "govuk-heading-l"], [1, "govuk-heading-m", "govuk-font19px"], ["id", "how-contacted-conditional-hint", 1, "govuk-hint", "govuk-font19px"], [3, "addressObj", "assignContactDetails", "redirectToIssueRefund"], ["data-module", "govuk-button", 1, "govuk-link", 3, "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ADDREFUNDFORREMISSION"], [1, "govuk-table", "govuk-table-mb"], [1, "govuk-table__cell", "govuk-!-font-weight-bold"], ["class", "contactDetails-width", 4, "ngIf"], [1, "govuk-link", "right", 3, "click"], ["href", "Javascript:void(0)", "class", "govuk-link right", 3, "click", 4, "ngIf"], [3, "payment", "contactDetails", "refundReason", "refundAmount", 4, "ngIf"], ["type", "submit", 1, "button", "govuk-button--secondary", "over-payment-alignment", "govuk-font19px", 3, "click"], ["type", "submit", 3, "ngClass", "click"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", "govuk-font19px", 3, "click"], [1, "contactDetails-width"], ["href", "Javascript:void(0)", 1, "govuk-link", "right", 3, "click"], [3, "payment", "contactDetails", "refundReason", "refundAmount"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "RETROREMISSIONREFUNDCONFIRMATIONPAGE"], [1, "govuk-grid-row", "pagesize"], [1, "govuk-panel", "govuk-panel--confirmation"], [1, "govuk-panel__title"], [1, "govuk-panel__body"], [1, "govuk-body", "white"], [1, "govuk-body"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", "pointer", 3, "click"], [3, "isFromServiceRequestPage", "LOGGEDINUSERROLES", "isTakePayment"]], template: function ServiceRequestComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, ServiceRequestComponent_ng_container_0_Template, 58, 24, "ng-container", 0);
            i0.ɵɵtemplate(1, ServiceRequestComponent_ccpay_add_remission_1_Template, 1, 24, "ccpay-add-remission", 1);
            i0.ɵɵtemplate(2, ServiceRequestComponent_ccpay_add_remission_2_Template, 1, 26, "ccpay-add-remission", 2);
            i0.ɵɵtemplate(3, ServiceRequestComponent_ccpay_add_remission_3_Template, 1, 23, "ccpay-add-remission", 3);
            i0.ɵɵtemplate(4, ServiceRequestComponent_ccpay_payment_view_4_Template, 1, 14, "ccpay-payment-view", 4);
            i0.ɵɵtemplate(5, ServiceRequestComponent_ng_container_5_Template, 14, 2, "ng-container", 0);
            i0.ɵɵelementStart(6, "div", 5);
            i0.ɵɵtemplate(7, ServiceRequestComponent_ng_container_7_Template, 30, 14, "ng-container", 0);
            i0.ɵɵtemplate(8, ServiceRequestComponent_ng_container_8_Template, 14, 5, "ng-container", 0);
            i0.ɵɵtemplate(9, ServiceRequestComponent_ng_container_9_Template, 63, 27, "ng-container", 0);
            i0.ɵɵtemplate(10, ServiceRequestComponent_ng_container_10_Template, 20, 7, "ng-container", 0);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(11, ServiceRequestComponent_ccpay_case_transactions_11_Template, 1, 3, "ccpay-case-transactions", 6);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "order-full-view");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addremission" && ctx.feeId);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "issuerefund" && ctx.payment);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addrefundforremission" && ctx.payment);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "payment-view");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "feeRemovalConfirmation");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "overpayment");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "overPaymentAddressCapture");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "refundconfirmationpage" && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "case-transactions");
        } }, styles: [".govuk-grid-column-full--gr[_ngcontent-%COMP%]{position:relative;margin-bottom:10px}.disable[_ngcontent-%COMP%]{text-decoration:none;cursor:default;color:#fff;background-color:gray;pointer-events:none}.pagesize[_ngcontent-%COMP%]{margin:2em;width:97%}.govuk-grid__surplus-payments[_ngcontent-%COMP%]{margin:20px 0}.govuk-grid__surplus-payments[_ngcontent-%COMP%] > .govuk-grid-column-full[_ngcontent-%COMP%]{padding:0}.govuk-grid__surplus-payments-col1[_ngcontent-%COMP%]{margin-bottom:10px}.govuk-inset-text__no-border[_ngcontent-%COMP%]{border-left:0px}.govuk-hidetext[_ngcontent-%COMP%]{font-size:22px;padding-bottom:10px}.lowercase[_ngcontent-%COMP%]{text-transform:lowercase}.channel[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}.govuk-heading-xl[_ngcontent-%COMP%]{font-size:48px;margin-bottom:1px}.govuk-section-break--visible[_ngcontent-%COMP%]{border-bottom:2px solid black}.totalpayments.govuk-table__row[_ngcontent-%COMP%]{border-bottom:2px solid black!important}.govuk-inset-text[_ngcontent-%COMP%]{margin-left:1em}.govuk-button[_ngcontent-%COMP%]{font-size:19px;margin-bottom:0!important}.groupamount.govuk-table__header[_ngcontent-%COMP%], .govuk-table__cell.govuk-table__cell--col6.govuk-table__custom--col6[_ngcontent-%COMP%]{text-align:right}.feeclass[_ngcontent-%COMP%]{padding-left:.7em}.align-center[_ngcontent-%COMP%]{text-align:center}details[_ngcontent-%COMP%]   summary[_ngcontent-%COMP%]{display:list-item}.case-transaction__color[_ngcontent-%COMP%]{color:#a71414;font-weight:700;text-align:center}.capitalize[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}.govuk-inset-text__no-left-margin[_ngcontent-%COMP%]{margin-left:0;padding-left:0}.whitespace-inherit[_ngcontent-%COMP%]{white-space:inherit!important}.govuk-section-records-break[_ngcontent-%COMP%]{margin:10px;border-bottom:2px solid black!important}.exisitng-fees[_ngcontent-%COMP%]{margin-left:12px}.add-telephony-payment[_ngcontent-%COMP%]{margin-top:-2em;margin-left:-2em}.govuk-table__header--custom[_ngcontent-%COMP%]{text-align:center}.disable-link[_ngcontent-%COMP%]{cursor:default;pointer-events:none;color:#8e8c8c}.panel-no--style[_ngcontent-%COMP%]{border-left-style:none}.col-28[_ngcontent-%COMP%]{width:28%!important}.col-8[_ngcontent-%COMP%]{width:8%!important}.col-60[_ngcontent-%COMP%]{width:60%!important}.col-32[_ngcontent-%COMP%]{width:32%!important}.col-34[_ngcontent-%COMP%]{width:34%!important}#bckLnksize[_ngcontent-%COMP%]{font-size:16px!important}.col-15[_ngcontent-%COMP%]{width:15%!important;padding-right:0!important;padding-left:0!important}.col-16[_ngcontent-%COMP%]{width:16%!important}.col-14[_ngcontent-%COMP%]{width:14%!important}.col-17[_ngcontent-%COMP%]{width:17%!important}.col-12[_ngcontent-%COMP%]{width:12%!important}.col-9[_ngcontent-%COMP%]{width:9%!important}.col-10[_ngcontent-%COMP%]{width:10%!important}.col-11[_ngcontent-%COMP%]{width:11%!important}.col-13[_ngcontent-%COMP%]{width:13%!important}.col-21[_ngcontent-%COMP%]{width:21%!important}.col-20[_ngcontent-%COMP%]{width:20%!important}.col-24[_ngcontent-%COMP%]{width:24%!important}.govuk-table__cell[_ngcontent-%COMP%], .govuk-table__header[_ngcontent-%COMP%]{padding:10px 10px 10px 0}.col-27[_ngcontent-%COMP%]{width:27%!important}td[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden!important}.col-19[_ngcontent-%COMP%]{width:19%!important;padding-left:0!important}.col-18[_ngcontent-%COMP%]{width:18%!important;padding-left:0!important;padding-right:0!important}.col-37[_ngcontent-%COMP%]{width:37%!important}.col-55[_ngcontent-%COMP%]{width:55%!important}.govuk-table[_ngcontent-%COMP%]{margin-bottom:1px}.hmcts-banner[_ngcontent-%COMP%] > .hmcts-banner__message[_ngcontent-%COMP%]{font-size:19px;line-height:1.25}.summary-table-font[_ngcontent-%COMP%]{font-size:36px}.order-class[_ngcontent-%COMP%]{padding-top:3em}.govuk-table__header[_ngcontent-%COMP%]:last-child{text-align:right}.govuk-table__cell[_ngcontent-%COMP%]:last-child{text-align:right}.govuk-grid-column-two-thirds[_ngcontent-%COMP%]{width:64%!important;padding:0!important}.govuk-heading-l[_ngcontent-%COMP%]{font-size:36px;margin-bottom:10px}.paymentrequest[_ngcontent-%COMP%]{margin-top:1em}.mar-17[_ngcontent-%COMP%]{margin-left:17px}.col-61[_ngcontent-%COMP%]{width:61px!important;padding:0!important}.error[_ngcontent-%COMP%]{width:960px;margin:auto}.summarypage[_ngcontent-%COMP%]{padding-left:36em;margin-top:2em}.summarypagealign[_ngcontent-%COMP%]{width:100%;text-align:right;margin-top:2em}.govuk-inset-text[_ngcontent-%COMP%]{font-size:2.1875rem}table[_ngcontent-%COMP%]{table-layout:fixed;width:100%}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{word-wrap:break-word}.totalPay[_ngcontent-%COMP%]{padding-right:14px;float:right;margin-top:2em}.govuk-back-link[_ngcontent-%COMP%]{font-size:1.5rem!important}.totalfees[_ngcontent-%COMP%]{float:right;margin-top:2em}.refundBtn[_ngcontent-%COMP%]{text-align:right;width:18%}.col-25[_ngcontent-%COMP%]{width:25%!important}.col-51[_ngcontent-%COMP%]{width:51%!important}.alignright[_ngcontent-%COMP%]{text-align:right}.alignleft[_ngcontent-%COMP%]{text-align:left}.alignself[_ngcontent-%COMP%]{align-self:flex-end}.maxwidth[_ngcontent-%COMP%]{width:100%}.over-payment[_ngcontent-%COMP%]   .govuk-table-mb[_ngcontent-%COMP%]{margin-bottom:20px}.over-payment[_ngcontent-%COMP%]   .contactDetails-width[_ngcontent-%COMP%]{width:70%}.over-payment[_ngcontent-%COMP%]   .margin-top10px[_ngcontent-%COMP%]{margin-top:20px}.over-payment[_ngcontent-%COMP%]   .govuk-font19px[_ngcontent-%COMP%]{font-size:19px!important}.over-payment[_ngcontent-%COMP%]   .margin-top--size[_ngcontent-%COMP%]{margin-top:-30px}.over-payment[_ngcontent-%COMP%]   .over-payment-alignment[_ngcontent-%COMP%]{margin-right:10px}.over-payment[_ngcontent-%COMP%]   .govuk-button[_ngcontent-%COMP%]{font-size:19px;float:left;margin-top:2em}.over-payment[_ngcontent-%COMP%]   td.govuk-table__cell[_ngcontent-%COMP%]{width:50%;text-align:left}.over-payment[_ngcontent-%COMP%]   .govuk-warning-text__text[_ngcontent-%COMP%], .over-payment[_ngcontent-%COMP%]   .govuk-label--s[_ngcontent-%COMP%], .over-payment[_ngcontent-%COMP%]   .hmcts-currency-input__symbol[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.over-payment[_ngcontent-%COMP%]   .inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0;border-color:#a71414}.over-payment[_ngcontent-%COMP%]   .inline-error-message[_ngcontent-%COMP%]{color:#a71414;border-color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.over-payment[_ngcontent-%COMP%]   .govuk-button-group[_ngcontent-%COMP%]{padding-top:2em}.over-payment[_ngcontent-%COMP%]   .heading-medium[_ngcontent-%COMP%]{margin-top:.875em}.over-payment[_ngcontent-%COMP%]   .heading-large[_ngcontent-%COMP%]{margin-top:.25em}.over-payment[_ngcontent-%COMP%]   .govuk-panel--confirmation[_ngcontent-%COMP%]{color:#fff;background:#00703C}.over-payment[_ngcontent-%COMP%]   .govuk-panel__title[_ngcontent-%COMP%]{font-size:5rem}.over-payment[_ngcontent-%COMP%]   .govuk-body-m[_ngcontent-%COMP%], .over-payment[_ngcontent-%COMP%]   .govuk-body[_ngcontent-%COMP%]{font-size:2.1875rem}.over-payment[_ngcontent-%COMP%]   .govuk-link[_ngcontent-%COMP%]{cursor:pointer}.over-payment[_ngcontent-%COMP%]   .govuk-radios__conditional[_ngcontent-%COMP%]{padding-top:12px!important}.over-payment[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%]{float:right;cursor:pointer}.over-payment[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]{float:right}.over-payment[_ngcontent-%COMP%]   .white[_ngcontent-%COMP%]{color:#fff}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ServiceRequestComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-service-request', template: "<!-- Order Full View Details-->\n<ng-container *ngIf=\"viewStatus === 'order-full-view'\">\n  <div class=\"govuk-breadcrumbs\">\n      <ol class=\"govuk-breadcrumbs__list\">\n        <li class=\"govuk-breadcrumbs__list-item\" *ngIf=\"isServiceRequest === 'false'\">\n          <a href=\"javascript:void(0)\" (click)=\"goToCaseTransationPage($event)\" class=\"govuk-back-link\">Back</a>\n        </li>\n        <li class=\"govuk-breadcrumbs__list-item\" *ngIf=\"isServiceRequest !== 'false'\">\n          <a href=\"javascript:void(0)\" (click)=\"goToServiceRequestPage()\" id=\"bckLnksize\" class=\"govuk-back-link\">Back</a>\n        </li>\n      </ol>\n    </div>\n  <div class=\"govuk-grid-column-full\">\n      <div class=\"column\">\n        <h1 class=\"heading-large govuk-!-margin-top-0\">Service request</h1>\n      </div>\n      <table >\n          <tbody>\n            <tr class=\"section\">\n              <td class=\"bold tb-col-w\">Service request reference</td>\n              <td>{{orderRef}}</td>\n            </tr>\n            <tr class=\"section\">\n              <td class=\"bold tb-col-w\">Status</td>\n              <td>{{orderStatus}}</td>\n            </tr>\n            <tr class=\"section\">\n              <td class=\"bold tb-col-w\">Date created</td>\n              <td>{{orderCreated | date:'dd MMMM yyyy'}}</td>\n            </tr>\n            <tr class=\"section\">\n              <td class=\"bold tb-col-w\">Party</td>\n              <td>{{orderParty}}</td>\n            </tr>\n            <tr class=\"section\">\n              <td class=\"bold tb-col-w\">CCD event</td>\n              <td>{{orderCCDEvent}}</td>\n            </tr>\n          </tbody>\n        </table>\n  </div>\n\n  <div class=\"govuk-grid-column-full order-class\">\n      <div class=\"column\">\n        <table class=\"govuk-table \">\n          <thead class=\"govuk-table__head\">\n          <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header col-51\" scope=\"col\" *ngIf=\"isServiceRequest === 'false'\">Fee</td>\n            <td class=\"govuk-table__header col-51\" scope=\"col\" colspan=\"2\" *ngIf=\"isServiceRequest !== 'false'\">Fee</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Total</td>\n            <td  class=\"govuk-table__header\" scope=\"col\" *ngIf=\"isServiceRequest === 'false'\"></td>\n          </tr>\n          </thead>\n          <tbody class=\"govuk-table__body\" *ngFor=\"let order of orderDetail;\">\n            <tr class=\"govuk-table__row\" *ngFor=\"let fee of order.fees; let i = index;\">\n              <td class=\"govuk-table__cell col-60 whitespace-inherit\" *ngIf=\"isServiceRequest === 'false'\">{{fee.description}}</td>\n              <td class=\"govuk-table__cell col-60 whitespace-inherit\" colspan=\"2\" *ngIf=\"isServiceRequest !== 'false'\">{{fee.description}}</td>\n              <td class=\"govuk-table__cell\">{{fee.volume? fee.volume : '-'}} X {{ fee.calculated_amount/fee.volume| currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n              <td class=\"govuk-table__cell\">{{ fee?.net_amount | currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n              <td class=\"govuk-table__cell alignright\" *ngIf=\"isServiceRequest === 'false'\">\n                  <button [disabled]=\"!chkIsAddRemissionBtnEnable(fee)\"   (click)=\"addRemission(fee)\" class=\"govuk-button govuk-button--secondary\"> Add remission</button>\n              </td>\n\n            </tr>\n          </tbody>\n          <tbody class=\"govuk-table__body\" *ngFor=\"let order of orderDetail;\">\n            <tr class=\"govuk-table__row\" *ngIf=\"order.fees?.length === 0\" >\n              <td class=\"govuk-table__cell alignleft\" colspan=\"7\">No fees recorded</td>\n            </tr>\n          </tbody>\n        </table>\n\n      </div>\n      <div class=\"maxwidth\">\n          <p class=\"totalfees\">Total fees: {{orderFeesTotal | currency:'GBP':'symbol-narrow':'1.2-2' }}</p>\n      </div>\n  </div>\n   <!-- remissions -->\n<ng-container *ngFor=\"let order of orderDetail;\" >\n   <div class=\"govuk-grid-column-full order-class\" *ngIf=\"order.remissions\">\n   <table class=\"govuk-table\">\n     <thead class=\"govuk-table__head\">\n       <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__header col-24 whitespace-inherit\" scope=\"col\">Help with fees or remission code</td>\n           <td class=\"govuk-table__header col-27 whitespace-inherit\" scope=\"col\">Reference</td>\n           <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Fee</td>\n           <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Amount</td>\n           <td  class=\"govuk-table__header whitespace-inherit refundBtn\" scope=\"col\"></td>\n         </tr>\n     </thead>\n     <tbody  *ngIf=\"order.remissions?.length > 0\"  class=\"govuk-table__body\" >\n       <tr class=\"govuk-table__row\" *ngFor=\"let remission of order.remissions\">\n          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.hwf_reference }}</td>\n           <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.remission_reference }}</td>\n           <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.fee_code }}</td>\n           <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.hwf_amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n           <td class=\"govuk-table__cell refundBtn whitespace-inherit\"  >\n              <button  [disabled]=\"!chkIsAddRefundBtnEnable(remission)\" (click)=\"addRefundForRemission(order.payments[0],remission,order.fees)\" class=\"govuk-button govuk-button--secondary\"> Add refund</button>\n           </td>\n           <!-- <td  class=\"govuk-table__cell refundBtn whitespace-inherit\"  >\n\n         </td> -->\n         </tr>\n     </tbody>\n\n\n   </table>\n   <div *ngIf=\"order.remissions?.length === 0\">\n    <span >No help with fees or remissions.</span>\n </div>\n   <div class=\"summarypagealign\">\n      <p>Total reductions: {{orderRemissionTotal | currency:'GBP':'symbol-narrow':'1.2-2'  }}</p>\n  </div>\n  <div class=\"summarypagealign\">\n        <p class=\"summarypage\">Total fees to pay: {{(orderFeesTotal - orderRemissionTotal) | currency:'GBP':'symbol-narrow':'1.2-2'  }}</p>\n    </div>\n  </div>\n\n</ng-container>\n\n   <!--Payments-->\n  <ng-container *ngFor=\"let order of orderDetail;\" >\n   <div class=\"govuk-grid-column-full\" *ngIf=\"order.payments\">\n      <h3 class=\"heading-medium\">Payments</h3>\n   <table class=\"govuk-table \">\n      <thead class=\"govuk-table__head\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header col-25\" scope=\"col\"></td>\n            <td class=\"govuk-table__header\" scope=\"col\">Date created</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\"></td>\n          </tr>\n      </thead>\n      <tbody  *ngIf=\"order.payments?.length > 0\" class=\"govuk-table__body\">\n        <tr class=\"govuk-table__row\"  *ngFor=\"let payment of order.payments\">\n            <td class=\"govuk-table__cell whitespace-inherit\">\n              <a href=\"javascript:void(0)\" (click)=\"goToPayementView(payment.paymentGroupReference, payment.reference, payment.method)\">Review</a>\n            </td>\n            <td class=\"govuk-table__cell whitespace-inherit\">{{ payment?.date_created | date:'dd MMM yyyy' }}</td>\n            <td class=\"govuk-table__cell whitespace-inherit\">{{ payment?.amount | currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n            <td class=\"govuk-table__cell alignright\">\n              <button [disabled]=\"!chkIsIssueRefundBtnEnable(payment)\"   (click)=\"issueRefund(payment)\" class=\"govuk-button govuk-button--secondary\">Issue refund</button>\n            </td>\n            <!-- <td  *ngIf=\"!chkIssueRefundBtnEnable(payment)\" class=\"govuk-table__cell\" style=\"text-align: right;\">\n            </td> -->\n          </tr>\n      </tbody>\n    </table>\n\n  <div *ngIf=\"order.payments === undefined || order.payments === null\">\n      <!-- <h3 class=\"heading-medium mar-17\">Payments</h3> -->\n            <span class=\"mar-17\" >No Payments recorded</span>\n  </div>\n</div>\n</ng-container>\n<div *ngIf=\"isServiceRequest === 'false'\">\n  <div *ngIf=\"((orderFeesTotal - orderRemissionTotal)- orderTotalPayments) > 0\" >\n      <p class=\"totalPay\">Total left to pay: <b>{{((orderFeesTotal - orderRemissionTotal)- orderTotalPayments )| currency:'GBP':'symbol-narrow':'1.2-2' }}</b> </p>\n  </div>\n  <div *ngIf=\"((orderFeesTotal - orderRemissionTotal)- orderTotalPayments) < 0\" >\n      <p class=\"totalPay\">Total left to pay: <b>0</b> </p>\n  </div>\n</div>\n</ng-container>\n\n<ccpay-add-remission *ngIf=\"viewStatus === 'addremission' && feeId\"\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[fee]=\"feeId\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[isServiceRequest] = \"isServiceRequest\"\n[paymentGroupRef]=\"orderRef\"\n[isFromServiceRequestPage] = \"true\"\n[payment] = \"payment\"\n[ccdCaseNumber]=\"ccdCaseNumber\"\n[orderRef] = \"orderRef\"\n[orderStatus] = \"orderStatus\"\n[orderCreated] = \"orderCreated\"\n[orderParty] = \"orderParty\"\n[orderCCDEvent] = \"orderCCDEvent\"\n[orderDetail] = \"orderDetail\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n[takepayment] = \"takePayment\"\n[orderFeesTotal] = \"orderFeesTotal\"\n[orderTotalPayments] = \"orderTotalPayments\"\n[orderRemissionTotal] = \"orderRemissionTotal\"\n></ccpay-add-remission>\n<ccpay-add-remission *ngIf=\"viewStatus === 'issuerefund' && payment\"\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[isFromServiceRequestPage]=\"isFromServiceRequestPage\"\n[isFromPaymentDetailPage] = \"isFromPaymentDetailPage\"\n[payment]=\"payment\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[paymentGroupRef]=\"orderRef\"\n[ccdCaseNumber]=\"ccdCaseNumber\"\n[orderRef] = \"orderRef\"\n[orderStatus] = \"orderStatus\"\n[orderCreated] = \"orderCreated\"\n[orderParty] = \"orderParty\"\n[orderCCDEvent] = \"orderCCDEvent\"\n[orderDetail] = \"orderDetail\"\n[isFullyRefund] = \"isFullyRefund\"\n[fees] = \"paymentFees\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n[isFromRefundListPage] = \"false\"\n[takepayment] = \"takePayment\"\n[orderFeesTotal] = \"orderFeesTotal\"\n[orderTotalPayments] = \"orderTotalPayments\"\n[orderRemissionTotal] = \"orderRemissionTotal\"></ccpay-add-remission>\n\n<ccpay-add-remission *ngIf=\"viewStatus === 'addrefundforremission' && payment\"\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[payment]=\"payment\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[feeamount]=\"remissionFeeAmt\"\n[remission] = \"remissions\"\n[isFromServiceRequestPage]=\"isServiceRequest\"\n[ccdCaseNumber]=\"ccdCaseNumber\"\n[orderRef] = \"orderRef\"\n[orderStatus] = \"orderStatus\"\n[orderCreated] = \"orderCreated\"\n[orderParty] = \"orderParty\"\n[orderCCDEvent] = \"orderCCDEvent\"\n[orderDetail] = \"orderDetail\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n[takepayment] = \"takePayment\"\n[orderFeesTotal] = \"orderFeesTotal\"\n[orderTotalPayments] = \"orderTotalPayments\"\n[orderRemissionTotal] = \"orderRemissionTotal\"></ccpay-add-remission>\n\n<ccpay-payment-view *ngIf=\"viewStatus === 'payment-view'\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n[isTurnOff] = \"isTurnOff\"\n[isTakePayment] = \"takePayment\"\n[caseType] = \"caseType\"\n[orderRef] = \"orderRef\"\n[orderStatus] = \"orderStatus\"\n[orderCreated] = \"orderCreated\"\n[orderParty] = \"orderParty\"\n[orderCCDEvent] = \"orderCCDEvent\"\n[orderDetail] = \"orderDetail\"\n[orderFeesTotal] = \"orderFeesTotal\"\n[orderTotalPayments] = \"orderTotalPayments\"\n[orderRemissionTotal] = \"orderRemissionTotal\"\n[isServiceRequest] = \"isServiceRequest\">\n</ccpay-payment-view>\n\n<ng-container *ngIf=\"viewStatus === 'feeRemovalConfirmation'\">\n<div class=\"govuk-warning-text\">\n  <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n  <strong class=\"govuk-warning-text__text\">\n    <span class=\"govuk-warning-text__assistive\">Warning</span>\n    Are you sure you want to delete this fee?\n  </strong>\n</div>\n<div class=\"govuk-button-grb\">\n  <form novalidate>\n    <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"cancelRemoval()\">\n      Cancel\n    </button>\n    <button type=\"submit\" class=\"button\"\n    [disabled]=\"isRemoveBtnDisabled\"\n    [ngClass]='isRemoveBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'\n    (click)=\"removeFee(feeId)\">\n      Remove\n    </button>\n  </form>\n</div>\n</ng-container>\n\n<div class=\"over-payment\">\n  <ng-container *ngIf=\"viewCompStatus === 'overpayment'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='OVERPAYMENTPAGE'>\n    <h1 class=\"heading-large\">Issue refund</h1>\n    <h1 class=\"heading-medium\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h1>\n    <span id=\"how-contacted-conditional-hint govuk-font19px\" class=\"form-hint\">\n      Payment reference: {{paymentGroupList?.payments[0]?.reference}}\n    </span>\n  <div class=\"govuk-form-group\">\n    <fieldset class=\"govuk-fieldset\">\n      <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--l\">\n        <h1 class=\"heading-medium\">Select payment to refund</h1>\n      </legend>\n      <div class=\"govuk-radios\" data-module=\"govuk-radios\">\n        <div class=\"govuk-radios__item\">\n          <input class=\"govuk-radios__input\" id=\"over-payment\" name=\"over-payment\" type=\"radio\" (click)=\"selectPymentOption('op')\" value=\"op\">\n          <label class=\"govuk-label govuk-radios__label govuk-font19px\" for=\"where-do-you-live\">\n            Over payment \u00A3{{getOverPaymentValue() | number:'.2'}}\n          </label>\n        </div>\n        <div class=\"govuk-radios__item\">\n          <input class=\"govuk-radios__input\" id=\"full-payment\" name=\"over-payment\" type=\"radio\" (click)=\"selectPymentOption('fp')\" value=\"fp\">\n          <label class=\"govuk-label govuk-radios__label govuk-font19px\" for=\"where-do-you-live-2\">\n            Full payment \u00A3{{paymentGroupList?.payments[0]?.amount | number:'.2'}}\n          </label>\n        </div>\n      </div>\n        <button class=\"govuk-button govuk-button--secondary over-payment-alignment govuk-font19px\"\n        (click)=\"goToPaymentViewComp()\"> Previous</button>\n        <button\n        (click)=\"continuePayment(paymentGroupList)\"\n        [disabled]=\"isContinueBtnDisabled\"\n        [ngClass]='isContinueBtnDisabled ? \"button button--disabled govuk-!-margin-right-1 govuk-font19px\" : \"button govuk-!-margin-right-1 govuk-font19px\"'\n        class=\"govuk-button\"> Continue</button>\n    </fieldset>\n  </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"viewCompStatus === 'overPaymentAddressCapture'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='OVERPAYMENTADDRESSCAPTUREPAGE'>\n    <h1 class=\"govuk-heading-l\">Issue refund</h1>\n    <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n    <span id=\"how-contacted-conditional-hint\" class=\"govuk-hint govuk-font19px\">\n      Payment reference: {{paymentGroupList?.payments[0]?.reference}}\n    </span>\n  <ccpay-contact-details\n  [addressObj] = notification\n  (assignContactDetails)=\"getContactDetails($event)\"\n  (redirectToIssueRefund)=\"gotoPaymentSelectPage($event)\" ></ccpay-contact-details>\n  <p>\n      <a (click)=\"goToCaseTransationPage($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n  </ng-container>\n\n  <ng-container *ngIf=\"viewCompStatus === 'overpaymentcheckandanswer'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDREFUNDFORREMISSION'>\n    <div class=\"govuk-warning-text\">\n\n        <h1 class=\"heading-large\"> Check your answers</h1>\n    </div>\n    <table class=\"govuk-table govuk-table-mb\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n            <td class=\"govuk-table__cell\">{{paymentGroupList.payments[0].reference}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment amount</td>\n            <td class=\"govuk-table__cell\">{{paymentGroupList.payments[0].amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee amount</td>\n            <td class=\"govuk-table__cell\">{{paymentGroupList?.fees[0]?.net_amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n            <td class=\"govuk-table__cell\">{{getOverPaymentValue() | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund reason</td>\n            <td class=\"govuk-table__cell\">Over payment</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send to</td>\n          <td class=\"govuk-table__cell\">{{orderParty}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send via</td>\n        <td class=\"govuk-table__cell whitespace-inherit\">\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'EMAIL'\" class=\"contactDetails-width\">\n            <strong>Email</strong>\n            <br/>\n            {{contactDetailsObj?.email?.trim()}}\n          </div>\n          <div *ngIf=\"contactDetailsObj?.notification_type === 'LETTER'\" class=\"contactDetails-width\">\n            <strong>Post</strong>\n            <br/>\n            {{contactDetailsObj?.address_line?.trim()}}&nbsp;{{contactDetailsObj?.city?.trim()}}&nbsp;{{contactDetailsObj?.county?.trim()}}&nbsp;{{contactDetailsObj?.country?.trim()}}&nbsp;{{contactDetailsObj?.postal_code?.trim()}}\n          </div>\n          <a (click)=\"gotoAddressPage(contactDetailsObj)\" class=\"govuk-link right\" >Change</a>\n        </td>\n      </tr>\n\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Notification</td>\n        <td class=\"govuk-table__cell\">{{templateInstructionType}}\n            <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n              Preview\n            </a>\n            <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n              Hide Preview\n            </a>\n        </td>\n      </tr>\n    </table>\n\n    <app-notification-preview *ngIf=\"notificationPreview\"\n    [payment]=\"paymentGroupList.payments[0]\"\n    [contactDetails]=\"contactDetailsObj\"\n    [refundReason]=\"'RR037'\"\n    [refundAmount]=\"getOverPaymentValue()\"></app-notification-preview>\n\n\n    <button type=\"submit\" class=\"button govuk-button--secondary over-payment-alignment govuk-font19px\" (click)=\"gotoAddressPage(contactDetailsObj)\">Previous</button>\n    <button type=\"submit\"\n    [ngClass]='isContinueBtnDisabled ? \"button button--disabled govuk-!-margin-right-1 govuk-font19px\" : \"button govuk-!-margin-right-1 govuk-font19px\"'\n    (click)=\"processRefund()\">\n      Submit refund\n    </button>\n    <p>\n        <a href=\"javascript:void(0)\"  (click)=\"goToCaseTransationPage($event)\" class=\"govuk-link govuk-font19px\" data-module=\"govuk-button\">\n            Cancel\n        </a>\n    </p>\n\n  </ng-container>\n  <ng-container *ngIf=\"viewStatus === 'refundconfirmationpage' && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n    <input #myInput type='hidden' id='iFrameDrivenImageValue' value='RETROREMISSIONREFUNDCONFIRMATIONPAGE'>\n    <div class=\"govuk-grid-row pagesize\">\n      <div >\n        <div class=\"govuk-panel govuk-panel--confirmation\">\n          <h1 class=\"govuk-panel__title\">\n            Refund submitted\n          </h1>\n\n          <div class=\"govuk-panel__body\">\n            <p class=\"govuk-body white\"><strong>Refund reference: {{refundReference}}</strong></p>\n          </div>\n\n        </div>\n        <h2 class=\"govuk-heading-l\">What happens next</h2>\n        <p class=\"govuk-body\">\n          A refund request for {{refundAmount  | currency:'GBP':'symbol-narrow':'1.2-2' }} has been created and will be passed to a team leader to approve.\n        </p>\n      <p class=\"govuk-body\">\n      <a href=\"javascript:void(0)\" (click)=\"goToCaseTransationPage($event)\" class=\"govuk-link pointer\" data-module=\"govuk-button\">\n        Return to case\n    </a>\n      </p>\n      </div>\n    </div>\n\n  </ng-container>\n  </div>\n\n<ccpay-case-transactions *ngIf=\"viewStatus === 'case-transactions'\"\n[isFromServiceRequestPage]=\"isServiceRequest\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n[isTakePayment] = \"takePayment\">\n</ccpay-case-transactions>\n", styles: [".govuk-grid-column-full--gr{position:relative;margin-bottom:10px}.disable{text-decoration:none;cursor:default;color:#fff;background-color:gray;pointer-events:none}.pagesize{margin:2em;width:97%}.govuk-grid__surplus-payments{margin:20px 0}.govuk-grid__surplus-payments>.govuk-grid-column-full{padding:0}.govuk-grid__surplus-payments-col1{margin-bottom:10px}.govuk-inset-text__no-border{border-left:0px}.govuk-hidetext{font-size:22px;padding-bottom:10px}.lowercase{text-transform:lowercase}.channel:first-letter{text-transform:uppercase}.govuk-heading-xl{font-size:48px;margin-bottom:1px}.govuk-section-break--visible{border-bottom:2px solid black}.totalpayments.govuk-table__row{border-bottom:2px solid black!important}.govuk-inset-text{margin-left:1em}.govuk-button{font-size:19px;margin-bottom:0!important}.groupamount.govuk-table__header,.govuk-table__cell.govuk-table__cell--col6.govuk-table__custom--col6{text-align:right}.feeclass{padding-left:.7em}.align-center{text-align:center}details summary{display:list-item}.case-transaction__color{color:#a71414;font-weight:700;text-align:center}.capitalize:first-letter{text-transform:uppercase}.govuk-inset-text__no-left-margin{margin-left:0;padding-left:0}.whitespace-inherit{white-space:inherit!important}.govuk-section-records-break{margin:10px;border-bottom:2px solid black!important}.exisitng-fees{margin-left:12px}.add-telephony-payment{margin-top:-2em;margin-left:-2em}.govuk-table__header--custom{text-align:center}.disable-link{cursor:default;pointer-events:none;color:#8e8c8c}.panel-no--style{border-left-style:none}.col-28{width:28%!important}.col-8{width:8%!important}.col-60{width:60%!important}.col-32{width:32%!important}.col-34{width:34%!important}#bckLnksize{font-size:16px!important}.col-15{width:15%!important;padding-right:0!important;padding-left:0!important}.col-16{width:16%!important}.col-14{width:14%!important}.col-17{width:17%!important}.col-12{width:12%!important}.col-9{width:9%!important}.col-10{width:10%!important}.col-11{width:11%!important}.col-13{width:13%!important}.col-21{width:21%!important}.col-20{width:20%!important}.col-24{width:24%!important}.govuk-table__cell,.govuk-table__header{padding:10px 10px 10px 0}.col-27{width:27%!important}td{white-space:nowrap;overflow:hidden!important}.col-19{width:19%!important;padding-left:0!important}.col-18{width:18%!important;padding-left:0!important;padding-right:0!important}.col-37{width:37%!important}.col-55{width:55%!important}.govuk-table{margin-bottom:1px}.hmcts-banner>.hmcts-banner__message{font-size:19px;line-height:1.25}.summary-table-font{font-size:36px}.order-class{padding-top:3em}.govuk-table__header:last-child{text-align:right}.govuk-table__cell:last-child{text-align:right}.govuk-grid-column-two-thirds{width:64%!important;padding:0!important}.govuk-heading-l{font-size:36px;margin-bottom:10px}.paymentrequest{margin-top:1em}.mar-17{margin-left:17px}.col-61{width:61px!important;padding:0!important}.error{width:960px;margin:auto}.summarypage{padding-left:36em;margin-top:2em}.summarypagealign{width:100%;text-align:right;margin-top:2em}.govuk-inset-text{font-size:2.1875rem}table{table-layout:fixed;width:100%}th,td{word-wrap:break-word}.totalPay{padding-right:14px;float:right;margin-top:2em}.govuk-back-link{font-size:1.5rem!important}.totalfees{float:right;margin-top:2em}.refundBtn{text-align:right;width:18%}.col-25{width:25%!important}.col-51{width:51%!important}.alignright{text-align:right}.alignleft{text-align:left}.alignself{align-self:flex-end}.maxwidth{width:100%}.over-payment .govuk-table-mb{margin-bottom:20px}.over-payment .contactDetails-width{width:70%}.over-payment .margin-top10px{margin-top:20px}.over-payment .govuk-font19px{font-size:19px!important}.over-payment .margin-top--size{margin-top:-30px}.over-payment .over-payment-alignment{margin-right:10px}.over-payment .govuk-button{font-size:19px;float:left;margin-top:2em}.over-payment td.govuk-table__cell{width:50%;text-align:left}.over-payment .govuk-warning-text__text,.over-payment .govuk-label--s,.over-payment .hmcts-currency-input__symbol{font-size:19px;font-weight:400}.over-payment .inline-error-class{outline:3px solid #a71414;outline-offset:0;border-color:#a71414}.over-payment .inline-error-message{color:#a71414;border-color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.over-payment .govuk-button-group{padding-top:2em}.over-payment .heading-medium{margin-top:.875em}.over-payment .heading-large{margin-top:.25em}.over-payment .govuk-panel--confirmation{color:#fff;background:#00703C}.over-payment .govuk-panel__title{font-size:5rem}.over-payment .govuk-body-m,.over-payment .govuk-body{font-size:2.1875rem}.over-payment .govuk-link{cursor:pointer}.over-payment .govuk-radios__conditional{padding-top:12px!important}.over-payment .right{float:right;cursor:pointer}.over-payment .radio{float:right}.over-payment .white{color:#fff}\n"] }]
    }], function () { return [{ type: PaymentLibComponent }, { type: PaymentViewService }, { type: OrderslistService }, { type: NotificationService }, { type: i0.ChangeDetectorRef }, { type: i1$2.Router }]; }, { LOGGEDINUSERROLES: [{
            type: Input,
            args: ['LOGGEDINUSERROLES']
        }], viewStatus: [{
            type: Input,
            args: ['viewStatus']
        }], orderDetail: [{
            type: Input,
            args: ['orderDetail']
        }], orderRef: [{
            type: Input,
            args: ['orderRef']
        }], orderStatus: [{
            type: Input,
            args: ['orderStatus']
        }], orderParty: [{
            type: Input,
            args: ['orderParty']
        }], orderCreated: [{
            type: Input,
            args: ['orderCreated']
        }], orderCCDEvent: [{
            type: Input,
            args: ['orderCCDEvent']
        }], orderFeesTotal: [{
            type: Input,
            args: ['orderFeesTotal']
        }], orderTotalPayments: [{
            type: Input,
            args: ['orderTotalPayments']
        }], orderRemissionTotal: [{
            type: Input,
            args: ['orderRemissionTotal']
        }], paymentGroupList: [{
            type: Input,
            args: ['paymentGroupList']
        }], takePayment: [{
            type: Input,
            args: ['takePayment']
        }], ccdCaseNumber: [{
            type: Input,
            args: ['ccdCaseNumber']
        }], isServiceRequest: [{
            type: Input,
            args: ["isServiceRequest"]
        }], goToServiceRquestComponent: [{
            type: Output
        }] }); })();

class NotificationPreviewRequest {
    notification_type;
    payment_channel;
    payment_method;
    payment_reference;
    personalisation;
    recipient_email_address;
    recipient_postal_address;
    service_name;
    constructor(payment, contactDetails, refund_reason, refund_amount, refund_reference, payment_reference) {
        if (contactDetails !== undefined && contactDetails !== null) {
            this.notification_type = contactDetails.notification_type.toUpperCase();
        }
        if (payment !== undefined && payment !== null) {
            this.payment_reference = payment.reference;
            this.payment_method = payment.method;
            this.payment_channel = payment.channel;
            this.service_name = payment.service_name;
        }
        else {
            this.payment_reference = payment_reference;
        }
        this.personalisation = {
            ccd_case_number: (payment !== undefined && payment !== null) ? payment.ccd_case_number : '',
            refund_reason: refund_reason,
            refund_amount: refund_amount,
            refund_reference: refund_reference
        };
        if (this.notification_type === "EMAIL") {
            this.recipient_email_address = contactDetails.email;
            this.recipient_postal_address = null;
        }
        else if (this.notification_type === "LETTER") {
            this.recipient_postal_address = {
                address_line: contactDetails.address_line,
                city: contactDetails.city,
                county: contactDetails.county,
                country: contactDetails.country,
                postal_code: contactDetails.postal_code
            };
            this.recipient_email_address = null;
        }
    }
}

function NotificationPreviewComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tr", 4)(2, "td", 5)(3, "span", 6);
    i0.ɵɵtext(4, "From:");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "tr", 4)(7, "td", 5)(8, "span", 6);
    i0.ɵɵtext(9, "To:");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(11, "tr", 4)(12, "td", 5)(13, "span", 6);
    i0.ɵɵtext(14, "Subject:");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(16, "tr", 4)(17, "td", 5);
    i0.ɵɵelement(18, "div", 7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.notification == null ? null : ctx_r0.notification.from == null ? null : ctx_r0.notification.from.from_email_address, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.notification == null ? null : ctx_r0.notification.recipient_contact == null ? null : ctx_r0.notification.recipient_contact.recipient_email_address, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.notification == null ? null : ctx_r0.notification.subject, "");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("innerHTML", ctx_r0.notification == null ? null : ctx_r0.notification.html, i0.ɵɵsanitizeHtml);
} }
function NotificationPreviewComponent_ng_container_4_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelement(2, "br");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r2.notification == null ? null : ctx_r2.notification.recipient_contact == null ? null : ctx_r2.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r2.notification.recipient_contact.recipient_mail_address.address_line, "");
} }
function NotificationPreviewComponent_ng_container_4_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelement(2, "br");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r3.notification == null ? null : ctx_r3.notification.recipient_contact == null ? null : ctx_r3.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r3.notification.recipient_contact.recipient_mail_address.city, "");
} }
function NotificationPreviewComponent_ng_container_4_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelement(2, "br");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r4.notification == null ? null : ctx_r4.notification.recipient_contact == null ? null : ctx_r4.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r4.notification.recipient_contact.recipient_mail_address.county, "");
} }
function NotificationPreviewComponent_ng_container_4_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelement(2, "br");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r5.notification == null ? null : ctx_r5.notification.recipient_contact == null ? null : ctx_r5.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r5.notification.recipient_contact.recipient_mail_address.country, "");
} }
function NotificationPreviewComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tr", 4)(2, "td", 8);
    i0.ɵɵtemplate(3, NotificationPreviewComponent_ng_container_4_ng_container_3_Template, 3, 1, "ng-container", 3);
    i0.ɵɵtemplate(4, NotificationPreviewComponent_ng_container_4_ng_container_4_Template, 3, 1, "ng-container", 3);
    i0.ɵɵtemplate(5, NotificationPreviewComponent_ng_container_4_ng_container_5_Template, 3, 1, "ng-container", 3);
    i0.ɵɵtemplate(6, NotificationPreviewComponent_ng_container_4_ng_container_6_Template, 3, 1, "ng-container", 3);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "tr", 4)(9, "td", 8);
    i0.ɵɵtext(10);
    i0.ɵɵpipe(11, "date");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 4)(13, "td", 8)(14, "span", 6);
    i0.ɵɵtext(15);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(16, "tr", 4)(17, "td", 5);
    i0.ɵɵelement(18, "div", 7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.notification == null ? null : ctx_r1.notification.recipient_contact == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address.address_line);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.notification == null ? null : ctx_r1.notification.recipient_contact == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address.city);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.notification == null ? null : ctx_r1.notification.recipient_contact == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address.county);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.notification == null ? null : ctx_r1.notification.recipient_contact == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address.country);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.notification == null ? null : ctx_r1.notification.recipient_contact == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address == null ? null : ctx_r1.notification.recipient_contact.recipient_mail_address.postal_code, " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 8, ctx_r1.today, "d MMMM y"));
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r1.notification == null ? null : ctx_r1.notification.subject);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("innerHTML", ctx_r1.notification == null ? null : ctx_r1.notification.body, i0.ɵɵsanitizeHtml);
} }
class NotificationPreviewComponent {
    errorHandlerService;
    notificationService;
    payment;
    contactDetails;
    refundReason;
    refundAmount;
    paymentReference;
    refundReference;
    previewJourney;
    notificationSent;
    notificationPreviewEvent = new EventEmitter();
    notification;
    notificationPreviewRequest;
    today = Date.now();
    //   errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
    errorMessage = null;
    constructor(errorHandlerService, notificationService) {
        this.errorHandlerService = errorHandlerService;
        this.notificationService = notificationService;
    }
    ngOnInit() {
        if (this.previewJourney != undefined && this.previewJourney != null && this.previewJourney === 'Notifications sent') {
            this.notification = this.notificationSent;
            if (this.notification != undefined && this.notification != null && this.notification.template_type === 'letter') {
                this.notification.body = this.notification.body.replace(/\r\n/g, '<br/>');
            }
        }
        else {
            const notficationPreviewRequestBody = new NotificationPreviewRequest(this.payment, this.contactDetails, this.refundReason, this.refundAmount, this.refundReference, this.paymentReference);
            this.notificationService.getNotificationPreview(notficationPreviewRequestBody).subscribe(res => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                this.notification = JSON.parse(res);
                if (this.notification != undefined && this.notification != null && this.notification.template_type === 'letter') {
                    this.notification.body = this.notification.body.replace(/\r\n/g, '<br/>');
                }
            }, (error) => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
                console.log(this.errorMessage);
            });
            this.notificationPreviewEvent.emit(this.notification);
        }
    }
    static ɵfac = function NotificationPreviewComponent_Factory(t) { return new (t || NotificationPreviewComponent)(i0.ɵɵdirectiveInject(ErrorHandlerService), i0.ɵɵdirectiveInject(NotificationService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NotificationPreviewComponent, selectors: [["app-notification-preview"]], inputs: { payment: "payment", contactDetails: "contactDetails", refundReason: "refundReason", refundAmount: "refundAmount", paymentReference: "paymentReference", refundReference: "refundReference", previewJourney: "previewJourney", notificationSent: "notificationSent" }, outputs: { notificationPreviewEvent: "notificationPreviewEvent" }, decls: 5, vars: 2, consts: [[1, "govuk-grid-column-full"], [1, "govuk-table"], [1, "govuk-table__body"], [4, "ngIf"], [1, "govuk-table__row"], [1, "govuk-table__cell", "whitespace-inherit"], [1, "govuk-!-font-weight-bold"], [3, "innerHTML"], [1, "letter-row-border"]], template: function NotificationPreviewComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "table", 1)(2, "tbody", 2);
            i0.ɵɵtemplate(3, NotificationPreviewComponent_ng_container_3_Template, 19, 4, "ng-container", 3);
            i0.ɵɵtemplate(4, NotificationPreviewComponent_ng_container_4_Template, 19, 11, "ng-container", 3);
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", (ctx.notification == null ? null : ctx.notification.template_type) === "email");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", (ctx.notification == null ? null : ctx.notification.template_type) === "letter");
        } }, dependencies: [i3.NgIf, i3.DatePipe], styles: [".right[_ngcontent-%COMP%]{float:right}.letter-row-border[_ngcontent-%COMP%]{border-bottom:none}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NotificationPreviewComponent, [{
        type: Component,
        args: [{ selector: 'app-notification-preview', template: "<div class=\"govuk-grid-column-full\">\n  <table class=\"govuk-table\">\n    <tbody class=\"govuk-table__body\">\n      <ng-container *ngIf=\"notification?.template_type === 'email'\">\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell whitespace-inherit\"><span class=\"govuk-!-font-weight-bold\">From:</span>\n            {{notification?.from?.from_email_address}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell whitespace-inherit\"><span class=\"govuk-!-font-weight-bold\">To:</span>\n            {{notification?.recipient_contact?.recipient_email_address}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell whitespace-inherit\"><span class=\"govuk-!-font-weight-bold\">Subject:</span>\n            {{notification?.subject}}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell whitespace-inherit\">\n            <div [innerHTML]=\"notification?.html\"></div>\n          </td>\n        </tr>\n      </ng-container>\n      <ng-container *ngIf=\"notification?.template_type === 'letter'\">\n        <tr class=\"govuk-table__row\">\n          <td class=\"letter-row-border\">\n            <ng-container *ngIf=\"notification?.recipient_contact?.recipient_mail_address?.address_line\">\n              {{notification?.recipient_contact?.recipient_mail_address?.address_line}}<br /></ng-container>\n            <ng-container *ngIf=\"notification?.recipient_contact?.recipient_mail_address?.city\">\n              {{notification?.recipient_contact?.recipient_mail_address?.city}}<br /></ng-container>\n            <ng-container *ngIf=\"notification?.recipient_contact?.recipient_mail_address?.county\">\n              {{notification?.recipient_contact?.recipient_mail_address?.county}}<br /></ng-container>\n            <ng-container *ngIf=\"notification?.recipient_contact?.recipient_mail_address?.country\">\n              {{notification?.recipient_contact?.recipient_mail_address?.country}}<br /></ng-container>\n            {{notification?.recipient_contact?.recipient_mail_address?.postal_code}}\n          </td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"letter-row-border\">{{ today | date:'d MMMM y' }}</td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"letter-row-border\"><span class=\"govuk-!-font-weight-bold\">{{notification?.subject}}</span></td>\n        </tr>\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell whitespace-inherit\">\n            <div [innerHTML]=\"notification?.body\"></div>\n          </td>\n        </tr>\n      </ng-container>\n  \n    </tbody>\n  </table>\n</div>\n", styles: [".right{float:right}.letter-row-border{border-bottom:none}\n"] }]
    }], function () { return [{ type: ErrorHandlerService }, { type: NotificationService }]; }, { payment: [{
            type: Input
        }], contactDetails: [{
            type: Input
        }], refundReason: [{
            type: Input
        }], refundAmount: [{
            type: Input
        }], paymentReference: [{
            type: Input
        }], refundReference: [{
            type: Input
        }], previewJourney: [{
            type: Input
        }], notificationSent: [{
            type: Input
        }], notificationPreviewEvent: [{
            type: Output
        }] }); })();

class CcdHyphensPipe {
    constructor() { }
    transform(value, args) {
        const pattern = /^([0-9]{4})+([0-9]{4})+([0-9]{4})+([0-9]{4})$/;
        if (value.match(pattern)) {
            return value.replace(pattern, '$1-$2-$3-$4');
        }
        return value;
    }
    static ɵfac = function CcdHyphensPipe_Factory(t) { return new (t || CcdHyphensPipe)(); };
    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "ccdHyphens", type: CcdHyphensPipe, pure: true });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CcdHyphensPipe, [{
        type: Pipe,
        args: [{
                name: 'ccdHyphens'
            }]
    }], function () { return []; }, null); })();

class CapitalizePipe {
    constructor() { }
    transform(s, args) {
        return s && s[0].toUpperCase() + s.slice(1) || "";
    }
    static ɵfac = function CapitalizePipe_Factory(t) { return new (t || CapitalizePipe)(); };
    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "capitalize", type: CapitalizePipe, pure: true });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CapitalizePipe, [{
        type: Pipe,
        args: [{
                name: 'capitalize'
            }]
    }], function () { return []; }, null); })();

function PaymentViewComponent_ng_container_1_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 10)(2, "h2", 11);
    i0.ɵɵtext(3, " Payment details could not be retrieved ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 12);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r10.errorMessage, " ");
} }
function PaymentViewComponent_ng_container_1_div_9_tr_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 20);
    i0.ɵɵtext(2, "Over payment");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "number");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(5, 1, ctx_r13.getOverPaymentValue(), ".2"), "");
} }
function PaymentViewComponent_ng_container_1_div_9_tr_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 20);
    i0.ɵɵtext(2, "Payment asset number(DCN)");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r14.paymentGroup == null ? null : ctx_r14.paymentGroup.payments[0] == null ? null : ctx_r14.paymentGroup.payments[0].document_control_number);
} }
function PaymentViewComponent_ng_container_1_div_9_tr_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 20);
    i0.ɵɵtext(2, "Banked date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "date");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 1, ctx_r15.paymentGroup == null ? null : ctx_r15.paymentGroup.payments[0] == null ? null : ctx_r15.paymentGroup.payments[0].banked_date, "dd MMM yyyy"));
} }
function PaymentViewComponent_ng_container_1_div_9_tr_28_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 20);
    i0.ɵɵtext(2, "GovPay Transaction ID");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r16.paymentGroup == null ? null : ctx_r16.paymentGroup.payments[0] == null ? null : ctx_r16.paymentGroup.payments[0].external_reference);
} }
function PaymentViewComponent_ng_container_1_div_9_tr_34_td_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 21);
    i0.ɵɵtext(1, "Credit");
    i0.ɵɵelementEnd();
} }
function PaymentViewComponent_ng_container_1_div_9_tr_34_td_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 21);
    i0.ɵɵtext(1, "Card");
    i0.ɵɵelementEnd();
} }
function PaymentViewComponent_ng_container_1_div_9_tr_34_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 20);
    i0.ɵɵtext(2, "Type");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, PaymentViewComponent_ng_container_1_div_9_tr_34_td_3_Template, 2, 0, "td", 27);
    i0.ɵɵtemplate(4, PaymentViewComponent_ng_container_1_div_9_tr_34_td_4_Template, 2, 0, "td", 27);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", (ctx_r17.paymentGroup == null ? null : ctx_r17.paymentGroup.payments[0] == null ? null : ctx_r17.paymentGroup.payments[0].method) !== "card");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r17.paymentGroup == null ? null : ctx_r17.paymentGroup.payments[0] == null ? null : ctx_r17.paymentGroup.payments[0].method) === "card");
} }
function PaymentViewComponent_ng_container_1_div_9_tr_40_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 20);
    i0.ɵɵtext(2, "Allocaton status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r18.paymentGroup == null ? null : ctx_r18.paymentGroup.payments[0] == null ? null : ctx_r18.paymentGroup.payments[0].payment_allocation[0] == null ? null : ctx_r18.paymentGroup.payments[0].payment_allocation[0].allocation_status);
} }
function PaymentViewComponent_ng_container_1_div_9_tr_41_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 20);
    i0.ɵɵtext(2, "PBA account name");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r19.paymentGroup == null ? null : ctx_r19.paymentGroup.payments[0] == null ? null : ctx_r19.paymentGroup.payments[0].organisation_name);
} }
function PaymentViewComponent_ng_container_1_div_9_tr_42_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 20);
    i0.ɵɵtext(2, "PBA number");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r20.paymentGroup == null ? null : ctx_r20.paymentGroup.payments[0] == null ? null : ctx_r20.paymentGroup.payments[0].account_number);
} }
function PaymentViewComponent_ng_container_1_div_9_tr_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 20);
    i0.ɵɵtext(2, "Customer internal reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r21.paymentGroup == null ? null : ctx_r21.paymentGroup.payments[0] == null ? null : ctx_r21.paymentGroup.payments[0].customer_reference);
} }
function PaymentViewComponent_ng_container_1_div_9_ccpay_payment_statuses_45_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-payment-statuses", 28);
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("isTakePayment", ctx_r22.isTakePayment);
} }
function PaymentViewComponent_ng_container_1_div_9_div_49_tbody_19_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r32 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr")(1, "td");
    i0.ɵɵtext(2);
    i0.ɵɵpipe(3, "capitalize");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "td");
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "number");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td");
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td");
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td")(15, "a", 31);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_1_div_9_div_49_tbody_19_tr_1_Template_a_click_15_listener() { const restoredCtx = i0.ɵɵrestoreView(_r32); const payment_r30 = restoredCtx.$implicit; const ctx_r31 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r31.goToPaymentFailuePage(payment_r30)); });
    i0.ɵɵtext(16, "Show detail");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const payment_r30 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, payment_r30.status));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(6, 7, payment_r30.disputed_amount, ".2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 10, payment_r30.representment_date ? payment_r30.representment_date : payment_r30.failure_event_date_time, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r30.payment_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r30.failure_type);
} }
function PaymentViewComponent_ng_container_1_div_9_div_49_tbody_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody");
    i0.ɵɵtemplate(1, PaymentViewComponent_ng_container_1_div_9_div_49_tbody_19_tr_1_Template, 17, 13, "tr", 30);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r27.allPaymentsFailure);
} }
function PaymentViewComponent_ng_container_1_div_9_div_49_tbody_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody")(1, "tr")(2, "td", 32);
    i0.ɵɵtext(3, " No disputed payment history available. ");
    i0.ɵɵelementEnd()()();
} }
function PaymentViewComponent_ng_container_1_div_9_div_49_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 17)(2, "h2", 29);
    i0.ɵɵtext(3, "Disputed payment history");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "div")(5, "table")(6, "thead")(7, "tr")(8, "th");
    i0.ɵɵtext(9, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "th");
    i0.ɵɵtext(11, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "th");
    i0.ɵɵtext(13, "Date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "th");
    i0.ɵɵtext(15, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "th");
    i0.ɵɵtext(17, "Event");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(18, "th");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(19, PaymentViewComponent_ng_container_1_div_9_div_49_tbody_19_Template, 2, 1, "tbody", 1);
    i0.ɵɵtemplate(20, PaymentViewComponent_ng_container_1_div_9_div_49_tbody_20_Template, 4, 0, "tbody", 1);
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(21, "br")(22, "br");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(19);
    i0.ɵɵproperty("ngIf", !ctx_r23.errorMsg && ctx_r23.allPaymentsFailure.length > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r23.errorMsg || ctx_r23.allPaymentsFailure.length === 0);
} }
function PaymentViewComponent_ng_container_1_div_9_div_50_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 17);
    i0.ɵɵelement(2, "br")(3, "br");
    i0.ɵɵelementStart(4, "h2", 42);
    i0.ɵɵtext(5, "Fee and remission details");
    i0.ɵɵelementEnd()()();
} }
const _c0$6 = function (a0) { return { "tr-border": a0 }; };
function PaymentViewComponent_ng_container_1_div_9_div_50_div_2_tr_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 46);
    i0.ɵɵtext(2, "Allocated amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 45);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "number");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const fee_r37 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c0$6, !fee_r37.remissions));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(8, _c0$6, !fee_r37.remissions));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(5, 3, fee_r37 == null ? null : fee_r37.apportion_amount, ".2"), "");
} }
function PaymentViewComponent_ng_container_1_div_9_div_50_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r41 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "table", 43)(2, "tbody")(3, "tr", 19)(4, "td", 20);
    i0.ɵɵtext(5, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 21);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "tr", 19)(9, "td", 20);
    i0.ɵɵtext(10, "Fee code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 21);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(13, "tr", 19)(14, "td", 44);
    i0.ɵɵtext(15, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "td", 45);
    i0.ɵɵtext(17);
    i0.ɵɵpipe(18, "number");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(19, PaymentViewComponent_ng_container_1_div_9_div_50_div_2_tr_19_Template, 6, 10, "tr", 1);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(20, "button", 26);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_1_div_9_div_50_div_2_Template_button_click_20_listener() { const restoredCtx = i0.ɵɵrestoreView(_r41); const fee_r37 = restoredCtx.$implicit; const ctx_r40 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r40.addRemission(fee_r37)); });
    i0.ɵɵtext(21, " Add remission");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const fee_r37 = ctx.$implicit;
    const ctx_r34 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("Application for ", fee_r37.description, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(fee_r37 == null ? null : fee_r37.code);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(10, _c0$6, !fee_r37.apportion_amount && !fee_r37.remissions && !ctx_r34.isTurnOff));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(12, _c0$6, !fee_r37.apportion_amount && !fee_r37.remissions && !ctx_r34.isTurnOff));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(18, 7, fee_r37 == null ? null : fee_r37.calculated_amount, ".2"), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", fee_r37.apportion_amount);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", !ctx_r34.chkIsAddRemissionBtnEnable(fee_r37));
} }
function PaymentViewComponent_ng_container_1_div_9_div_50_tbody_17_Template(rf, ctx) { if (rf & 1) {
    const _r44 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tbody", 47)(1, "tr", 36)(2, "td", 48);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "td", 48);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 48);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 48);
    i0.ɵɵtext(9);
    i0.ɵɵpipe(10, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 49)(12, "button", 26);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_1_div_9_div_50_tbody_17_Template_button_click_12_listener() { const restoredCtx = i0.ɵɵrestoreView(_r44); const remission_r42 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r43.addRefundForRemission(ctx_r43.paymentGroup.payments[0], remission_r42, ctx_r43.paymentGroup.fees)); });
    i0.ɵɵtext(13, " Add refund");
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const remission_r42 = ctx.$implicit;
    const ctx_r35 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(remission_r42 == null ? null : remission_r42.hwf_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r42 == null ? null : remission_r42.remission_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r42 == null ? null : remission_r42.fee_code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(10, 5, remission_r42 == null ? null : remission_r42.hwf_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", !ctx_r35.chkIsAddRefundBtnEnable(remission_r42));
} }
function PaymentViewComponent_ng_container_1_div_9_div_50_div_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "span", 50);
    i0.ɵɵtext(2, "No help with fees or remissions.");
    i0.ɵɵelementEnd()();
} }
function PaymentViewComponent_ng_container_1_div_9_div_50_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PaymentViewComponent_ng_container_1_div_9_div_50_div_1_Template, 6, 0, "div", 1);
    i0.ɵɵtemplate(2, PaymentViewComponent_ng_container_1_div_9_div_50_div_2_Template, 22, 14, "div", 30);
    i0.ɵɵelementStart(3, "div", 33)(4, "div", 17)(5, "table", 34)(6, "thead", 35)(7, "tr", 36)(8, "td", 37);
    i0.ɵɵtext(9, "Help with fees or remission code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 38);
    i0.ɵɵtext(11, "Reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 39);
    i0.ɵɵtext(13, "Fee");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td", 39);
    i0.ɵɵtext(15, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(16, "td", 40);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(17, PaymentViewComponent_ng_container_1_div_9_div_50_tbody_17_Template, 14, 10, "tbody", 41);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(18, PaymentViewComponent_ng_container_1_div_9_div_50_div_18_Template, 3, 0, "div", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r24.paymentGroup.fees.length > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r24.paymentGroup.fees);
    i0.ɵɵadvance(15);
    i0.ɵɵproperty("ngForOf", ctx_r24.paymentGroup.remissions);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r24.paymentGroup.remissions == null ? null : ctx_r24.paymentGroup.remissions.length) === 0);
} }
function PaymentViewComponent_ng_container_1_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r46 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵelement(1, "input", 14, 15);
    i0.ɵɵelementStart(3, "div", 16)(4, "div", 17)(5, "h1", 18);
    i0.ɵɵtext(6, "Payment details");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(7, "table")(8, "tbody")(9, "tr", 19)(10, "td", 20);
    i0.ɵɵtext(11, "Service request reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 21);
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(14, "tr", 19)(15, "td", 20);
    i0.ɵɵtext(16, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 21);
    i0.ɵɵtext(18);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(19, "tr", 19)(20, "td", 20);
    i0.ɵɵtext(21, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "td", 21);
    i0.ɵɵtext(23);
    i0.ɵɵpipe(24, "number");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(25, PaymentViewComponent_ng_container_1_div_9_tr_25_Template, 6, 4, "tr", 22);
    i0.ɵɵtemplate(26, PaymentViewComponent_ng_container_1_div_9_tr_26_Template, 5, 1, "tr", 22);
    i0.ɵɵtemplate(27, PaymentViewComponent_ng_container_1_div_9_tr_27_Template, 6, 4, "tr", 22);
    i0.ɵɵtemplate(28, PaymentViewComponent_ng_container_1_div_9_tr_28_Template, 5, 1, "tr", 22);
    i0.ɵɵelementStart(29, "tr", 19)(30, "td", 20);
    i0.ɵɵtext(31, "Payment method");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(32, "td", 23);
    i0.ɵɵtext(33);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(34, PaymentViewComponent_ng_container_1_div_9_tr_34_Template, 5, 2, "tr", 22);
    i0.ɵɵelementStart(35, "tr", 19)(36, "td", 20);
    i0.ɵɵtext(37, "Channel");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(38, "td", 23);
    i0.ɵɵtext(39);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(40, PaymentViewComponent_ng_container_1_div_9_tr_40_Template, 5, 1, "tr", 22);
    i0.ɵɵtemplate(41, PaymentViewComponent_ng_container_1_div_9_tr_41_Template, 5, 1, "tr", 1);
    i0.ɵɵtemplate(42, PaymentViewComponent_ng_container_1_div_9_tr_42_Template, 5, 1, "tr", 1);
    i0.ɵɵtemplate(43, PaymentViewComponent_ng_container_1_div_9_tr_43_Template, 5, 1, "tr", 1);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(44, "div");
    i0.ɵɵtemplate(45, PaymentViewComponent_ng_container_1_div_9_ccpay_payment_statuses_45_Template, 1, 1, "ccpay-payment-statuses", 24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(46, "div", 25)(47, "button", 26);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_1_div_9_Template_button_click_47_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r45.issueRefund(ctx_r45.paymentGroup)); });
    i0.ɵɵtext(48, "Issue refund");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(49, PaymentViewComponent_ng_container_1_div_9_div_49_Template, 23, 2, "div", 1);
    i0.ɵɵtemplate(50, PaymentViewComponent_ng_container_1_div_9_div_50_Template, 19, 4, "div", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(13);
    i0.ɵɵtextInterpolate(ctx_r11.serviceReference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].reference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(24, 18, ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].amount, ".2"), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].over_payment) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0]) && (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].document_control_number) && !(ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].external_reference));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0]) && (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].document_control_number) && !(ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].external_reference));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0]) && (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].external_reference));
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].method);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].method) === "payment by account");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].channel);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0] == null ? null : ctx_r11.paymentGroup.payments[0].payment_allocation[0]) !== undefined);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0].organisation_name);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0].account_number);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0].customer_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r11.isStatusAllocated);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", !ctx_r11.chkIsIssueRefundBtnEnable(ctx_r11.paymentGroup == null ? null : ctx_r11.paymentGroup.payments[0]));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r11.ISPAYMENTSTATUSENABLED);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.checkForFees(ctx_r11.paymentGroup));
} }
function PaymentViewComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r48 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 3)(2, "div", 4)(3, "ol", 5)(4, "li", 6)(5, "a", 7);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_1_Template_a_click_5_listener($event) { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r47.goToCaseTransationPage($event)); });
    i0.ɵɵtext(6, "Back");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(7, "main", 8);
    i0.ɵɵtemplate(8, PaymentViewComponent_ng_container_1_div_8_Template, 6, 1, "div", 1);
    i0.ɵɵtemplate(9, PaymentViewComponent_ng_container_1_div_9_Template, 51, 21, "div", 9);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(8);
    i0.ɵɵproperty("ngIf", ctx_r0.errorMessage);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.errorMessage && (ctx_r0.paymentGroup == null ? null : ctx_r0.paymentGroup.payments[0]));
} }
function PaymentViewComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "ccpay-add-remission", 51);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isTurnOff", ctx_r1.isTurnOff)("isStrategicFixEnable", ctx_r1.isStrategicFixEnable)("viewCompStatus", ctx_r1.viewStatus)("fee", ctx_r1.feeId)("payment", ctx_r1.payment)("orderStatus", ctx_r1.paymentGroup.payments[0].status)("paidAmount", ctx_r1.paymentGroup.payments[0].amount)("isRefundRemission", ctx_r1.isRefundRemission)("caseType", ctx_r1.caseType)("paymentGroupRef", ctx_r1.paymentGroup.payment_group_reference)("isFromPaymentDetailPage", true)("ccdCaseNumber", ctx_r1.ccdCaseNumber)("orderFeesTotal", ctx_r1.orderFeesTotal)("orderTotalPayments", ctx_r1.orderTotalPayments)("orderRemissionTotal", ctx_r1.orderRemissionTotal)("orderRef", ctx_r1.orderRef)("orderCreated", ctx_r1.orderCreated)("orderParty", ctx_r1.orderParty)("orderCCDEvent", ctx_r1.orderCCDEvent)("orderDetail", ctx_r1.orderDetail)("LOGGEDINUSERROLES", ctx_r1.LOGGEDINUSERROLES);
} }
function PaymentViewComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "ccpay-add-remission", 52);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isTurnOff", ctx_r2.isTurnOff)("isStrategicFixEnable", ctx_r2.isStrategicFixEnable)("viewCompStatus", ctx_r2.viewStatus)("payment", ctx_r2.payment)("orderStatus", ctx_r2.orderStatus)("paidAmount", ctx_r2.orderTotalPayments)("isRefundRemission", ctx_r2.isRefundRemission)("caseType", ctx_r2.caseType)("feeamount", ctx_r2.remissionFeeAmt)("remission", ctx_r2.remissions)("isFromServiceRequestPage", false)("paymentGroupRef", ctx_r2.paymentGroup.payment_group_reference)("ccdCaseNumber", ctx_r2.ccdCaseNumber)("orderFeesTotal", ctx_r2.orderFeesTotal)("orderTotalPayments", ctx_r2.orderTotalPayments)("orderRemissionTotal", ctx_r2.orderRemissionTotal)("orderRef", ctx_r2.orderRef)("orderCreated", ctx_r2.orderCreated)("orderParty", ctx_r2.orderParty)("orderCCDEvent", ctx_r2.orderCCDEvent)("orderDetail", ctx_r2.orderDetail)("LOGGEDINUSERROLES", ctx_r2.LOGGEDINUSERROLES);
} }
function PaymentViewComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ccpay-add-remission", 53);
    i0.ɵɵtext(2, " >");
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isTurnOff", ctx_r3.isTurnOff)("isStrategicFixEnable", ctx_r3.isStrategicFixEnable)("payment", ctx_r3.paymentGroup.payments[0])("viewCompStatus", ctx_r3.viewStatus)("orderStatus", ctx_r3.paymentGroup.payments[0].status)("paidAmount", ctx_r3.paymentGroup.payments[0].amount)("isRefundRemission", ctx_r3.isRefundRemission)("caseType", ctx_r3.caseType)("isFromServiceRequestPage", ctx_r3.isFromServiceRequestPage)("isFromPaymentDetailPage", ctx_r3.isFromPaymentDetailPage)("paymentGroupRef", ctx_r3.paymentGroup.payment_group_reference)("ccdCaseNumber", ctx_r3.ccdCaseNumber)("orderFeesTotal", ctx_r3.orderFeesTotal)("orderTotalPayments", ctx_r3.orderTotalPayments)("orderRemissionTotal", ctx_r3.orderRemissionTotal)("orderRef", ctx_r3.orderRef)("orderCreated", ctx_r3.orderCreated)("orderParty", ctx_r3.orderParty)("orderCCDEvent", ctx_r3.orderCCDEvent)("orderDetail", ctx_r3.orderDetail)("fees", ctx_r3.paymentFees)("isFullyRefund", ctx_r3.isFullyRefund)("LOGGEDINUSERROLES", ctx_r3.LOGGEDINUSERROLES);
} }
function PaymentViewComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r50 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ccpay-service-request", 54);
    i0.ɵɵlistener("goToServiceRquestComponent", function PaymentViewComponent_ng_container_5_Template_ccpay_service_request_goToServiceRquestComponent_1_listener() { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r49.goToServiceRequestPage()); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("viewStatus", ctx_r4.viewStatus)("orderRef", ctx_r4.orderRef)("orderStatus", ctx_r4.orderStatus)("orderCreated", ctx_r4.orderCreated)("orderParty", ctx_r4.orderParty)("orderCCDEvent", ctx_r4.orderCCDEvent)("orderDetail", ctx_r4.orderDetail)("LOGGEDINUSERROLES", ctx_r4.LOGGEDINUSERROLES)("takePayment", ctx_r4.isTakePayment)("ccdCaseNumber", ctx_r4.ccdCaseNumber)("orderFeesTotal", ctx_r4.orderFeesTotal)("orderTotalPayments", ctx_r4.orderTotalPayments)("orderRemissionTotal", ctx_r4.orderRemissionTotal)("isServiceRequest", ctx_r4.isServiceRequest);
} }
function PaymentViewComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r53 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 55, 15);
    i0.ɵɵelementStart(3, "h1", 42);
    i0.ɵɵtext(4, "Issue refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h1", 29);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 56);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "div", 57)(11, "fieldset", 58)(12, "legend", 59)(13, "h1", 29);
    i0.ɵɵtext(14, "Select payment to refund");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "div", 60)(16, "div", 61)(17, "input", 62);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_7_Template_input_click_17_listener() { i0.ɵɵrestoreView(_r53); const ctx_r52 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r52.selectPymentOption("op")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "label", 63);
    i0.ɵɵtext(19);
    i0.ɵɵpipe(20, "number");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(21, "div", 61)(22, "input", 64);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_7_Template_input_click_22_listener() { i0.ɵɵrestoreView(_r53); const ctx_r54 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r54.selectPymentOption("fp")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "label", 65);
    i0.ɵɵtext(24);
    i0.ɵɵpipe(25, "number");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(26, "button", 66);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_7_Template_button_click_26_listener() { i0.ɵɵrestoreView(_r53); const ctx_r55 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r55.goToPaymentViewComponent()); });
    i0.ɵɵtext(27, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(28, "button", 67);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_7_Template_button_click_28_listener() { i0.ɵɵrestoreView(_r53); const ctx_r56 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r56.continuePayment(ctx_r56.paymentGroup)); });
    i0.ɵɵtext(29, " Continue");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 6, ctx_r5.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r5.paymentGroup == null ? null : ctx_r5.paymentGroup.payments[0] == null ? null : ctx_r5.paymentGroup.payments[0].reference, " ");
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate1(" Over payment \u00A3", i0.ɵɵpipeBind2(20, 8, ctx_r5.getOverPaymentValue(), ".2"), " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" Full payment \u00A3", i0.ɵɵpipeBind2(25, 11, ctx_r5.paymentGroup == null ? null : ctx_r5.paymentGroup.payments[0] == null ? null : ctx_r5.paymentGroup.payments[0].amount, ".2"), " ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("disabled", ctx_r5.isContinueBtnDisabled)("ngClass", ctx_r5.isContinueBtnDisabled ? "button button--disabled govuk-!-margin-right-1 govuk-font19px" : "button govuk-!-margin-right-1 govuk-font19px");
} }
function PaymentViewComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r59 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 68, 15);
    i0.ɵɵelementStart(3, "h1", 69);
    i0.ɵɵtext(4, "Issue refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 70);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 71);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "ccpay-contact-details", 72);
    i0.ɵɵlistener("assignContactDetails", function PaymentViewComponent_ng_container_8_Template_ccpay_contact_details_assignContactDetails_10_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r58.getContactDetails($event)); })("redirectToIssueRefund", function PaymentViewComponent_ng_container_8_Template_ccpay_contact_details_redirectToIssueRefund_10_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r60 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r60.gotoPaymentSelectPage($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "p")(12, "a", 73);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_8_Template_a_click_12_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r61 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r61.goToCaseTransationPage($event)); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 3, ctx_r6.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Payment reference: ", ctx_r6.paymentGroup == null ? null : ctx_r6.paymentGroup.payments[0] == null ? null : ctx_r6.paymentGroup.payments[0].reference, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("addressObj", ctx_r6.notification);
} }
function PaymentViewComponent_ng_container_9_div_44_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 85)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r63 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r63.contactDetailsObj == null ? null : ctx_r63.contactDetailsObj.email == null ? null : ctx_r63.contactDetailsObj.email.trim(), " ");
} }
function PaymentViewComponent_ng_container_9_div_45_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 85)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r64 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r64.contactDetailsObj == null ? null : ctx_r64.contactDetailsObj.address_line == null ? null : ctx_r64.contactDetailsObj.address_line.trim(), "\u00A0", ctx_r64.contactDetailsObj == null ? null : ctx_r64.contactDetailsObj.city == null ? null : ctx_r64.contactDetailsObj.city.trim(), "\u00A0", ctx_r64.contactDetailsObj == null ? null : ctx_r64.contactDetailsObj.county == null ? null : ctx_r64.contactDetailsObj.county.trim(), "\u00A0", ctx_r64.contactDetailsObj == null ? null : ctx_r64.contactDetailsObj.country == null ? null : ctx_r64.contactDetailsObj.country.trim(), "\u00A0", ctx_r64.contactDetailsObj == null ? null : ctx_r64.contactDetailsObj.postal_code == null ? null : ctx_r64.contactDetailsObj.postal_code.trim(), " ");
} }
function PaymentViewComponent_ng_container_9_a_53_Template(rf, ctx) { if (rf & 1) {
    const _r69 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 86);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_9_a_53_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r68.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function PaymentViewComponent_ng_container_9_a_54_Template(rf, ctx) { if (rf & 1) {
    const _r71 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 86);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_9_a_54_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r71); const ctx_r70 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r70.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function PaymentViewComponent_ng_container_9_app_notification_preview_55_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 87);
} if (rf & 2) {
    const ctx_r67 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("payment", ctx_r67.paymentGroup.payments[0])("contactDetails", ctx_r67.contactDetailsObj)("refundReason", "RR037")("refundAmount", ctx_r67.getOverPaymentValue());
} }
function PaymentViewComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r73 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 74, 15);
    i0.ɵɵelementStart(3, "div", 75)(4, "h1", 42);
    i0.ɵɵtext(5, " Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(6, "table", 34)(7, "tr", 36)(8, "td", 76);
    i0.ɵɵtext(9, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 77);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "tr", 36)(13, "td", 76);
    i0.ɵɵtext(14, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 77);
    i0.ɵɵtext(16);
    i0.ɵɵpipe(17, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(18, "tr", 36)(19, "td", 76);
    i0.ɵɵtext(20, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 77);
    i0.ɵɵtext(22);
    i0.ɵɵpipe(23, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(24, "tr", 36)(25, "td", 76);
    i0.ɵɵtext(26, "Refund amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "td", 77);
    i0.ɵɵtext(28);
    i0.ɵɵpipe(29, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(30, "tr", 36)(31, "td", 76);
    i0.ɵɵtext(32, "Refund reason");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(33, "td", 77);
    i0.ɵɵtext(34, "Over payment");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(35, "tr", 36)(36, "td", 76);
    i0.ɵɵtext(37, "Send to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(38, "td", 77);
    i0.ɵɵtext(39);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(40, "tr", 36)(41, "td", 76);
    i0.ɵɵtext(42, "Send via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(43, "td", 48);
    i0.ɵɵtemplate(44, PaymentViewComponent_ng_container_9_div_44_Template, 5, 1, "div", 78);
    i0.ɵɵtemplate(45, PaymentViewComponent_ng_container_9_div_45_Template, 5, 5, "div", 78);
    i0.ɵɵelementStart(46, "a", 79);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_9_Template_a_click_46_listener() { i0.ɵɵrestoreView(_r73); const ctx_r72 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r72.gotoAddressPage(ctx_r72.contactDetailsObj)); });
    i0.ɵɵtext(47, "Change");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(48, "tr", 36)(49, "td", 76);
    i0.ɵɵtext(50, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(51, "td", 77);
    i0.ɵɵtext(52);
    i0.ɵɵtemplate(53, PaymentViewComponent_ng_container_9_a_53_Template, 2, 0, "a", 80);
    i0.ɵɵtemplate(54, PaymentViewComponent_ng_container_9_a_54_Template, 2, 0, "a", 80);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(55, PaymentViewComponent_ng_container_9_app_notification_preview_55_Template, 1, 4, "app-notification-preview", 81);
    i0.ɵɵelementStart(56, "button", 82);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_9_Template_button_click_56_listener() { i0.ɵɵrestoreView(_r73); const ctx_r74 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r74.gotoAddressPage(ctx_r74.contactDetailsObj)); });
    i0.ɵɵtext(57, "Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(58, "button", 83);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_9_Template_button_click_58_listener() { i0.ɵɵrestoreView(_r73); const ctx_r75 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r75.processRefund()); });
    i0.ɵɵtext(59, " Submit refund ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(60, "p")(61, "a", 84);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_9_Template_a_click_61_listener($event) { i0.ɵɵrestoreView(_r73); const ctx_r76 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r76.goToCaseTransationPage($event)); });
    i0.ɵɵtext(62, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate1(" ", ctx_r7.paymentGroup.payments[0].reference, " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(17, 12, ctx_r7.paymentGroup.payments[0].amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(23, 17, ctx_r7.paymentGroup == null ? null : ctx_r7.paymentGroup.fees[0] == null ? null : ctx_r7.paymentGroup.fees[0].net_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(29, 22, ctx_r7.getOverPaymentValue(), "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r7.orderParty);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r7.contactDetailsObj == null ? null : ctx_r7.contactDetailsObj.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r7.contactDetailsObj == null ? null : ctx_r7.contactDetailsObj.notification_type) === "LETTER");
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("", ctx_r7.templateInstructionType, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r7.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.notificationPreview);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", ctx_r7.isContinueBtnDisabled ? "button button--disabled govuk-!-margin-right-1 govuk-font19px" : "button govuk-!-margin-right-1 govuk-font19px");
} }
function PaymentViewComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r79 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 88, 15);
    i0.ɵɵelementStart(3, "div", 89)(4, "div")(5, "div", 90)(6, "h1", 91);
    i0.ɵɵtext(7, " Refund submitted ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "div", 92)(9, "p", 93)(10, "strong");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(12, "h2", 69);
    i0.ɵɵtext(13, "What happens next");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "p", 94);
    i0.ɵɵtext(15);
    i0.ɵɵpipe(16, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "p", 94)(18, "a", 95);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_10_Template_a_click_18_listener($event) { i0.ɵɵrestoreView(_r79); const ctx_r78 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r78.goToCaseTransationPage($event)); });
    i0.ɵɵtext(19, " Return to case ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate1("Refund reference: ", ctx_r8.refundReference, "");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" A refund request for ", i0.ɵɵpipeBind4(16, 2, ctx_r8.refundAmount, "GBP", "symbol-narrow", "1.2-2"), " has been created and will be passed to a team leader to approve. ");
} }
function PaymentViewComponent_ng_container_11_tr_56_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 97);
    i0.ɵɵtext(2, "Has disputed amount debited");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r80 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\t", ctx_r80.selectedPaymentsStatus.has_amount_debited, "");
} }
function PaymentViewComponent_ng_container_11_tr_57_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 97);
    i0.ɵɵtext(2, "Status following representation of payment");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r81 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\t", ctx_r81.selectedPaymentsStatus.representment_status === "Yes" || ctx_r81.selectedPaymentsStatus.representment_status === "yes" ? "Success" : "Failure", "");
} }
function PaymentViewComponent_ng_container_11_tr_58_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 19)(1, "td", 97);
    i0.ɵɵtext(2, "Date payment represented");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td");
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "date");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r82 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\t", i0.ɵɵpipeBind2(5, 1, ctx_r82.selectedPaymentsStatus.representment_date, "dd MMM yyyy HH:mm:ss"), "");
} }
function PaymentViewComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r84 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 96)(2, "div", 4)(3, "ol", 5)(4, "li", 6)(5, "a", 7);
    i0.ɵɵlistener("click", function PaymentViewComponent_ng_container_11_Template_a_click_5_listener($event) { i0.ɵɵrestoreView(_r84); const ctx_r83 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r83.goBackToPaymentView($event)); });
    i0.ɵɵtext(6, "Back");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(7, "div", 16)(8, "div", 17)(9, "h1", 18);
    i0.ɵɵtext(10, "Failure event details");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(11, "table")(12, "tbody")(13, "tr", 19)(14, "td", 97);
    i0.ɵɵtext(15, "Failure reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "td");
    i0.ɵɵtext(17);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(18, "tr", 19)(19, "td", 97);
    i0.ɵɵtext(20, "Failure reason");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td");
    i0.ɵɵtext(22);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(23, "tr", 19)(24, "td", 97);
    i0.ɵɵtext(25, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "td");
    i0.ɵɵtext(27);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(28, "tr", 19)(29, "td", 97);
    i0.ɵɵtext(30, "Payment amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(31, "td");
    i0.ɵɵtext(32);
    i0.ɵɵpipe(33, "number");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(34, "tr", 19)(35, "td", 97);
    i0.ɵɵtext(36, "Disputed amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(37, "td");
    i0.ɵɵtext(38);
    i0.ɵɵpipe(39, "number");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(40, "tr", 19)(41, "td", 97);
    i0.ɵɵtext(42, "Additional information");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(43, "td");
    i0.ɵɵtext(44);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(45, "tr", 19)(46, "td", 97);
    i0.ɵɵtext(47, "Failure type");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(48, "td");
    i0.ɵɵtext(49);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(50, "tr", 19)(51, "td", 97);
    i0.ɵɵtext(52, "Failure event date and time");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(53, "td");
    i0.ɵɵtext(54);
    i0.ɵɵpipe(55, "date");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(56, PaymentViewComponent_ng_container_11_tr_56_Template, 5, 1, "tr", 22);
    i0.ɵɵtemplate(57, PaymentViewComponent_ng_container_11_tr_57_Template, 5, 1, "tr", 22);
    i0.ɵɵtemplate(58, PaymentViewComponent_ng_container_11_tr_58_Template, 6, 4, "tr", 22);
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(59, "div");
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(17);
    i0.ɵɵtextInterpolate1("\t", ctx_r9.selectedPaymentsStatus.failure_reference, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\t", ctx_r9.selectedPaymentsStatus.failure_reason, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r9.selectedPaymentsStatus.payment_reference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" \u00A3", i0.ɵɵpipeBind2(33, 11, ctx_r9.paymentGroup == null ? null : ctx_r9.paymentGroup.payments[0] == null ? null : ctx_r9.paymentGroup.payments[0].amount, ".2"), "");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("\t\u00A3", i0.ɵɵpipeBind2(39, 14, ctx_r9.selectedPaymentsStatus.disputed_amount, ".2"), "");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("\t", ctx_r9.selectedPaymentsStatus.additional_reference, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\t", ctx_r9.selectedPaymentsStatus.failure_type, "");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(55, 17, ctx_r9.selectedPaymentsStatus.failure_event_date_time, "dd MMM yyyy HH:mm:ss"), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.selectedPaymentsStatus.has_amount_debited);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.selectedPaymentsStatus.representment_status);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.selectedPaymentsStatus.representment_date);
} }
const BS_ENABLE_FLAG$3 = 'bulk-scan-enabling-fe';
class PaymentViewComponent {
    paymentViewService;
    notificationService;
    paymentLibComponent;
    cd;
    OrderslistService;
    isTurnOff;
    isTakePayment;
    caseType;
    orderRef;
    orderStatus;
    orderTotalPayments;
    payment;
    LOGGEDINUSERROLES;
    ISPAYMENTSTATUSENABLED;
    orderParty;
    orderCreated;
    orderCCDEvent;
    orderFeesTotal;
    orderRemissionTotal;
    orderDetail;
    fees;
    isFullyRefund;
    isServiceRequest;
    errorMsg;
    paymentGroup;
    errorMessage;
    ccdCaseNumber;
    selectedOption;
    dcnNumber;
    isStatusAllocated;
    isRemissionsMatch;
    feeId;
    viewStatus;
    isRefundRemission = false;
    isStrategicFixEnable;
    isAddFeeBtnEnabled = false;
    isIssueRefunfBtnEnable = false;
    allowedRolesToAccessRefund = ['payments-refund-approver', 'payments-refund'];
    remissions = [];
    allPaymentsFailure = [];
    selectedPaymentsStatus;
    remissionFeeAmt;
    isRefundRemissionBtnEnable;
    serviceReference;
    isFromServiceRequestPage;
    isFromPaymentDetailPage;
    paymentFees;
    paymentType;
    isContinueBtnDisabled = true;
    viewCompStatus;
    contactDetailsObj;
    notification;
    isConfirmationBtnDisabled;
    refundReference;
    refundAmount;
    templateInstructionType;
    notificationPreview;
    constructor(paymentViewService, notificationService, paymentLibComponent, cd, OrderslistService) {
        this.paymentViewService = paymentViewService;
        this.notificationService = notificationService;
        this.paymentLibComponent = paymentLibComponent;
        this.cd = cd;
        this.OrderslistService = OrderslistService;
    }
    ngAfterContentChecked() {
        this.cd.detectChanges();
    }
    ngOnInit() {
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.selectedOption = this.paymentLibComponent.SELECTED_OPTION;
        this.dcnNumber = this.paymentLibComponent.DCN_NUMBER;
        this.isTurnOff = this.paymentLibComponent.ISTURNOFF;
        this.serviceReference = this.paymentLibComponent.paymentGroupReference;
        this.viewStatus = 'paymentview';
        this.paymentViewService.getApportionPaymentDetails(this.paymentLibComponent.paymentReference).subscribe(paymentGroup => {
            let fees = [];
            paymentGroup.fees.forEach(fee => {
                this.isRemissionsMatch = false;
                paymentGroup.remissions.forEach(rem => {
                    if (rem.fee_code === fee.code) {
                        this.isRemissionsMatch = true;
                        fee['remissions'] = rem;
                        fees.push(fee);
                    }
                });
                if (!this.isRemissionsMatch) {
                    fees.push(fee);
                }
            });
            paymentGroup.fees = fees;
            this.paymentFees = fees;
            this.paymentGroup = paymentGroup;
            this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(this.paymentLibComponent.paymentReference));
            const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
            this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
        }, (error) => this.errorMessage = error);
        this.paymentViewService.getPaymentFailure(this.paymentLibComponent.paymentReference).subscribe({
            next: (res) => {
                JSON.parse(res).payment_failure_list.reverse().forEach(payments => {
                    this.allPaymentsFailure.push(payments.payment_failure_initiated);
                    if (payments.payment_failure_closed) {
                        this.allPaymentsFailure.push(payments.payment_failure_closed);
                    }
                });
                this.allPaymentsFailure = this.allPaymentsFailure.reverse();
            },
            error: (e) => {
                this.allPaymentsFailure = [];
                this.errorMsg = "Server error";
            }
        });
    }
    get isCardPayment() {
        return this.paymentGroup.payments[0].method === 'card';
    }
    get isTelephonyPayment() {
        return this.paymentGroup.payments[0].channel === 'telephony';
    }
    goToPaymentList() {
        this.paymentLibComponent.viewName = 'payment-list';
    }
    getOverPaymentValue() {
        let feesOverPayment = 0;
        this.paymentGroup.fees.forEach(fee => {
            feesOverPayment += fee.over_payment;
        });
        return feesOverPayment > 0 ? feesOverPayment : this.paymentGroup.payments[0].over_payment;
    }
    goToServiceRequestPage() {
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.TAKEPAYMENT = false;
        this.paymentLibComponent.SERVICEREQUEST = 'true';
        this.paymentLibComponent.isFromServiceRequestPage = true;
        window.location.reload();
    }
    goToCaseTransationPage(event) {
        event.preventDefault();
        if (!this.paymentLibComponent.isFromServiceRequestPage) {
            this.OrderslistService.setnavigationPage('casetransactions');
            this.OrderslistService.setisFromServiceRequestPage(false);
            this.paymentLibComponent.viewName = 'case-transactions';
            this.paymentLibComponent.ISBSENABLE = true;
            this.resetOrderData();
        }
        else {
            this.OrderslistService.getorderRefs().subscribe((data) => this.orderRef = data);
            this.OrderslistService.getorderCCDEvents().subscribe((data) => this.orderCCDEvent = data);
            this.OrderslistService.getorderCreateds().subscribe((data) => this.orderCreated = data);
            this.OrderslistService.getorderDetail().subscribe((data) => this.orderDetail = data);
            this.OrderslistService.getorderPartys().subscribe((data) => this.orderParty = data);
            this.OrderslistService.getorderRemissionTotals().subscribe((data) => this.orderRemissionTotal = data);
            this.OrderslistService.getorderFeesTotals().subscribe((data) => this.orderFeesTotal = data);
            this.OrderslistService.getoorderTotalPaymentss().subscribe((data) => this.orderTotalPayments = data);
            this.viewStatus = 'order-full-view';
        }
    }
    addRemission(fee) {
        if (this.chkIsAddRemissionBtnEnable(fee)) {
            this.feeId = fee;
            this.paymentViewService.getApportionPaymentDetails(this.paymentGroup.payments[0].reference).subscribe(paymentGroup => {
                this.paymentGroup = paymentGroup;
                this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(this.paymentLibComponent.paymentReference));
                this.payment = this.paymentGroup.payments[0];
                this.paymentLibComponent.isFromPaymentDetailPage = true;
                this.viewStatus = 'addremission';
                this.isRefundRemission = true;
                this.cd.detectChanges();
            }, (error) => this.errorMessage = error);
        }
    }
    checkForFees(paymentGroup) {
        if (paymentGroup !== null && paymentGroup !== undefined) {
            if (paymentGroup.fees !== null && paymentGroup.fees !== undefined) {
                return true;
            }
        }
        return false;
    }
    processRefund() {
        this.isConfirmationBtnDisabled = true;
        this.errorMessage = '';
        const obj = this.paymentGroup.fees[0];
        this.fees = [{ id: obj.id,
                code: obj.code,
                version: obj.version,
                apportion_amount: obj.apportion_amount,
                calculated_amount: obj.calculated_amount,
                updated_volume: obj.updated_volume ? obj.updated_volume : obj.volume,
                volume: obj.volume,
                refund_amount: this.getOverPaymentValue() }];
        const requestBody = new PostRefundRetroRemission(this.contactDetailsObj, this.fees, this.paymentGroup.payments[0].reference, 'RR037', this.getOverPaymentValue(), 'op');
        this.paymentViewService.postRefundsReason(requestBody).subscribe(response => {
            if (JSON.parse(response)) {
                this.viewCompStatus = '';
                this.viewStatus = 'refundconfirmationpage';
                this.refundReference = JSON.parse(response).refund_reference;
                this.refundAmount = JSON.parse(response).refund_amount;
            }
        }, (error) => {
            this.errorMessage = error;
            this.isConfirmationBtnDisabled = false;
            this.cd.detectChanges();
        });
    }
    gotoAddressPage(note) {
        if (note) {
            this.notification = { contact_details: note, notification_type: note.notification_type };
        }
        this.errorMessage = '';
        this.viewCompStatus = 'overPaymentAddressCapture';
    }
    addRefundForRemission(payment, remission, fees) {
        //if(!this.chkIsIssueRefundBtnEnable(payment)) {
        this.paymentViewService.getApportionPaymentDetails(payment.reference).subscribe(paymentGroup => {
            this.paymentGroup = paymentGroup;
            this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(payment.reference));
            this.payment = this.paymentGroup.payments[0];
            this.remissions = remission;
            this.remissionFeeAmt = fees.filter(data => data.code === this.remissions['fee_code'])[0].net_amount;
            this.viewStatus = 'addrefundforremission';
            // const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
            // this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
        }, (error) => this.errorMessage = error);
        //}
    }
    goToPaymentViewComponent() {
        this.viewCompStatus = '';
        this.viewStatus = 'paymentview';
    }
    issueRefund(paymentgrp) {
        if (paymentgrp !== null && paymentgrp !== undefined) {
            if (this.chkIsIssueRefundBtnEnable(paymentgrp.payments[0])) {
                if (paymentgrp.payments[0].over_payment > 0) {
                    this.viewCompStatus = 'overpayment';
                }
                else {
                    this.paymentGroup = paymentgrp;
                    this.viewStatus = 'issuerefund';
                    this.isRefundRemission = true;
                    this.paymentLibComponent.isFromPaymentDetailPage = true;
                    this.isFromPaymentDetailPage = true;
                    this.isFromServiceRequestPage = false;
                }
            }
        }
    }
    getRemissionByFeeCode(feeCode, remissions) {
        if (remissions && remissions.length > 0) {
            for (const remission of remissions) {
                if (remission.fee_code === feeCode) {
                    return remission;
                }
            }
        }
        return null;
    }
    chkIsIssueRefundBtnEnable(payment) {
        if (payment !== null && payment !== undefined) {
            return payment.issue_refund && payment.refund_enable;
        }
        else {
            return false;
        }
    }
    chkIsAddRefundBtnEnable(remission) {
        if (remission !== null && remission !== undefined) {
            return remission.add_refund;
        }
        else {
            return false;
        }
    }
    chkIsAddRemissionBtnEnable(fee) {
        if (fee !== null && fee !== undefined) {
            return fee.add_remission && fee.remission_enable;
        }
        else {
            return false;
        }
    }
    selectPymentOption(paymentType) {
        this.paymentType = paymentType;
        this.isContinueBtnDisabled = false;
    }
    continuePayment(paymentgrp) {
        if (this.paymentType === 'op') {
            this.isFullyRefund = false;
            this.viewCompStatus = 'overPaymentAddressCapture';
        }
        else if (this.paymentType === 'fp') {
            this.isFullyRefund = true;
            this.paymentGroup = paymentgrp;
            this.viewStatus = 'issuerefund';
            this.viewCompStatus = "";
            this.isRefundRemission = true;
            this.paymentLibComponent.isFromPaymentDetailPage = true;
            this.isFromPaymentDetailPage = true;
            this.isFromServiceRequestPage = this.paymentLibComponent.isFromServiceRequestPage;
        }
    }
    gotoPaymentSelectPage(event) {
        event.preventDefault();
        this.viewCompStatus = 'overpayment';
    }
    getContactDetails(obj) {
        this.contactDetailsObj = obj;
        this.notificationPreview = false;
        this.getTemplateInstructionType(this.paymentGroup.payments[0]);
        this.viewCompStatus = 'overpaymentcheckandanswer';
    }
    resetOrderData() {
        this.OrderslistService.setOrderRef(null);
        this.OrderslistService.setorderCCDEvent(null);
        this.OrderslistService.setorderCreated(null);
        this.OrderslistService.setorderDetail(null);
        this.OrderslistService.setorderParty(null);
        this.OrderslistService.setorderTotalPayments(null);
        this.OrderslistService.setorderRemissionTotal(null);
        this.OrderslistService.setorderFeesTotal(null);
    }
    goToPaymentFailuePage(payment) {
        this.viewStatus = 'payment-failure';
        this.selectedPaymentsStatus = payment;
    }
    goBackToPaymentView(event) {
        event.preventDefault();
        this.viewStatus = 'paymentview';
    }
    getTemplateInstructionType(payment) {
        if (payment == undefined || payment == null) {
            this.templateInstructionType = 'Template';
        }
        else {
            this.templateInstructionType = this.notificationService.getNotificationInstructionType(payment.channel, payment.method);
        }
    }
    showNotificationPreview() {
        this.notificationPreview = true;
    }
    hideNotificationPreview() {
        this.notificationPreview = false;
    }
    static ɵfac = function PaymentViewComponent_Factory(t) { return new (t || PaymentViewComponent)(i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(NotificationService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PaymentViewComponent, selectors: [["ccpay-payment-view"]], inputs: { isTurnOff: "isTurnOff", isTakePayment: "isTakePayment", caseType: "caseType", orderRef: "orderRef", orderStatus: "orderStatus", orderTotalPayments: "orderTotalPayments", payment: "payment", LOGGEDINUSERROLES: "LOGGEDINUSERROLES", ISPAYMENTSTATUSENABLED: "ISPAYMENTSTATUSENABLED", orderParty: "orderParty", orderCreated: "orderCreated", orderCCDEvent: "orderCCDEvent", orderFeesTotal: "orderFeesTotal", orderRemissionTotal: "orderRemissionTotal", orderDetail: "orderDetail", isServiceRequest: "isServiceRequest" }, decls: 12, vars: 10, consts: [[1, "payment-view-section"], [4, "ngIf"], [1, "over-payment"], [1, "govuk-width-container"], [1, "govuk-breadcrumbs"], [1, "govuk-breadcrumbs__list"], [1, "govuk-breadcrumbs__list-item"], ["href", "javascript:void(0)", 1, "govuk-back-link", 3, "click"], ["id", "main-content", "role", "main", 1, "govuk-main-wrapper", "govuk-!-padding-top-0"], ["class", "payment-view-alignment", 4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], [1, "payment-view-alignment"], ["type", "hidden", "value", "PAYMENTDETAILS", 1, "iFrameDrivenImageValue"], ["myInput", ""], [1, "govuk-grid-row"], [1, "column"], [1, "heading-large", "govuk-!-margin-top-0"], [1, "section"], [1, "bold", "tb-col-w"], [1, "tb-col-w"], ["class", "section", 4, "ngIf"], [1, "tb-col-w", "text-transform"], [3, "isTakePayment", 4, "ngIf"], [1, "remission"], [1, "govuk-button", "govuk-button--secondary", 3, "disabled", "click"], ["class", "tb-col-w", 4, "ngIf"], [3, "isTakePayment"], [1, "heading-medium"], [4, "ngFor", "ngForOf"], ["href", "javascript:void(0)", 3, "click"], ["colspan", "6"], [1, "order-class"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header", "col-24", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "col-27", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "whitespace-inherit", "refundBtn"], ["class", "govuk-table__body", 4, "ngFor", "ngForOf"], [1, "heading-large"], [1, "table"], [1, "bold", "tb-col-w", 3, "ngClass"], [3, "ngClass"], [1, "bold", "tb-col-w", "tr-border", 3, "ngClass"], [1, "govuk-table__body"], [1, "govuk-table__cell", "whitespace-inherit"], [1, "govuk-table__cell", "refundBtn", "whitespace-inherit"], [1, "mar-17"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "fee", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "isFromPaymentDetailPage", "ccdCaseNumber", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "feeamount", "remission", "isFromServiceRequestPage", "paymentGroupRef", "ccdCaseNumber", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES"], [3, "isTurnOff", "isStrategicFixEnable", "payment", "viewCompStatus", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "isFromServiceRequestPage", "isFromPaymentDetailPage", "paymentGroupRef", "ccdCaseNumber", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "orderRef", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "fees", "isFullyRefund", "LOGGEDINUSERROLES"], [3, "viewStatus", "orderRef", "orderStatus", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "LOGGEDINUSERROLES", "takePayment", "ccdCaseNumber", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "isServiceRequest", "goToServiceRquestComponent"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "OVERPAYMENTPAGE"], ["id", "how-contacted-conditional-hint govuk-font19px", 1, "form-hint"], [1, "govuk-form-group"], [1, "govuk-fieldset"], [1, "govuk-fieldset__legend", "govuk-fieldset__legend--l"], ["data-module", "govuk-radios", 1, "govuk-radios"], [1, "govuk-radios__item"], ["id", "over-payment", "name", "over-payment", "type", "radio", "value", "op", 1, "govuk-radios__input", 3, "click"], ["for", "where-do-you-live", 1, "govuk-label", "govuk-radios__label", "govuk-font19px"], ["id", "full-payment", "name", "over-payment", "type", "radio", "value", "fp", 1, "govuk-radios__input", 3, "click"], ["for", "where-do-you-live-2", 1, "govuk-label", "govuk-radios__label", "govuk-font19px"], [1, "govuk-button", "govuk-button--secondary", "over-payment-alignment", "govuk-font19px", 3, "click"], [1, "govuk-button", 3, "disabled", "ngClass", "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "OVERPAYMENTADDRESSCAPTUREPAGE"], [1, "govuk-heading-l"], [1, "govuk-heading-m", "govuk-font19px"], ["id", "how-contacted-conditional-hint", 1, "govuk-hint", "govuk-font19px"], [3, "addressObj", "assignContactDetails", "redirectToIssueRefund"], ["data-module", "govuk-button", 1, "govuk-link", 3, "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "ADDREFUNDFORREMISSION"], [1, "govuk-warning-text"], [1, "govuk-table__cell", "govuk-!-font-weight-bold"], [1, "govuk-table__cell"], ["class", "contactDetails-width", 4, "ngIf"], [1, "govuk-link", "right", 3, "click"], ["href", "Javascript:void(0)", "class", "govuk-link right", 3, "click", 4, "ngIf"], [3, "payment", "contactDetails", "refundReason", "refundAmount", 4, "ngIf"], ["type", "submit", 1, "button", "govuk-button--secondary", "over-payment-alignment", "govuk-font19px", 3, "click"], ["type", "submit", 3, "ngClass", "click"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", "govuk-font19px", 3, "click"], [1, "contactDetails-width"], ["href", "Javascript:void(0)", 1, "govuk-link", "right", 3, "click"], [3, "payment", "contactDetails", "refundReason", "refundAmount"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "RETROREMISSIONREFUNDCONFIRMATIONPAGE"], [1, "govuk-grid-row", "pagesize"], [1, "govuk-panel", "govuk-panel--confirmation"], [1, "govuk-panel__title"], [1, "govuk-panel__body"], [1, "govuk-body", "white"], [1, "govuk-body"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", "pointer", 3, "click"], [1, "payment-failure-alignment"], [1, "bold"]], template: function PaymentViewComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, PaymentViewComponent_ng_container_1_Template, 10, 2, "ng-container", 1);
            i0.ɵɵtemplate(2, PaymentViewComponent_ng_container_2_Template, 2, 21, "ng-container", 1);
            i0.ɵɵtemplate(3, PaymentViewComponent_ng_container_3_Template, 2, 22, "ng-container", 1);
            i0.ɵɵtemplate(4, PaymentViewComponent_ng_container_4_Template, 3, 23, "ng-container", 1);
            i0.ɵɵtemplate(5, PaymentViewComponent_ng_container_5_Template, 2, 14, "ng-container", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(6, "div", 2);
            i0.ɵɵtemplate(7, PaymentViewComponent_ng_container_7_Template, 30, 14, "ng-container", 1);
            i0.ɵɵtemplate(8, PaymentViewComponent_ng_container_8_Template, 14, 5, "ng-container", 1);
            i0.ɵɵtemplate(9, PaymentViewComponent_ng_container_9_Template, 63, 27, "ng-container", 1);
            i0.ɵɵtemplate(10, PaymentViewComponent_ng_container_10_Template, 20, 7, "ng-container", 1);
            i0.ɵɵelementEnd();
            i0.ɵɵtemplate(11, PaymentViewComponent_ng_container_11_Template, 60, 20, "ng-container", 1);
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "paymentview" && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addremission" && ctx.feeId && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addrefundforremission" && ctx.payment && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "issuerefund" && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "order-full-view" && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "overpayment");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "overPaymentAddressCapture");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewCompStatus === "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "refundconfirmationpage" && ctx.viewCompStatus !== "overpayment" && ctx.viewCompStatus !== "overPaymentAddressCapture" && ctx.viewCompStatus !== "overpaymentcheckandanswer");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "payment-failure");
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, ContactDetailsComponent, StatusHistoryComponent, AddRemissionComponent, ServiceRequestComponent, NotificationPreviewComponent, i3.DecimalPipe, i3.CurrencyPipe, i3.DatePipe, CcdHyphensPipe, CapitalizePipe], styles: [".payment-view-section[_ngcontent-%COMP%]   .tb-col-w[_ngcontent-%COMP%]{width:330px}.payment-view-section[_ngcontent-%COMP%]   .tr-border[_ngcontent-%COMP%]{border-bottom:2px solid}.payment-view-section[_ngcontent-%COMP%]   .payment-view-alignment[_ngcontent-%COMP%]{margin-left:30px}.payment-view-section[_ngcontent-%COMP%]   .govuk-button[_ngcontent-%COMP%]{font-size:19px;float:left;margin-top:2em}.payment-view-section[_ngcontent-%COMP%]   .remission[_ngcontent-%COMP%]{margin-bottom:7em}.payment-view-section[_ngcontent-%COMP%]   .govuk-error-summary__title[_ngcontent-%COMP%]{font-size:24px!important}.payment-view-section[_ngcontent-%COMP%]   .govuk-table__cell[_ngcontent-%COMP%], .payment-view-section[_ngcontent-%COMP%]   .govuk-table__header[_ngcontent-%COMP%]{padding:0;line-height:1.3;vertical-align:middle}.payment-view-section[_ngcontent-%COMP%]   .govuk-table__row[_ngcontent-%COMP%]{line-height:1.3}.payment-view-section[_ngcontent-%COMP%]   .govuk-table__cell[_ngcontent-%COMP%]:last-child{text-align:right}.payment-view-section[_ngcontent-%COMP%]   .text-transform[_ngcontent-%COMP%]:first-letter{text-transform:capitalize}.payment-view-section[_ngcontent-%COMP%]   .govuk-link[_ngcontent-%COMP%]{cursor:pointer}.payment-view-section[_ngcontent-%COMP%]   .mar-17[_ngcontent-%COMP%]{font-size:19px!important}.over-payment[_ngcontent-%COMP%]   .pagesize[_ngcontent-%COMP%]{margin:2em;width:97%}.over-payment[_ngcontent-%COMP%]   .contactDetails-width[_ngcontent-%COMP%]{width:70%}.over-payment[_ngcontent-%COMP%]   .margin-top10px[_ngcontent-%COMP%]{margin-top:20px}.over-payment[_ngcontent-%COMP%]   .govuk-font19px[_ngcontent-%COMP%]{font-size:19px!important}.over-payment[_ngcontent-%COMP%]   .margin-top--size[_ngcontent-%COMP%]{margin-top:-30px}.over-payment[_ngcontent-%COMP%]   .over-payment-alignment[_ngcontent-%COMP%]{margin-right:10px}.over-payment[_ngcontent-%COMP%]   .govuk-button[_ngcontent-%COMP%]{font-size:19px;float:left;margin-top:2em}.over-payment[_ngcontent-%COMP%]   td.govuk-table__cell[_ngcontent-%COMP%]{width:50%}.over-payment[_ngcontent-%COMP%]   .govuk-warning-text__text[_ngcontent-%COMP%], .over-payment[_ngcontent-%COMP%]   .govuk-label--s[_ngcontent-%COMP%], .over-payment[_ngcontent-%COMP%]   .hmcts-currency-input__symbol[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.over-payment[_ngcontent-%COMP%]   .inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0;border-color:#a71414}.over-payment[_ngcontent-%COMP%]   .inline-error-message[_ngcontent-%COMP%]{color:#a71414;border-color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.over-payment[_ngcontent-%COMP%]   .govuk-button-group[_ngcontent-%COMP%]{padding-top:2em}.over-payment[_ngcontent-%COMP%]   .heading-medium[_ngcontent-%COMP%]{margin-top:.875em}.over-payment[_ngcontent-%COMP%]   .heading-large[_ngcontent-%COMP%]{margin-top:.25em}.over-payment[_ngcontent-%COMP%]   .govuk-panel--confirmation[_ngcontent-%COMP%]{color:#fff;background:#00703C}.over-payment[_ngcontent-%COMP%]   .govuk-panel__title[_ngcontent-%COMP%]{font-size:5rem}.over-payment[_ngcontent-%COMP%]   .govuk-body-m[_ngcontent-%COMP%], .over-payment[_ngcontent-%COMP%]   .govuk-body[_ngcontent-%COMP%]{font-size:2.1875rem}.over-payment[_ngcontent-%COMP%]   .govuk-link[_ngcontent-%COMP%]{cursor:pointer}.over-payment[_ngcontent-%COMP%]   .govuk-radios__conditional[_ngcontent-%COMP%]{padding-top:12px!important}.over-payment[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%]{float:right;cursor:pointer}.over-payment[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]{float:right}.over-payment[_ngcontent-%COMP%]   .white[_ngcontent-%COMP%]{color:#fff}.whitespace-inherit[_ngcontent-%COMP%]{white-space:inherit!important}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentViewComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-payment-view', template: "<div class=\"payment-view-section\">\n<ng-container *ngIf=\"viewStatus === 'paymentview' && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n<div class=\"govuk-width-container\">\n\n  <div  class=\"govuk-breadcrumbs\">\n    <ol class=\"govuk-breadcrumbs__list\">\n      <li class=\"govuk-breadcrumbs__list-item\">\n        <a href=\"javascript:void(0)\" (click)=\"goToCaseTransationPage($event)\" class=\"govuk-back-link\">Back</a>\n      </li>\n    </ol>\n  </div>\n\n  <main class=\"govuk-main-wrapper govuk-!-padding-top-0\" id=\"main-content\" role=\"main\">\n\n    <div *ngIf=\"errorMessage\">\n      <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n        <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n          Payment details could not be retrieved\n        </h2>\n        <div class=\"govuk-error-summary__body\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"payment-view-alignment\" *ngIf=\"!errorMessage && paymentGroup?.payments[0]\">\n\n      <input #myInput type='hidden' class='iFrameDrivenImageValue' value='PAYMENTDETAILS'>\n      <div class=\"govuk-grid-row\">\n        <div class=\"column\">\n          <h1 class=\"heading-large govuk-!-margin-top-0\">Payment details</h1>\n        </div>\n      </div>\n      <table>\n        <tbody>\n\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Service request reference</td>\n          <td class=\"tb-col-w\">{{ serviceReference  }}</td>\n        </tr>\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Payment reference</td>\n          <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.reference }}</td>\n        </tr>\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Payment amount</td>\n          <td class=\"tb-col-w\">\u00A3{{ paymentGroup?.payments[0]?.amount | number:'.2' }}</td>\n        </tr>\n        <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0]?.over_payment > 0\">\n          <td class=\"bold tb-col-w\">Over payment</td>\n          <td class=\"tb-col-w\">\u00A3{{ getOverPaymentValue() | number:'.2' }}</td>\n        </tr>\n        <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0] && paymentGroup?.payments[0]?.document_control_number && !paymentGroup?.payments[0]?.external_reference\">\n          <td class=\"bold tb-col-w\">Payment asset number(DCN)</td>\n          <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.document_control_number }}</td>\n        </tr>\n        <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0] && paymentGroup?.payments[0]?.document_control_number && !paymentGroup?.payments[0]?.external_reference\">\n          <td class=\"bold tb-col-w\">Banked date</td>\n          <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.banked_date | date:'dd MMM yyyy' }}</td>\n        </tr>\n        <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0] && paymentGroup?.payments[0]?.external_reference\">\n          <td class=\"bold tb-col-w\">GovPay Transaction ID</td>\n          <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.external_reference }}</td>\n        </tr>\n        <tr class=\"section\" >\n            <td class=\"bold tb-col-w\">Payment method</td>\n            <td class=\"tb-col-w text-transform\">{{ paymentGroup?.payments[0]?.method  }}</td>\n        </tr>\n        <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0]?.method === 'payment by account'\" >\n            <td class=\"bold tb-col-w\">Type</td>\n            <td class=\"tb-col-w\" *ngIf=\"paymentGroup?.payments[0]?.method !== 'card'\">Credit</td>\n            <td class=\"tb-col-w\" *ngIf=\"paymentGroup?.payments[0]?.method === 'card'\">Card</td>\n        </tr>\n        <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Channel</td>\n            <td class=\"tb-col-w text-transform\">{{ paymentGroup?.payments[0]?.channel  }}</td>\n        </tr>\n        <!-- <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Method</td>\n            <td *ngIf=\"paymentGroup?.payments[0]?.method !== 'card'\">{{ paymentGroup?.payments[0]?.method }}</td>\n            <td *ngIf=\"paymentGroup?.payments[0]?.method === 'card'\">CARD</td>\n        </tr> -->\n        <!-- <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0]?.channel !== 'telephony'\">\n            <td class=\"bold tb-col-w\">Status</td>\n            <td>{{ paymentGroup?.payments[0]?.status }}</td>\n         </tr> -->\n        <tr class=\"section\" *ngIf=\"paymentGroup?.payments[0]?.payment_allocation[0] !== undefined\">\n            <td class=\"bold tb-col-w\">Allocaton status</td>\n            <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.payment_allocation[0]?.allocation_status }}</td>\n          </tr>\n\n          <tr *ngIf=\"paymentGroup?.payments[0].organisation_name\">\n            <td class=\"bold tb-col-w\">PBA account name</td>\n            <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.organisation_name }}</td>\n          </tr>\n\n          <tr *ngIf=\"paymentGroup?.payments[0].account_number\">\n            <td class=\"bold tb-col-w\">PBA number</td>\n            <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.account_number }}</td>\n          </tr>\n\n          <tr *ngIf=\"paymentGroup?.payments[0].customer_reference\">\n            <td class=\"bold tb-col-w\">Customer internal reference</td>\n            <td class=\"tb-col-w\">{{ paymentGroup?.payments[0]?.customer_reference }}</td>\n          </tr>\n\n        </tbody>\n      </table>\n\n      <div>\n            <!-- Status histories -->\n      <ccpay-payment-statuses *ngIf=\"isStatusAllocated\" [isTakePayment]=\"isTakePayment\"></ccpay-payment-statuses>\n      </div>\n     <div class=\"remission\">\n        <button  [disabled]=\"!chkIsIssueRefundBtnEnable(paymentGroup?.payments[0])\"  (click)=\"issueRefund(paymentGroup)\" class=\"govuk-button govuk-button--secondary\">Issue refund</button>\n     </div>\n<div *ngIf=\"ISPAYMENTSTATUSENABLED\">\n     <div class=\"column\">\n      <h2 class=\"heading-medium\">Disputed payment history</h2>\n    </div>\n    \n    <div>\n      <table>\n          <thead>\n            <tr>\n              <th>Status</th>\n              <th>Amount</th>\n              <th>Date</th>\n              <th>Payment reference</th>\n              <th>Event</th>\n              <th></th>\n            </tr>\n          </thead> \n          <tbody *ngIf=\"!errorMsg && allPaymentsFailure.length > 0\">\n            <tr *ngFor=\"let payment of allPaymentsFailure\">\n              <td>{{ payment.status | capitalize }}</td>\n              <td>\u00A3{{ payment.disputed_amount | number:'.2' }}</td>\n              <td>{{(payment.representment_date ? payment.representment_date : payment.failure_event_date_time) | date:'dd MMM yyyy'}}</td>\n              <td>{{ payment.payment_reference }}</td>\n              <td >{{ payment.failure_type }}</td>\n              <td>\n                \n                <a href=\"javascript:void(0)\" (click)=\"goToPaymentFailuePage(payment)\">Show detail</a>\n\n              </td>\n            </tr>\n          </tbody>\n          <tbody  *ngIf=\"errorMsg || allPaymentsFailure.length === 0\">\n            <tr>\n              <td colspan=\"6\"> No disputed payment history available. </td>\n            </tr>\n        </tbody>\n      </table>\n    </div>\n    <br/>\n    <br/>\n  </div>\n      \n     <div  *ngIf=\"checkForFees(paymentGroup)\">\n      <div  *ngIf=\"paymentGroup.fees.length > 0\">\n        <div class=\"column\">\n          <br/>\n          <br/>\n          <h2 class=\"heading-large\">Fee and remission details</h2>\n\n        </div>\n      </div>\n\n      <div *ngFor=\"let fee of paymentGroup.fees\">\n        <table class=\"table\">\n          <tbody>\n          <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Description</td>\n            <td class=\"tb-col-w\">Application for {{ fee.description }}</td>\n          </tr>\n          <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Fee code</td>\n            <td class=\"tb-col-w\">{{ fee?.code }}</td>\n          </tr>\n          <tr class=\"section\">\n            <td class=\"bold tb-col-w\" [ngClass]=\"{'tr-border': !fee.apportion_amount && !fee.remissions && !isTurnOff }\">Fee amount</td>\n            <td [ngClass]=\"{'tr-border': !fee.apportion_amount && !fee.remissions && !isTurnOff}\">\u00A3{{ fee?.calculated_amount | number:'.2' }}</td>\n          </tr>\n\n          <tr *ngIf=\"fee.apportion_amount\">\n            <td class=\"bold tb-col-w tr-border\" [ngClass]=\"{'tr-border': !fee.remissions}\">Allocated amount</td>\n            <td [ngClass]=\"{'tr-border': !fee.remissions}\">\u00A3{{ fee?.apportion_amount | number:'.2' }}</td>\n          </tr>\n\n          </tbody>\n        </table>\n        <button [disabled]=\"!chkIsAddRemissionBtnEnable(fee)\" (click)=\"addRemission(fee)\" class=\"govuk-button govuk-button--secondary\"> Add remission</button>\n      </div>\n\n                <!-- remissions -->\n                <div class=\"order-class\">\n                  <div class=\"column\">\n    <table class=\"govuk-table\">\n      <thead class=\"govuk-table__head\">\n        <tr class=\"govuk-table__row\">\n           <td class=\"govuk-table__header col-24 whitespace-inherit\" scope=\"col\">Help with fees or remission code</td>\n            <td class=\"govuk-table__header col-27 whitespace-inherit\" scope=\"col\">Reference</td>\n            <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Fee</td>\n            <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Amount</td>\n            <td  class=\"govuk-table__header whitespace-inherit refundBtn\" scope=\"col\"></td>\n          </tr>\n      </thead>\n      <tbody class=\"govuk-table__body\"  *ngFor=\"let remission of paymentGroup.remissions\">\n        <tr class=\"govuk-table__row\">\n           <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.hwf_reference }}</td>\n            <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.remission_reference }}</td>\n            <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.fee_code }}</td>\n            <td class=\"govuk-table__cell whitespace-inherit\">{{ remission?.hwf_amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n            <td class=\"govuk-table__cell refundBtn whitespace-inherit\"  >\n               <button  [disabled]=\"!chkIsAddRefundBtnEnable(remission)\" (click)=\"addRefundForRemission(paymentGroup.payments[0],remission,paymentGroup.fees)\" class=\"govuk-button govuk-button--secondary\"> Add refund</button>\n            </td>\n          </tr>\n      </tbody>\n\n\n    </table>\n                  </div></div>\n\n   <div *ngIf=\"paymentGroup.remissions?.length === 0\">\n      <span class=\"mar-17\" >No help with fees or remissions.</span>\n   </div>\n\n  </div>\n    </div>\n  </main>\n</div>\n\n</ng-container>\n<ng-container *ngIf=\"viewStatus === 'addremission' && feeId && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n<ccpay-add-remission \n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[fee]=\"feeId\"\n[payment] = \"payment\"\n[orderStatus] =\"paymentGroup.payments[0].status\"\n[paidAmount]= \"paymentGroup.payments[0].amount\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[paymentGroupRef]=\"paymentGroup.payment_group_reference\"\n[isFromPaymentDetailPage] = \"true\"\n[ccdCaseNumber]=\"ccdCaseNumber\"\n[orderFeesTotal] = \"orderFeesTotal\"\n[orderTotalPayments] = \"orderTotalPayments\"\n[orderRemissionTotal] = \"orderRemissionTotal\"\n[orderRef] = \"orderRef\"\n[orderCreated] = \"orderCreated\"\n[orderParty] = \"orderParty\"\n[orderCCDEvent] = \"orderCCDEvent\"\n[orderDetail] = \"orderDetail\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"></ccpay-add-remission>\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'addrefundforremission' && payment && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n\n<ccpay-add-remission\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[payment]=\"payment\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[feeamount]=\"remissionFeeAmt\"\n[remission] = \"remissions\"\n[isFromServiceRequestPage]=\"false\"\n[paymentGroupRef]=\"paymentGroup.payment_group_reference\"\n[ccdCaseNumber]=\"ccdCaseNumber\"\n[orderFeesTotal] = \"orderFeesTotal\"\n[orderTotalPayments] = \"orderTotalPayments\"\n[orderRemissionTotal] = \"orderRemissionTotal\"\n[orderRef] = \"orderRef\"\n[orderCreated] = \"orderCreated\"\n[orderParty] = \"orderParty\"\n[orderCCDEvent] = \"orderCCDEvent\"\n[orderDetail] = \"orderDetail\"\n[LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"></ccpay-add-remission>\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'issuerefund' && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n    <ccpay-add-remission \n    [isTurnOff]=\"isTurnOff\"\n    [isStrategicFixEnable]=\"isStrategicFixEnable\"\n    [payment] = 'paymentGroup.payments[0]'\n    [viewCompStatus]= \"viewStatus\"\n    [orderStatus] =\"paymentGroup.payments[0].status\"\n    [paidAmount]= \"paymentGroup.payments[0].amount\"\n    [isRefundRemission]=\"isRefundRemission\"\n    [caseType]=\"caseType\"\n    [isFromServiceRequestPage]=\"isFromServiceRequestPage\"\n    [isFromPaymentDetailPage] = \"isFromPaymentDetailPage\"\n    [paymentGroupRef]=\"paymentGroup.payment_group_reference\"\n    [ccdCaseNumber]=\"ccdCaseNumber\"\n    [orderFeesTotal] = \"orderFeesTotal\"\n    [orderTotalPayments] = \"orderTotalPayments\"\n    [orderRemissionTotal] = \"orderRemissionTotal\"\n    [orderRef] = \"orderRef\"\n    [orderCreated] = \"orderCreated\"\n    [orderParty] = \"orderParty\"\n    [orderCCDEvent] = \"orderCCDEvent\"\n    [orderDetail] = \"orderDetail\"\n    [fees] =\"paymentFees\"\n    [isFullyRefund] = \"isFullyRefund\"\n    [LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\">\n    \n  ></ccpay-add-remission>\n</ng-container>\n<ng-container *ngIf=\"viewStatus === 'order-full-view' && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n  <ccpay-service-request\n  [viewStatus] = \"viewStatus\"\n  [orderRef] = \"orderRef\"\n  [orderStatus] = \"orderStatus\"\n  [orderCreated] = \"orderCreated\"\n  [orderParty] = \"orderParty\"\n  [orderCCDEvent] = \"orderCCDEvent\"\n  [orderDetail] = \"orderDetail\"\n  [LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n  [takePayment] = \"isTakePayment\"\n  [ccdCaseNumber] = \"ccdCaseNumber\"\n  [orderFeesTotal] = \"orderFeesTotal\"\n  [orderTotalPayments] = \"orderTotalPayments\"\n  [orderRemissionTotal] = \"orderRemissionTotal\"\n  [isServiceRequest] = \"isServiceRequest\"\n  (goToServiceRquestComponent) = \"goToServiceRequestPage()\"\n>\n</ccpay-service-request>\n\n</ng-container>\n</div>\n<div class=\"over-payment\">\n<ng-container *ngIf=\"viewCompStatus === 'overpayment'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='OVERPAYMENTPAGE'> \n  <h1 class=\"heading-large\">Issue refund</h1>\n  <h1 class=\"heading-medium\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h1>\n  <span id=\"how-contacted-conditional-hint govuk-font19px\" class=\"form-hint\">\n    Payment reference: {{paymentGroup?.payments[0]?.reference}}\n  </span>\n<div class=\"govuk-form-group\">\n  <fieldset class=\"govuk-fieldset\">\n    <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--l\">\n      <h1 class=\"heading-medium\">Select payment to refund</h1>\n    </legend>\n    <div class=\"govuk-radios\" data-module=\"govuk-radios\">\n      <div class=\"govuk-radios__item\">\n        <input class=\"govuk-radios__input\" id=\"over-payment\" name=\"over-payment\" type=\"radio\" (click)=\"selectPymentOption('op')\" value=\"op\">\n        <label class=\"govuk-label govuk-radios__label govuk-font19px\" for=\"where-do-you-live\">\n          Over payment \u00A3{{getOverPaymentValue() | number:'.2'}}\n        </label>\n      </div>\n      <div class=\"govuk-radios__item\">\n        <input class=\"govuk-radios__input\" id=\"full-payment\" name=\"over-payment\" type=\"radio\" (click)=\"selectPymentOption('fp')\" value=\"fp\">\n        <label class=\"govuk-label govuk-radios__label govuk-font19px\" for=\"where-do-you-live-2\">\n          Full payment \u00A3{{paymentGroup?.payments[0]?.amount | number:'.2'}}\n        </label>\n      </div>\n    </div>\n      <button class=\"govuk-button govuk-button--secondary over-payment-alignment govuk-font19px\"\n      (click)=\"goToPaymentViewComponent()\"> Previous</button>\n      <button \n      (click)=\"continuePayment(paymentGroup)\"\n      [disabled]=\"isContinueBtnDisabled\"\n      [ngClass]='isContinueBtnDisabled ? \"button button--disabled govuk-!-margin-right-1 govuk-font19px\" : \"button govuk-!-margin-right-1 govuk-font19px\"'\n      class=\"govuk-button\"> Continue</button>\n  </fieldset>\n</div>\n</ng-container>\n\n<ng-container *ngIf=\"viewCompStatus === 'overPaymentAddressCapture'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='OVERPAYMENTADDRESSCAPTUREPAGE'>      \n  <h1 class=\"govuk-heading-l\">Issue refund</h1>\n  <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n  <span id=\"how-contacted-conditional-hint\" class=\"govuk-hint govuk-font19px\">\n    Payment reference: {{paymentGroup?.payments[0]?.reference}}\n  </span>\n<ccpay-contact-details \n[addressObj] = notification\n(assignContactDetails)=\"getContactDetails($event)\"\n(redirectToIssueRefund)=\"gotoPaymentSelectPage($event)\" ></ccpay-contact-details>\n<p>\n    <a (click)=\"goToCaseTransationPage($event)\" class=\"govuk-link\" data-module=\"govuk-button\">\n        Cancel\n    </a>\n</p>\n</ng-container>\n\n<ng-container *ngIf=\"viewCompStatus === 'overpaymentcheckandanswer'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='ADDREFUNDFORREMISSION'> \n  <div class=\"govuk-warning-text\">\n   \n      <h1 class=\"heading-large\"> Check your answers</h1>\n  </div>\n  <table class=\"govuk-table\">\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n          <td class=\"govuk-table__cell\"> {{paymentGroup.payments[0].reference}} </td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment amount</td>\n          <td class=\"govuk-table__cell\">{{paymentGroup.payments[0].amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Fee amount</td>\n          <td class=\"govuk-table__cell\">{{paymentGroup?.fees[0]?.net_amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n          <td class=\"govuk-table__cell\">{{getOverPaymentValue() | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund reason</td>\n          <td class=\"govuk-table__cell\">Over payment</td>\n      </tr>\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send to</td>\n        <td class=\"govuk-table__cell\">{{orderParty}}</td>\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send via</td>\n      <td class=\"govuk-table__cell whitespace-inherit\">\n        <div *ngIf=\"contactDetailsObj?.notification_type === 'EMAIL'\" class=\"contactDetails-width\">\n          <strong>Email</strong>\n          <br/>\n          {{contactDetailsObj?.email?.trim()}}\n        </div>\n        <div *ngIf=\"contactDetailsObj?.notification_type === 'LETTER'\" class=\"contactDetails-width\">\n          <strong>Post</strong>\n          <br/>\n          {{contactDetailsObj?.address_line?.trim()}}&nbsp;{{contactDetailsObj?.city?.trim()}}&nbsp;{{contactDetailsObj?.county?.trim()}}&nbsp;{{contactDetailsObj?.country?.trim()}}&nbsp;{{contactDetailsObj?.postal_code?.trim()}}\n        </div>\n        <a (click)=\"gotoAddressPage(contactDetailsObj)\" class=\"govuk-link right\" >Change</a>\n      </td>\n    </tr>\n\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Notification</td>\n      <td class=\"govuk-table__cell\">{{templateInstructionType}}\n          <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n            Preview\n          </a>\n          <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n            Hide Preview\n          </a>\n      </td>\n    </tr>\n  </table>\n\n  <app-notification-preview *ngIf=\"notificationPreview\" \n  [payment]=\"paymentGroup.payments[0]\" \n  [contactDetails]=\"contactDetailsObj\"\n  [refundReason]=\"'RR037'\"\n  [refundAmount]=\"getOverPaymentValue()\"></app-notification-preview>\n\n  <button type=\"submit\" class=\"button govuk-button--secondary over-payment-alignment govuk-font19px\" (click)=\"gotoAddressPage(contactDetailsObj)\">Previous</button>\n  <button type=\"submit\"\n  [ngClass]='isContinueBtnDisabled ? \"button button--disabled govuk-!-margin-right-1 govuk-font19px\" : \"button govuk-!-margin-right-1 govuk-font19px\"'\n  (click)=\"processRefund()\">\n    Submit refund\n  </button>\n  <p>\n      <a href=\"javascript:void(0)\"  (click)=\"goToCaseTransationPage($event)\" class=\"govuk-link govuk-font19px\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n\n</ng-container>\n<ng-container *ngIf=\"viewStatus === 'refundconfirmationpage' && viewCompStatus !== 'overpayment' && viewCompStatus !== 'overPaymentAddressCapture' && viewCompStatus !== 'overpaymentcheckandanswer'\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='RETROREMISSIONREFUNDCONFIRMATIONPAGE'> \n  <div class=\"govuk-grid-row pagesize\">\n    <div >\n      <div class=\"govuk-panel govuk-panel--confirmation\">\n        <h1 class=\"govuk-panel__title\">\n          Refund submitted\n        </h1>\n        \n        <div class=\"govuk-panel__body\">\n          <p class=\"govuk-body white\"><strong>Refund reference: {{refundReference}}</strong></p>\n        </div>\n  \n      </div>\n      <h2 class=\"govuk-heading-l\">What happens next</h2>\n      <p class=\"govuk-body\">\n        A refund request for {{refundAmount  | currency:'GBP':'symbol-narrow':'1.2-2' }} has been created and will be passed to a team leader to approve.\n      </p>\n    <p class=\"govuk-body\">\n    <a href=\"javascript:void(0)\" (click)=\"goToCaseTransationPage($event)\" class=\"govuk-link pointer\" data-module=\"govuk-button\">\n      Return to case\n  </a>\n    </p>\n    </div>\n  </div>\n\n</ng-container>\n</div>\n\n<ng-container *ngIf=\"viewStatus === 'payment-failure'\">\n  <div class=\"payment-failure-alignment\">\n    <div  class=\"govuk-breadcrumbs\">\n      <ol class=\"govuk-breadcrumbs__list\">\n        <li class=\"govuk-breadcrumbs__list-item\">\n          <a href=\"javascript:void(0)\" (click)=\"goBackToPaymentView($event)\" class=\"govuk-back-link\">Back</a>\n        </li>\n      </ol>\n    </div>\n    <div class=\"govuk-grid-row\">\n      <div class=\"column\">\n        <h1 class=\"heading-large govuk-!-margin-top-0\">Failure event details</h1>\n      </div>\n    </div>\n    <table>\n      <tbody>\n\n      <tr class=\"section\">\n        <td class=\"bold\">Failure reference</td>\n        <td>\t{{selectedPaymentsStatus.failure_reference}}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold\">Failure reason</td>\n        <td>\t{{selectedPaymentsStatus.failure_reason}}</td>\n      </tr>\n      <tr class=\"section\">\n          <td class=\"bold\">Payment reference</td>\n          <td>{{ selectedPaymentsStatus.payment_reference }}</td>\n      </tr>\n      <tr class=\"section\">\n          <td class=\"bold\">Payment amount</td>\n          <td> \u00A3{{ paymentGroup?.payments[0]?.amount | number:'.2' }}</td>\n\n      </tr>\n      <tr class=\"section\">\n          <td class=\"bold\">Disputed amount</td>\n          <td>\t\u00A3{{selectedPaymentsStatus.disputed_amount  | number:'.2'}}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold\">Additional information</td>\n        <td>\t{{selectedPaymentsStatus.additional_reference }}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold\">Failure type</td>\n        <td>\t{{ selectedPaymentsStatus.failure_type }}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold\">Failure event date and time</td>\n        <td> {{ selectedPaymentsStatus.failure_event_date_time | date:'dd MMM yyyy HH:mm:ss' }}</td>\n      </tr>\n      <tr class=\"section\" *ngIf=\"selectedPaymentsStatus.has_amount_debited\">\n        <td class=\"bold\">Has disputed amount debited</td>\n        <td>\t{{selectedPaymentsStatus.has_amount_debited}}</td>\n      </tr>\n      <tr class=\"section\" *ngIf=\"selectedPaymentsStatus.representment_status\">\n        <td class=\"bold\">Status following representation of payment</td>\n        <td>\t{{(selectedPaymentsStatus.representment_status === 'Yes' || selectedPaymentsStatus.representment_status === 'yes') ? 'Success' : 'Failure'}}</td>\n      </tr>\n      <tr class=\"section\" *ngIf=\"selectedPaymentsStatus.representment_date\">\n        <td class=\"bold\">Date payment represented</td>\n        <td>\t{{selectedPaymentsStatus.representment_date  | date:'dd MMM yyyy HH:mm:ss'}}</td>\n      </tr>\n      </tbody>\n    </table>\n\n    <div>\n    </div>\n  </div>\n</ng-container>\n", styles: [".payment-view-section .tb-col-w{width:330px}.payment-view-section .tr-border{border-bottom:2px solid}.payment-view-section .payment-view-alignment{margin-left:30px}.payment-view-section .govuk-button{font-size:19px;float:left;margin-top:2em}.payment-view-section .remission{margin-bottom:7em}.payment-view-section .govuk-error-summary__title{font-size:24px!important}.payment-view-section .govuk-table__cell,.payment-view-section .govuk-table__header{padding:0;line-height:1.3;vertical-align:middle}.payment-view-section .govuk-table__row{line-height:1.3}.payment-view-section .govuk-table__cell:last-child{text-align:right}.payment-view-section .text-transform:first-letter{text-transform:capitalize}.payment-view-section .govuk-link{cursor:pointer}.payment-view-section .mar-17{font-size:19px!important}.over-payment .pagesize{margin:2em;width:97%}.over-payment .contactDetails-width{width:70%}.over-payment .margin-top10px{margin-top:20px}.over-payment .govuk-font19px{font-size:19px!important}.over-payment .margin-top--size{margin-top:-30px}.over-payment .over-payment-alignment{margin-right:10px}.over-payment .govuk-button{font-size:19px;float:left;margin-top:2em}.over-payment td.govuk-table__cell{width:50%}.over-payment .govuk-warning-text__text,.over-payment .govuk-label--s,.over-payment .hmcts-currency-input__symbol{font-size:19px;font-weight:400}.over-payment .inline-error-class{outline:3px solid #a71414;outline-offset:0;border-color:#a71414}.over-payment .inline-error-message{color:#a71414;border-color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.over-payment .govuk-button-group{padding-top:2em}.over-payment .heading-medium{margin-top:.875em}.over-payment .heading-large{margin-top:.25em}.over-payment .govuk-panel--confirmation{color:#fff;background:#00703C}.over-payment .govuk-panel__title{font-size:5rem}.over-payment .govuk-body-m,.over-payment .govuk-body{font-size:2.1875rem}.over-payment .govuk-link{cursor:pointer}.over-payment .govuk-radios__conditional{padding-top:12px!important}.over-payment .right{float:right;cursor:pointer}.over-payment .radio{float:right}.over-payment .white{color:#fff}.whitespace-inherit{white-space:inherit!important}\n"] }]
    }], function () { return [{ type: PaymentViewService }, { type: NotificationService }, { type: PaymentLibComponent }, { type: i0.ChangeDetectorRef }, { type: OrderslistService }]; }, { isTurnOff: [{
            type: Input
        }], isTakePayment: [{
            type: Input
        }], caseType: [{
            type: Input
        }], orderRef: [{
            type: Input
        }], orderStatus: [{
            type: Input
        }], orderTotalPayments: [{
            type: Input
        }], payment: [{
            type: Input
        }], LOGGEDINUSERROLES: [{
            type: Input
        }], ISPAYMENTSTATUSENABLED: [{
            type: Input
        }], orderParty: [{
            type: Input
        }], orderCreated: [{
            type: Input
        }], orderCCDEvent: [{
            type: Input
        }], orderFeesTotal: [{
            type: Input
        }], orderRemissionTotal: [{
            type: Input
        }], orderDetail: [{
            type: Input
        }], isServiceRequest: [{
            type: Input,
            args: ["isServiceRequest"]
        }] }); })();

function ProcessRefundComponent_ng_container_0_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 41)(2, "h2", 42);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 43);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.errorMessage.title, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.errorMessage.body, " ");
} }
function ProcessRefundComponent_ng_container_0_div_37_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 44)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r2.refundlistsource == null ? null : ctx_r2.refundlistsource.contact_details == null ? null : ctx_r2.refundlistsource.contact_details.email == null ? null : ctx_r2.refundlistsource.contact_details.email.trim(), " ");
} }
function ProcessRefundComponent_ng_container_0_div_38_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 44)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r3.refundlistsource == null ? null : ctx_r3.refundlistsource.contact_details == null ? null : ctx_r3.refundlistsource.contact_details.address_line == null ? null : ctx_r3.refundlistsource.contact_details.address_line.trim(), " ", ctx_r3.refundlistsource == null ? null : ctx_r3.refundlistsource.contact_details == null ? null : ctx_r3.refundlistsource.contact_details.city == null ? null : ctx_r3.refundlistsource.contact_details.city.trim(), " ", ctx_r3.refundlistsource == null ? null : ctx_r3.refundlistsource.contact_details == null ? null : ctx_r3.refundlistsource.contact_details.county == null ? null : ctx_r3.refundlistsource.contact_details.county.trim(), " ", ctx_r3.refundlistsource == null ? null : ctx_r3.refundlistsource.contact_details == null ? null : ctx_r3.refundlistsource.contact_details.country == null ? null : ctx_r3.refundlistsource.contact_details.country.trim(), " ", ctx_r3.refundlistsource == null ? null : ctx_r3.refundlistsource.contact_details == null ? null : ctx_r3.refundlistsource.contact_details.postal_code == null ? null : ctx_r3.refundlistsource.contact_details.postal_code.trim(), " ");
} }
function ProcessRefundComponent_ng_container_0_a_56_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 45);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_a_56_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_a_57_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 45);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_a_57_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r16.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_app_notification_preview_58_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "app-notification-preview", 46);
    i0.ɵɵlistener("notificationPreviewEvent", function ProcessRefundComponent_ng_container_0_app_notification_preview_58_Template_app_notification_preview_notificationPreviewEvent_0_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r18.getNotificationPreviewObj($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("paymentReference", ctx_r6.refundlistsource == null ? null : ctx_r6.refundlistsource.payment_reference)("payment", ctx_r6.paymentObj)("contactDetails", ctx_r6.refundlistsource == null ? null : ctx_r6.refundlistsource.contact_details)("refundReason", ctx_r6.refundlistsource == null ? null : ctx_r6.refundlistsource.reason_code)("refundAmount", ctx_r6.refundlistsource == null ? null : ctx_r6.refundlistsource.amount)("refundReference", ctx_r6.refundlistsource == null ? null : ctx_r6.refundlistsource.refund_reference);
} }
function ProcessRefundComponent_ng_container_0_p_68_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Please select an action");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_68_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 47);
    i0.ɵɵtemplate(1, ProcessRefundComponent_ng_container_0_p_68_span_1_Template, 2, 0, "span", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.refundActionsHasError);
} }
function ProcessRefundComponent_ng_container_0_div_69_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 48)(1, "input", 49);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_div_69_Template_input_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r24); const refundAction_r21 = restoredCtx.$implicit; const ctx_r23 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r23.checkRefundActions(refundAction_r21.code)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 50);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 51);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const refundAction_r21 = ctx.$implicit;
    const i_r22 = ctx.index;
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "refundAction-", i_r22, "");
    i0.ɵɵpropertyInterpolate("value", refundAction_r21.code);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("for", "refundAction-", i_r22, "");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", refundAction_r21.code, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", refundAction_r21.label, " ");
} }
function ProcessRefundComponent_ng_container_0_p_74_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Add a reason");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_74_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Add a valid reason");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_74_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Reason should be at least 3 characters.");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_74_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Reason should be 255 characters or under.");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_74_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 47);
    i0.ɵɵtemplate(1, ProcessRefundComponent_ng_container_0_p_74_span_1_Template, 2, 0, "span", 0);
    i0.ɵɵtemplate(2, ProcessRefundComponent_ng_container_0_p_74_span_2_Template, 2, 0, "span", 0);
    i0.ɵɵtemplate(3, ProcessRefundComponent_ng_container_0_p_74_span_3_Template, 2, 0, "span", 0);
    i0.ɵɵtemplate(4, ProcessRefundComponent_ng_container_0_p_74_span_4_Template, 2, 0, "span", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.isReasonFieldEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.isReasonFieldInvalid);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.reasonFieldMinHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.reasonFieldMaxHasError);
} }
function ProcessRefundComponent_ng_container_0_p_82_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Please select a reject reason");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_82_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 47);
    i0.ɵɵtemplate(1, ProcessRefundComponent_ng_container_0_p_82_span_1_Template, 2, 0, "span", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r10.refundRejectReasonHasError);
} }
function ProcessRefundComponent_ng_container_0_div_83_Template(rf, ctx) { if (rf & 1) {
    const _r33 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 48)(1, "input", 52);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_div_83_Template_input_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r33); const refundRejectReason_r30 = restoredCtx.$implicit; const ctx_r32 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r32.checkRefundActions(refundRejectReason_r30.code)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 50);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const refundRejectReason_r30 = ctx.$implicit;
    const j_r31 = ctx.index;
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("id", "refundRejectReason-", j_r31, "");
    i0.ɵɵpropertyInterpolate("value", refundRejectReason_r30.code);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("for", "refundRejectReason-", j_r31, "");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", refundRejectReason_r30.name, " ");
} }
function ProcessRefundComponent_ng_container_0_p_88_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter reason.");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_88_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid reason");
    i0.ɵɵelementEnd();
} }
function ProcessRefundComponent_ng_container_0_p_88_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 47);
    i0.ɵɵtemplate(1, ProcessRefundComponent_ng_container_0_p_88_span_1_Template, 2, 0, "span", 0);
    i0.ɵɵtemplate(2, ProcessRefundComponent_ng_container_0_p_88_span_2_Template, 2, 0, "span", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r12.isReasonEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r12.isReasonInvalid);
} }
function ProcessRefundComponent_ng_container_0_div_97_Template(rf, ctx) { if (rf & 1) {
    const _r37 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 53)(1, "p")(2, "a", 54);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_div_97_Template_a_click_2_listener() { i0.ɵɵrestoreView(_r37); const ctx_r36 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r36.loadRefundsHomePage()); });
    i0.ɵɵtext(3, "Cancel");
    i0.ɵɵelementEnd()()();
} }
const _c0$5 = function (a0) { return { "govuk-radios__conditional--hidden": a0 }; };
const _c1$1 = function (a0) { return { "form-group-error": a0 }; };
const _c2 = function (a0) { return { "inline-error-class": a0 }; };
function ProcessRefundComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 1)(2, "main", 2);
    i0.ɵɵtemplate(3, ProcessRefundComponent_ng_container_0_div_3_Template, 6, 2, "div", 0);
    i0.ɵɵelementStart(4, "div", 3)(5, "div", 4)(6, "div", 5)(7, "h1", 6);
    i0.ɵɵtext(8, "Review refund details");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(9, "table")(10, "tbody")(11, "tr", 7)(12, "td", 8);
    i0.ɵɵtext(13, "Payment to be refunded");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td", 9);
    i0.ɵɵtext(15);
    i0.ɵɵpipe(16, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(17, "tr", 7)(18, "td", 8);
    i0.ɵɵtext(19, "Reason for refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(20, "td", 9);
    i0.ɵɵtext(21);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(22, "tr", 7)(23, "td", 8);
    i0.ɵɵtext(24, "Amount to be refunded");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(25, "td", 9);
    i0.ɵɵtext(26);
    i0.ɵɵpipe(27, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(28, "tr", 7)(29, "td", 8);
    i0.ɵɵtext(30, "Sent to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(31, "td", 9);
    i0.ɵɵtext(32);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(33, "tr", 7)(34, "td", 8);
    i0.ɵɵtext(35, "Sent via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(36, "td", 9);
    i0.ɵɵtemplate(37, ProcessRefundComponent_ng_container_0_div_37_Template, 5, 1, "div", 10);
    i0.ɵɵtemplate(38, ProcessRefundComponent_ng_container_0_div_38_Template, 5, 5, "div", 10);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(39, "tr", 7)(40, "td", 8);
    i0.ɵɵtext(41, "Submitted by");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(42, "td", 9);
    i0.ɵɵtext(43);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(44, "tr", 7)(45, "td", 8);
    i0.ɵɵtext(46, "Date submitted");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(47, "td", 9);
    i0.ɵɵtext(48);
    i0.ɵɵpipe(49, "date");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(50, "tr", 7)(51, "td", 8);
    i0.ɵɵtext(52, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(53, "td");
    i0.ɵɵtext(54);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(55, "td");
    i0.ɵɵtemplate(56, ProcessRefundComponent_ng_container_0_a_56_Template, 2, 0, "a", 11);
    i0.ɵɵtemplate(57, ProcessRefundComponent_ng_container_0_a_57_Template, 2, 0, "a", 11);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵtemplate(58, ProcessRefundComponent_ng_container_0_app_notification_preview_58_Template, 1, 6, "app-notification-preview", 12);
    i0.ɵɵelement(59, "div");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(60, "div", 13)(61, "form", 14)(62, "div", 15)(63, "fieldset", 16)(64, "legend", 17)(65, "h1", 18);
    i0.ɵɵtext(66, " What do you want to do with this refund? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(67, "div", 19);
    i0.ɵɵtemplate(68, ProcessRefundComponent_ng_container_0_p_68_Template, 2, 1, "p", 20);
    i0.ɵɵtemplate(69, ProcessRefundComponent_ng_container_0_div_69_Template, 6, 5, "div", 21);
    i0.ɵɵelementStart(70, "div", 22)(71, "div", 23)(72, "label", 24);
    i0.ɵɵtext(73, " Add a reason ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(74, ProcessRefundComponent_ng_container_0_p_74_Template, 5, 4, "p", 20);
    i0.ɵɵelement(75, "textarea", 25);
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementStart(76, "div", 26)(77, "fieldset", 27)(78, "legend", 17)(79, "h2", 28);
    i0.ɵɵtext(80, " Why are you rejecting this refund? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(81, "div", 19);
    i0.ɵɵtemplate(82, ProcessRefundComponent_ng_container_0_p_82_Template, 2, 1, "p", 20);
    i0.ɵɵtemplate(83, ProcessRefundComponent_ng_container_0_div_83_Template, 4, 4, "div", 21);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(84, "div", 29)(85, "div", 23)(86, "label", 24);
    i0.ɵɵtext(87, " Enter reason ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(88, ProcessRefundComponent_ng_container_0_p_88_Template, 3, 2, "p", 20);
    i0.ɵɵelement(89, "input", 30);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(90, "div", 31)(91, "button", 32);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_Template_button_click_91_listener() { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r38.redirecttoRefundListPage()); });
    i0.ɵɵtext(92, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(93, "button", 33);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_Template_button_click_93_listener() { i0.ɵɵrestoreView(_r39); const ctx_r40 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r40.processRefundSubmit()); });
    i0.ɵɵtext(94, " Submit ");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(95, "br")(96, "br");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(97, ProcessRefundComponent_ng_container_0_div_97_Template, 4, 0, "div", 34);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(98, "main", 35)(99, "div", 36)(100, "div", 37)(101, "h1", 38);
    i0.ɵɵtext(102);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(103, "p", 39)(104, "a", 40);
    i0.ɵɵlistener("click", function ProcessRefundComponent_ng_container_0_Template_a_click_104_listener() { i0.ɵɵrestoreView(_r39); const ctx_r41 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r41.goToCaseReview()); });
    i0.ɵɵtext(105, "Return to case");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(45, _c0$5, ctx_r0.isSuccesspageEnable));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.errorMessage.showError);
    i0.ɵɵadvance(12);
    i0.ɵɵtextInterpolate2("", ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.refund_reference, " (", i0.ɵɵpipeBind4(16, 32, ctx_r0.refundlistsource.amount, "GBP", "symbol", "1.2-2"), ")");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.reason == null ? null : ctx_r0.refundlistsource.reason.trim());
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(27, 37, ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.amount, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r0.cpoDetails == null ? null : ctx_r0.cpoDetails.responsibleParty);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.contact_details == null ? null : ctx_r0.refundlistsource.contact_details.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.contact_details == null ? null : ctx_r0.refundlistsource.contact_details.notification_type) === "LETTER");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.user_full_name);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(49, 42, ctx_r0.refundlistsource == null ? null : ctx_r0.refundlistsource.date_created, "d MMMM yyyy"));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(ctx_r0.templateInstructionType);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.notificationPreview);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("formGroup", ctx_r0.processRefundForm);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(47, _c1$1, ctx_r0.refundActionsHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.refundActionsHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.refundActionList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(49, _c0$5, !ctx_r0.isSendMeBackClicked));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r0.isReasonFieldEmpty || ctx_r0.isReasonFieldInvalid || ctx_r0.reasonFieldMinHasError || ctx_r0.reasonFieldMaxHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(51, _c2, ctx_r0.isReasonFieldEmpty || ctx_r0.isReasonFieldInvalid || ctx_r0.reasonFieldMinHasError || ctx_r0.reasonFieldMaxHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(53, _c0$5, !ctx_r0.isRejectClicked));
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(55, _c1$1, ctx_r0.refundRejectReasonHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.refundRejectReasonHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.refundRejectReasonList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(57, _c0$5, !ctx_r0.isOtherClicked));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r0.isReasonEmpty || ctx_r0.isReasonInvalid);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(59, _c2, ctx_r0.isReasonEmpty || ctx_r0.isReasonInvalid));
    i0.ɵɵadvance(8);
    i0.ɵɵproperty("ngIf", !ctx_r0.isFromRefundListPage);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(61, _c0$5, !ctx_r0.isSuccesspageEnable));
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.successMsg, " ");
} }
class ProcessRefundComponent {
    RefundsService;
    paymentViewService;
    formBuilder;
    OrderslistService;
    notificationService;
    paymentLibComponent;
    router;
    activeRoute;
    refundReference;
    refundlistsource;
    processRefundForm;
    errorMessage = this.getErrorMessage(false, '', '', '');
    sendmeback = null;
    viewStatus;
    refundActionList = [];
    refundRejectReasonList = [];
    isSendMeBackClicked = false;
    isRejectClicked = false;
    isOtherClicked = false;
    isSuccesspageEnable = false;
    refundActionsHasError = false;
    refundRejectReasonHasError = false;
    isReasonFieldEmpty = false;
    isReasonFieldInvalid = false;
    reasonFieldMinHasError = false;
    reasonFieldMaxHasError = false;
    isReasonEmpty = false;
    isReasonInvalid = false;
    successMsg = null;
    navigationpage;
    ccdCaseNumber;
    isFromRefundListPage;
    cpoDetails = null;
    isCPODown;
    isConfirmButtondisabled = true;
    paymentObj;
    templateInstructionType;
    notificationPreview = false;
    notificationPreviewObj;
    constructor(RefundsService, paymentViewService, formBuilder, OrderslistService, notificationService, paymentLibComponent, router, activeRoute) {
        this.RefundsService = RefundsService;
        this.paymentViewService = paymentViewService;
        this.formBuilder = formBuilder;
        this.OrderslistService = OrderslistService;
        this.notificationService = notificationService;
        this.paymentLibComponent = paymentLibComponent;
        this.router = router;
        this.activeRoute = activeRoute;
    }
    ngOnInit() {
        this.viewStatus = 'RefundProcess';
        this.RefundsService.getRefundActions(this.refundReference).subscribe(refundActionList => {
            this.refundActionList = refundActionList;
        }, err => {
            this.errorMessage = this.getErrorMessage(true, err.statusCode, err.err, err);
        });
        this.processRefundForm = this.formBuilder.group({
            refundActionField: new FormControl('', Validators.compose([
                Validators.required
            ])),
            refundRejectReasonField: new FormControl('', Validators.compose([
                Validators.required
            ])),
            sendMeBackField: new FormControl('', Validators.compose([
                Validators.required,
                Validators.minLength(3),
                Validators.maxLength(255),
                Validators.pattern('^([a-zA-Z0-9\\s,\\.]*)$'),
            ])),
            enterReasonField: new FormControl('', Validators.compose([
                Validators.required,
                Validators.maxLength(30),
                Validators.pattern('^([a-zA-Z0-9.\\s]*)$'),
            ])),
        });
        this.ccdCaseNumber = this.refundlistsource.ccd_case_number;
        if ((typeof this.paymentLibComponent.TAKEPAYMENT === 'string' && this.paymentLibComponent.TAKEPAYMENT === 'false') || (typeof this.paymentLibComponent.TAKEPAYMENT === 'boolean' && !this.paymentLibComponent.TAKEPAYMENT)) {
            this.isFromRefundListPage = true;
        }
        this.paymentViewService.getPartyDetails(this.ccdCaseNumber).subscribe(response => {
            this.cpoDetails = JSON.parse(response).content[0];
        }, (error) => {
            this.errorMessage = error.replace(/"/g, "");
            this.isCPODown = true;
        });
        this.getTemplateInstructionType(this.paymentObj, this.refundlistsource.payment_reference);
    }
    checkRefundActions(code) {
        this.refundActionsHasError = false;
        this.isReasonFieldEmpty = false;
        this.isReasonEmpty = false;
        this.isReasonInvalid = false;
        this.refundRejectReasonHasError = false;
        if (code === 'Return to caseworker') {
            this.isConfirmButtondisabled = true;
            this.isSendMeBackClicked = true;
            this.isRejectClicked = false;
            this.isOtherClicked = false;
        }
        else if (code === 'Approve') {
            this.isSendMeBackClicked = false;
            this.isConfirmButtondisabled = false;
            this.isRejectClicked = false;
            this.isOtherClicked = false;
        }
        else if (code === 'Reject') {
            this.isRejectClicked = true;
            this.isSendMeBackClicked = false;
            this.isOtherClicked = false;
            this.RefundsService.getRefundRejectReasons().subscribe(refundRejectReasonList => {
                this.refundRejectReasonList = refundRejectReasonList;
            }, err => {
                this.errorMessage = this.getErrorMessage(true, err.statusCode, err.err, err);
            });
        }
        else if (code === 'RE005') {
            this.isOtherClicked = true;
        }
        else if (code !== 'RE005') {
            this.isOtherClicked = false;
        }
    }
    getNotificationPreviewObj(notificationPreviewObj) {
        this.notificationPreviewObj = notificationPreviewObj;
    }
    processRefundSubmit() {
        let processRefundRequest;
        let status;
        this.resetForm([false, false, false, false, false, false, false, false], 'all');
        const controls = this.processRefundForm.controls;
        const processFormError = controls.sendMeBackField.errors;
        if (this.processRefundForm.dirty && controls.refundActionField.valid
            && (controls.refundActionField.value == 'Approve'
                || (controls.refundActionField.value == 'Reject' && controls.refundRejectReasonField.valid && controls.refundRejectReasonField.value != 'RE005')
                || (controls.refundActionField.value == 'Reject' && controls.refundRejectReasonField.value == 'RE005' && controls.enterReasonField.valid)
                || (controls.refundActionField.value == 'Return to caseworker' && controls.sendMeBackField.valid))) {
            if (controls.refundActionField.value === 'Approve') {
                status = 'APPROVE';
                if (this.notificationPreviewObj) {
                    processRefundRequest = {
                        code: '',
                        reason: '',
                        template_preview: {
                            body: this.notificationPreviewObj.body,
                            from: {
                                from_email_address: this.notificationPreviewObj.from.from_email_address,
                                from_mail_address: {
                                    address_line: this.notificationPreviewObj.from.from_mail_address.address_line,
                                    city: this.notificationPreviewObj.from.from_mail_address.city,
                                    country: this.notificationPreviewObj.from.from_mail_address.country,
                                    county: this.notificationPreviewObj.from.from_mail_address.county,
                                    postal_code: this.notificationPreviewObj.from.from_mail_address.postal_code
                                }
                            },
                            html: this.notificationPreviewObj.html,
                            id: this.notificationPreviewObj.template_id,
                            subject: this.notificationPreviewObj.subject,
                            template_type: this.notificationPreviewObj.template_type,
                            version: 0
                        }
                    };
                }
                else {
                    processRefundRequest = {
                        code: '',
                        reason: ''
                    };
                }
            }
            else if (controls.refundActionField.value === 'Reject') {
                status = 'REJECT';
                if (this.notificationPreviewObj) {
                    processRefundRequest = {
                        code: controls.refundRejectReasonField.value ? controls.refundRejectReasonField.value : '',
                        reason: controls.refundRejectReasonField.value == 'RE005' ? controls.enterReasonField.value : '',
                        template_preview: {
                            body: this.notificationPreviewObj.body,
                            from: {
                                from_email_address: this.notificationPreviewObj.from.from_email_address,
                                from_mail_address: {
                                    address_line: this.notificationPreviewObj.from.from_mail_address.address_line,
                                    city: this.notificationPreviewObj.from.from_mail_address.city,
                                    country: this.notificationPreviewObj.from.from_mail_address.country,
                                    county: this.notificationPreviewObj.from.from_mail_address.county,
                                    postal_code: this.notificationPreviewObj.from.from_mail_address.postal_code
                                }
                            },
                            html: this.notificationPreviewObj.html,
                            id: this.notificationPreviewObj.template_id,
                            subject: this.notificationPreviewObj.subject,
                            template_type: this.notificationPreviewObj.template_type,
                            version: 0
                        }
                    };
                }
                else {
                    processRefundRequest = {
                        code: controls.refundRejectReasonField.value ? controls.refundRejectReasonField.value : '',
                        reason: controls.refundRejectReasonField.value == 'RE005' ? controls.enterReasonField.value : ''
                    };
                }
            }
            else if (controls.refundActionField.value === 'Return to caseworker') {
                status = 'SENDBACK';
                if (this.notificationPreviewObj) {
                    processRefundRequest = {
                        code: '',
                        reason: controls.sendMeBackField.value,
                        template_preview: {
                            body: this.notificationPreviewObj.body,
                            from: {
                                from_email_address: this.notificationPreviewObj.from.from_email_address,
                                from_mail_address: {
                                    address_line: this.notificationPreviewObj.from.from_mail_address.address_line,
                                    city: this.notificationPreviewObj.from.from_mail_address.city,
                                    country: this.notificationPreviewObj.from.from_mail_address.country,
                                    county: this.notificationPreviewObj.from.from_mail_address.county,
                                    postal_code: this.notificationPreviewObj.from.from_mail_address.postal_code
                                }
                            },
                            html: this.notificationPreviewObj.html,
                            id: this.notificationPreviewObj.template_id,
                            subject: this.notificationPreviewObj.subject,
                            template_type: this.notificationPreviewObj.template_type,
                            version: 0
                        }
                    };
                }
                else {
                    processRefundRequest = {
                        code: '',
                        reason: controls.sendMeBackField.value
                    };
                }
            }
            this.RefundsService.patchRefundActions(processRefundRequest, this.refundReference, status).subscribe(response => {
                this.isSuccesspageEnable = true;
                // this.successMsg = JSON.parse(response)['data'];
                this.successMsg = response.replace(/['"]+/g, '');
            }, err => {
                this.errorMessage = this.getErrorMessage(true, err.statusCode, err.err, err);
            });
        }
        else {
            if (controls.refundActionField.value == "") {
                this.resetForm([true, false, false, false, false, false, false, false], 'action');
            }
            if (controls.refundActionField.value == 'Reject' && controls.refundRejectReasonField.value == "") {
                this.resetForm([false, true, false, false, false, false, false, false], 'rejectReason');
            }
            if (controls.refundActionField.value == 'Return to caseworker') {
                if (controls.sendMeBackField.value == '') {
                    this.resetForm([false, false, true, false, false, false, false, false], 'addAreason');
                }
                if (controls.sendMeBackField.value != '' && controls.sendMeBackField.invalid) {
                    this.resetForm([false, false, false, true, false, false, false, false], 'addAreason');
                }
                if (processFormError && processFormError.minlength && processFormError.minlength.actualLength < 3) {
                    this.resetForm([false, false, false, false, true, false, false, false], 'addAreason');
                }
                if (processFormError && processFormError.maxlength && processFormError.maxlength.actualLength > 255) {
                    this.resetForm([false, false, false, false, false, true, false, false], 'addAreason');
                }
            }
            if (controls.refundActionField.value == 'Reject' && controls.refundRejectReasonField.value == 'RE005') {
                if (controls.enterReasonField.value === "") {
                    this.resetForm([false, false, false, false, false, false, true, false], 'enterReason');
                }
                if (controls.enterReasonField.value !== "" && controls.enterReasonField.invalid) {
                    this.resetForm([false, false, false, false, false, false, false, true], 'enterReason');
                }
            }
        }
    }
    getErrorMessage(isErrorExist, status, errorMsg, err) {
        let bodyTxt = 'Please try again later';
        if (status !== 500) {
            if (errorMsg !== undefined) {
                bodyTxt = errorMsg;
            }
            else {
                bodyTxt = err;
            }
        }
        return {
            title: 'Something went wrong',
            body: bodyTxt,
            showError: isErrorExist
        };
    }
    loadRefundListPage() {
        this.OrderslistService.getnavigationPageValue().subscribe((data) => this.navigationpage = data);
        if (this.navigationpage === 'casetransactions') {
            // window.location.href='/refund-list?takePayment=false&refundlist=true';
            // // this.OrderslistService.setnavigationPage('casetransactions');
            // // this.OrderslistService.setisFromServiceRequestPage(false);
            // // this.paymentLibComponent.VIEW ='case-transactions';
            // // this.paymentLibComponent.viewName = 'case-transactions';
            // // this.paymentLibComponent.ISBSENABLE = true;
            // // this.paymentLibComponent.isRefundStatusView = false;
            this.paymentLibComponent.viewName = 'refundstatuslist';
            this.paymentLibComponent.isRefundStatusView = true;
        }
        else {
            this.paymentLibComponent.viewName = 'refundstatuslist';
            this.paymentLibComponent.isRefundStatusView = true;
        }
    }
    loadRefundsHomePage() {
        if (typeof this.paymentLibComponent.TAKEPAYMENT === 'string' && this.paymentLibComponent.TAKEPAYMENT === 'false') {
            //window.location.href='/refund-list?takePayment=false&refundlist=true';
            this.paymentLibComponent.viewName = 'refund-list';
        }
        else {
            this.OrderslistService.setnavigationPage('casetransactions');
            this.OrderslistService.setisFromServiceRequestPage(false);
            this.paymentLibComponent.VIEW = 'case-transactions';
            this.paymentLibComponent.viewName = 'case-transactions';
            this.paymentLibComponent.ISBSENABLE = true;
            this.paymentLibComponent.isRefundStatusView = false;
        }
    }
    redirecttoRefundListPage() {
        if ((typeof this.paymentLibComponent.TAKEPAYMENT === 'string' && this.paymentLibComponent.TAKEPAYMENT === 'false') || (typeof this.paymentLibComponent.TAKEPAYMENT === 'boolean' && !this.paymentLibComponent.TAKEPAYMENT)) {
            // window.location.href='/refund-list?takePayment=false&refundlist=true';
            this.paymentLibComponent.viewName = 'refund-list';
        }
        else {
            this.loadRefundListPage();
        }
    }
    loadCaseTransactionPage() {
        this.OrderslistService.setnavigationPage('casetransactions');
        this.OrderslistService.setisFromServiceRequestPage(false);
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.ISBSENABLE = true;
        this.paymentLibComponent.isRefundStatusView = false;
    }
    resetForm(vals, field) {
        if (field === 'action' || field === 'all') {
            this.refundActionsHasError = vals[0];
        }
        if (field === 'rejectReason' || field === 'all') {
            this.refundRejectReasonHasError = vals[1];
        }
        if (field === 'addAreason' || field === 'all') {
            this.isReasonFieldEmpty = vals[2];
            this.isReasonFieldInvalid = vals[3];
            this.reasonFieldMinHasError = vals[4];
            this.reasonFieldMaxHasError = vals[5];
        }
        if (field === 'enterReason' || field === 'all') {
            this.isReasonEmpty = vals[6];
            this.isReasonInvalid = vals[7];
        }
    }
    goToCaseReview() {
        const isPayBubble = this.paymentLibComponent.isFromPayBubble;
        if (isPayBubble) {
            this.loadCaseTransactionPage();
        }
        else {
            this.router.navigate([`/cases/case-details/${this.ccdCaseNumber}`], { relativeTo: this.activeRoute });
        }
    }
    getTemplateInstructionType(payment, paymentReference) {
        if (payment == undefined || payment == null || payment.reference != paymentReference) {
            this.paymentViewService.getPaymentDetails(paymentReference).subscribe(payment => {
                this.paymentObj = payment;
                this.paymentObj.reference = paymentReference;
                this.templateInstructionType = this.notificationService.getNotificationInstructionType(this.paymentObj.channel, this.paymentObj.method);
            }, (error) => {
                this.templateInstructionType = 'Template';
            });
        }
        else {
            this.templateInstructionType = this.notificationService.getNotificationInstructionType(payment.channel, payment.method);
        }
    }
    showNotificationPreview() {
        this.notificationPreview = true;
    }
    hideNotificationPreview() {
        this.notificationPreview = false;
    }
    static ɵfac = function ProcessRefundComponent_Factory(t) { return new (t || ProcessRefundComponent)(i0.ɵɵdirectiveInject(RefundsService), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(OrderslistService), i0.ɵɵdirectiveInject(NotificationService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(i1$2.ActivatedRoute)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ProcessRefundComponent, selectors: [["ccpay-process-refund"]], inputs: { refundReference: "refundReference", refundlistsource: "refundlistsource" }, decls: 1, vars: 1, consts: [[4, "ngIf"], [1, "govuk-width-container"], ["id", "main-content", "role", "main", 1, "govuk-main-wrapper", "govuk-!-padding-top-0", 3, "ngClass"], [1, "payment-view-alignment"], [1, "govuk-grid-row"], [1, "column"], [1, "heading-large", "govuk-!-margin-top-0"], [1, "section"], [1, "bold", "tb-col-w"], ["colspan", "2"], ["class", "contactDetails-width font-size-19px", 4, "ngIf"], ["href", "Javascript:void(0)", "class", "govuk-link pointer right", 3, "click", 4, "ngIf"], [3, "paymentReference", "payment", "contactDetails", "refundReason", "refundAmount", "refundReference", "notificationPreviewEvent", 4, "ngIf"], [1, "process-refund__panel"], ["novalidate", "", 3, "formGroup"], [1, ""], ["aria-describedby", "sign-in-hint", 1, "govuk-fieldset"], [1, "govuk-fieldset__legend", "govuk-fieldset__legend--l"], [1, "heading-large"], [1, "govuk-radios", 3, "ngClass"], ["class", "inline-error-message", 4, "ngIf"], ["class", "govuk-radios__item", 4, "ngFor", "ngForOf"], [1, "govuk-radios__conditional", 3, "ngClass"], [1, "govuk-form-group"], ["for", "contact-by-text", 1, "govuk-label", "process-refund-font"], ["id", "sendmeback", "name", "sendMeBackField", "formControlName", "sendMeBackField", "rows", "5", 1, "govuk-textarea", "govuk-!-width-one-third", "reason-font", 3, "ngClass"], [3, "ngClass"], [1, "govuk-fieldset"], [1, "heading-medium"], ["id", "conditional-contact-3", 1, "govuk-radios__conditional", 3, "ngClass"], ["id", "otherReason", "formControlName", "enterReasonField", "name", "enterReasonField", "type", "text", 1, "govuk-input", "govuk-!-width-one-third", "reason-font", 3, "ngClass"], [1, "govuk-button-group"], [1, "govuk-button", "govuk-button--secondary", "marginright", 3, "click"], ["data-module", "govuk-button", 1, "govuk-button", "button", 3, "click"], ["class", "govuk-button-group margin", 4, "ngIf"], ["id", "main-content", "role", "main", 1, "govuk-main-wrapper", "govuk-main-wrapper--l", "success-page-padding--top25", 3, "ngClass"], [1, "govuk-grid-row", "pagesize"], [1, "govuk-panel", "govuk-panel-refund--confirmation"], [1, "heading-xlarge"], [1, "govuk-body", "process-refund-font"], ["href", "Javascript:void(0)", 1, "govuk-link", "pointer", 3, "click"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body", "process-refund-font"], [1, "contactDetails-width", "font-size-19px"], ["href", "Javascript:void(0)", 1, "govuk-link", "pointer", "right", 3, "click"], [3, "paymentReference", "payment", "contactDetails", "refundReason", "refundAmount", "refundReference", "notificationPreviewEvent"], [1, "inline-error-message"], [1, "govuk-radios__item"], ["name", "refundActionField", "type", "radio", "formControlName", "refundActionField", 1, "govuk-radios__input", 3, "id", "value", "click"], [1, "govuk-label", "govuk-radios__label", "process-refund-font", 3, "for"], ["id", "sign-in-item-hint", 1, "govuk-hint", "govuk-radios__hint", "process-refund-font"], ["formControlName", "refundRejectReasonField", "name", "refundRejectReasonField", "type", "radio", 1, "govuk-radios__input", 3, "id", "value", "click"], [1, "govuk-button-group", "margin"], ["data-module", "govuk-button", 1, "govuk-link", "pointer", 3, "click"]], template: function ProcessRefundComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, ProcessRefundComponent_ng_container_0_Template, 106, 63, "ng-container", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "RefundProcess");
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.DefaultValueAccessor, i1$1.RadioControlValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.FormGroupDirective, i1$1.FormControlName, NotificationPreviewComponent, i3.CurrencyPipe, i3.DatePipe], styles: [".tb-col-w[_ngcontent-%COMP%]{width:330px}.tr-border[_ngcontent-%COMP%]{border-bottom:2px solid}.payment-view-alignment[_ngcontent-%COMP%]{margin-left:30px}.govuk-button[_ngcontent-%COMP%]{float:left!important;font-size:19px;margin-top:2em!important}.remission[_ngcontent-%COMP%]{margin-bottom:7em}.process-refund-font[_ngcontent-%COMP%]{font-size:19px!important}.govuk-radios__conditional--hidden[_ngcontent-%COMP%]{display:none}.inline-error-message[_ngcontent-%COMP%]{color:#c11717;font-weight:700;margin-top:10px;border-color:#c11717}.inline-error-class[_ngcontent-%COMP%]{outline:3px solid #c11717;outline-offset:0;border-color:#c11717}.form-group-error[_ngcontent-%COMP%]{border-left:5px solid #c11717;padding-left:15px}.govuk-panel-refund--confirmation[_ngcontent-%COMP%]{color:#fff;background:#00703c}.process-refund__panel[_ngcontent-%COMP%]{margin-left:25px;margin-top:30px}.button-margin--left25[_ngcontent-%COMP%]{margin-left:25px}.success-page-padding--top25[_ngcontent-%COMP%]{padding-top:25px}.margin[_ngcontent-%COMP%]{margin-top:5em}.marginright[_ngcontent-%COMP%]{margin-right:1.5em}.govuk-textarea[_ngcontent-%COMP%]{line-height:2.25}.reason-font[_ngcontent-%COMP%]{font-size:19px!important}.pointer[_ngcontent-%COMP%]{cursor:pointer}.right[_ngcontent-%COMP%]{float:right}.pagesize[_ngcontent-%COMP%]{margin:2em;width:97%}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ProcessRefundComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-process-refund', template: "<ng-container *ngIf=\"viewStatus === 'RefundProcess'\">\n<div class=\"govuk-width-container\">\n\n  <main class=\"govuk-main-wrapper govuk-!-padding-top-0\" [ngClass]=\"{'govuk-radios__conditional--hidden': isSuccesspageEnable}\" id=\"main-content\" role=\"main\">\n    <div *ngIf=\"errorMessage.showError\">\n      <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n        <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n          {{errorMessage.title}}\n        </h2>\n        <div class=\"govuk-error-summary__body process-refund-font\">\n          {{errorMessage.body}}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"payment-view-alignment\">\n\n      <div class=\"govuk-grid-row\">\n        <div class=\"column\">\n          <h1 class=\"heading-large govuk-!-margin-top-0\">Review refund details</h1>\n        </div>\n      </div>\n      <table>\n        <tbody>\n\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Payment to be refunded</td>\n          <td colspan=\"2\">{{refundlistsource?.refund_reference}} ({{refundlistsource.amount  | currency :'GBP':'symbol':'1.2-2'  }})</td>\n        </tr>\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Reason for refund</td>\n          <td colspan=\"2\">{{refundlistsource?.reason?.trim()}}</td>\n        </tr>\n        <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Amount to be refunded</td>\n            <td colspan=\"2\">{{refundlistsource?.amount | currency :'GBP':'symbol':'1.2-2' }}</td>\n        </tr>\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Sent to</td>\n          <td colspan=\"2\">{{cpoDetails?.responsibleParty}}</td>\n        </tr>\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Sent via</td>\n          <td colspan=\"2\">\n          <div *ngIf=\"refundlistsource?.contact_details?.notification_type === 'EMAIL'\" class=\"contactDetails-width font-size-19px\">\n            <strong>Email</strong>\n            <br/>\n            {{refundlistsource?.contact_details?.email?.trim()}}\n          </div>\n          <div *ngIf=\"refundlistsource?.contact_details?.notification_type === 'LETTER'\" class=\"contactDetails-width font-size-19px\">\n            <strong>Post</strong>\n            <br/>\n            {{refundlistsource?.contact_details?.address_line?.trim()}} {{refundlistsource?.contact_details?.city?.trim()}} {{refundlistsource?.contact_details?.county?.trim()}} {{refundlistsource?.contact_details?.country?.trim()}} {{refundlistsource?.contact_details?.postal_code?.trim()}}\n          </div> \n          </td>\n        </tr>\n        <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Submitted by</td>\n            <td colspan=\"2\">{{refundlistsource?.user_full_name}}</td>\n\n        </tr>\n        <tr class=\"section\">\n            <td class=\"bold tb-col-w\">Date submitted</td>\n            <td colspan=\"2\">{{refundlistsource?.date_created | date:'d MMMM yyyy' }}</td>\n        </tr>\n        <tr class=\"section\">\n          <td class=\"bold tb-col-w\">Notification</td>\n          <td>{{templateInstructionType}}</td>\n          <td>\n            <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link pointer right\" (click)=\"showNotificationPreview()\">\n              Preview\n            </a>\n            <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link pointer right\" (click)=\"hideNotificationPreview()\">\n              Hide Preview\n            </a>\n        </td>\n\n      </tr>\n\n        </tbody>\n      </table>\n\n      <app-notification-preview *ngIf=\"notificationPreview\" [paymentReference]=\"refundlistsource?.payment_reference\"\n        [payment]=\"paymentObj\"\n        [contactDetails]=\"refundlistsource?.contact_details\"\n        [refundReason]=\"refundlistsource?.reason_code\" [refundAmount]=\"refundlistsource?.amount\"\n        [refundReference]=\"refundlistsource?.refund_reference\"\n        (notificationPreviewEvent) = \"getNotificationPreviewObj($event)\">\n      </app-notification-preview>\n\n      <div>\n      </div>\n    </div>\n    <div class=\"process-refund__panel\">\n      <form [formGroup]=\"processRefundForm\" novalidate>\n        <div class=\"\">\n        <fieldset class=\"govuk-fieldset\" aria-describedby=\"sign-in-hint\">\n          <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--l\">\n            <h1 class=\"heading-large\">\n              What do you want to do with this refund?\n            </h1>\n          </legend>\n          <div class=\"govuk-radios\"  [ngClass]=\"{'form-group-error': refundActionsHasError}\">\n            <p class=\"inline-error-message\"\n            *ngIf=\"refundActionsHasError\">\n            <span *ngIf=\"refundActionsHasError\">Please select an action</span>\n          </p>\n            <div class=\"govuk-radios__item\" *ngFor=\"let refundAction of refundActionList; let i = index;\">\n              <input class=\"govuk-radios__input\" \n              id=\"refundAction-{{i}}\" \n              name=\"refundActionField\"\n              type=\"radio\"\n              formControlName=\"refundActionField\"\n              (click)=\"checkRefundActions(refundAction.code)\"\n                value=\"{{refundAction.code}}\">\n              <label class=\"govuk-label govuk-radios__label process-refund-font\" for=\"refundAction-{{i}}\">\n                {{refundAction.code}}\n              </label>\n              <div id=\"sign-in-item-hint\" class=\"govuk-hint govuk-radios__hint process-refund-font\">\n                {{refundAction.label}}\n              </div>\n            </div>\n            <div class=\"govuk-radios__conditional\" [ngClass]=\"{'govuk-radios__conditional--hidden': !isSendMeBackClicked}\">\n              <div class=\"govuk-form-group\">\n                <label class=\"govuk-label process-refund-font\" for=\"contact-by-text\">\n                  Add a reason\n                </label>\n                <p class=\"inline-error-message\"\n                *ngIf=\"isReasonFieldEmpty || isReasonFieldInvalid || reasonFieldMinHasError || reasonFieldMaxHasError\">\n                <span *ngIf=\"isReasonFieldEmpty\">Add a reason</span>\n                <span *ngIf=\"isReasonFieldInvalid\">Add a valid reason</span>\n                <span *ngIf=\"reasonFieldMinHasError\">Reason should be at least 3 characters.</span>\n                <span *ngIf=\"reasonFieldMaxHasError\">Reason should be 255 characters or under.</span>\n              </p>\n                <textarea class=\"govuk-textarea govuk-!-width-one-third reason-font\"\n                [ngClass]=\"{'inline-error-class': isReasonFieldEmpty || isReasonFieldInvalid || reasonFieldMinHasError || reasonFieldMaxHasError}\"\n                  id=\"sendmeback\"\n                  name=\"sendMeBackField\" \n                  formControlName=\"sendMeBackField\"\n                rows=\"5\"></textarea>\n              \n              </div>\n\n            </div>\n  \n          </div>\n      \n        </fieldset>\n      </div>\n\n      <div [ngClass]=\"{'govuk-radios__conditional--hidden': !isRejectClicked}\">\n        <fieldset class=\"govuk-fieldset\">\n          <legend class=\"govuk-fieldset__legend govuk-fieldset__legend--l\">\n            <h2 class=\"heading-medium\">\n              Why are you rejecting this refund?\n            </h2>\n          </legend>\n          <div class=\"govuk-radios\" [ngClass]=\"{'form-group-error': refundRejectReasonHasError}\">\n            <p class=\"inline-error-message\"\n            *ngIf=\"refundRejectReasonHasError\">\n            <span *ngIf=\"refundRejectReasonHasError\">Please select a reject reason</span>\n          </p>\n            <div class=\"govuk-radios__item\" *ngFor=\"let refundRejectReason of refundRejectReasonList; let j = index;\">\n              <input class=\"govuk-radios__input\" \n              id=\"refundRejectReason-{{j}}\"\n              formControlName=\"refundRejectReasonField\"\n              name=\"refundRejectReasonField\"\n              (click)=\"checkRefundActions(refundRejectReason.code)\"\n              type=\"radio\" value=\"{{refundRejectReason.code}}\">\n              <label class=\"govuk-label govuk-radios__label process-refund-font\" for=\"refundRejectReason-{{j}}\">\n                {{refundRejectReason.name}}\n              </label>\n            </div>\n            </div>\n      <div class=\"govuk-radios__conditional\" [ngClass]=\"{'govuk-radios__conditional--hidden': !isOtherClicked}\" id=\"conditional-contact-3\">\n        <div class=\"govuk-form-group\">\n          <label class=\"govuk-label process-refund-font \" for=\"contact-by-text\">\n            Enter reason\n          </label>\n          <p class=\"inline-error-message\" *ngIf=\"isReasonEmpty || isReasonInvalid\">\n            <span *ngIf=\"isReasonEmpty\">Enter reason.</span>\n            <span *ngIf=\"isReasonInvalid\">Enter a valid reason</span>\n          </p>\n          <input class=\"govuk-input govuk-!-width-one-third reason-font\" id=\"otherReason\" \n          [ngClass]=\"{'inline-error-class': isReasonEmpty || isReasonInvalid}\"\n          formControlName=\"enterReasonField\" name=\"enterReasonField\" type=\"text\"></div>\n        \n      </div>\n      \n        </fieldset>\n      </div>\n\n      <div class=\"govuk-button-group\">\n        <button (click)=\"redirecttoRefundListPage()\" class=\"govuk-button govuk-button--secondary marginright\"> Previous</button>\n        <button (click)=\"processRefundSubmit()\" class=\"govuk-button button\"\n          data-module=\"govuk-button\">\n          Submit \n        </button>\n      <br/><br/>\n    </div>\n   \n  <div *ngIf=\"!isFromRefundListPage\" class=\"govuk-button-group margin\">\n\n  <p><a (click)=\"loadRefundsHomePage()\" class=\"govuk-link pointer\" data-module=\"govuk-button\">Cancel</a></p>\n</div>\n</form>\n  </div>\n \n\n  </main>\n \n  <main class=\"govuk-main-wrapper govuk-main-wrapper--l success-page-padding--top25\" [ngClass]=\"{'govuk-radios__conditional--hidden': !isSuccesspageEnable}\" id=\"main-content\" role=\"main\" >\n    <div class=\"govuk-grid-row pagesize\">\n        <div class=\"govuk-panel govuk-panel-refund--confirmation\">\n          <h1 class=\"heading-xlarge\">\n            {{successMsg}}\n          </h1>\n        </div>\n        <p class=\"govuk-body process-refund-font\">\n        <a href=\"Javascript:void(0)\" (click)=\"goToCaseReview()\" class=\"govuk-link pointer\">Return to case</a>\n        </p>\n      </div>\n  </main>\n</div>\n</ng-container>\n\n", styles: [".tb-col-w{width:330px}.tr-border{border-bottom:2px solid}.payment-view-alignment{margin-left:30px}.govuk-button{float:left!important;font-size:19px;margin-top:2em!important}.remission{margin-bottom:7em}.process-refund-font{font-size:19px!important}.govuk-radios__conditional--hidden{display:none}.inline-error-message{color:#c11717;font-weight:700;margin-top:10px;border-color:#c11717}.inline-error-class{outline:3px solid #c11717;outline-offset:0;border-color:#c11717}.form-group-error{border-left:5px solid #c11717;padding-left:15px}.govuk-panel-refund--confirmation{color:#fff;background:#00703c}.process-refund__panel{margin-left:25px;margin-top:30px}.button-margin--left25{margin-left:25px}.success-page-padding--top25{padding-top:25px}.margin{margin-top:5em}.marginright{margin-right:1.5em}.govuk-textarea{line-height:2.25}.reason-font{font-size:19px!important}.pointer{cursor:pointer}.right{float:right}.pagesize{margin:2em;width:97%}\n"] }]
    }], function () { return [{ type: RefundsService }, { type: PaymentViewService }, { type: i1$1.FormBuilder }, { type: OrderslistService }, { type: NotificationService }, { type: PaymentLibComponent }, { type: i1$2.Router }, { type: i1$2.ActivatedRoute }]; }, { refundReference: [{
            type: Input
        }], refundlistsource: [{
            type: Input
        }] }); })();

function TableComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 6)(2, "h2", 7);
    i0.ɵɵtext(3, " Error in processing the request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 8);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.errorMessage, " ");
} }
function TableComponent_div_2_option_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 14);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r6 = ctx.$implicit;
    i0.ɵɵpropertyInterpolate("value", name_r6);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(name_r6);
} }
function TableComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 9)(1, "label", 10);
    i0.ɵɵtext(2, " Filter by caseworker: ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "select", 11);
    i0.ɵɵlistener("change", function TableComponent_div_2_Template_select_change_3_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.selectchange($event)); });
    i0.ɵɵelementStart(4, "option", 12);
    i0.ɵɵtext(5, "All caseworkers");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, TableComponent_div_2_option_6_Template, 2, 2, "option", 13);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngForOf", ctx_r1.userLst);
} }
function TableComponent_div_3_option_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 14);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const name_r10 = ctx.$implicit;
    i0.ɵɵpropertyInterpolate("value", name_r10);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(name_r10);
} }
function TableComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 15)(1, "label", 10);
    i0.ɵɵtext(2, " Filter by service: ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "select", 11);
    i0.ɵɵlistener("change", function TableComponent_div_3_Template_select_change_3_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.selectchange($event)); });
    i0.ɵɵelementStart(4, "option", 12);
    i0.ɵɵtext(5, "All services");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, TableComponent_div_3_option_6_Template, 2, 2, "option", 13);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngForOf", ctx_r2.serviceLst);
} }
function TableComponent_div_4_mat_header_cell_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell");
    i0.ɵɵtext(1, "Case reference ");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_mat_cell_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-cell", 31);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "ccdHyphens");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r27 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(2, 1, row_r27.ccd_case_number), " ");
} }
function TableComponent_div_4_mat_header_cell_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell");
    i0.ɵɵtext(1, " Refund reference ");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_mat_cell_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-cell", 31);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r28 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", row_r28.refund_reference, " ");
} }
function TableComponent_div_4_mat_header_cell_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell");
    i0.ɵɵtext(1, " Submitted by ");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_mat_cell_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-cell", 31);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r29 = ctx.$implicit;
    i0.ɵɵstyleProp("color", row_r29.color);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", row_r29.user_full_name, " ");
} }
function TableComponent_div_4_mat_header_cell_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell", 32);
    i0.ɵɵtext(1, " Date created ");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_mat_cell_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-cell", 31);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r30 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 1, row_r30.date_created, "d MMMM yyyy"), " ");
} }
function TableComponent_div_4_mat_header_cell_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell", 32);
    i0.ɵɵtext(1, " Last updated");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_mat_cell_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-cell", 31);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "date");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r31 = ctx.$implicit;
    i0.ɵɵstyleProp("color", row_r31.color);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(2, 3, row_r31.date_updated, "d MMMM yyyy"), " ");
} }
function TableComponent_div_4_ng_container_17_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell");
    i0.ɵɵtext(1, " Action ");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_ng_container_17_mat_cell_2_Template(rf, ctx) { if (rf & 1) {
    const _r36 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "mat-cell")(1, "a", 35);
    i0.ɵɵlistener("click", function TableComponent_div_4_ng_container_17_mat_cell_2_Template_a_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r36); const row_r34 = restoredCtx.$implicit; const ctx_r35 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r35.goToCaseReview(row_r34.ccd_case_number, row_r34)); });
    i0.ɵɵtext(2, "Review case");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\u00A0");
    i0.ɵɵelementStart(4, "a", 35);
    i0.ɵɵlistener("click", function TableComponent_div_4_ng_container_17_mat_cell_2_Template_a_click_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r36); const row_r34 = restoredCtx.$implicit; const ctx_r37 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r37.goToRefundProcessComponent(row_r34.refund_reference, row_r34)); });
    i0.ɵɵtext(5, "Process refund");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const row_r34 = ctx.$implicit;
    i0.ɵɵstyleProp("color", row_r34.color);
} }
function TableComponent_div_4_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 33);
    i0.ɵɵtemplate(1, TableComponent_div_4_ng_container_17_mat_header_cell_1_Template, 2, 0, "mat-header-cell", 19);
    i0.ɵɵtemplate(2, TableComponent_div_4_ng_container_17_mat_cell_2_Template, 6, 2, "mat-cell", 34);
    i0.ɵɵelementContainerEnd();
} }
function TableComponent_div_4_ng_container_18_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "mat-header-cell");
    i0.ɵɵtext(1, " Action ");
    i0.ɵɵelementEnd();
} }
function TableComponent_div_4_ng_container_18_mat_cell_2_Template(rf, ctx) { if (rf & 1) {
    const _r42 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "mat-cell")(1, "a", 35);
    i0.ɵɵlistener("click", function TableComponent_div_4_ng_container_18_mat_cell_2_Template_a_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r42); const row_r40 = restoredCtx.$implicit; const ctx_r41 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r41.goToRefundViewComponent(row_r40.refund_reference, row_r40)); });
    i0.ɵɵtext(2, "Review refund");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const row_r40 = ctx.$implicit;
    i0.ɵɵstyleProp("color", row_r40.color);
} }
function TableComponent_div_4_ng_container_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 33);
    i0.ɵɵtemplate(1, TableComponent_div_4_ng_container_18_mat_header_cell_1_Template, 2, 0, "mat-header-cell", 19);
    i0.ɵɵtemplate(2, TableComponent_div_4_ng_container_18_mat_cell_2_Template, 3, 2, "mat-cell", 34);
    i0.ɵɵelementContainerEnd();
} }
function TableComponent_div_4_mat_header_row_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "mat-header-row");
} }
function TableComponent_div_4_mat_row_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "mat-row");
} }
const _c0$4 = function () { return [5, 10, 25, 100]; };
function TableComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16)(1, "mat-table", 17);
    i0.ɵɵelementContainerStart(2, 18);
    i0.ɵɵtemplate(3, TableComponent_div_4_mat_header_cell_3_Template, 2, 0, "mat-header-cell", 19);
    i0.ɵɵtemplate(4, TableComponent_div_4_mat_cell_4_Template, 3, 3, "mat-cell", 20);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementContainerStart(5, 21);
    i0.ɵɵtemplate(6, TableComponent_div_4_mat_header_cell_6_Template, 2, 0, "mat-header-cell", 19);
    i0.ɵɵtemplate(7, TableComponent_div_4_mat_cell_7_Template, 2, 1, "mat-cell", 20);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementContainerStart(8, 22);
    i0.ɵɵtemplate(9, TableComponent_div_4_mat_header_cell_9_Template, 2, 0, "mat-header-cell", 19);
    i0.ɵɵtemplate(10, TableComponent_div_4_mat_cell_10_Template, 2, 3, "mat-cell", 23);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementContainerStart(11, 24);
    i0.ɵɵtemplate(12, TableComponent_div_4_mat_header_cell_12_Template, 2, 0, "mat-header-cell", 25);
    i0.ɵɵtemplate(13, TableComponent_div_4_mat_cell_13_Template, 3, 4, "mat-cell", 20);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementContainerStart(14, 26);
    i0.ɵɵtemplate(15, TableComponent_div_4_mat_header_cell_15_Template, 2, 0, "mat-header-cell", 25);
    i0.ɵɵtemplate(16, TableComponent_div_4_mat_cell_16_Template, 3, 6, "mat-cell", 23);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵtemplate(17, TableComponent_div_4_ng_container_17_Template, 3, 0, "ng-container", 27);
    i0.ɵɵtemplate(18, TableComponent_div_4_ng_container_18_Template, 3, 0, "ng-container", 27);
    i0.ɵɵtemplate(19, TableComponent_div_4_mat_header_row_19_Template, 1, 0, "mat-header-row", 28);
    i0.ɵɵtemplate(20, TableComponent_div_4_mat_row_20_Template, 1, 0, "mat-row", 29);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(21, "mat-paginator", 30);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("dataSource", ctx_r3.dataSource);
    i0.ɵɵadvance(16);
    i0.ɵɵproperty("ngIf", ctx_r3.isApprovalFlow);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r3.isApprovalFlow);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("matHeaderRowDef", ctx_r3.displayedColumns);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("matRowDefColumns", ctx_r3.displayedColumns);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("pageSizeOptions", i0.ɵɵpureFunction0(6, _c0$4));
} }
function TableComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 36);
    i0.ɵɵtext(1, "No records to display");
    i0.ɵɵelementEnd();
} }
class TableComponent {
    paymentLibComponent;
    cdRef;
    OrderslistService;
    router;
    activeRoute;
    DATASOURCE;
    STATUS;
    errorMessage;
    isApprovalFlow;
    // displayedColumns = ['ccdCaseNumber', 'refundReference', 'reason', 'createBy', 'updateDate', 'Action'];
    displayedColumns = ['ccd_case_number', 'refund_reference', 'user_full_name', 'date_created', 'date_updated', 'Action'];
    dataSource;
    userLst;
    serviceLst;
    actualcount;
    count;
    refundList;
    paginator;
    sort;
    constructor(paymentLibComponent, cdRef, OrderslistService, router, activeRoute) {
        this.paymentLibComponent = paymentLibComponent;
        this.cdRef = cdRef;
        this.OrderslistService = OrderslistService;
        this.router = router;
        this.activeRoute = activeRoute;
    }
    ngOnInit() {
        this.errorMessage = this.errorMessage;
        if (this.STATUS.toLowerCase() === 'sent for approval') {
            this.isApprovalFlow = true;
        }
        else {
            this.isApprovalFlow = false;
        }
        this.refundList = this.DATASOURCE;
        this.dataSource = new MatTableDataSource(this.refundList);
        this.actualcount = this.dataSource.data.length;
        if (this.refundList !== undefined) {
            this.userLst = this.refundList.reduce((r, { user_full_name }) => (r[user_full_name] = '', r), {});
            this.userLst = Object.keys(this.userLst);
            this.userLst.sort((a, b) => a.toString().localeCompare(b));
            this.serviceLst = this.refundList.reduce((r, { service_type }) => (r[service_type] = '', r), {});
            this.serviceLst = Object.keys(this.serviceLst);
            this.serviceLst.sort((a, b) => a.toString().localeCompare(b));
        }
    }
    /**
     * Set the paginator and sort after the view init since this component will
     * be able to query its view for the initialized paginator and sort.
     */
    ngAfterViewInit() {
        this.dataSource.sort = this.sort;
        //const sortState: Sort = {active: 'date_updated', direction: 'desc'};
        // this.sort.active = sortState.active;
        // this.sort.direction = sortState.direction;
        // this.sort.sortChange.emit(sortState);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
        this.cdRef.detectChanges();
    }
    applyFilter(filterValue) {
        filterValue = filterValue.trim(); // Remove whitespace
        filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches
        this.dataSource.filter = filterValue;
    }
    selectchange(args) {
        this.dataSource.filter = args.target.value;
        this.actualcount = this.dataSource.data.length;
        this.dataSource.paginator = this.paginator;
    }
    goToRefundProcessComponent(refundReference, refundData) {
        this.paymentLibComponent.refundlistsource = refundData;
        this.paymentLibComponent.refundReference = refundReference;
        this.paymentLibComponent.viewName = 'process-refund';
    }
    goToRefundViewComponent(refundReference, refundData) {
        this.OrderslistService.setRefundView(refundData);
        this.paymentLibComponent.viewName = 'refundstatuslist';
        this.paymentLibComponent.CCD_CASE_NUMBER = refundData.ccd_case_number;
        this.paymentLibComponent.isRefundStatusView = true;
        this.paymentLibComponent.isCallFromRefundList = true;
    }
    goToCaseReview(ccdCaseNumber, refundData) {
        this.router.navigate([`/cases/case-details/${ccdCaseNumber}`], { relativeTo: this.activeRoute });
    }
    static ɵfac = function TableComponent_Factory(t) { return new (t || TableComponent)(i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(OrderslistService), i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(i1$2.ActivatedRoute)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TableComponent, selectors: [["ccpay-table"]], viewQuery: function TableComponent_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(MatPaginator, 5);
            i0.ɵɵviewQuery(MatSort, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);
        } }, inputs: { DATASOURCE: "DATASOURCE", STATUS: "STATUS", errorMessage: "errorMessage" }, decls: 6, vars: 5, consts: [[1, "add-remission"], [4, "ngIf"], ["class", "govuk-form-group float-right", 4, "ngIf"], ["class", "govuk-form-group float-right-padding", 4, "ngIf"], ["class", "example-container", 4, "ngIf"], ["class", "govuk-label dropdpwn", 4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], [1, "govuk-form-group", "float-right"], ["for", "sort", 1, "govuk-label", "dropdpwn"], ["id", "sort", "name", "sort", 1, "govuk-select", 3, "change"], ["value", "", "selected", "selected"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "govuk-form-group", "float-right-padding"], [1, "example-container"], ["matSort", "", 3, "dataSource"], ["matColumnDef", "ccd_case_number"], [4, "matHeaderCellDef"], ["class", "whitespace-inherit", 4, "matCellDef"], ["matColumnDef", "refund_reference"], ["matColumnDef", "user_full_name"], ["class", "whitespace-inherit", 3, "color", 4, "matCellDef"], ["matColumnDef", "date_created"], ["mat-sort-header", "", 4, "matHeaderCellDef"], ["matColumnDef", "date_updated"], ["matColumnDef", "Action", 4, "ngIf"], [4, "matHeaderRowDef"], [4, "matRowDef", "matRowDefColumns"], [3, "pageSizeOptions"], [1, "whitespace-inherit"], ["mat-sort-header", ""], ["matColumnDef", "Action"], [3, "color", 4, "matCellDef"], ["href", "javascript:void(0)", 3, "click"], [1, "govuk-label", "dropdpwn"]], template: function TableComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, TableComponent_div_1_Template, 6, 1, "div", 1);
            i0.ɵɵtemplate(2, TableComponent_div_2_Template, 7, 1, "div", 2);
            i0.ɵɵtemplate(3, TableComponent_div_3_Template, 7, 1, "div", 3);
            i0.ɵɵtemplate(4, TableComponent_div_4_Template, 22, 7, "div", 4);
            i0.ɵɵtemplate(5, TableComponent_div_5_Template, 2, 0, "div", 5);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.errorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.dataSource.data.length > 0);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.dataSource.data.length > 0);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.dataSource.data.length > 0);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.dataSource.data.length === 0);
        } }, dependencies: [i3.NgForOf, i3.NgIf, i1$1.NgSelectOption, i1$1.ɵNgSelectMultipleOption, i6.MatTable, i6.MatHeaderCellDef, i6.MatHeaderRowDef, i6.MatColumnDef, i6.MatCellDef, i6.MatRowDef, i6.MatHeaderCell, i6.MatCell, i6.MatHeaderRow, i6.MatRow, i7.MatPaginator, i8.MatSort, i8.MatSortHeader, i3.DatePipe, CcdHyphensPipe], styles: [".mat-header-row[_ngcontent-%COMP%]{min-height:27px}.mat-cell[_ngcontent-%COMP%]{padding:0 10px 0 0;text-align:left;word-wrap:break-word;white-space:inherit!important;font-size:19px;line-height:25px;font-family:nta,Arial,sans-serif;font-weight:400}.mat-table[_ngcontent-%COMP%]{color:#0b0c0c;display:table;font-family:nta,Arial,sans-serif;-webkit-font-smoothing:antialiased;margin-bottom:1px;box-sizing:border-box;text-indent:initial;border-spacing:0;border-collapse:collapse;font-size:1.1875rem;line-height:1.31578947;table-layout:fixed;width:102%}.mat-header-cell[_ngcontent-%COMP%]{text-align:left;font-weight:700;padding:10px 10px 10px 0;word-wrap:break-word;font-size:19px;line-height:25px;color:#0b0c0c;cursor:pointer;font-family:inherit}.dropdpwn[_ngcontent-%COMP%]{display:inline-block;margin-right:10px;font-size:19px}.mat-column-ccdCaseNumber[_ngcontent-%COMP%]{flex:3em}.mat-column-refundReference[_ngcontent-%COMP%]{flex:6em}.mat-column-reason[_ngcontent-%COMP%]{flex:2em}.govuk-select[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.govuk-error-summary__title[_ngcontent-%COMP%]{font-size:24px!important}.float-right[_ngcontent-%COMP%]{float:right}.float-right-padding[_ngcontent-%COMP%]{float:right;padding-right:2em}.float-left-padding[_ngcontent-%COMP%]{padding-left:12em}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TableComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-table', template: "<div class=\"add-remission\">\n  <div *ngIf=\"errorMessage\">\n    <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n      <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n        Error in processing the request\n      </h2>\n      <div class=\"govuk-error-summary__body\">\n        {{ errorMessage }}\n      </div>\n    </div>\n  </div>\n\n  \n\n<div *ngIf=\"dataSource.data.length > 0\"  class=\"govuk-form-group float-right\">\n    <label class=\"govuk-label dropdpwn\" for=\"sort\" >\n      Filter by caseworker:\n    </label>\n    <select class=\"govuk-select\" id=\"sort\" name=\"sort\" (change)=\"selectchange($event)\">\n      <option value=\"\" selected='selected'>All caseworkers</option>\n      <option  *ngFor=\"let name of userLst;\" value=\"{{name}}\">{{name}}</option>\n    </select>\n</div>\n\n  <div *ngIf=\"dataSource.data.length > 0\"  class=\"govuk-form-group float-right-padding\">\n    <label class=\"govuk-label dropdpwn\" for=\"sort\" >\n      Filter by service:\n    </label>\n    <select class=\"govuk-select\" id=\"sort\" name=\"sort\" (change)=\"selectchange($event)\">\n      <option value=\"\" selected='selected'>All services</option>\n      <option  *ngFor=\"let name of serviceLst;\" value=\"{{name}}\">{{name}}</option>\n    </select>\n  </div>\n \n<div *ngIf=\"dataSource.data.length > 0\" class=\"example-container\">\n\n  <mat-table [dataSource]=\"dataSource\" matSort>\n\n    <ng-container matColumnDef=\"ccd_case_number\">\n      <mat-header-cell  *matHeaderCellDef >Case reference </mat-header-cell>\n      <mat-cell  *matCellDef=\"let row\" class=\"whitespace-inherit\"> {{row.ccd_case_number | ccdHyphens }} </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"refund_reference\">\n      <mat-header-cell  *matHeaderCellDef > Refund reference </mat-header-cell>\n      <mat-cell  *matCellDef=\"let row\" class=\"whitespace-inherit\"> {{row.refund_reference}} </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"user_full_name\">\n      <mat-header-cell *matHeaderCellDef > Submitted by </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\" class=\"whitespace-inherit\"> {{row.user_full_name }} </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date_created\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Date created </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\" class=\"whitespace-inherit\"> {{row.date_created | date:'d MMMM yyyy'}} </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date_updated\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header> Last updated</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\" class=\"whitespace-inherit\"> {{row.date_updated | date:'d MMMM yyyy'}} </mat-cell>\n      </ng-container>\n\n      <ng-container *ngIf=\"isApprovalFlow\" matColumnDef=\"Action\">\n          <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\" > <a href=\"javascript:void(0)\" (click)=\"goToCaseReview(row.ccd_case_number, row)\">Review case</a>&nbsp;<a href=\"javascript:void(0)\" (click)=\"goToRefundProcessComponent(row.refund_reference, row)\">Process refund</a></mat-cell>\n        </ng-container>\n      \n        <ng-container *ngIf=\"!isApprovalFlow\" matColumnDef=\"Action\">\n          <mat-header-cell *matHeaderCellDef > Action </mat-header-cell>\n          <mat-cell *matCellDef=\"let row\" [style.color]=\"row.color\"> <a href=\"javascript:void(0)\" (click)=\"goToRefundViewComponent(row.refund_reference, row)\">Review refund</a></mat-cell>\n        </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n    </mat-row>\n  </mat-table>\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n</div>\n\n<div class=\"govuk-label dropdpwn\" *ngIf=\"dataSource.data.length === 0\">No records to display</div>\n", styles: [".mat-header-row{min-height:27px}.mat-cell{padding:0 10px 0 0;text-align:left;word-wrap:break-word;white-space:inherit!important;font-size:19px;line-height:25px;font-family:nta,Arial,sans-serif;font-weight:400}.mat-table{color:#0b0c0c;display:table;font-family:nta,Arial,sans-serif;-webkit-font-smoothing:antialiased;margin-bottom:1px;box-sizing:border-box;text-indent:initial;border-spacing:0;border-collapse:collapse;font-size:1.1875rem;line-height:1.31578947;table-layout:fixed;width:102%}.mat-header-cell{text-align:left;font-weight:700;padding:10px 10px 10px 0;word-wrap:break-word;font-size:19px;line-height:25px;color:#0b0c0c;cursor:pointer;font-family:inherit}.dropdpwn{display:inline-block;margin-right:10px;font-size:19px}.mat-column-ccdCaseNumber{flex:3em}.mat-column-refundReference{flex:6em}.mat-column-reason{flex:2em}.govuk-select{font-size:19px;font-weight:400}.govuk-error-summary__title{font-size:24px!important}.float-right{float:right}.float-right-padding{float:right;padding-right:2em}.float-left-padding{padding-left:12em}\n"] }]
    }], function () { return [{ type: PaymentLibComponent }, { type: i0.ChangeDetectorRef }, { type: OrderslistService }, { type: i1$2.Router }, { type: i1$2.ActivatedRoute }]; }, { DATASOURCE: [{
            type: Input,
            args: ['DATASOURCE']
        }], STATUS: [{
            type: Input,
            args: ['STATUS']
        }], errorMessage: [{
            type: Input,
            args: ['errorMessage']
        }], paginator: [{
            type: ViewChild,
            args: [MatPaginator]
        }], sort: [{
            type: ViewChild,
            args: [MatSort]
        }] }); })();

function RefundListComponent_ng_container_4_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 5);
    i0.ɵɵtext(2, "No records to display");
    i0.ɵɵelementEnd()();
} }
function RefundListComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 0)(2, "div", 1)(3, "h2", 4);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(5, RefundListComponent_ng_container_4_div_5_Template, 3, 0, "div", 3);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r0.tableApprovalHeader);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.isApproveTableVisible);
} }
function RefundListComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div");
    i0.ɵɵelement(2, "ccpay-table", 6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("DATASOURCE", ctx_r1.submittedRefundList)("STATUS", ctx_r1.approvalStatus)("errorMessage", ctx_r1.errorMessage);
} }
function RefundListComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 5);
    i0.ɵɵtext(2, "No records to display");
    i0.ɵɵelementEnd()();
} }
function RefundListComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div");
    i0.ɵɵelement(2, "ccpay-table", 6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("DATASOURCE", ctx_r3.rejectedRefundList)("STATUS", ctx_r3.rejectStatus)("errorMessage", ctx_r3.errorMessage);
} }
class RefundListComponent {
    refundService;
    USERID;
    LOGGEDINUSERROLES;
    LOGGEDINUSEREMAIL;
    constructor(refundService) {
        this.refundService = refundService;
    }
    tableApprovalHeader;
    tableRejectedHeader;
    submittedRefundList = [];
    rejectedRefundList = [];
    // approvalStatus = 'Sent for approval';
    // rejectStatus = 'Update required';
    approvalStatus = 'Sent for approval';
    rejectStatus = 'Update required';
    errorMessage = null;
    isApproveTableVisible;
    isRejectTableVisible;
    dropdownvalue;
    isAuthorized = true;
    userLst;
    ngOnInit() {
        this.userLst = this.LOGGEDINUSERROLES;
        if (this.LOGGEDINUSERROLES.some(i => i.includes('payments-refund-approver'))) {
            this.isAuthorized = true;
        }
        else {
            this.isApproveTableVisible = false;
            this.isAuthorized = false;
        }
        this.tableApprovalHeader = 'Refunds to be approved';
        this.tableRejectedHeader = 'Refunds returned to caseworker';
        if (this.isAuthorized) {
            this.refundService.getRefundList(this.approvalStatus, true).subscribe(refundList => {
                this.submittedRefundList = refundList['refund_list'];
                this.isApproveTableVisible = true;
            }),
                (error) => {
                    this.errorMessage = error.replace(/"/g, "");
                };
        }
        this.refundService.getRefundList(this.rejectStatus, false).subscribe(refundList => {
            this.rejectedRefundList = refundList['refund_list'];
            this.isRejectTableVisible = true;
        }),
            (error) => {
                this.errorMessage = error.replace(/"/g, "");
            };
    }
    static ɵfac = function RefundListComponent_Factory(t) { return new (t || RefundListComponent)(i0.ɵɵdirectiveInject(RefundsService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: RefundListComponent, selectors: [["ccpay-refund-list"]], inputs: { USERID: "USERID", LOGGEDINUSERROLES: "LOGGEDINUSERROLES", LOGGEDINUSEREMAIL: "LOGGEDINUSEREMAIL" }, decls: 12, vars: 5, consts: [[1, "hmcts-page-heading"], [1, "hmcts-page-heading__title"], [1, "govuk-heading-xl"], [4, "ngIf"], [1, "govuk-heading-l"], [1, "govuk-label", "dropdpwn"], [3, "DATASOURCE", "STATUS", "errorMessage"]], template: function RefundListComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "h1", 2);
            i0.ɵɵtext(3, "Refund list");
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(4, RefundListComponent_ng_container_4_Template, 6, 2, "ng-container", 3);
            i0.ɵɵtemplate(5, RefundListComponent_ng_container_5_Template, 3, 3, "ng-container", 3);
            i0.ɵɵelementStart(6, "div", 0)(7, "div", 1)(8, "h2", 4);
            i0.ɵɵtext(9);
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(10, RefundListComponent_div_10_Template, 3, 0, "div", 3);
            i0.ɵɵtemplate(11, RefundListComponent_ng_container_11_Template, 3, 3, "ng-container", 3);
        } if (rf & 2) {
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("ngIf", ctx.isAuthorized);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isApproveTableVisible);
            i0.ɵɵadvance(4);
            i0.ɵɵtextInterpolate(ctx.tableRejectedHeader);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.isRejectTableVisible);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isRejectTableVisible);
        } }, dependencies: [i3.NgIf, TableComponent], styles: [".govuk-heading-xl[_ngcontent-%COMP%]{font-size:48px;padding-top:1em}.govuk-heading-l[_ngcontent-%COMP%]{font-size:36px}.govuk-label[_ngcontent-%COMP%]{font-size:19px}.hmcts-page-heading[_ngcontent-%COMP%]{width:110%}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RefundListComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-refund-list', template: "\n\n<div class=\"hmcts-page-heading\">\n  <div class=\"hmcts-page-heading__title\">\n    <h1 class=\"govuk-heading-xl\">Refund list</h1>\n  </div>\n</div>\n\n<ng-container *ngIf=\"isAuthorized\">\n<div class=\"hmcts-page-heading\">\n    <div class=\"hmcts-page-heading__title\">\n      <h2 class=\"govuk-heading-l\">{{tableApprovalHeader}}</h2>\n    </div>\n  </div>\n  <div  *ngIf=\"!isApproveTableVisible\">\n      <div class=\"govuk-label dropdpwn\" >No records to display</div>\n  </div>\n</ng-container>\n  \n<ng-container *ngIf=\"isApproveTableVisible\">\n    \n  <div><ccpay-table [DATASOURCE]=\"submittedRefundList\" [STATUS]=\"approvalStatus\" [errorMessage]=\"errorMessage\"></ccpay-table></div>\n</ng-container>\n\n\n<div class=\"hmcts-page-heading\">\n    <div class=\"hmcts-page-heading__title\">\n      <h2 class=\"govuk-heading-l\">{{tableRejectedHeader}}</h2>\n    </div>\n    \n  </div>\n  <div  *ngIf=\"!isRejectTableVisible\">\n      <div class=\"govuk-label dropdpwn\">No records to display</div>\n  </div>\n<ng-container *ngIf=\"isRejectTableVisible\">\n    \n  <div><ccpay-table [DATASOURCE]=\"rejectedRefundList\" [STATUS]=\"rejectStatus\" [errorMessage]=\"errorMessage\"></ccpay-table></div>\n</ng-container>\n\n\n", styles: [".govuk-heading-xl{font-size:48px;padding-top:1em}.govuk-heading-l{font-size:36px}.govuk-label{font-size:19px}.hmcts-page-heading{width:110%}\n"] }]
    }], function () { return [{ type: RefundsService }]; }, { USERID: [{
            type: Input,
            args: ['USERID']
        }], LOGGEDINUSERROLES: [{
            type: Input,
            args: ['LOGGEDINUSERROLES']
        }], LOGGEDINUSEREMAIL: [{
            type: Input,
            args: ['LOGGEDINUSEREMAIL']
        }] }); })();

class CardDetailsService {
    http;
    logger;
    errorHandlerService;
    paymentLibService;
    constructor(http, logger, errorHandlerService, paymentLibService) {
        this.http = http;
        this.logger = logger;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getCardDetails(paymentReference) {
        this.logger.info('Card-detail-service getCardDetails for: ', paymentReference);
        return this.http.get(`${this.paymentLibService.API_ROOT}/card-payments/${paymentReference}/details`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function CardDetailsService_Factory(t) { return new (t || CardDetailsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(LoggerService), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CardDetailsService, factory: CardDetailsService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CardDetailsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: LoggerService }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

function CardDetailsComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵtext(1, " Payment method unavailable, The payment has either expired or unsuccessful.\n");
    i0.ɵɵelementEnd();
} }
function CardDetailsComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "table")(2, "tbody")(3, "tr")(4, "td", 5);
    i0.ɵɵtext(5, "Method");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td");
    i0.ɵɵtext(7, "Card");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "tr")(9, "td", 5);
    i0.ɵɵtext(10, "Type");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td");
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd()()()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(12);
    i0.ɵɵtextInterpolate(ctx_r1.cardDetails.card_brand);
} }
class CardDetailsComponent {
    cardDetailsService;
    paymentLibComponent;
    pageTitle = 'Card details';
    cardDetails;
    paymentReference;
    errorMessage;
    constructor(cardDetailsService, paymentLibComponent) {
        this.cardDetailsService = cardDetailsService;
        this.paymentLibComponent = paymentLibComponent;
    }
    ngOnInit() {
        this.cardDetailsService.getCardDetails(this.paymentLibComponent.paymentReference).subscribe(cardDetails => this.cardDetails = cardDetails, (error) => this.errorMessage = error);
    }
    get getPaymentReference() {
        return this.paymentReference;
    }
    static ɵfac = function CardDetailsComponent_Factory(t) { return new (t || CardDetailsComponent)(i0.ɵɵdirectiveInject(CardDetailsService), i0.ɵɵdirectiveInject(PaymentLibComponent)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: CardDetailsComponent, selectors: [["ccpay-card-details"]], decls: 5, vars: 2, consts: [[1, "column"], [1, "heading-medium"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 4, "ngIf"], [4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1"], [1, "bold", "tb-col-w"]], template: function CardDetailsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "h2", 1);
            i0.ɵɵtext(2, "Payment method");
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(3, CardDetailsComponent_div_3_Template, 2, 0, "div", 2);
            i0.ɵɵtemplate(4, CardDetailsComponent_div_4_Template, 13, 1, "div", 3);
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.errorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.errorMessage && ctx.cardDetails);
        } }, dependencies: [i3.NgIf], styles: [".tb-col-w[_ngcontent-%COMP%]{width:330px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CardDetailsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-card-details', template: "\n<div class=\"column\">\n  <h2 class=\"heading-medium\">Payment method</h2>\n</div>\n\n<div role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\" *ngIf=\"errorMessage\">\n    Payment method unavailable, The payment has either expired or unsuccessful.\n</div>\n\n<div *ngIf=\"!errorMessage && cardDetails\">\n\n<table>\n  <tbody>\n  <tr>\n    <td class=\"bold tb-col-w\">Method</td>\n    <td>Card</td>\n  </tr>\n  <tr>\n    <td class=\"bold tb-col-w\">Type</td>\n    <td>{{ cardDetails.card_brand }}</td>\n  </tr>\n  </tbody>\n</table>\n</div>\n\n", styles: [".tb-col-w{width:330px}\n"] }]
    }], function () { return [{ type: CardDetailsService }, { type: PaymentLibComponent }]; }, null); })();

class PageNotFoundComponent {
    static ɵfac = function PageNotFoundComponent_Factory(t) { return new (t || PageNotFoundComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PageNotFoundComponent, selectors: [["ng-component"]], decls: 2, vars: 0, template: function PageNotFoundComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "h1");
            i0.ɵɵtext(1, "This is not the page you were looking for!");
            i0.ɵɵelementEnd();
        } }, encapsulation: 2 });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PageNotFoundComponent, [{
        type: Component,
        args: [{
                template: `
    <h1>This is not the page you were looking for!</h1>
    `
            }]
    }], null, null); })();

function PbaDetailsComponent_tr_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 1);
    i0.ɵɵtext(2, "PBA account name");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r0.payment.organisation_name);
} }
function PbaDetailsComponent_tr_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 1);
    i0.ɵɵtext(2, "PBA number");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r1.payment.account_number);
} }
function PbaDetailsComponent_tr_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 1);
    i0.ɵɵtext(2, "Customer internal reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.payment.customer_reference);
} }
class PbaDetailsComponent {
    payment;
    constructor() { }
    ngOnInit() {
    }
    static ɵfac = function PbaDetailsComponent_Factory(t) { return new (t || PbaDetailsComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PbaDetailsComponent, selectors: [["ccpay-pba-details"]], inputs: { payment: "payment" }, decls: 18, vars: 6, consts: [[1, "heading-large"], [1, "bold", "tb-col-w"], [1, "capitalize"], [4, "ngIf"]], template: function PbaDetailsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "h2", 0);
            i0.ɵɵtext(1, "Payment method");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(2, "table")(3, "tbody")(4, "tr")(5, "td", 1);
            i0.ɵɵtext(6, "Method");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(7, "td", 2);
            i0.ɵɵtext(8);
            i0.ɵɵpipe(9, "lowercase");
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(10, "tr")(11, "td", 1);
            i0.ɵɵtext(12, "Type");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(13, "td");
            i0.ɵɵtext(14, "Credit");
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(15, PbaDetailsComponent_tr_15_Template, 5, 1, "tr", 3);
            i0.ɵɵtemplate(16, PbaDetailsComponent_tr_16_Template, 5, 1, "tr", 3);
            i0.ɵɵtemplate(17, PbaDetailsComponent_tr_17_Template, 5, 1, "tr", 3);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(8);
            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 4, ctx.payment.method));
            i0.ɵɵadvance(7);
            i0.ɵɵproperty("ngIf", ctx.payment.organisation_name);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.payment.account_number);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.payment.customer_reference);
        } }, dependencies: [i3.NgIf, i3.LowerCasePipe], styles: [".capitalize[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}.tb-col-w[_ngcontent-%COMP%]{width:330px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PbaDetailsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-pba-details', template: "\n  <h2 class=\"heading-large\">Payment method</h2>\n  <table>\n    <tbody>\n    <tr>\n      <td class=\"bold tb-col-w\">Method</td>\n      <td class=\"capitalize\">{{ payment.method | lowercase}}</td>\n    </tr>\n    <tr>\n      <td class=\"bold tb-col-w\">Type</td>\n      <td>Credit</td>\n    </tr>\n    <tr *ngIf=\"payment.organisation_name\">\n      <td class=\"bold tb-col-w\">PBA account name</td>\n      <td>{{ payment.organisation_name }}</td>\n    </tr>\n    <tr *ngIf=\"payment.account_number\">\n      <td class=\"bold tb-col-w\">PBA number</td>\n      <td>{{ payment.account_number }}</td>\n    </tr>\n    <tr *ngIf=\"payment.customer_reference\">\n      <td class=\"bold tb-col-w\">Customer internal reference</td>\n      <td>{{ payment.customer_reference }}</td>\n    </tr>\n    </tbody>\n  </table>\n", styles: [".capitalize:first-letter{text-transform:uppercase}.tb-col-w{width:330px}\n"] }]
    }], function () { return []; }, { payment: [{
            type: Input
        }] }); })();

let isDebugMode = false;
const noop = () => undefined;
class ConsoleLoggerService {
    get info() {
        if (isDebugMode) {
            return console.info.bind(console);
        }
        else {
            return noop;
        }
    }
    get warn() {
        if (isDebugMode) {
            return console.warn.bind(console);
        }
        else {
            return noop;
        }
    }
    get error() {
        if (isDebugMode) {
            return console.error.bind(console);
        }
        else {
            return noop;
        }
    }
    invokeConsoleMethod(type, args) {
        const logFn = (console)[type] || console.log || noop;
        logFn.apply(console, [args]);
    }
    static ɵfac = function ConsoleLoggerService_Factory(t) { return new (t || ConsoleLoggerService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConsoleLoggerService, factory: ConsoleLoggerService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ConsoleLoggerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

class CaseTransactionsService {
    http;
    logger;
    errorHandlerService;
    paymentLibService;
    constructor(http, logger, errorHandlerService, paymentLibService) {
        this.http = http;
        this.logger = logger;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getPaymentGroups(ccdCaseNumber) {
        this.logger.info('Case-transactions-service getPaymentGroups for: ', ccdCaseNumber);
        return this.http.get(`${this.paymentLibService.API_ROOT}/cases/${ccdCaseNumber}/paymentgroups`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function CaseTransactionsService_Factory(t) { return new (t || CaseTransactionsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(LoggerService), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CaseTransactionsService, factory: CaseTransactionsService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CaseTransactionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: LoggerService }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

class BulkScaningPaymentService {
    http;
    https;
    errorHandlerService;
    paymentLibService;
    constructor(http, https, errorHandlerService, paymentLibService) {
        this.http = http;
        this.https = https;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getBSPaymentsByCCD(ccdCaseNumber) {
        return this.http.get(`${this.paymentLibService.BULKSCAN_API_ROOT}/cases/${ccdCaseNumber}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getBSPaymentsByDCN(dcn) {
        return this.http.get(`${this.paymentLibService.BULKSCAN_API_ROOT}/cases?document_control_number=${dcn}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSAllocatePayment(body, paymentRef) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentRef}/bulk-scan-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSPaymentStrategic(body, paymentGroupRef) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupRef}/bulk-scan-payments-strategic`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSWoPGStrategic(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/bulk-scan-payments-strategic`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    patchBSChangeStatus(dcnNumber, status) {
        return this.https.patch(`${this.paymentLibService.API_ROOT}/bulk-scan-payments/${dcnNumber}/status/${status}`, status).pipe(catchError(this.errorHandlerService.handleError));
    }
    calculateOutStandingAmount(paymentGroup) {
        let feesTotal = 0.00, paymentsTotal = 0.00, remissionsTotal = 0.00;
        if (paymentGroup.fees) {
            paymentGroup.fees.forEach(fee => {
                feesTotal = feesTotal + fee.calculated_amount;
            });
        }
        if (paymentGroup.payments) {
            paymentGroup.payments.forEach(payment => {
                if (payment.status.toUpperCase() === 'SUCCESS') {
                    paymentsTotal = paymentsTotal + payment.amount;
                }
            });
        }
        if (paymentGroup.remissions) {
            paymentGroup.remissions.forEach(remission => {
                remissionsTotal = remissionsTotal + remission.hwf_amount;
            });
        }
        return (feesTotal - remissionsTotal) - paymentsTotal;
    }
    removeUnwantedString(input, replaceText) {
        const pattern = /[\_]/gi;
        return input.replace(pattern, replaceText);
    }
    downloadSelectedReport(reportName, startDate, endDate) {
        return this.https.get(`${this.paymentLibService.BULKSCAN_API_ROOT}/report/data?date_from=${startDate}&date_to=${endDate}&report_type=${reportName}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function BulkScaningPaymentService_Factory(t) { return new (t || BulkScaningPaymentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(WebComponentHttpClient), i0.ɵɵinject(ErrorHandlerService), i0.ɵɵinject(PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BulkScaningPaymentService, factory: BulkScaningPaymentService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BulkScaningPaymentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: WebComponentHttpClient }, { type: ErrorHandlerService }, { type: PaymentLibService }]; }, null); })();

function UnprocessedPaymentsComponent_ng_container_0_thead_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "thead", 5);
} }
function UnprocessedPaymentsComponent_ng_container_0_tr_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 6)(1, "td", 7);
    i0.ɵɵtext(2, " Unallocated ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 8);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(6, "td", 8)(7, "td", 8)(8, "td", 8)(9, "td", 8);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const unassignedRecord_r5 = ctx.$implicit;
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(5, 1, unassignedRecord_r5.amount, "GBP", "symbol", "1.2-2"), "");
} }
function UnprocessedPaymentsComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "table", 1);
    i0.ɵɵtemplate(2, UnprocessedPaymentsComponent_ng_container_0_thead_2_Template, 1, 0, "thead", 2);
    i0.ɵɵelementStart(3, "tbody", 3);
    i0.ɵɵtemplate(4, UnprocessedPaymentsComponent_ng_container_0_tr_4_Template, 10, 6, "tr", 4);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.PAYMENTSLENGTH === 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.unassignedRecordList);
} }
function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 27)(1, "button", 28);
    i0.ɵɵlistener("click", function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_8_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r15); const unassignedRecord_r9 = i0.ɵɵnextContext().$implicit; const ctx_r13 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r13.redirectToFeeSearchPage($event, unassignedRecord_r9.dcn_reference)); });
    i0.ɵɵtext(2, " Allocate to new service request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵelementStart(4, "button", 28);
    i0.ɵɵlistener("click", function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_8_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r15); const unassignedRecord_r9 = i0.ɵɵnextContext().$implicit; const ctx_r16 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r16.goToAllocatePage(unassignedRecord_r9.dcn_reference)); });
    i0.ɵɵtext(5, " Allocate to existing service request ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", !ctx_r11.isAllocatedToNewFeebtnEnabled)("ngClass", !ctx_r11.isAllocatedToNewFeebtnEnabled ? "button govuk-button--secondary button--disabled" : "button govuk-button--secondary");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", !ctx_r11.isAllocateToExistingFeebtnEnabled)("ngClass", !ctx_r11.isAllocateToExistingFeebtnEnabled ? "button govuk-button--secondary button--disabled" : "button govuk-button--secondary");
} }
function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 29)(1, "dl", 30)(2, "div", 31)(3, "dt", 32);
    i0.ɵɵtext(4, " Method ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "dd", 33);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "lowercase");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "div", 31)(9, "dt", 32);
    i0.ɵɵtext(10, " Payment assest number (DCN) ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "dd", 33);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(13, "div", 34)(14, "button", 28);
    i0.ɵɵlistener("click", function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_14_Template_button_click_14_listener() { i0.ɵɵrestoreView(_r20); const unassignedRecord_r9 = i0.ɵɵnextContext().$implicit; const ctx_r18 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r18.loadUnsolicitedPage("unidentifiedPage", unassignedRecord_r9.dcn_reference)); });
    i0.ɵɵtext(15, " Mark as unidentified ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(16, "div")(17, "button", 28);
    i0.ɵɵlistener("click", function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_14_Template_button_click_17_listener() { i0.ɵɵrestoreView(_r20); const unassignedRecord_r9 = i0.ɵɵnextContext().$implicit; const ctx_r21 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r21.loadUnsolicitedPage("unsolicitedPage", unassignedRecord_r9.dcn_reference)); });
    i0.ɵɵtext(18, " Mark as transferred ");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const unassignedRecord_r9 = i0.ɵɵnextContext().$implicit;
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(7, 6, ctx_r12.trimUnderscore(unassignedRecord_r9.payment_method)), " ");
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1(" ", unassignedRecord_r9.dcn_reference, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", !ctx_r12.isMarkAsUnidentifiedbtnEnabled)("ngClass", !ctx_r12.isMarkAsUnidentifiedbtnEnabled ? "button govuk-button--secondary button--disabled" : "button govuk-button--secondary");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", !ctx_r12.isUnprocessedRecordSelected)("ngClass", !ctx_r12.isUnprocessedRecordSelected ? "button govuk-button--secondary button--disabled" : "button govuk-button--secondary");
} }
function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tr")(2, "td", 19);
    i0.ɵɵtext(3, " Unallocated ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "td", 20);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 21);
    i0.ɵɵtemplate(8, UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_8_Template, 6, 4, "div", 22);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(9, "tr")(10, "td", 23)(11, "summary", 24);
    i0.ɵɵlistener("click", function UnprocessedPaymentsComponent_ng_container_1_ng_container_18_Template_summary_click_11_listener() { const restoredCtx = i0.ɵɵrestoreView(_r25); const unassignedRecord_r9 = restoredCtx.$implicit; return i0.ɵɵresetView(unassignedRecord_r9.expanded = !unassignedRecord_r9.expanded); });
    i0.ɵɵelementStart(12, "span", 25);
    i0.ɵɵtext(13, " More details and actions ");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(14, UnprocessedPaymentsComponent_ng_container_1_ng_container_18_div_14_Template, 19, 8, "div", 26);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const unassignedRecord_r9 = ctx.$implicit;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(6, 3, unassignedRecord_r9.amount, "GBP", "symbol", "1.2-2"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r8.IS_BUTTON_ENABLE && !ctx_r8.isTurnOff);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", unassignedRecord_r9.expanded);
} }
function UnprocessedPaymentsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 9);
    i0.ɵɵelement(2, "input", 10, 11);
    i0.ɵɵelementStart(4, "table", 12)(5, "thead", 5)(6, "tr", 6)(7, "td", 13);
    i0.ɵɵtext(8, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 14);
    i0.ɵɵtext(10, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 15);
    i0.ɵɵtext(12, "Date allocated");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 16);
    i0.ɵɵtext(14, "Request reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(15, "td", 13)(16, "td", 17);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(17, "tbody");
    i0.ɵɵtemplate(18, UnprocessedPaymentsComponent_ng_container_1_ng_container_18_Template, 15, 8, "ng-container", 18);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(18);
    i0.ɵɵproperty("ngForOf", ctx_r1.unassignedRecordList);
} }
function UnprocessedPaymentsComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
class UnprocessedPaymentsComponent {
    router;
    bulkScaningPaymentService;
    paymentLibComponent;
    paymentViewService;
    OrderslistService;
    FEE_RECORDS_EXISTS;
    PAYMENTREF;
    ISTURNOFF;
    IS_BUTTON_ENABLE;
    IS_OS_AMT_AVAILABLE;
    ISSFENABLE;
    PAYMENTSLENGTH;
    LEVEL;
    selectedUnprocessedFeeEvent = new EventEmitter();
    getUnprocessedFeeCount = new EventEmitter();
    viewStatus = 'main';
    unassignedRecordList;
    upPaymentErrorMessage = null;
    ccdCaseNumber;
    recordId = null;
    isRecordExist = false;
    dcnNumber = null;
    selectedOption;
    isUnprocessedRecordSelected = true;
    isAllocateToExistingFeebtnEnabled = false;
    isMarkAsUnidentifiedbtnEnabled = false;
    isAllocatedToNewFeebtnEnabled = false;
    isExceptionCase = false;
    serviceId = null;
    isBulkScanEnable;
    isTurnOff = true;
    isStFixEnable;
    unassignedRecordSelectedList;
    unassignedRecordListLength = 0;
    showContent;
    constructor(router, bulkScaningPaymentService, paymentLibComponent, paymentViewService, OrderslistService) {
        this.router = router;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
        this.paymentLibComponent = paymentLibComponent;
        this.paymentViewService = paymentViewService;
        this.OrderslistService = OrderslistService;
    }
    ngOnInit() {
        // Todo ...
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.selectedOption = this.paymentLibComponent.SELECTED_OPTION.toLocaleLowerCase();
        this.dcnNumber = this.paymentLibComponent.DCN_NUMBER;
        this.isBulkScanEnable = this.paymentLibComponent.ISBSENABLE;
        this.isTurnOff = this.paymentLibComponent.ISTURNOFF;
        this.isStFixEnable = this.paymentLibComponent.ISSFENABLE;
        this.OrderslistService.getFeeExists().subscribe((data) => this.FEE_RECORDS_EXISTS = data);
        this.getUnassignedPaymentlist();
    }
    getUnassignedPaymentlist() {
        if (this.selectedOption === 'dcn') {
            this.bulkScaningPaymentService.getBSPaymentsByDCN(this.dcnNumber).subscribe(unassignedPayments => {
                //  unassignedPayments['data'].map(data => data.expandable=false);
                if (unassignedPayments['data'] && unassignedPayments['data'].payments) {
                    this.setValuesForUnassignedRecord(unassignedPayments['data']);
                }
                else if (unassignedPayments['payments']) {
                    this.setValuesForUnassignedRecord(unassignedPayments);
                }
                else {
                    this.upPaymentErrorMessage = 'error';
                    this.getUnprocessedFeeCount.emit('0');
                }
            }, (error) => {
                this.upPaymentErrorMessage = error;
                this.getUnprocessedFeeCount.emit('0');
            });
        }
        else {
            this.bulkScaningPaymentService.getBSPaymentsByCCD(this.ccdCaseNumber).subscribe(unassignedPayments => {
                //  unassignedPayments['data'].map(data => data.expandable=false);
                if (unassignedPayments['data'] && unassignedPayments['data'].payments) {
                    this.setValuesForUnassignedRecord(unassignedPayments['data']);
                }
                else if (unassignedPayments['payments']) {
                    this.setValuesForUnassignedRecord(unassignedPayments);
                }
                else {
                    this.upPaymentErrorMessage = 'error';
                    this.getUnprocessedFeeCount.emit('0');
                }
            }, (error) => {
                this.upPaymentErrorMessage = error;
                this.getUnprocessedFeeCount.emit('0');
            });
        }
    }
    setValuesForUnassignedRecord(unassignedPayments) {
        this.unassignedRecordList = unassignedPayments.payments;
        if (this.unassignedRecordList) {
            this.unassignedRecordListLength = unassignedPayments.payments.length;
        }
        this.serviceId = unassignedPayments.responsible_service_id;
        if (unassignedPayments['ccd_reference'] === undefined) {
            this.isExceptionCase = true;
        }
        // this.isRecordExist =  this.unassignedRecordList.length === 0;
        this.getUnprocessedFeeCount.emit(this.unassignedRecordList.length);
        this.unprocessedPaymentSelectEvent(this.unassignedRecordList);
    }
    formatUnassignedRecordId(ID) {
        return `unassignrecord-${ID}`;
    }
    trimUnderscore(method) {
        return this.bulkScaningPaymentService.removeUnwantedString(method, ' ');
    }
    redirectToFeeSearchPage(event, dcn_reference) {
        event.preventDefault();
        this.recordId = dcn_reference;
        let url = this.isBulkScanEnable ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
        url += this.ISTURNOFF ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
        url += this.isStFixEnable ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
        url += `&caseType=${this.paymentLibComponent.CASETYPE}`;
        this.router.navigateByUrl(`/fee-search?selectedOption=${this.selectedOption}&ccdCaseNumber=${this.ccdCaseNumber}&dcn=${this.recordId}${url}`);
    }
    loadUnsolicitedPage(viewName, dcn_reference) {
        this.recordId = dcn_reference;
        this.paymentLibComponent.bspaymentdcn = this.recordId;
        this.paymentLibComponent.viewName = viewName;
    }
    unprocessedPaymentSelectEvent(selectedRecordReference) {
        this.isUnprocessedRecordSelected = true;
        this.validateButtons();
        this.selectedUnprocessedFeeEvent.emit(selectedRecordReference);
    }
    resetButtons() {
        this.isUnprocessedRecordSelected = false;
        this.isAllocateToExistingFeebtnEnabled = false;
        this.isMarkAsUnidentifiedbtnEnabled = false;
        this.isAllocatedToNewFeebtnEnabled = false;
    }
    goToAllocatePage(dcn_reference) {
        this.paymentLibComponent.bspaymentdcn = dcn_reference;
        this.paymentLibComponent.unProcessedPaymentServiceId = this.serviceId;
        this.paymentLibComponent.isTurnOff = this.ISTURNOFF;
        this.paymentLibComponent.ISSFENABLE = this.isStFixEnable;
        if (this.ISTURNOFF) {
            this.paymentLibComponent.paymentGroupReference = this.PAYMENTREF;
            this.paymentLibComponent.viewName = 'fee-summary';
        }
        else {
            this.paymentLibComponent.paymentGroupReference = null;
            this.paymentLibComponent.viewName = 'allocate-payments';
        }
    }
    validateButtons() {
        setTimeout(() => {
            if (this.isUnprocessedRecordSelected && this.isExceptionCase) {
                this.isMarkAsUnidentifiedbtnEnabled = true;
            }
            else if (this.isUnprocessedRecordSelected && !this.isExceptionCase && !this.FEE_RECORDS_EXISTS) {
                this.isAllocateToExistingFeebtnEnabled = false;
                this.isAllocatedToNewFeebtnEnabled = true;
            }
            else if (this.isUnprocessedRecordSelected && !this.isExceptionCase && this.FEE_RECORDS_EXISTS) {
                if (!this.ISTURNOFF) {
                    this.isAllocateToExistingFeebtnEnabled = true;
                    this.isAllocatedToNewFeebtnEnabled = false;
                }
                else {
                    this.isAllocateToExistingFeebtnEnabled = this.IS_OS_AMT_AVAILABLE;
                    this.isAllocatedToNewFeebtnEnabled = true;
                }
            }
        }, 4000);
    }
    unprocessedPaymentUnSelectEvent(event) {
        event.preventDefault();
        this.recordId = null;
        this.isUnprocessedRecordSelected = false;
        this.isAllocateToExistingFeebtnEnabled = false;
        this.isAllocatedToNewFeebtnEnabled = false;
        this.isMarkAsUnidentifiedbtnEnabled = false;
        //this.validateButtons();
        this.selectedUnprocessedFeeEvent.emit('');
    }
    showDetailRow(event, obj, i) {
        event.preventDefault();
        this.unassignedRecordSelectedList = obj;
    }
    static ɵfac = function UnprocessedPaymentsComponent_Factory(t) { return new (t || UnprocessedPaymentsComponent)(i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(BulkScaningPaymentService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: UnprocessedPaymentsComponent, selectors: [["ccpay-app-unprocessed-payments"]], inputs: { FEE_RECORDS_EXISTS: "FEE_RECORDS_EXISTS", PAYMENTREF: "PAYMENTREF", ISTURNOFF: "ISTURNOFF", IS_BUTTON_ENABLE: "IS_BUTTON_ENABLE", IS_OS_AMT_AVAILABLE: "IS_OS_AMT_AVAILABLE", ISSFENABLE: "ISSFENABLE", PAYMENTSLENGTH: "PAYMENTSLENGTH", LEVEL: "LEVEL" }, outputs: { selectedUnprocessedFeeEvent: "selectedUnprocessedFeeEvent", getUnprocessedFeeCount: "getUnprocessedFeeCount" }, decls: 3, vars: 3, consts: [[4, "ngIf"], [1, "govuk-table"], ["class", "govuk-table__head", 4, "ngIf"], [1, "govuk-table__body"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], [1, "govuk-table__head"], [1, "govuk-table__row"], [1, "col-13"], [1, "govuk-table__cell", "whitespace-inherit"], [1, "unprocessed-payments"], ["type", "hidden", "value", "CASETRANSACTION", 1, "iFrameDrivenImageValue"], ["myInput", ""], [1, "table"], ["scope", "col", 1, "govuk-table__header", "col-13"], ["scope", "col", 1, "govuk-table__header", "col-9"], ["scope", "col", 1, "govuk-table__header", "col-16"], ["colspan", "3", "scope", "col", 1, "govuk-table__header", "col-24"], ["scope", "col", 1, "govuk-table__header"], [4, "ngFor", "ngForOf"], [1, "govuk-table__cell", "whitespace-inherit", "col-13"], [1, "govuk-table__cell", "whitespace-inherit", "col-10"], ["colspan", "8", 1, "govuk-table__cell", "whitespace-inherit"], ["class", "alignright", 4, "ngIf"], ["colspan", "10", 1, "unassigned", "noborders"], [1, "govuk-details__summary", 3, "click"], [1, "govuk-details__summary-text"], ["class", "govuk-details__text  govuk-!-margin-bottom-5 paddingright", 4, "ngIf"], [1, "alignright"], ["type", "button", 3, "disabled", "ngClass", "click"], [1, "govuk-details__text", "govuk-!-margin-bottom-5", "paddingright"], [1, "govuk-summary-list", "govuk-!-margin-bottom-5"], [1, "govuk-summary-list__row"], [1, "govuk-summary-list__key"], [1, "govuk-summary-list__value"], [1, "govuk-!-margin-bottom-5"]], template: function UnprocessedPaymentsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, UnprocessedPaymentsComponent_ng_container_0_Template, 5, 2, "ng-container", 0);
            i0.ɵɵtemplate(1, UnprocessedPaymentsComponent_ng_container_1_Template, 19, 1, "ng-container", 0);
            i0.ɵɵtemplate(2, UnprocessedPaymentsComponent_ng_container_2_Template, 1, 0, "ng-container", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", !ctx.IS_BUTTON_ENABLE);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.IS_BUTTON_ENABLE);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "main");
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i3.LowerCasePipe, i3.CurrencyPipe], styles: [".unprocessed-payments[_ngcontent-%COMP%]   .unprocessed-payments--radio-button[_ngcontent-%COMP%]{bottom:10px}.disable[_ngcontent-%COMP%]{text-decoration:none;padding:.526315em .789473em .263157em;cursor:default;color:#fff;background-color:#00823b;pointer-events:none;font-size:1em;line-height:1.25;outline:1px solid transparent;outline-offset:-1px;-webkit-appearance:none;box-shadow:0 2px #003618}.button.disabled[_ngcontent-%COMP%], .button[disabled=disabled][_ngcontent-%COMP%], .button[disabled][_ngcontent-%COMP%]{zoom:1;filter:alpha(opacity=50);opacity:.5}.button.disabled[_ngcontent-%COMP%]:active, .button[disabled=disabled][_ngcontent-%COMP%]:active, .button[disabled][_ngcontent-%COMP%]:active{top:0;box-shadow:0 2px #003618}.button[disabled=disabled][_ngcontent-%COMP%]{background:#00823b}.col-13[_ngcontent-%COMP%]{width:13%!important}.col-17[_ngcontent-%COMP%]{width:17%!important}.col-12[_ngcontent-%COMP%]{width:12%!important}.col-9[_ngcontent-%COMP%]{width:9%!important}.col-15[_ngcontent-%COMP%]{width:15%!important}.lowercase[_ngcontent-%COMP%]{text-transform:lowercase}.capitalize[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}.whitespace-inherit[_ngcontent-%COMP%]{white-space:inherit!important}.top_row[_ngcontent-%COMP%]{display:table;width:100%}.top_row[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{display:table-cell;width:50%;border-bottom:1px solid #eee}.unassigned[_ngcontent-%COMP%]{border-top:hidden}.col-16[_ngcontent-%COMP%]{width:16%!important}.col-10[_ngcontent-%COMP%]{width:10%!important}.col-14[_ngcontent-%COMP%]{width:14%!important}.col-19[_ngcontent-%COMP%]{width:19%!important;padding-left:0!important}.col-18[_ngcontent-%COMP%]{width:18%!important;padding-left:0!important;padding-right:0!important}.col-21[_ngcontent-%COMP%]{width:21%!important}.col-20[_ngcontent-%COMP%]{width:20%!important}.col-11[_ngcontent-%COMP%]{width:11%!important}.col-37[_ngcontent-%COMP%]{width:37%!important}.noborders[_ngcontent-%COMP%] > td[_ngcontent-%COMP%]{border-color:transparent;border-top-style:hidden;border-right-style:hidden;border-left-style:hidden}.govuk-button--secondary[_ngcontent-%COMP%]{margin-bottom:10px}.govuk-summary-list[_ngcontent-%COMP%]{font-size:19px}.govuk-summary-list__key[_ngcontent-%COMP%]{width:35%}td[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden!important}table[_ngcontent-%COMP%]{table-layout:fixed;width:100%}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{word-wrap:break-word}.alignright[_ngcontent-%COMP%]{text-align:right}.paddingright[_ngcontent-%COMP%]{padding-right:0}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(UnprocessedPaymentsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-app-unprocessed-payments', template: "<!-- <ng-container *ngIf=\"IS_BUTTON_ENABLE\">\n    <div class=\"unprocessed-payments govuk-grid-column-full govuk-!-padding-bottom-3\">\n        <input #myInput type='hidden' class='iFrameDrivenImageValue' value='CASETRANSACTION'>\n        <h3 class=\"heading-medium\" *ngIf=\"!IS_BUTTON_ENABLE\">Unprocessed payments</h3>\n        <h3 class=\"heading-medium\" *ngIf=\"IS_BUTTON_ENABLE\">Unallocated payments</h3>\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                  <td class=\"govuk-table__header\" scope=\"col\" *ngIf=\"IS_BUTTON_ENABLE && !isTurnOff\">Select</td>\n                  <td class=\"govuk-table__header\" scope=\"col\" *ngIf=\"IS_BUTTON_ENABLE && isTurnOff\"><a href=\"#\" (click)=\"unprocessedPaymentUnSelectEvent($event)\">Unselect</a></td>\n      \n                  <td class=\"govuk-table__header\" scope=\"col\">Payment asset number (DCN)</td>\n                  <td class=\"govuk-table__header\" scope=\"col\">Banked date</td>\n                  <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n                  <td class=\"govuk-table__header\" scope=\"col\">Method</td>\n                 </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\" >\n              <tr class=\"govuk-table__row\" *ngFor=\"let unassignedRecord of unassignedRecordList; let i of index;\">\n                  <td class=\"govuk-table__cell\" *ngIf=\"IS_BUTTON_ENABLE\">\n                    <div class=\"multiple-choice unprocessed-payments--radio-button\">\n                      <input id=\"'unpaiedFee'+i+''\"\n                      aria-label=\"unassignedRecord\"\n                      name=\"unassignedRecord\"\n                      type=\"radio\"\n                      [(ngModel)]=\"recordId\"\n                      (click)=\"unprocessedPaymentSelectEvent(unassignedRecord.dcn_reference)\"\n                      value=\"{{unassignedRecord.dcn_reference}}\" />\n                      <label for=\"radio-inline-1\"></label>\n                    </div>\n                  </td>\n                  <td class=\"govuk-table__cell whitespace-inherit\">\n                    {{unassignedRecord.dcn_reference}}\n                  </td>\n                  <td class=\"govuk-table__cell whitespace-inherit\"> {{unassignedRecord.date_banked | date:'dd MMM yyyy'}}</td>\n                  <td class=\"govuk-table__cell whitespace-inherit\"> {{unassignedRecord.amount | currency :'GBP':'symbol':'1.2-2'}}</td>\n                  <td class=\"capitalize govuk-table__cell whitespace-inherit\"> {{ trimUnderscore(unassignedRecord.payment_method) | lowercase}}  </td>\n                </tr>\n            </tbody>\n            <tbody class=\"govuk-table__body\" *ngIf=\"upPaymentErrorMessage !== null\">\n              <td class=\"govuk-table__cell\" colspan=\"6\">No unallocated payments record available</td>\n            </tbody>\n          </table>\n         <div class=\"button-grb\" *ngIf=\"IS_BUTTON_ENABLE && !isTurnOff\">\n            <button type=\"button\"\n            [disabled]=\"!isAllocatedToNewFeebtnEnabled\"\n            [ngClass]=\"!isAllocatedToNewFeebtnEnabled ? 'button govuk-button--secondary button--disabled govuk-!-margin-right-1' : 'button govuk-button--secondary govuk-!-margin-right-1'\" (click)=\"redirectToFeeSearchPage($event)\">\n              Allocate to a new fee\n            </button>\n            <button type=\"button\" \n            [disabled]=\"!isAllocateToExistingFeebtnEnabled\"\n            [ngClass]='!isAllocateToExistingFeebtnEnabled ?  \"button govuk-button--secondary button--disabled govuk-!-margin-right-1\" : \"button govuk-button--secondary govuk-!-margin-right-1\"' (click)=\"goToAllocatePage()\">\n              Allocate to an existing fee\n            </button>\n            <button type=\"button\" \n            [disabled]=\"!isMarkAsUnidentifiedbtnEnabled\"\n            [ngClass]='!isMarkAsUnidentifiedbtnEnabled ?  \"button govuk-button--secondary button--disabled govuk-!-margin-right-1\" : \"button govuk-button--secondary govuk-!-margin-right-1\"' (click)=\"loadUnsolicitedPage('unidentifiedPage')\">\n              Mark as unidentified\n            </button>\n            <button type=\"button\" \n            [disabled]=\"!isUnprocessedRecordSelected\"\n            [ngClass]='!isUnprocessedRecordSelected ?  \"button govuk-button--secondary button--disabled govuk-!-margin-right-1\" : \"button govuk-button--secondary govuk-!-margin-right-1\"' (click)=\"loadUnsolicitedPage('unsolicitedPage')\">\n              Mark as transferred\n            </button>  \n         </div>\n      \n         <div class=\"button-grb\" *ngIf=\"IS_BUTTON_ENABLE && isTurnOff\">\n            <button type=\"button\"\n            [disabled]=\"!isAllocatedToNewFeebtnEnabled\"\n            [ngClass]=\"!isAllocatedToNewFeebtnEnabled ? 'button button--disabled govuk-!-margin-right-1' : 'button govuk-!-margin-right-1'\" (click)=\"redirectToFeeSearchPage($event)\">\n              Allocate to a new fee\n            </button>\n            <button type=\"button\" \n            [disabled]=\"!isAllocateToExistingFeebtnEnabled\"\n            [ngClass]='!isAllocateToExistingFeebtnEnabled ?  \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"' (click)=\"goToAllocatePage()\">\n              Allocate to an existing fee\n            </button>\n            <button type=\"button\" \n            [disabled]=\"!isMarkAsUnidentifiedbtnEnabled\"\n            [ngClass]='!isMarkAsUnidentifiedbtnEnabled ?  \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"' (click)=\"loadUnsolicitedPage('unidentifiedPage')\">\n              Mark as unidentified\n            </button>\n            <button type=\"button\" \n            [disabled]=\"!isUnprocessedRecordSelected\"\n            [ngClass]='!isUnprocessedRecordSelected ?  \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"' (click)=\"loadUnsolicitedPage('unsolicitedPage')\">\n              Mark as transferred\n            </button> \n         </div>\n      </div>\n</ng-container> -->\n\n\n<ng-container *ngIf=\"!IS_BUTTON_ENABLE\">\n    <table class=\"govuk-table\">\n       \n        <thead class=\"govuk-table__head\" *ngIf='PAYMENTSLENGTH === 0 '>\n            <!-- <tr class=\"govuk-table__row\">\n                <td class=\"govuk-table__header col-14\" scope=\"col\">Status</td>\n                <td class=\"govuk-table__header col-10\" scope=\"col\">Amount</td>\n                <td class=\"govuk-table__header col-14\" scope=\"col\">Date</td>\n                <td class=\"govuk-table__header col-20\" scope=\"col\">Request reference</td>\n                <td class=\"govuk-table__header col-9\" scope=\"col\"></td>\n                <td class=\"govuk-table__header\" scope=\"col\"></td>\n              </tr> -->\n          </thead>\n          <tbody class=\"govuk-table__body\">\n          <tr class=\"govuk-table__row\" *ngFor=\"let unassignedRecord of unassignedRecordList; let i = index;\">\n                    <td class=\"govuk-table__cell whitespace-inherit\" class=\"col-13\">\n                    Unallocated \n                    </td>\n                    <td class=\"govuk-table__cell whitespace-inherit\"> {{unassignedRecord.amount | currency :'GBP':'symbol':'1.2-2'}}</td>\n                    <td class=\"govuk-table__cell whitespace-inherit\"></td>\n                    <td class=\"govuk-table__cell whitespace-inherit\"></td>\n                    <td class=\"govuk-table__cell whitespace-inherit\"></td>\n                    <td class=\"govuk-table__cell whitespace-inherit\"></td>\n          </tr>\n          </tbody>\n       \n    </table>\n\n</ng-container>\n\n\n<!--Orders Unallocated changes-->\n<ng-container *ngIf=\"IS_BUTTON_ENABLE\">\n    <div class=\"unprocessed-payments\">\n        <input #myInput type='hidden' class='iFrameDrivenImageValue' value='CASETRANSACTION'>\n          <table class=\"table\">\n             \n              <thead class=\"govuk-table__head\">\n                  <tr class=\"govuk-table__row\">\n                      <td class=\"govuk-table__header col-13\" scope=\"col\">Status</td>\n                      <td class=\"govuk-table__header col-9\" scope=\"col\">Amount</td>\n                      <td class=\"govuk-table__header col-16\" scope=\"col\">Date allocated</td>\n                      <td class=\"govuk-table__header col-24\" colspan=\"3\" scope=\"col\">Request reference</td>\n                      <td class=\"govuk-table__header col-13\" scope=\"col\"></td>\n                      <td class=\"govuk-table__header\" scope=\"col\"></td>\n                    </tr>\n                </thead>\n              <tbody>\n            <ng-container *ngFor=\"let unassignedRecord of unassignedRecordList; let i = index;\">\n             <tr>\n                <td  class=\"govuk-table__cell whitespace-inherit col-13\" >\n                  Unallocated \n               </td>\n                <td class=\"govuk-table__cell whitespace-inherit col-10\">\n                    {{unassignedRecord.amount | currency :'GBP':'symbol':'1.2-2'}}\n                </td>\n                <td class=\"govuk-table__cell whitespace-inherit\" colspan=\"8\">\n                    <div  *ngIf=\"IS_BUTTON_ENABLE && !isTurnOff\" class=\"alignright\">\n                        <button type=\"button\"\n                        [disabled]=\"!isAllocatedToNewFeebtnEnabled\"\n                        [ngClass]=\"!isAllocatedToNewFeebtnEnabled ? 'button govuk-button--secondary button--disabled' : 'button govuk-button--secondary'\" (click)=\"redirectToFeeSearchPage($event,unassignedRecord.dcn_reference)\">\n                          Allocate to new service request\n                        </button><br/>\n                        <button type=\"button\" \n                        [disabled]=\"!isAllocateToExistingFeebtnEnabled\"\n                        [ngClass]='!isAllocateToExistingFeebtnEnabled ?  \"button govuk-button--secondary button--disabled\" : \"button govuk-button--secondary\"' (click)=\"goToAllocatePage(unassignedRecord.dcn_reference)\">\n                          Allocate to existing service request \n                        </button>\n                </div>\n            \n                </td>\n             </tr>\n           \n              <!-- <ng-container> -->\n             <tr>\n                  <td class=\"unassigned noborders\" colspan=\"10\">\n                      <summary (click)=\"unassignedRecord.expanded = !unassignedRecord.expanded\" class=\"govuk-details__summary\">\n                          <span class=\"govuk-details__summary-text\">\n                              More details and actions\n                          </span>\n                      </summary>\n                      <div *ngIf=\"unassignedRecord.expanded\" class=\"govuk-details__text  govuk-!-margin-bottom-5 paddingright\">\n                          <dl class=\"govuk-summary-list govuk-!-margin-bottom-5\">\n                              <div class=\"govuk-summary-list__row\">\n                                  <dt class=\"govuk-summary-list__key\">\n                                      Method\n                                  </dt>\n                                  <dd class=\"govuk-summary-list__value\">\n                                      {{ trimUnderscore(unassignedRecord.payment_method) | lowercase}}\n                                  </dd>\n                              </div>\n                              <div class=\"govuk-summary-list__row\">\n                                  <dt class=\"govuk-summary-list__key\">\n                                      Payment assest number (DCN) \n                                  </dt>\n                                  <dd class=\"govuk-summary-list__value\">\n                                      {{unassignedRecord.dcn_reference}}\n                                  </dd>\n                              </div>\n                          </dl>\n                          <div class=\" govuk-!-margin-bottom-5\">\n                              <button type=\"button\" \n                              [disabled]=\"!isMarkAsUnidentifiedbtnEnabled\"\n                              [ngClass]='!isMarkAsUnidentifiedbtnEnabled ?  \"button govuk-button--secondary button--disabled\" : \"button govuk-button--secondary\"' (click)=\"loadUnsolicitedPage('unidentifiedPage',unassignedRecord.dcn_reference)\">\n                                Mark as unidentified\n                              </button>\n                          </div>\n                          <div>\n                              <button type=\"button\" \n                          [disabled]=\"!isUnprocessedRecordSelected\"\n                          [ngClass]='!isUnprocessedRecordSelected ?  \"button govuk-button--secondary button--disabled\" : \"button govuk-button--secondary\"' (click)=\"loadUnsolicitedPage('unsolicitedPage',unassignedRecord.dcn_reference)\">\n                            Mark as transferred\n                          </button>  \n                          </div>\n\n                      </div>\n                  </td> \n                </tr> \n              <!-- </ng-container> -->\n             </ng-container>\n              </tbody>\n              </table>\n      \n        </div>\n</ng-container>\n\n<ng-container *ngIf=\"viewStatus === 'main'\">\n\n</ng-container>\n<!-- <ng-container *ngIf=\"PAYMENTSLENGTH === 0 && unassignedRecordListLength === 0\">\n  <br/>No payments.<br/>\n</ng-container> -->\n\n", styles: [".unprocessed-payments .unprocessed-payments--radio-button{bottom:10px}.disable{text-decoration:none;padding:.526315em .789473em .263157em;cursor:default;color:#fff;background-color:#00823b;pointer-events:none;font-size:1em;line-height:1.25;outline:1px solid transparent;outline-offset:-1px;-webkit-appearance:none;box-shadow:0 2px #003618}.button.disabled,.button[disabled=disabled],.button[disabled]{zoom:1;filter:alpha(opacity=50);opacity:.5}.button.disabled:active,.button[disabled=disabled]:active,.button[disabled]:active{top:0;box-shadow:0 2px #003618}.button[disabled=disabled]{background:#00823b}.col-13{width:13%!important}.col-17{width:17%!important}.col-12{width:12%!important}.col-9{width:9%!important}.col-15{width:15%!important}.lowercase{text-transform:lowercase}.capitalize:first-letter{text-transform:uppercase}.whitespace-inherit{white-space:inherit!important}.top_row{display:table;width:100%}.top_row>div{display:table-cell;width:50%;border-bottom:1px solid #eee}.unassigned{border-top:hidden}.col-16{width:16%!important}.col-10{width:10%!important}.col-14{width:14%!important}.col-19{width:19%!important;padding-left:0!important}.col-18{width:18%!important;padding-left:0!important;padding-right:0!important}.col-21{width:21%!important}.col-20{width:20%!important}.col-11{width:11%!important}.col-37{width:37%!important}.noborders>td{border-color:transparent;border-top-style:hidden;border-right-style:hidden;border-left-style:hidden}.govuk-button--secondary{margin-bottom:10px}.govuk-summary-list{font-size:19px}.govuk-summary-list__key{width:35%}td{white-space:nowrap;overflow:hidden!important}table{table-layout:fixed;width:100%}th,td{word-wrap:break-word}.alignright{text-align:right}.paddingright{padding-right:0}\n"] }]
    }], function () { return [{ type: i1$2.Router }, { type: BulkScaningPaymentService }, { type: PaymentLibComponent }, { type: PaymentViewService }, { type: OrderslistService }]; }, { FEE_RECORDS_EXISTS: [{
            type: Input,
            args: ['FEE_RECORDS_EXISTS']
        }], PAYMENTREF: [{
            type: Input,
            args: ['PAYMENTREF']
        }], ISTURNOFF: [{
            type: Input,
            args: ['ISTURNOFF']
        }], IS_BUTTON_ENABLE: [{
            type: Input,
            args: ['IS_BUTTON_ENABLE']
        }], IS_OS_AMT_AVAILABLE: [{
            type: Input,
            args: ['IS_OS_AMT_AVAILABLE']
        }], ISSFENABLE: [{
            type: Input,
            args: ['ISSFENABLE']
        }], PAYMENTSLENGTH: [{
            type: Input,
            args: ['PAYMENTSLENGTH']
        }], LEVEL: [{
            type: Input,
            args: ['LEVEL']
        }], selectedUnprocessedFeeEvent: [{
            type: Output
        }], getUnprocessedFeeCount: [{
            type: Output
        }] }); })();

class IPutNotificationRequest {
    recipient_email_address;
    recipient_postal_address;
    constructor(contactDetails, notificationType) {
        if (notificationType === 'EMAIL') {
            this.recipient_email_address = contactDetails;
        }
        else if (notificationType === 'LETTER') {
            this.recipient_postal_address = contactDetails;
        }
    }
}

class IResubmitRefundRequest {
    refund_reason;
    amount;
    contact_details;
    refund_fees;
    constructor(refund_reason, amount, contact_details, refund_fees) {
        this.refund_reason = refund_reason;
        this.amount = amount;
        this.contact_details = contact_details;
        this.refund_fees = refund_fees;
    }
}

function RefundStatusComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 1)(2, "h2", 2);
    i0.ɵɵtext(3, " Error in processing the request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 3);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r0.errorMessage, " ");
} }
function RefundStatusComponent_ng_container_1_tbody_15_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 6)(1, "td", 16);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 17);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "number");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 16);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 16);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 16);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 16)(14, "a", 18);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_1_tbody_15_tr_1_Template_a_click_14_listener() { const restoredCtx = i0.ɵɵrestoreView(_r17); const refundList_r15 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r16.goToRefundView(refundList_r15, "casetransactions")); });
    i0.ɵɵtext(15, "Review");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const refundList_r15 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(refundList_r15 == null ? null : refundList_r15.refund_status["name"]);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(5, 5, refundList_r15 == null ? null : refundList_r15.amount, ".2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind2(8, 8, refundList_r15 == null ? null : refundList_r15.date_updated, "dd MMM yyyy"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(refundList_r15 == null ? null : refundList_r15.refund_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", refundList_r15 == null ? null : refundList_r15.reason, "");
} }
function RefundStatusComponent_ng_container_1_tbody_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 14);
    i0.ɵɵtemplate(1, RefundStatusComponent_ng_container_1_tbody_15_tr_1_Template, 16, 11, "tr", 15);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r12.rejectedRefundList);
} }
function RefundStatusComponent_ng_container_1_tbody_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 14)(1, "td", 19);
    i0.ɵɵtext(2, "No refunds recorded");
    i0.ɵɵelementEnd()();
} }
function RefundStatusComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "table", 4)(2, "thead", 5)(3, "tr", 6)(4, "td", 7);
    i0.ɵɵtext(5, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 8);
    i0.ɵɵtext(7, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 9);
    i0.ɵɵtext(9, "Date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 10);
    i0.ɵɵtext(11, "Refund reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 11);
    i0.ɵɵtext(13, "Reason");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(14, "td", 12);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(15, RefundStatusComponent_ng_container_1_tbody_15_Template, 2, 1, "tbody", 13);
    i0.ɵɵtemplate(16, RefundStatusComponent_ng_container_1_tbody_16_Template, 3, 0, "tbody", 13);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(15);
    i0.ɵɵproperty("ngIf", (ctx_r1.rejectedRefundList == null ? null : ctx_r1.rejectedRefundList.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r1.rejectedRefundList == null ? null : ctx_r1.rejectedRefundList.length) === 0);
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const notification_r23 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", notification_r23 == null ? null : notification_r23.contact_details == null ? null : notification_r23.contact_details.email == null ? null : notification_r23.contact_details.email.trim(), " ");
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const notification_r23 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", notification_r23 == null ? null : notification_r23.contact_details == null ? null : notification_r23.contact_details.address_line == null ? null : notification_r23.contact_details.address_line.trim(), " ", notification_r23 == null ? null : notification_r23.contact_details == null ? null : notification_r23.contact_details.city == null ? null : notification_r23.contact_details.city.trim(), " ", notification_r23 == null ? null : notification_r23.contact_details == null ? null : notification_r23.contact_details.county == null ? null : notification_r23.contact_details.county.trim(), " ", notification_r23 == null ? null : notification_r23.contact_details == null ? null : notification_r23.contact_details.country == null ? null : notification_r23.contact_details.country.trim(), " ", notification_r23 == null ? null : notification_r23.contact_details == null ? null : notification_r23.contact_details.postal_code == null ? null : notification_r23.contact_details.postal_code.trim(), " ");
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_a_7_Template(rf, ctx) { if (rf & 1) {
    const _r36 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 34);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_a_7_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r36); const i_r24 = i0.ɵɵnextContext(2).index; const ctx_r34 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r34.showNotificationSentView(i_r24)); });
    i0.ɵɵtext(1, "View");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_a_8_Template(rf, ctx) { if (rf & 1) {
    const _r38 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 34);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_a_8_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r37.hideNotificationSentView()); });
    i0.ɵɵtext(1, "Hide");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_Template(rf, ctx) { if (rf & 1) {
    const _r41 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 16)(1, "a", 34);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r41); const notification_r23 = i0.ɵɵnextContext().$implicit; const ctx_r39 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r39.putResend(notification_r23)); });
    i0.ɵɵtext(2, "Resend");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\u00A0\u00A0|\u00A0\u00A0");
    i0.ɵɵelementStart(4, "a", 34);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_Template_a_click_4_listener() { i0.ɵɵrestoreView(_r41); const notification_r23 = i0.ɵɵnextContext().$implicit; const ctx_r42 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r42.gotoEditAddressDetails(notification_r23)); });
    i0.ɵɵtext(5, "Edit details");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\u00A0\u00A0|\u00A0\u00A0");
    i0.ɵɵtemplate(7, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_a_7_Template, 2, 0, "a", 35);
    i0.ɵɵtemplate(8, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_a_8_Template, 2, 0, "a", 35);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r24 = i0.ɵɵnextContext().index;
    const ctx_r27 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", !ctx_r27.notificationSentView || i_r24 != ctx_r27.notificationSentViewIndex);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", i_r24 === ctx_r27.notificationSentViewIndex && ctx_r27.notificationSentView);
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r49 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 34);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_a_1_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r49); const i_r24 = i0.ɵɵnextContext(2).index; const ctx_r47 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r47.showNotificationSentView(i_r24)); });
    i0.ɵɵtext(1, "View");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r51 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 34);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_a_2_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r51); const ctx_r50 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r50.hideNotificationSentView()); });
    i0.ɵɵtext(1, "Hide");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 16);
    i0.ɵɵtemplate(1, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_a_1_Template, 2, 0, "a", 35);
    i0.ɵɵtemplate(2, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_a_2_Template, 2, 0, "a", 35);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r24 = i0.ɵɵnextContext().index;
    const ctx_r28 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r28.notificationSentView || i_r24 != ctx_r28.notificationSentViewIndex);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", i_r24 === ctx_r28.notificationSentViewIndex && ctx_r28.notificationSentView);
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_tr_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr")(1, "td", 36);
    i0.ɵɵelement(2, "app-notification-preview", 37);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const notification_r23 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("previewJourney", "Notifications sent")("notificationSent", notification_r23 == null ? null : notification_r23.sent_notification);
} }
function RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tr", 6)(2, "td", 16);
    i0.ɵɵtext(3);
    i0.ɵɵpipe(4, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "td", 16);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 32);
    i0.ɵɵtemplate(8, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_div_8_Template, 5, 1, "div", 0);
    i0.ɵɵtemplate(9, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_div_9_Template, 5, 5, "div", 0);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(10, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_10_Template, 9, 2, "td", 33);
    i0.ɵɵtemplate(11, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_td_11_Template, 3, 2, "td", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(12, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_tr_12_Template, 3, 2, "tr", 0);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const notification_r23 = ctx.$implicit;
    const i_r24 = ctx.index;
    const ctx_r22 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(4, 7, notification_r23.date_created, "dd MMMM yyyy HH:mm:ss"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r22.orderParty);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", (notification_r23 == null ? null : notification_r23.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (notification_r23 == null ? null : notification_r23.notification_type) === "LETTER");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", i_r24 === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", i_r24 > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", i_r24 === ctx_r22.notificationSentViewIndex && ctx_r22.notificationSentView);
} }
function RefundStatusComponent_ng_container_2_tbody_46_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 14);
    i0.ɵɵtemplate(1, RefundStatusComponent_ng_container_2_tbody_46_ng_container_1_Template, 13, 10, "ng-container", 31);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r18.notificationList);
} }
function RefundStatusComponent_ng_container_2_tbody_47_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 14)(1, "tr", 6)(2, "td", 38);
    i0.ɵɵtext(3, "No record found ... ");
    i0.ɵɵelementEnd()()();
} }
function RefundStatusComponent_ng_container_2_div_52_tbody_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 14)(1, "tr", 6)(2, "td", 16);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "td", 16);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 16);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 16);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const refundStatusHistory_r55 = ctx.$implicit;
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(refundStatusHistory_r55.status);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(6, 4, refundStatusHistory_r55.date_created, "dd MMMM yyyy HH:mm:ss"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(refundStatusHistory_r55.created_by);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(refundStatusHistory_r55.notes);
} }
function RefundStatusComponent_ng_container_2_div_52_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "table", 4)(2, "thead", 5)(3, "tr", 6)(4, "td", 28);
    i0.ɵɵtext(5, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 29);
    i0.ɵɵtext(7, "Date and time");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 30);
    i0.ɵɵtext(9, "Users");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 30);
    i0.ɵɵtext(11, "Notes");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(12, RefundStatusComponent_ng_container_2_div_52_tbody_12_Template, 11, 7, "tbody", 39);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(12);
    i0.ɵɵproperty("ngForOf", ctx_r20.refundStatusHistories);
} }
function RefundStatusComponent_ng_container_2_ng_container_53_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r59 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "br");
    i0.ɵɵelementStart(2, "button", 40);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_ng_container_53_div_1_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r58.gotoReviewAndReSubmitPage()); });
    i0.ɵɵtext(3, "Change refund details");
    i0.ɵɵelementEnd()();
} }
function RefundStatusComponent_ng_container_2_ng_container_53_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r61 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "br");
    i0.ɵɵelementStart(2, "button", 41);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_ng_container_53_div_2_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r61); const ctx_r60 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r60.goToRefundProcessComponent(ctx_r60.refundlist.refund_reference, ctx_r60.refundlist)); });
    i0.ɵɵtext(3, "Process refund");
    i0.ɵɵelementEnd()();
} }
function RefundStatusComponent_ng_container_2_ng_container_53_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, RefundStatusComponent_ng_container_2_ng_container_53_div_1_Template, 4, 0, "div", 0);
    i0.ɵɵtemplate(2, RefundStatusComponent_ng_container_2_ng_container_53_div_2_Template, 4, 0, "div", 0);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r21.refundButtonState === "Update required");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r21.isProcessRefund && !ctx_r21.isLastUpdatedByCurrentUser && ctx_r21.refundButtonState === "Sent for approval");
} }
function RefundStatusComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r63 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 20)(2, "ol", 21)(3, "li", 22)(4, "a", 23);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_2_Template_a_click_4_listener() { i0.ɵɵrestoreView(_r63); const ctx_r62 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r62.loadRefundListPage()); });
    i0.ɵɵtext(5, "Back");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(6, "h2", 24);
    i0.ɵɵtext(7, "Refund details");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "table")(9, "tbody")(10, "tr", 25)(11, "td", 26);
    i0.ɵɵtext(12, "Refund reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td");
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "tr", 25)(16, "td", 26);
    i0.ɵɵtext(17, "Payment to be refunded");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td");
    i0.ɵɵtext(19);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(20, "tr", 25)(21, "td", 26);
    i0.ɵɵtext(22, "Reason for refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "td");
    i0.ɵɵtext(24);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(25, "tr", 25)(26, "td", 26);
    i0.ɵɵtext(27, "Amount refunded");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(28, "td");
    i0.ɵɵtext(29);
    i0.ɵɵpipe(30, "number");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(31, "div");
    i0.ɵɵelement(32, "br");
    i0.ɵɵelementStart(33, "h2", 27);
    i0.ɵɵtext(34, "Notifications sent");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(35, "table", 4)(36, "thead", 5)(37, "tr", 6)(38, "td", 28);
    i0.ɵɵtext(39, "Date and time");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(40, "td", 29);
    i0.ɵɵtext(41, "Sent to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(42, "td", 30);
    i0.ɵɵtext(43, "Sent via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(44, "td", 30);
    i0.ɵɵtext(45, "Actions");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(46, RefundStatusComponent_ng_container_2_tbody_46_Template, 2, 1, "tbody", 13);
    i0.ɵɵtemplate(47, RefundStatusComponent_ng_container_2_tbody_47_Template, 4, 0, "tbody", 13);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(48, "div");
    i0.ɵɵelement(49, "br");
    i0.ɵɵelementStart(50, "h2", 27);
    i0.ɵɵtext(51, "Refund status history");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(52, RefundStatusComponent_ng_container_2_div_52_Template, 13, 1, "div", 0);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(53, RefundStatusComponent_ng_container_2_ng_container_53_Template, 3, 2, "ng-container", 0);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(14);
    i0.ɵɵtextInterpolate(ctx_r2.refundlist == null ? null : ctx_r2.refundlist.refund_reference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r2.refundlist == null ? null : ctx_r2.refundlist.payment_reference);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r2.refundlist == null ? null : ctx_r2.refundlist.reason);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\u00A3", i0.ɵɵpipeBind2(30, 8, ctx_r2.refundlist == null ? null : ctx_r2.refundlist.amount, ".2"), "");
    i0.ɵɵadvance(17);
    i0.ɵɵproperty("ngIf", ctx_r2.notificationList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r2.notificationList);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r2.refundStatusHistories);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.viewName === "refundview" && !ctx_r2.isFromPayBubble && !ctx_r2.isResendOperationSuccess && !ctx_r2.isEditDetailsClicked);
} }
function RefundStatusComponent_ng_container_3_a_25_Template(rf, ctx) { if (rf & 1) {
    const _r73 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 55);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_a_25_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r73); const ctx_r72 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r72.gotoRefundReasonPage(ctx_r72.refundlist == null ? null : ctx_r72.refundlist.reason)); });
    i0.ɵɵtext(1, "Change");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_3_a_32_Template(rf, ctx) { if (rf & 1) {
    const _r75 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 55);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_a_32_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r75); const ctx_r74 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r74.gotoAmountPage()); });
    i0.ɵɵtext(1, "Change");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_3_div_42_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 56)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r66 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r66.refundlist == null ? null : ctx_r66.refundlist.contact_details == null ? null : ctx_r66.refundlist.contact_details.email == null ? null : ctx_r66.refundlist.contact_details.email.trim(), " ");
} }
function RefundStatusComponent_ng_container_3_div_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 56)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r67 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r67.refundlist == null ? null : ctx_r67.refundlist.contact_details == null ? null : ctx_r67.refundlist.contact_details.address_line == null ? null : ctx_r67.refundlist.contact_details.address_line.trim(), " ", ctx_r67.refundlist == null ? null : ctx_r67.refundlist.contact_details == null ? null : ctx_r67.refundlist.contact_details.city == null ? null : ctx_r67.refundlist.contact_details.city.trim(), " ", ctx_r67.refundlist == null ? null : ctx_r67.refundlist.contact_details == null ? null : ctx_r67.refundlist.contact_details.county == null ? null : ctx_r67.refundlist.contact_details.county.trim(), " ", ctx_r67.refundlist == null ? null : ctx_r67.refundlist.contact_details == null ? null : ctx_r67.refundlist.contact_details.country == null ? null : ctx_r67.refundlist.contact_details.country.trim(), " ", ctx_r67.refundlist == null ? null : ctx_r67.refundlist.contact_details == null ? null : ctx_r67.refundlist.contact_details.postal_code == null ? null : ctx_r67.refundlist.contact_details.postal_code.trim(), " ");
} }
function RefundStatusComponent_ng_container_3_a_44_Template(rf, ctx) { if (rf & 1) {
    const _r77 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 57);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_a_44_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r77); const ctx_r76 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r76.gotoEditDetailsPage(ctx_r76.refundlist == null ? null : ctx_r76.refundlist.contact_details, "reviewandsubmitEditview")); });
    i0.ɵɵtext(1, " Change ");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_3_a_50_Template(rf, ctx) { if (rf & 1) {
    const _r79 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 57);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_a_50_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r79); const ctx_r78 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r78.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_3_a_51_Template(rf, ctx) { if (rf & 1) {
    const _r81 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 57);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_a_51_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r81); const ctx_r80 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r80.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_3_app_notification_preview_52_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 58);
} if (rf & 2) {
    const ctx_r71 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("paymentReference", ctx_r71.refundlist == null ? null : ctx_r71.refundlist.payment_reference)("payment", ctx_r71.paymentObj)("contactDetails", ctx_r71.refundlist == null ? null : ctx_r71.refundlist.contact_details)("refundReason", ctx_r71.refundlist == null ? null : ctx_r71.refundlist.reason_code)("refundAmount", ctx_r71.changedAmount ? ctx_r71.changedAmount : ctx_r71.refundlist == null ? null : ctx_r71.refundlist.amount)("refundReference", ctx_r71.refundlist == null ? null : ctx_r71.refundlist.refund_reference);
} }
function RefundStatusComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r83 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "h1", 43);
    i0.ɵɵtext(3, "Check your answers");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "table", 4)(5, "tr", 6)(6, "td", 44);
    i0.ɵɵtext(7, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 45);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(10, "tr", 6)(11, "td", 44);
    i0.ɵɵtext(12, "Reason for return");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 45);
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "tr", 6)(16, "td", 44);
    i0.ɵɵtext(17, "Refund reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td", 45);
    i0.ɵɵtext(19);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(20, "tr", 6)(21, "td", 44);
    i0.ɵɵtext(22, "Reason for refund");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "td", 45);
    i0.ɵɵtext(24);
    i0.ɵɵtemplate(25, RefundStatusComponent_ng_container_3_a_25_Template, 2, 0, "a", 46);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(26, "tr", 6)(27, "td", 44);
    i0.ɵɵtext(28, "Refund amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(29, "td", 45);
    i0.ɵɵtext(30);
    i0.ɵɵpipe(31, "number");
    i0.ɵɵtemplate(32, RefundStatusComponent_ng_container_3_a_32_Template, 2, 0, "a", 46);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(33, "tr", 6)(34, "td", 44);
    i0.ɵɵtext(35, "Send to");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(36, "td", 45);
    i0.ɵɵtext(37);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(38, "tr", 6)(39, "td", 44);
    i0.ɵɵtext(40, "Send via");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(41, "td", 16);
    i0.ɵɵtemplate(42, RefundStatusComponent_ng_container_3_div_42_Template, 5, 1, "div", 47);
    i0.ɵɵtemplate(43, RefundStatusComponent_ng_container_3_div_43_Template, 5, 5, "div", 47);
    i0.ɵɵtemplate(44, RefundStatusComponent_ng_container_3_a_44_Template, 2, 0, "a", 48);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(45, "tr", 6)(46, "td", 44);
    i0.ɵɵtext(47, "Notification");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(48, "td", 45);
    i0.ɵɵtext(49);
    i0.ɵɵtemplate(50, RefundStatusComponent_ng_container_3_a_50_Template, 2, 0, "a", 49);
    i0.ɵɵtemplate(51, RefundStatusComponent_ng_container_3_a_51_Template, 2, 0, "a", 49);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(52, RefundStatusComponent_ng_container_3_app_notification_preview_52_Template, 1, 6, "app-notification-preview", 50);
    i0.ɵɵelementStart(53, "div", 51)(54, "button", 52);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_Template_button_click_54_listener($event) { i0.ɵɵrestoreView(_r83); const ctx_r82 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r82.gotoReviewDetailsPage($event)); });
    i0.ɵɵtext(55, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(56, "button", 53);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_Template_button_click_56_listener() { i0.ɵɵrestoreView(_r83); const ctx_r84 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r84.gotoReviewRefundConfirmationPage()); });
    i0.ɵɵtext(57, " Submit refund ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(58, "p")(59, "a", 54);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_3_Template_a_click_59_listener() { i0.ɵɵrestoreView(_r83); const ctx_r85 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r85.loadRefundListPage()); });
    i0.ɵɵtext(60, "Cancel");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(9);
    i0.ɵɵtextInterpolate1("", ctx_r3.refundlist == null ? null : ctx_r3.refundlist.payment_reference, " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r3.refundreason);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("", ctx_r3.refundlist == null ? null : ctx_r3.refundlist.refund_reference, " ");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("", ctx_r3.refundlist == null ? null : ctx_r3.refundlist.reason == null ? null : ctx_r3.refundlist.reason.trim(), " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r3.refundlist == null ? null : ctx_r3.refundlist.reason) !== "Retrospective remission" && (ctx_r3.refundlist == null ? null : ctx_r3.refundlist.reason) !== "Overpayment");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\u00A3", ctx_r3.changedAmount ? ctx_r3.changedAmount : i0.ɵɵpipeBind2(31, 16, ctx_r3.refundlist == null ? null : ctx_r3.refundlist.amount, ".2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", (ctx_r3.refundlist == null ? null : ctx_r3.refundlist.reason) !== "Overpayment");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("", ctx_r3.orderParty, " ");
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", (ctx_r3.refundlist == null ? null : ctx_r3.refundlist.contact_details == null ? null : ctx_r3.refundlist.contact_details.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r3.refundlist == null ? null : ctx_r3.refundlist.contact_details == null ? null : ctx_r3.refundlist.contact_details.notification_type) === "LETTER");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r3.refundlist == null ? null : ctx_r3.refundlist.contact_details) != null);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("", ctx_r3.templateInstructionType, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r3.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.notificationPreview);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("disabled", ctx_r3.isRefundBtnDisabled);
} }
function RefundStatusComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r88 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 59, 60);
    i0.ɵɵelementStart(3, "h1", 24);
    i0.ɵɵtext(4, "Edit contact details");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 61);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 62);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "ccpay-contact-details", 63);
    i0.ɵɵlistener("assignContactDetailsInFefundsList", function RefundStatusComponent_ng_container_4_Template_ccpay_contact_details_assignContactDetailsInFefundsList_10_listener($event) { i0.ɵɵrestoreView(_r88); const ctx_r87 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r87.getContactDetailsForRefundList($event)); })("redirectToIssueRefund", function RefundStatusComponent_ng_container_4_Template_ccpay_contact_details_redirectToIssueRefund_10_listener($event) { i0.ɵɵrestoreView(_r88); const ctx_r89 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r89.gotoRefundReviewAndSubmitViewPageCancelBtnClicked($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "p")(12, "a", 64);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_4_Template_a_click_12_listener() { i0.ɵɵrestoreView(_r88); const ctx_r90 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r90.loadRefundListPage()); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 4, ctx_r4.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Refund reference: ", ctx_r4.refundlist == null ? null : ctx_r4.refundlist.refund_reference, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isEditOperationInRefundList", ctx_r4.isEditDetailsClicked)("addressObj", ctx_r4.notification);
} }
function RefundStatusComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r92 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ccpay-add-remission", 65);
    i0.ɵɵlistener("refundListReason", function RefundStatusComponent_ng_container_5_Template_ccpay_add_remission_refundListReason_1_listener($event) { i0.ɵɵrestoreView(_r92); const ctx_r91 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r91.getRefundListReason($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isFromRefundListPage", true)("viewCompStatus", ctx_r5.viewName)("isRefundRemission", true)("isFromRefundStatusPage", true)("changeRefundReason", ctx_r5.changeRefundReason)("ccdCaseNumber", ctx_r5.ccdCaseNumber)("refundPaymentReference", ctx_r5.refundlist == null ? null : ctx_r5.refundlist.payment_reference);
} }
function RefundStatusComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r94 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ccpay-add-remission", 66);
    i0.ɵɵlistener("refundListAmount", function RefundStatusComponent_ng_container_6_Template_ccpay_add_remission_refundListAmount_1_listener($event) { i0.ɵɵrestoreView(_r94); const ctx_r93 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r93.getRefundAmount($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isFromRefundListPage", true)("viewCompStatus", ctx_r6.viewName)("isRefundRemission", true)("ccdCaseNumber", ctx_r6.ccdCaseNumber)("refundPaymentReference", ctx_r6.refundlist == null ? null : ctx_r6.refundlist.payment_reference);
} }
function RefundStatusComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r96 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ccpay-add-remission", 67);
    i0.ɵɵlistener("refundListAmount", function RefundStatusComponent_ng_container_7_Template_ccpay_add_remission_refundListAmount_1_listener($event) { i0.ɵɵrestoreView(_r96); const ctx_r95 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r95.getRefundAmount($event)); })("refundFees", function RefundStatusComponent_ng_container_7_Template_ccpay_add_remission_refundFees_1_listener($event) { i0.ɵɵrestoreView(_r96); const ctx_r97 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r97.getRefundFees($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isFromRefundListPage", true)("viewCompStatus", ctx_r7.viewName)("isRefundRemission", true)("isFromServiceRequestPage", true)("ccdCaseNumber", ctx_r7.ccdCaseNumber)("refundPaymentReference", ctx_r7.refundlist == null ? null : ctx_r7.refundlist.payment_reference)("isFromRefundStatusPage", true);
} }
function RefundStatusComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r99 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 68)(2, "div")(3, "div", 69)(4, "h1", 70);
    i0.ɵɵtext(5, " Refund submitted ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "div", 71)(7, "p", 72)(8, "strong");
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(10, "h2", 24);
    i0.ɵɵtext(11, "What happens next");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "p", 73);
    i0.ɵɵtext(13);
    i0.ɵɵpipe(14, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "p", 73)(16, "a", 74);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_8_Template_a_click_16_listener() { i0.ɵɵrestoreView(_r99); const ctx_r98 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r98.loadRefundListPage()); });
    i0.ɵɵtext(17, "Return to case");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(9);
    i0.ɵɵtextInterpolate1("Refund reference:", ctx_r8.refundReference, " ");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" A refund request for ", i0.ɵɵpipeBind4(14, 2, ctx_r8.refundAmount, "GBP", "symbol-narrow", "1.2-2"), " has been created and will be passed to a team leader to approve. ");
} }
function RefundStatusComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r101 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 68)(2, "div")(3, "div", 69)(4, "h1", 70);
    i0.ɵɵtext(5, " Notification sent ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "div", 71)(7, "p", 72)(8, "strong");
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(10, "p", 73)(11, "a", 74);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_9_Template_a_click_11_listener() { i0.ɵɵrestoreView(_r101); const ctx_r100 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r100.loadRefundListPage()); });
    i0.ɵɵtext(12, "Return to case");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(9);
    i0.ɵɵtextInterpolate1("Refund reference: ", ctx_r9.refundlist == null ? null : ctx_r9.refundlist.refund_reference, " ");
} }
function RefundStatusComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r104 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 59, 60);
    i0.ɵɵelementStart(3, "h1", 24);
    i0.ɵɵtext(4, "Edit contact details");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "h2", 61);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "ccdHyphens");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "span", 62);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "ccpay-contact-details", 63);
    i0.ɵɵlistener("assignContactDetailsInFefundsList", function RefundStatusComponent_ng_container_10_Template_ccpay_contact_details_assignContactDetailsInFefundsList_10_listener($event) { i0.ɵɵrestoreView(_r104); const ctx_r103 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r103.getContactDetails($event)); })("redirectToIssueRefund", function RefundStatusComponent_ng_container_10_Template_ccpay_contact_details_redirectToIssueRefund_10_listener($event) { i0.ɵɵrestoreView(_r104); const ctx_r105 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r105.gotoRefundViewPageCancelBtnClicked($event)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "p")(12, "a", 64);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_10_Template_a_click_12_listener() { i0.ɵɵrestoreView(_r104); const ctx_r106 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r106.loadRefundListPage()); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("Case reference: ", i0.ɵɵpipeBind1(7, 4, ctx_r10.ccdCaseNumber), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" Refund reference: ", ctx_r10.refundlist == null ? null : ctx_r10.refundlist.refund_reference, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("isEditOperationInRefundList", ctx_r10.isEditDetailsClicked)("addressObj", ctx_r10.notification);
} }
function RefundStatusComponent_ng_container_11_div_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 56)(1, "strong");
    i0.ɵɵtext(2, "Email");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r108 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", ctx_r108.addressDetails == null ? null : ctx_r108.addressDetails.email == null ? null : ctx_r108.addressDetails.email.trim(), " ");
} }
function RefundStatusComponent_ng_container_11_div_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 56)(1, "strong");
    i0.ɵɵtext(2, "Post");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "br");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r109 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate5(" ", ctx_r109.addressDetails == null ? null : ctx_r109.addressDetails.address_line == null ? null : ctx_r109.addressDetails.address_line.trim(), " ", ctx_r109.addressDetails == null ? null : ctx_r109.addressDetails.city == null ? null : ctx_r109.addressDetails.city.trim(), " ", ctx_r109.addressDetails == null ? null : ctx_r109.addressDetails.county == null ? null : ctx_r109.addressDetails.county.trim(), " ", ctx_r109.addressDetails == null ? null : ctx_r109.addressDetails.country == null ? null : ctx_r109.addressDetails.country.trim(), " ", ctx_r109.addressDetails == null ? null : ctx_r109.addressDetails.postal_code == null ? null : ctx_r109.addressDetails.postal_code.trim(), " ");
} }
function RefundStatusComponent_ng_container_11_a_28_Template(rf, ctx) { if (rf & 1) {
    const _r114 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 57);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_11_a_28_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r114); const ctx_r113 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r113.showNotificationPreview()); });
    i0.ɵɵtext(1, " Preview ");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_11_a_29_Template(rf, ctx) { if (rf & 1) {
    const _r116 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 57);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_11_a_29_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r116); const ctx_r115 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r115.hideNotificationPreview()); });
    i0.ɵɵtext(1, " Hide Preview ");
    i0.ɵɵelementEnd();
} }
function RefundStatusComponent_ng_container_11_app_notification_preview_30_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "app-notification-preview", 58);
} if (rf & 2) {
    const ctx_r112 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("paymentReference", ctx_r112.refundlist == null ? null : ctx_r112.refundlist.payment_reference)("payment", ctx_r112.paymentObj)("contactDetails", ctx_r112.addressDetails)("refundReason", ctx_r112.refundlist == null ? null : ctx_r112.refundlist.reason_code)("refundAmount", ctx_r112.refundlist == null ? null : ctx_r112.refundlist.amount)("refundReference", ctx_r112.refundlist == null ? null : ctx_r112.refundlist.refund_reference);
} }
function RefundStatusComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r118 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 75, 60);
    i0.ɵɵelementStart(3, "h1", 24);
    i0.ɵɵtext(4, "Check your answers");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "dl", 76)(6, "div", 77)(7, "dt", 78);
    i0.ɵɵtext(8, " Refund reference ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "dd", 79);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(11, "span", 80);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "div", 77)(13, "dt", 78);
    i0.ɵɵtext(14, " Send via ");
    i0.ɵɵelement(15, "br");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "dd", 79);
    i0.ɵɵtemplate(17, RefundStatusComponent_ng_container_11_div_17_Template, 5, 1, "div", 47);
    i0.ɵɵtemplate(18, RefundStatusComponent_ng_container_11_div_18_Template, 5, 5, "div", 47);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "dd", 80)(20, "a", 81);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_11_Template_a_click_20_listener() { i0.ɵɵrestoreView(_r118); const ctx_r117 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r117.gotoEditDetailsPage(ctx_r117.addressDetails, "refundEditView")); });
    i0.ɵɵtext(21, " Change ");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(22, "div", 77)(23, "dt", 78);
    i0.ɵɵtext(24, " Notification ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(25, "dd", 79);
    i0.ɵɵtext(26);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "span", 80);
    i0.ɵɵtemplate(28, RefundStatusComponent_ng_container_11_a_28_Template, 2, 0, "a", 49);
    i0.ɵɵtemplate(29, RefundStatusComponent_ng_container_11_a_29_Template, 2, 0, "a", 49);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(30, RefundStatusComponent_ng_container_11_app_notification_preview_30_Template, 1, 6, "app-notification-preview", 50);
    i0.ɵɵelementStart(31, "div", 51)(32, "button", 52);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_11_Template_button_click_32_listener() { i0.ɵɵrestoreView(_r118); const ctx_r119 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r119.gotoEditDetailsPage(ctx_r119.addressDetails, "refundEditView")); });
    i0.ɵɵtext(33, " Previous");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(34, "button", 82);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_11_Template_button_click_34_listener() { i0.ɵɵrestoreView(_r118); const ctx_r120 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r120.submitEditDetail()); });
    i0.ɵɵtext(35, " Send notification ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(36, "p")(37, "a", 64);
    i0.ɵɵlistener("click", function RefundStatusComponent_ng_container_11_Template_a_click_37_listener() { i0.ɵɵrestoreView(_r118); const ctx_r121 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r121.loadRefundListPage()); });
    i0.ɵɵtext(38, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.refundlist == null ? null : ctx_r11.refundlist.refund_reference, " ");
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", (ctx_r11.addressDetails == null ? null : ctx_r11.addressDetails.notification_type) === "EMAIL");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r11.addressDetails == null ? null : ctx_r11.addressDetails.notification_type) === "LETTER");
    i0.ɵɵadvance(8);
    i0.ɵɵtextInterpolate1(" ", ctx_r11.templateInstructionType, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r11.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.notificationPreview);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.notificationPreview);
} }
class RefundStatusComponent {
    formBuilder;
    refundService;
    notificationService;
    paymentLibComponent;
    OrderslistService;
    paymentViewService;
    LOGGEDINUSERROLES = [];
    API_ROOT;
    ccdCaseNumber;
    isTurnOff;
    orderParty;
    refundStatusForm;
    selectedRefundReason;
    rejectedRefundList = [];
    notificationList;
    notification;
    approvalStatus = 'Sent for approval';
    rejectStatus = 'Update required';
    errorMessage = null;
    viewName;
    refundReason;
    refundlist;
    bsPaymentDcnNumber;
    isCallFromRefundList;
    refundButtonState = '';
    isAmountEmpty = false;
    isReasonEmpty = false;
    amountHasError = false;
    isRemissionLessThanFeeError = false;
    refundHasError = false;
    refundReasons = [];
    refundStatusHistories;
    refundNotifications;
    isResendOperationSuccess = false;
    isEditDetailsClicked = false;
    isEditAddressDeatilsClicked = false;
    addressDetails;
    refundReference;
    refundAmount;
    refundCode;
    isRefundBtnDisabled = true;
    isFromPayBubble = false;
    oldRefundReason;
    refundreason;
    navigationpage;
    isLastUpdatedByCurrentUser = true;
    isProcessRefund = false;
    changedAmount;
    isRemissionsMatch;
    payment;
    changeRefundReason;
    fees;
    refundFees;
    paymentObj;
    templateInstructionType;
    notificationSentViewIndex = -1;
    notificationPreview = false;
    notificationSentView = false;
    allowedRolesToAccessRefund = ['payments-refund-approver', 'payments-refund', 'payments'];
    constructor(formBuilder, refundService, notificationService, paymentLibComponent, OrderslistService, paymentViewService) {
        this.formBuilder = formBuilder;
        this.refundService = refundService;
        this.notificationService = notificationService;
        this.paymentLibComponent = paymentLibComponent;
        this.OrderslistService = OrderslistService;
        this.paymentViewService = paymentViewService;
    }
    ngOnInit() {
        this.resetRemissionForm([false, false, false, false], 'All');
        this.bsPaymentDcnNumber = this.paymentLibComponent.bspaymentdcn;
        this.isCallFromRefundList = this.paymentLibComponent.isCallFromRefundList;
        if (this.API_ROOT == 'api/payment-history') {
            this.isFromPayBubble = true;
        }
        if (this.paymentLibComponent.isRefundStatusView) {
            this.viewName = 'refundview';
            this.OrderslistService.getRefundView().subscribe((data) => this.refundlist = data);
            this.OrderslistService.getCCDCaseNumberforRefund.subscribe((data) => this.ccdCaseNumber = data);
        }
        else {
            this.viewName = 'refundstatuslist';
            this.refundService.getRefundStatusList(this.ccdCaseNumber).subscribe(refundList => {
                this.rejectedRefundList = refundList['refund_list'];
            }),
                (error) => {
                    this.errorMessage = error.replace(/"/g, "");
                };
        }
        this.refundStatusForm = this.formBuilder.group({
            amount: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^[0-9]+(\.[0-9]{1,2})?$')
            ])),
            refundReason: new FormControl('', Validators.compose([Validators.required])),
            reason: new FormControl()
        });
        if (this.refundlist !== undefined) {
            this.getRefundsNotification();
            this.getRefundsStatusHistoryList();
            if (this.LOGGEDINUSERROLES.some(i => i.includes('payments-refund-approver'))) {
                this.isProcessRefund = true;
                this.refundButtonState = this.refundlist.refund_status.name;
                return;
            }
            if (this.LOGGEDINUSERROLES.some(i => i.includes('payments-refund'))) {
                this.isProcessRefund = false;
                this.refundButtonState = this.refundlist.refund_status.name;
            }
        }
    }
    getRefundsStatusHistoryList() {
        if (this.refundlist !== undefined) {
            this.refundService.getRefundStatusHistory(this.refundlist.refund_reference).subscribe(statusHistoryList => {
                this.refundStatusHistories = statusHistoryList.status_history_dto_list;
                this.isLastUpdatedByCurrentUser = statusHistoryList.last_updated_by_current_user;
            }),
                (error) => {
                    this.errorMessage = error.replace(/"/g, "");
                };
        }
    }
    getRefundsNotification() {
        this.notificationService.getRefundNotification(this.refundlist.refund_reference).subscribe(refundsNotification => {
            this.notificationList = refundsNotification['notifications'];
        }),
            (error) => {
                this.errorMessage = error.replace(/"/g, "");
            };
    }
    goToRefundView(refundlist, navigationpage) {
        this.OrderslistService.setRefundView(refundlist);
        this.OrderslistService.setCCDCaseNumber(this.ccdCaseNumber);
        this.paymentLibComponent.viewName = 'refundstatuslist';
        this.paymentLibComponent.isRefundStatusView = true;
        this.refundlist = refundlist;
        this.OrderslistService.setnavigationPage(navigationpage);
    }
    loadCaseTransactionPage() {
        this.OrderslistService.setnavigationPage('casetransactions');
        this.OrderslistService.setisFromServiceRequestPage(false);
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.ISBSENABLE = true;
        this.paymentLibComponent.isRefundStatusView = false;
    }
    loadRefundListPage() {
        this.OrderslistService.getnavigationPageValue().subscribe((data) => this.navigationpage = data);
        if (this.navigationpage === 'casetransactions') {
            this.loadCaseTransactionPage();
        }
        else {
            this.paymentLibComponent.viewName = 'refund-list';
        }
    }
    gotoReviewDetailsPage(event) {
        // event.preventDefault();
        this.errorMessage = false;
        this.paymentLibComponent.isRefundStatusView = true;
        this.ngOnInit();
    }
    gotoReviewAndReSubmitPage() {
        this.viewName = 'reviewandsubmitview';
        this.getTemplateInstructionType(this.paymentObj, this.refundlist.payment_reference);
        this.oldRefundReason = this.refundlist.reason;
        this.changedAmount = this.refundlist.amount;
        this.refundreason = this.refundStatusHistories.filter(data => data.status.toLowerCase() === 'update required')[0].notes;
        this.refundService.getRefundReasons().subscribe(refundReasons => {
            this.refundReasons = refundReasons;
        });
    }
    gotoRefundReasonPage(refundReason) {
        this.isRefundBtnDisabled = false;
        this.paymentLibComponent.REFUNDLIST = "true";
        this.paymentLibComponent.isFromRefundStatusPage = true;
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.errorMessage = false;
        this.changeRefundReason = refundReason;
        this.viewName = 'issuerefundpage1';
    }
    gotoAmountPage() {
        this.errorMessage = false;
        this.paymentLibComponent.REFUNDLIST = "true";
        this.isRefundBtnDisabled = false;
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.paymentLibComponent.isFromRefundStatusPage = true;
        if (this.refundlist.reason == 'Retrospective remission') {
            this.viewName = 'processretroremissonpage';
        }
        else {
            this.viewName = 'issuerefund';
        }
    }
    goToReviewAndSubmitView() {
        const remissionctrls = this.refundStatusForm.controls;
        if (this.refundStatusForm.dirty) {
            if (remissionctrls['amount'].value == '') {
                this.resetRemissionForm([true, false, false, false], 'amount');
            }
            else if (remissionctrls['amount'].value != '' && remissionctrls['amount'].invalid) {
                this.resetRemissionForm([false, true, false, false], 'amount');
            }
            else if (remissionctrls['reason'].value == '') {
                this.resetRemissionForm([false, false, false, true], 'reason');
            }
            else {
                this.refundlist.reason = remissionctrls['reason'].value;
                this.viewName = 'reviewandsubmitview';
            }
        }
    }
    resetRemissionForm(val, field) {
        if (field === 'All') {
            this.isAmountEmpty = val[0];
            this.amountHasError = val[1];
            this.isRemissionLessThanFeeError = val[2];
            this.isReasonEmpty = val[3];
        }
        else if (field === 'amount' || field === 'All') {
            this.isAmountEmpty = val[0];
            this.amountHasError = val[1];
            this.isRemissionLessThanFeeError = val[2];
        }
        else if (field === 'reason' || field === 'All') {
            this.isReasonEmpty = val[3];
        }
    }
    selectRadioButton(key, value) {
        this.refundHasError = false;
        this.selectedRefundReason = key;
        if (key === 'Other') {
            this.refundHasError = false;
            this.refundReason = key;
        }
    }
    getRefundListReason(refundListReason) {
        if (this.paymentLibComponent.isFromRefundStatusPage && !this.paymentLibComponent.iscancelClicked) {
            if (refundListReason.reason != undefined && refundListReason.reason != null && refundListReason.reason != this.refundlist.reason) {
                this.refundlist.reason = refundListReason.reason;
                this.refundlist.reason_code = refundListReason.code.split('-')[0].trim();
                this.refundlist.code = refundListReason.code;
                this.refundCode = refundListReason.code;
            }
        }
        else {
            this.isRefundBtnDisabled = true;
        }
        this.notificationPreview = false;
        this.viewName = 'reviewandsubmitview';
        this.paymentLibComponent.CCD_CASE_NUMBER = this.ccdCaseNumber;
    }
    getRefundAmount(amount) {
        if (this.paymentLibComponent.isFromRefundStatusPage && !this.paymentLibComponent.iscancelClicked) {
            if (amount > 0) {
                this.changedAmount = amount;
                // this.refundlist.amount = amount;
            }
        }
        else {
            this.isRefundBtnDisabled = true;
        }
        this.notificationPreview = false;
        this.viewName = 'reviewandsubmitview';
        this.paymentLibComponent.CCD_CASE_NUMBER = this.ccdCaseNumber;
    }
    getRefundFees(fees) {
        this.fees = fees;
        this.refundFees = this.fees.map(obj => ({
            fee_id: obj.id,
            code: obj.code,
            version: obj.version,
            volume: obj.updated_volume ? obj.updated_volume : obj.volume,
            refund_amount: obj.refund_amount
        }));
    }
    gotoReviewRefundConfirmationPage() {
        // if (this.oldRefundReason === this.refundlist.reason) {
        //   this.refundCode = '';
        // }
        if (this.refundFees === undefined) {
            this.refundFees = this.refundlist['refund_fees'];
        }
        if (this.refundlist.reason == 'Retrospective remission') {
            this.refundFees[0].refund_amount = this.changedAmount;
        }
        this.refundCode = this.refundlist.code;
        const resubmitRequest = new IResubmitRefundRequest(this.refundCode, this.changedAmount, this.refundlist.contact_details, this.refundFees);
        this.refundService.patchResubmitRefund(resubmitRequest, this.refundlist.refund_reference).subscribe(response => {
            if (JSON.parse(response)) {
                this.refundReference = JSON.parse(response).refund_reference;
                this.refundAmount = JSON.parse(response).refund_amount;
                this.viewName = 'reviewrefundconfirmationpage';
            }
        }, (error) => {
            this.errorMessage = error.replace(/"/g, "");
        });
    }
    gotoEditAddressDetails(note) {
        this.notification = note;
        this.isEditDetailsClicked = true;
        this.viewName = 'refundEditView';
    }
    getContactDetails(obj) {
        this.addressDetails = obj;
        this.getTemplateInstructionType(this.paymentObj, this.refundlist.payment_reference);
        this.notificationPreview = false;
        this.viewName = 'revieweditdetailsconfirmationpage';
    }
    getContactDetailsForRefundList(obj) {
        this.refundlist.contact_details = obj;
        this.getTemplateInstructionType(this.paymentObj, this.refundlist.payment_reference);
        this.notificationPreview = false;
        this.isEditDetailsClicked = false;
        this.isRefundBtnDisabled = false;
        this.viewName = 'reviewandsubmitview';
    }
    gotoEditDetailsPage(note, view) {
        if (note) {
            this.notification = { contact_details: note, notification_type: note.notification_type };
        }
        this.isEditDetailsClicked = true;
        this.viewName = view;
    }
    submitEditDetail() {
        this.isResendOperationSuccess = false;
        const contactDetails = this.addressDetails.notification_type === 'EMAIL' ? this.addressDetails.email :
            {
                address_line: this.addressDetails.address_line,
                city: this.addressDetails.city,
                county: this.addressDetails.county,
                country: this.addressDetails.country,
                postal_code: this.addressDetails.postal_code,
            };
        const resendRequest = new IPutNotificationRequest(contactDetails, this.addressDetails.notification_type);
        this.refundService.putResendOrEdit(resendRequest, this.refundlist.refund_reference, this.addressDetails.notification_type).subscribe((response) => {
            this.isResendOperationSuccess = response;
        }, (error) => {
            this.isResendOperationSuccess = false;
            this.errorMessage = error.replace(/"/g, "");
        });
    }
    putResend(notification) {
        this.isResendOperationSuccess = false;
        const contactDetails = notification.notification_type === 'EMAIL' ? notification.contact_details.email :
            {
                address_line: notification.contact_details.address_line,
                city: notification.contact_details.city,
                county: notification.contact_details.county,
                country: notification.contact_details.country,
                postal_code: notification.contact_details.postal_code,
            };
        const resendRequest = new IPutNotificationRequest(contactDetails, notification.notification_type);
        this.refundService.putResendOrEdit(resendRequest, this.refundlist.refund_reference, notification.notification_type).subscribe((response) => {
            this.isResendOperationSuccess = response;
        }, (error) => {
            this.isResendOperationSuccess = false;
            this.errorMessage = error.replace(/"/g, "");
        });
    }
    gotoRefundViewPageCancelBtnClicked(event) {
        event.preventDefault();
        this.isEditDetailsClicked = false;
        this.viewName = 'refundview';
    }
    gotoRefundReviewAndSubmitViewPageCancelBtnClicked(event) {
        event.preventDefault();
        this.isEditDetailsClicked = false;
        this.viewName = 'reviewandsubmitview';
    }
    goToRefundProcessComponent(refundReference, refundList) {
        this.paymentLibComponent.refundlistsource = refundList;
        this.paymentLibComponent.refundReference = refundReference;
        this.paymentLibComponent.isFromPayBubble = true;
        this.paymentLibComponent.viewName = 'process-refund';
    }
    getTemplateInstructionType(payment, paymentReference) {
        if (payment == undefined || payment == null || payment.reference != paymentReference) {
            this.paymentViewService.getPaymentDetails(paymentReference).subscribe(payment => {
                this.paymentObj = payment;
                this.paymentObj.reference = paymentReference;
                this.templateInstructionType = this.notificationService.getNotificationInstructionType(this.paymentObj.channel, this.paymentObj.method);
            }, (error) => {
                this.templateInstructionType = 'Template';
            });
        }
        else {
            this.templateInstructionType = this.notificationService.getNotificationInstructionType(payment.channel, payment.method);
        }
    }
    showNotificationPreview() {
        this.notificationPreview = true;
    }
    hideNotificationPreview() {
        this.notificationPreview = false;
    }
    showNotificationSentView(index) {
        this.notificationSentViewIndex = index;
        this.notificationSentView = true;
    }
    hideNotificationSentView() {
        this.notificationSentViewIndex = -1;
        this.notificationSentView = false;
    }
    static ɵfac = function RefundStatusComponent_Factory(t) { return new (t || RefundStatusComponent)(i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(RefundsService), i0.ɵɵdirectiveInject(NotificationService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(OrderslistService), i0.ɵɵdirectiveInject(PaymentViewService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: RefundStatusComponent, selectors: [["ccpay-refund-status"]], inputs: { LOGGEDINUSERROLES: "LOGGEDINUSERROLES", API_ROOT: "API_ROOT", ccdCaseNumber: "ccdCaseNumber", isTurnOff: "isTurnOff", orderParty: "orderParty" }, decls: 12, vars: 12, consts: [[4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header", "col-16"], ["scope", "col", 1, "govuk-table__header", "col-11"], ["scope", "col", 1, "govuk-table__header", "col-18"], ["scope", "col", 1, "govuk-table__header", "col-25"], ["scope", "col", 1, "govuk-table__header", "col-24"], ["scope", "col", 1, "govuk-table__header"], ["class", "govuk-table__body", 4, "ngIf"], [1, "govuk-table__body"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], [1, "govuk-table__cell", "whitespace-inherit"], [1, "channel", "govuk-table__cell", "whitespace-inherit"], ["href", "javascript:void(0)", 3, "click"], ["colspan", "6", 1, "govuk-table__cell"], [1, "govuk-breadcrumbs"], [1, "govuk-breadcrumbs__list"], [1, "govuk-breadcrumbs__list-item"], ["href", "javascript:void(0)", 1, "govuk-back-link", "govuk-label", 3, "click"], [1, "govuk-heading-l"], [1, "section"], [1, "bold", "tb-col-w"], [1, "govuk-heading-m"], ["scope", "col", 1, "govuk-table__header", "col-24", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "col-27", "whitespace-inherit"], ["scope", "col", 1, "govuk-table__header", "whitespace-inherit"], [4, "ngFor", "ngForOf"], [1, "govuk-table__cell", "whitespace-inherit", "col-40"], ["class", "govuk-table__cell whitespace-inherit", 4, "ngIf"], ["href", "Javascript:void(0);", 3, "click"], ["href", "Javascript:void(0);", 3, "click", 4, "ngIf"], ["colspan", "4", 1, "govuk-table__cell"], [3, "previewJourney", "notificationSent"], ["colspan", "4", 1, "govuk-table__cell", "whitespace-inherit"], ["class", "govuk-table__body", 4, "ngFor", "ngForOf"], ["type", "submit", 1, "button", "govuk-button--secondary", "btnmargin", 3, "click"], ["type", "submit", 1, "button", "govuk-button--secondary", 3, "click"], [1, "govuk-warning-text"], [1, "heading-large"], [1, "govuk-table__cell", "govuk-!-font-weight-bold"], [1, "govuk-table__cell"], ["class", "govuk-link right", 3, "click", 4, "ngIf"], ["class", "contactDetails-width font-size-19px", 4, "ngIf"], ["class", "govuk-link", "href", "Javascript:void(0)", "class", "govuk-link right", 3, "click", 4, "ngIf"], ["href", "Javascript:void(0)", "class", "govuk-link right", 3, "click", 4, "ngIf"], [3, "paymentReference", "payment", "contactDetails", "refundReason", "refundAmount", "refundReference", 4, "ngIf"], [1, "govuk-button-group"], [1, "govuk-button", "govuk-button--secondary", 3, "click"], ["data-module", "govuk-button", 1, "govuk-button", "button", 3, "disabled", "click"], ["href", "javascript:void(0)", "data-module", "govuk-button", 1, "govuk-link", 3, "click"], [1, "govuk-link", "right", 3, "click"], [1, "contactDetails-width", "font-size-19px"], ["href", "Javascript:void(0)", 1, "govuk-link", "right", 3, "click"], [3, "paymentReference", "payment", "contactDetails", "refundReason", "refundAmount", "refundReference"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "EDITDETAILSPAGE"], ["myInput", ""], [1, "govuk-heading-m", "govuk-font19px"], [1, "govuk-hint", "font-size-19px"], [3, "isEditOperationInRefundList", "addressObj", "assignContactDetailsInFefundsList", "redirectToIssueRefund"], ["data-module", "govuk-button", 1, "govuk-link", 3, "click"], [3, "isFromRefundListPage", "viewCompStatus", "isRefundRemission", "isFromRefundStatusPage", "changeRefundReason", "ccdCaseNumber", "refundPaymentReference", "refundListReason"], [3, "isFromRefundListPage", "viewCompStatus", "isRefundRemission", "ccdCaseNumber", "refundPaymentReference", "refundListAmount"], [3, "isFromRefundListPage", "viewCompStatus", "isRefundRemission", "isFromServiceRequestPage", "ccdCaseNumber", "refundPaymentReference", "isFromRefundStatusPage", "refundListAmount", "refundFees"], [1, "govuk-grid-row", "pagesize"], [1, "govuk-panel", "govuk-panel--confirmation"], [1, "govuk-panel__title"], [1, "govuk-panel__body"], [1, "govuk-body", "white"], [1, "govuk-body"], ["href", "javascript:void(0)", 1, "govuk-link", 3, "click"], ["type", "hidden", "id", "iFrameDrivenImageValue", "value", "EDITDETAILSCHECKANDANSWERPAGE"], [1, "govuk-summary-list"], [1, "govuk-summary-list__row", "font-size-19px"], [1, "govuk-summary-list__key"], [1, "govuk-summary-list__value"], [1, "govuk-summary-list__actions"], ["href", "Javascript:void(0)", 1, "govuk-link", 3, "click"], ["data-module", "govuk-button", 1, "govuk-button", "button", 3, "click"]], template: function RefundStatusComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, RefundStatusComponent_div_0_Template, 6, 1, "div", 0);
            i0.ɵɵtemplate(1, RefundStatusComponent_ng_container_1_Template, 17, 2, "ng-container", 0);
            i0.ɵɵtemplate(2, RefundStatusComponent_ng_container_2_Template, 54, 11, "ng-container", 0);
            i0.ɵɵtemplate(3, RefundStatusComponent_ng_container_3_Template, 61, 19, "ng-container", 0);
            i0.ɵɵtemplate(4, RefundStatusComponent_ng_container_4_Template, 14, 6, "ng-container", 0);
            i0.ɵɵtemplate(5, RefundStatusComponent_ng_container_5_Template, 2, 7, "ng-container", 0);
            i0.ɵɵtemplate(6, RefundStatusComponent_ng_container_6_Template, 2, 5, "ng-container", 0);
            i0.ɵɵtemplate(7, RefundStatusComponent_ng_container_7_Template, 2, 7, "ng-container", 0);
            i0.ɵɵtemplate(8, RefundStatusComponent_ng_container_8_Template, 18, 7, "ng-container", 0);
            i0.ɵɵtemplate(9, RefundStatusComponent_ng_container_9_Template, 13, 1, "ng-container", 0);
            i0.ɵɵtemplate(10, RefundStatusComponent_ng_container_10_Template, 14, 6, "ng-container", 0);
            i0.ɵɵtemplate(11, RefundStatusComponent_ng_container_11_Template, 39, 7, "ng-container", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.errorMessage);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "refundstatuslist" && ctx.rejectedRefundList && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "refundview" && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "reviewandsubmitview" && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "reviewandsubmitEditview" && ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "issuerefundpage1" && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "processretroremissonpage" && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "issuerefund" && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "reviewrefundconfirmationpage" && !ctx.isResendOperationSuccess && !ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isResendOperationSuccess);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "refundEditView" && ctx.isEditDetailsClicked);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewName === "revieweditdetailsconfirmationpage" && !ctx.isResendOperationSuccess && ctx.isEditDetailsClicked);
        } }, dependencies: [i3.NgForOf, i3.NgIf, ContactDetailsComponent, AddRemissionComponent, NotificationPreviewComponent, i3.DecimalPipe, i3.CurrencyPipe, i3.DatePipe, CcdHyphensPipe], styles: [".right[_ngcontent-%COMP%]{float:right!important}.button[_ngcontent-%COMP%]{margin-bottom:3em;font-size:19px}.cancelbtn[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.btnmargin[_ngcontent-%COMP%]{margin-bottom:2em}.govuk-button--secondary[_ngcontent-%COMP%]{background-color:#dee0e2;box-shadow:0 2px #858688;color:#0b0c0c;margin-right:.5em}.govuk-warning-text__text[_ngcontent-%COMP%], .govuk-label--s[_ngcontent-%COMP%], .hmcts-currency-input__symbol[_ngcontent-%COMP%]{font-size:19px;font-weight:400}.inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0}.inline-error-message[_ngcontent-%COMP%]{color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.govuk-button[_ngcontent-%COMP%], .govuk-link[_ngcontent-%COMP%]{margin-right:1em;font-size:19px;font-weight:200}.govuk-button-group[_ngcontent-%COMP%]{padding-top:2em}.heading-medium[_ngcontent-%COMP%]{margin-top:.875em}.heading-large[_ngcontent-%COMP%]{margin-top:.25em}.govuk-panel--confirmation[_ngcontent-%COMP%]{color:#fff;background:#00703C}.govuk-heading-l[_ngcontent-%COMP%]{font-size:36px}.govuk-heading-m[_ngcontent-%COMP%]{font-size:24px}.govuk-panel__title[_ngcontent-%COMP%]{font-size:5rem}.govuk-body-m[_ngcontent-%COMP%], .govuk-body[_ngcontent-%COMP%]{font-size:2.1875rem}.govuk-input--width-10[_ngcontent-%COMP%]{max-width:36ex}.col-14[_ngcontent-%COMP%]{width:14%!important}.col-10[_ngcontent-%COMP%]{width:10%!important}.col-11[_ngcontent-%COMP%]{width:11%!important}.col-18[_ngcontent-%COMP%]{width:18%!important}.col-21[_ngcontent-%COMP%]{width:21%!important}.col-9[_ngcontent-%COMP%]{width:9%!important}.col-40[_ngcontent-%COMP%]{width:40%!important}.col-15[_ngcontent-%COMP%]{width:15%!important}.col-16[_ngcontent-%COMP%]{width:16%!important}.col-25[_ngcontent-%COMP%]{width:25%!important}.col-24[_ngcontent-%COMP%]{width:24%!important}.govuk-error-summary__title[_ngcontent-%COMP%]{font-size:24px!important}.govuk-error-summary__body[_ngcontent-%COMP%]{font-size:19px!important}.font-size-19px[_ngcontent-%COMP%]{font-size:19px}.white[_ngcontent-%COMP%]{color:#fff}.pagesize[_ngcontent-%COMP%]{margin:2em;width:97%}.govuk-link[_ngcontent-%COMP%]{cursor:pointer}.contactDetails-width[_ngcontent-%COMP%]{width:70%}.whitespace-inherit[_ngcontent-%COMP%]{white-space:inherit!important}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RefundStatusComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-refund-status', template: "\n<div *ngIf=\"errorMessage\">\n  <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n    <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n      Error in processing the request\n    </h2>\n    <div class=\"govuk-error-summary__body\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</div>\n\n<ng-container *ngIf=\"viewName==='refundstatuslist' && rejectedRefundList && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <!-- payments -->\n\n  <table class=\"govuk-table\">\n    <thead class=\"govuk-table__head\">\n      <tr class=\"govuk-table__row\">\n        <td class=\"govuk-table__header col-16\" scope=\"col\">Status</td>\n        <td class=\"govuk-table__header col-11\" scope=\"col\">Amount</td>\n        <td class=\"govuk-table__header col-18\" scope=\"col\">Date</td>\n        <td class=\"govuk-table__header col-25\" scope=\"col\">Refund reference</td>\n        <td class=\"govuk-table__header col-24 \" scope=\"col\">Reason</td>\n        <td class=\"govuk-table__header\" scope=\"col\"></td>\n      </tr>\n    </thead>\n    <tbody class=\"govuk-table__body\" *ngIf=\"rejectedRefundList?.length > 0\">\n      <tr class=\"govuk-table__row\" *ngFor=\"let refundList of rejectedRefundList\">\n        <td class=\"govuk-table__cell whitespace-inherit\">{{ refundList?.refund_status['name'] }}</td>\n        <td class=\"channel govuk-table__cell whitespace-inherit\">\u00A3{{ refundList?.amount | number:'.2' }}</td>\n        <td class=\"govuk-table__cell  whitespace-inherit\">{{ refundList?.date_updated | date:'dd MMM yyyy'}}\n        </td>\n        <td class=\"govuk-table__cell whitespace-inherit\">{{ refundList?.refund_reference }}</td>\n        <td class=\"govuk-table__cell whitespace-inherit\"> {{refundList?.reason}}</td>\n        <td class=\"govuk-table__cell whitespace-inherit\">\n          <a href=\"javascript:void(0)\" (click)=\"goToRefundView(refundList,'casetransactions')\">Review</a>\n        </td>\n      </tr>\n    </tbody>\n    <tbody class=\"govuk-table__body\" *ngIf=\"rejectedRefundList?.length === 0\">\n      <td class=\"govuk-table__cell\" colspan=\"6\">No refunds recorded</td>\n    </tbody>\n  </table>\n</ng-container>\n\n<ng-container *ngIf=\"viewName==='refundview' && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <div class=\"govuk-breadcrumbs\">\n    <ol class=\"govuk-breadcrumbs__list\">\n      <li class=\"govuk-breadcrumbs__list-item\">\n        <a  href=\"javascript:void(0)\" (click)=\"loadRefundListPage()\" class=\"govuk-back-link govuk-label\">Back</a>\n      </li>\n    </ol>\n  </div>\n  <h2 class=\"govuk-heading-l\">Refund details</h2>\n  <table>\n    \n    <tbody>\n      <tr class=\"section\">\n        <td class=\"bold tb-col-w\">Refund reference</td>\n        <td>{{ refundlist?.refund_reference }}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold tb-col-w\">Payment to be refunded</td>\n        <td>{{refundlist?.payment_reference }}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold tb-col-w\">Reason for refund</td>\n        <td>{{ refundlist?.reason }}</td>\n      </tr>\n      <tr class=\"section\">\n        <td class=\"bold tb-col-w\">Amount refunded</td>\n        <td>\u00A3{{refundlist?.amount | number:'.2' }}</td>\n      </tr>\n\n    </tbody>\n  </table>\n\n\n    <!-- Notification sent details -->\n    <div>\n      <br />\n      <h2 class=\"govuk-heading-m\">Notifications sent</h2>\n      <table class=\"govuk-table\">\n        <thead class=\"govuk-table__head\">\n          <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header col-24 whitespace-inherit\" scope=\"col\">Date and time</td>\n            <td class=\"govuk-table__header col-27 whitespace-inherit\" scope=\"col\">Sent to</td>\n            <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Sent via</td>\n            <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Actions</td>\n          </tr>\n        </thead>\n        <tbody class=\"govuk-table__body\" *ngIf=\"notificationList\">\n          <ng-container *ngFor=\"let notification of notificationList; let i = index;\">\n            <tr class=\"govuk-table__row\">\n              <td class=\"govuk-table__cell whitespace-inherit\">{{notification.date_created | date:'dd MMMM yyyy HH:mm:ss'}}</td>\n              <td class=\"govuk-table__cell whitespace-inherit\">{{orderParty}}</td>\n              <td class=\"govuk-table__cell whitespace-inherit col-40\">\n                <div *ngIf=\"notification?.notification_type === 'EMAIL'\">\n                  <strong>Email</strong><br>\n                  {{notification?.contact_details?.email?.trim()}}\n                </div>\n                <div *ngIf=\"notification?.notification_type === 'LETTER'\">\n                  <strong>Post</strong><br>\n                  {{notification?.contact_details?.address_line?.trim()}} {{notification?.contact_details?.city?.trim()}} {{notification?.contact_details?.county?.trim()}} {{notification?.contact_details?.country?.trim()}} {{notification?.contact_details?.postal_code?.trim()}}\n                </div>\n              </td>\n              <td class=\"govuk-table__cell whitespace-inherit\" *ngIf=\"i === 0\"><a href=\"Javascript:void(0);\" (click)=\"putResend(notification)\">Resend</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href=\"Javascript:void(0);\" (click)=\"gotoEditAddressDetails(notification)\">Edit details</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a *ngIf=\"!notificationSentView || i != notificationSentViewIndex\" href=\"Javascript:void(0);\" (click)=\"showNotificationSentView(i)\">View</a><a *ngIf=\"i === notificationSentViewIndex && notificationSentView\" href=\"Javascript:void(0);\" (click)=\"hideNotificationSentView()\">Hide</a></td>\n              <td class=\"govuk-table__cell whitespace-inherit\" *ngIf=\"i > 0\"><a *ngIf=\"!notificationSentView || i != notificationSentViewIndex\" href=\"Javascript:void(0);\" (click)=\"showNotificationSentView(i)\">View</a><a *ngIf=\"i === notificationSentViewIndex && notificationSentView\" href=\"Javascript:void(0);\" (click)=\"hideNotificationSentView()\">Hide</a></td>\n            </tr>\n            <tr *ngIf=\"i === notificationSentViewIndex && notificationSentView\">\n              <td class=\"govuk-table__cell\" colspan=\"4\">\n                <app-notification-preview\n                  [previewJourney]=\"'Notifications sent'\" [notificationSent]=\"notification?.sent_notification\">\n                </app-notification-preview>\n              </td>\n            </tr>\n          </ng-container>\n\n        </tbody>\n        <tbody class=\"govuk-table__body\" *ngIf=\"!notificationList\">\n          <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell whitespace-inherit\" colspan=\"4\">No record found ... </td>\n          </tr>\n        </tbody>\n      </table>  \n    </div>\n  <!-- Status history -->\n  <div>\n    <br />\n    <h2 class=\"govuk-heading-m\">Refund status history</h2>\n    <div *ngIf=\"refundStatusHistories\">\n    <table class=\"govuk-table\">\n      <thead class=\"govuk-table__head\">\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__header col-24 whitespace-inherit\" scope=\"col\">Status</td>\n          <td class=\"govuk-table__header col-27 whitespace-inherit\" scope=\"col\">Date and time</td>\n          <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Users</td>\n          <td class=\"govuk-table__header whitespace-inherit\" scope=\"col\">Notes</td>\n        </tr>\n      </thead>\n      <tbody class=\"govuk-table__body\" *ngFor=\"let refundStatusHistory of refundStatusHistories;\">\n        <tr class=\"govuk-table__row\">\n          <td class=\"govuk-table__cell whitespace-inherit\">{{refundStatusHistory.status}}</td>\n          <td class=\"govuk-table__cell whitespace-inherit\">\n             {{refundStatusHistory.date_created | date:'dd MMMM yyyy HH:mm:ss'}}\n           </td>\n          <td class=\"govuk-table__cell whitespace-inherit\">{{refundStatusHistory.created_by}}</td>\n          <td class=\"govuk-table__cell whitespace-inherit\">{{refundStatusHistory.notes}}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  </div>\n\n  <ng-container *ngIf=\"viewName==='refundview' && !isFromPayBubble && !isResendOperationSuccess && !isEditDetailsClicked\">\n    <div  *ngIf=\"refundButtonState==='Update required'\" >\n      <!-- <div *ngIf=\"refundButtonState==='sent back'\"> -->\n      <br />\n      <button type=\"submit\" class=\"button govuk-button--secondary btnmargin\"\n        (click)=\"gotoReviewAndReSubmitPage()\">Change refund details</button>\n    </div>\n    <div *ngIf=\"isProcessRefund && !isLastUpdatedByCurrentUser && refundButtonState==='Sent for approval'\" >\n      <!-- <div *ngIf=\"isProcessRefund && !isLastUpdatedByCurrentUser && refundButtonState==='sent for approval'\"> -->\n      <br />\n      <button type=\"submit\" class=\"button govuk-button--secondary\"\n        (click)=\"goToRefundProcessComponent(refundlist.refund_reference,refundlist)\">Process refund</button>\n    </div>\n  </ng-container>\n\n\n</ng-container>\n\n<ng-container *ngIf=\"viewName==='reviewandsubmitview' && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <!-- <div class=\"govuk-breadcrumbs\">\n    <ol class=\"govuk-breadcrumbs__list\">\n      <li class=\"govuk-breadcrumbs__list-item\">\n        <a (click)=\"gotoReviewDetailsPage($event)\" class=\"govuk-back-link govuk-label\">Back</a>\n      </li>\n    </ol>\n  </div> -->\n  <div class=\"govuk-warning-text\">\n    <h1 class=\"heading-large\">Check your answers</h1>\n  </div>\n  <table class=\"govuk-table\">\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Payment reference</td>\n      <td class=\"govuk-table__cell\">{{ refundlist?.payment_reference}} </td>\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Reason for return</td>\n      <td class=\"govuk-table__cell\">{{refundreason}}</td>\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund reference</td>\n      <td class=\"govuk-table__cell\">{{ refundlist?.refund_reference}} </td>\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Reason for refund</td>\n      <td class=\"govuk-table__cell\">{{ refundlist?.reason?.trim()}}\n        <a (click)=\"gotoRefundReasonPage(refundlist?.reason)\" *ngIf=\"refundlist?.reason !== 'Retrospective remission' && refundlist?.reason !== 'Overpayment'\"\n          class=\"govuk-link right\">Change</a>\n      </td>\n\n      <!-- <td class=\"govuk-table__cell\">{{ refundlist?.reason }}</td>\n      <a (click)=\"gotoRefundReasonPage()\" class=\"govuk-link right\">Change</a> -->\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Refund amount</td>\n      <td class=\"govuk-table__cell\">\u00A3{{ changedAmount ? changedAmount : refundlist?.amount | number:'.2' }}\n        <a (click)=\"gotoAmountPage()\" *ngIf=\"refundlist?.reason !== 'Overpayment'\"\n          class=\"govuk-link right\">Change</a>\n      </td>\n\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send to</td>\n      <td class=\"govuk-table__cell\">{{orderParty}} </td>\n    </tr>\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Send via</td>\n      <td class=\"govuk-table__cell whitespace-inherit\">\n        <div *ngIf=\"refundlist?.contact_details?.notification_type === 'EMAIL'\" class=\"contactDetails-width font-size-19px\">\n          <strong>Email</strong>\n          <br/>\n          {{refundlist?.contact_details?.email?.trim()}}\n        </div>\n        <div *ngIf=\"refundlist?.contact_details?.notification_type === 'LETTER'\" class=\"contactDetails-width font-size-19px\">\n          <strong>Post</strong>\n          <br/>\n          {{refundlist?.contact_details?.address_line?.trim()}} {{refundlist?.contact_details?.city?.trim()}} {{refundlist?.contact_details?.county?.trim()}} {{refundlist?.contact_details?.country?.trim()}} {{refundlist?.contact_details?.postal_code?.trim()}}\n        </div> \n        <a class=\"govuk-link\" href=\"Javascript:void(0)\" *ngIf=\"refundlist?.contact_details !=null\"  class=\"govuk-link right\" (click)=\"gotoEditDetailsPage(refundlist?.contact_details, 'reviewandsubmitEditview')\">\n          Change\n        </a>\n      </td>\n    </tr> \n\n    <tr class=\"govuk-table__row\">\n      <td class=\"govuk-table__cell govuk-!-font-weight-bold\">Notification</td>\n      <td class=\"govuk-table__cell\">{{templateInstructionType}} \n          <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n            Preview\n          </a>\n          <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n            Hide Preview\n          </a>\n      </td>\n    </tr>\n  </table>\n  <app-notification-preview *ngIf=\"notificationPreview\" \n  [paymentReference]=\"refundlist?.payment_reference\"\n  [payment]=\"paymentObj\" \n  [contactDetails]=\"refundlist?.contact_details\"\n  [refundReason]=\"refundlist?.reason_code\"\n  [refundAmount]=\"changedAmount ? changedAmount : refundlist?.amount\"\n  [refundReference]=\"refundlist?.refund_reference\"></app-notification-preview>\n\n  <div class=\"govuk-button-group\">\n    <button (click)=\"gotoReviewDetailsPage($event)\" class=\"govuk-button govuk-button--secondary\"> Previous</button>\n    <button [disabled]=\"isRefundBtnDisabled\" (click)=\"gotoReviewRefundConfirmationPage()\" class=\"govuk-button button\"\n      data-module=\"govuk-button\">\n      Submit refund\n    </button>\n</div>\n<p><a href=\"javascript:void(0)\" (click)=\"loadRefundListPage()\" class=\"govuk-link\" data-module=\"govuk-button\">Cancel</a></p>\n  <!-- <div class=\"govuk-button-group\">\n    <button [disabled]=\"isRefundBtnDisabled\" (click)=\"gotoReviewRefundConfirmationPage()\" class=\"govuk-button button\"\n      data-module=\"govuk-button\">\n      Submit refund\n    </button>\n  </div> -->\n  <!-- <p>\n    <a (click)=\"loadRefundListPage()\" href=\"\" class=\"cancelbtn\">Cancel</a>\n  </p> -->\n</ng-container>\n\n<ng-container *ngIf=\"viewName === 'reviewandsubmitEditview' && isEditDetailsClicked\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='EDITDETAILSPAGE'>      \n    <h1 class=\"govuk-heading-l\">Edit contact details</h1>\n    <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n    <span class=\"govuk-hint font-size-19px\">\n      Refund reference: {{ refundlist?.refund_reference}}\n    </span>\n    <ccpay-contact-details\n    [isEditOperationInRefundList] = isEditDetailsClicked\n    [addressObj] = notification\n    (assignContactDetailsInFefundsList)=\"getContactDetailsForRefundList($event)\"\n    (redirectToIssueRefund)=\"gotoRefundReviewAndSubmitViewPageCancelBtnClicked($event)\" ></ccpay-contact-details>\n  <p>\n      <a (click)=\"loadRefundListPage()\" class=\"govuk-link\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n\n</ng-container>\n\n<ng-container *ngIf=\"viewName === 'issuerefundpage1' && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <ccpay-add-remission [isFromRefundListPage]=\"true\" [viewCompStatus]=\"viewName\" [isRefundRemission]=\"true\" [isFromRefundStatusPage] = \"true\"\n   [changeRefundReason]= \"changeRefundReason\" [ccdCaseNumber]=\"ccdCaseNumber\" (refundListReason)=\"getRefundListReason($event)\" [refundPaymentReference]= \"refundlist?.payment_reference\" ></ccpay-add-remission>\n</ng-container>\n\n<ng-container *ngIf=\"viewName === 'processretroremissonpage' && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <ccpay-add-remission [isFromRefundListPage]=\"true\" [viewCompStatus]=\"viewName\" [isRefundRemission]=\"true\"\n    [ccdCaseNumber]=\"ccdCaseNumber\" [refundPaymentReference]= \"refundlist?.payment_reference\" (refundListAmount)=\"getRefundAmount($event)\"></ccpay-add-remission>\n</ng-container>\n\n<ng-container *ngIf=\"viewName === 'issuerefund' && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <ccpay-add-remission [isFromRefundListPage]=\"true\" [viewCompStatus]=\"viewName\" [isRefundRemission]=\"true\" [isFromServiceRequestPage] = \"true\"\n    [ccdCaseNumber]=\"ccdCaseNumber\" [refundPaymentReference]= \"refundlist?.payment_reference\" [isFromRefundStatusPage]=\"true\"  (refundListAmount)=\"getRefundAmount($event)\"  (refundFees)=\"getRefundFees($event)\"></ccpay-add-remission>\n</ng-container>\n\n<ng-container *ngIf=\"viewName === 'reviewrefundconfirmationpage' && !isResendOperationSuccess && !isEditDetailsClicked\">\n  <div class=\"govuk-grid-row pagesize\">\n    <div>\n      <div class=\"govuk-panel govuk-panel--confirmation\">\n        <h1 class=\"govuk-panel__title\">\n          Refund submitted\n        </h1>\n\n        <div class=\"govuk-panel__body\">\n          <p class=\"govuk-body white\"><strong>Refund reference:{{refundReference}} </strong></p>\n        </div>\n\n      </div>\n\n      <h2 class=\"govuk-heading-l\">What happens next</h2>\n      <p class=\"govuk-body\">\n        A refund request for {{refundAmount| currency:'GBP':'symbol-narrow':'1.2-2'}} has been created and will be passed to a team leader to approve.\n      </p>\n\n      <p class=\"govuk-body\">\n        <a href=\"javascript:void(0)\" (click)=\"loadRefundListPage()\" class=\"govuk-link\">Return to case</a>\n      </p>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"isResendOperationSuccess\">\n  <div class=\"govuk-grid-row pagesize\">\n    <div>\n      <div class=\"govuk-panel govuk-panel--confirmation\">\n        <h1 class=\"govuk-panel__title\">\n          Notification sent\n        </h1>\n\n        <div class=\"govuk-panel__body\">\n          <p class=\"govuk-body white\"><strong>Refund reference: {{ refundlist?.refund_reference}} </strong></p>\n        </div>\n\n      </div>\n      <p class=\"govuk-body\">\n        <a href=\"javascript:void(0)\" (click)=\"loadRefundListPage()\" class=\"govuk-link\">Return to case</a>\n      </p>\n    </div>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"viewName === 'refundEditView' && isEditDetailsClicked\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='EDITDETAILSPAGE'>      \n    <h1 class=\"govuk-heading-l\">Edit contact details</h1>\n    <h2 class=\"govuk-heading-m govuk-font19px\">Case reference: {{ccdCaseNumber | ccdHyphens }}</h2>\n    <span class=\"govuk-hint font-size-19px\">\n      Refund reference: {{ refundlist?.refund_reference}}\n    </span>\n    <ccpay-contact-details\n    [isEditOperationInRefundList] = isEditDetailsClicked\n    [addressObj] = notification\n    (assignContactDetailsInFefundsList)=\"getContactDetails($event)\"\n    (redirectToIssueRefund)=\"gotoRefundViewPageCancelBtnClicked($event)\" ></ccpay-contact-details>\n  <p>\n      <a (click)=\"loadRefundListPage()\" class=\"govuk-link\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n\n</ng-container>\n<ng-container *ngIf=\"viewName === 'revieweditdetailsconfirmationpage' && !isResendOperationSuccess && isEditDetailsClicked\">\n  <input #myInput type='hidden' id='iFrameDrivenImageValue' value='EDITDETAILSCHECKANDANSWERPAGE'>      \n    <h1 class=\"govuk-heading-l\">Check your answers</h1>\n    <dl class=\"govuk-summary-list\">\n      <div class=\"govuk-summary-list__row font-size-19px\">\n        <dt class=\"govuk-summary-list__key\">\n          Refund reference\n        </dt>\n        <dd class=\"govuk-summary-list__value\">\n          {{ refundlist?.refund_reference}}\n        </dd>\n        <span class=\"govuk-summary-list__actions\"></span> \n      </div>\n      <div class=\"govuk-summary-list__row font-size-19px\">\n        <dt class=\"govuk-summary-list__key\">\n          Send via\n          <br/>\n        </dt>\n        <dd class=\"govuk-summary-list__value\">\n          <div *ngIf=\"addressDetails?.notification_type === 'EMAIL'\" class=\"contactDetails-width font-size-19px\">\n            <strong>Email</strong>\n            <br/>\n            {{addressDetails?.email?.trim()}}\n          </div>\n          <div *ngIf=\"addressDetails?.notification_type === 'LETTER'\" class=\"contactDetails-width font-size-19px\">\n            <strong>Post</strong>\n            <br/>\n            {{addressDetails?.address_line?.trim()}} {{addressDetails?.city?.trim()}} {{addressDetails?.county?.trim()}} {{addressDetails?.country?.trim()}} {{addressDetails?.postal_code?.trim()}}\n          </div>        \n        </dd>\n        <dd class=\"govuk-summary-list__actions\">\n          <a class=\"govuk-link\" href=\"Javascript:void(0)\" (click)=\"gotoEditDetailsPage(addressDetails, 'refundEditView')\">\n            Change\n          </a>\n        </dd>\n      </div>\n      <div class=\"govuk-summary-list__row font-size-19px\">\n        <dt class=\"govuk-summary-list__key\">\n          Notification\n        </dt>\n        <dd class=\"govuk-summary-list__value\">\n          {{templateInstructionType}} \n        </dd>\n        <span class=\"govuk-summary-list__actions\">\n          <a *ngIf=\"!notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"showNotificationPreview()\">\n            Preview\n          </a>\n          <a *ngIf=\"notificationPreview\" href=\"Javascript:void(0)\" class=\"govuk-link right\" (click)=\"hideNotificationPreview()\">\n            Hide Preview\n          </a>\n        </span> \n      </div>\n    </dl>\n\n    <app-notification-preview *ngIf=\"notificationPreview\" [paymentReference]=\"refundlist?.payment_reference\"\n    [payment]=\"paymentObj\"\n    [contactDetails]=\"addressDetails\"\n    [refundReason]=\"refundlist?.reason_code\"\n    [refundAmount]=\"refundlist?.amount\"\n    [refundReference]=\"refundlist?.refund_reference\">\n  </app-notification-preview>\n\n\n\n    <div class=\"govuk-button-group\">\n      <button (click)=\"gotoEditDetailsPage(addressDetails, 'refundEditView')\" class=\"govuk-button govuk-button--secondary\"> Previous</button>\n      <button (click)=\"submitEditDetail()\" class=\"govuk-button button\"\n        data-module=\"govuk-button\">\n          Send notification\n      </button>\n  </div>\n  <p>\n      <a (click)=\"loadRefundListPage()\" class=\"govuk-link\" data-module=\"govuk-button\">\n          Cancel\n      </a>\n  </p>\n\n</ng-container>\n", styles: [".right{float:right!important}.button{margin-bottom:3em;font-size:19px}.cancelbtn{font-size:19px;font-weight:400}.btnmargin{margin-bottom:2em}.govuk-button--secondary{background-color:#dee0e2;box-shadow:0 2px #858688;color:#0b0c0c;margin-right:.5em}.govuk-warning-text__text,.govuk-label--s,.hmcts-currency-input__symbol{font-size:19px;font-weight:400}.inline-error-class{outline:3px solid #a71414;outline-offset:0}.inline-error-message{color:#a71414;font-weight:700;margin-top:10px;font-size:20px}.govuk-button,.govuk-link{margin-right:1em;font-size:19px;font-weight:200}.govuk-button-group{padding-top:2em}.heading-medium{margin-top:.875em}.heading-large{margin-top:.25em}.govuk-panel--confirmation{color:#fff;background:#00703C}.govuk-heading-l{font-size:36px}.govuk-heading-m{font-size:24px}.govuk-panel__title{font-size:5rem}.govuk-body-m,.govuk-body{font-size:2.1875rem}.govuk-input--width-10{max-width:36ex}.col-14{width:14%!important}.col-10{width:10%!important}.col-11{width:11%!important}.col-18{width:18%!important}.col-21{width:21%!important}.col-9{width:9%!important}.col-40{width:40%!important}.col-15{width:15%!important}.col-16{width:16%!important}.col-25{width:25%!important}.col-24{width:24%!important}.govuk-error-summary__title{font-size:24px!important}.govuk-error-summary__body{font-size:19px!important}.font-size-19px{font-size:19px}.white{color:#fff}.pagesize{margin:2em;width:97%}.govuk-link{cursor:pointer}.contactDetails-width{width:70%}.whitespace-inherit{white-space:inherit!important}\n"] }]
    }], function () { return [{ type: i1$1.FormBuilder }, { type: RefundsService }, { type: NotificationService }, { type: PaymentLibComponent }, { type: OrderslistService }, { type: PaymentViewService }]; }, { LOGGEDINUSERROLES: [{
            type: Input,
            args: ['LOGGEDINUSERROLES']
        }], API_ROOT: [{
            type: Input,
            args: ['API_ROOT']
        }], ccdCaseNumber: [{
            type: Input
        }], isTurnOff: [{
            type: Input
        }], orderParty: [{
            type: Input
        }] }); })();

function CaseTransactionsComponent_ng_container_2_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8)(1, "div", 10)(2, "h1", 11);
    i0.ɵɵtext(3, "Case transactions");
    i0.ɵɵelementEnd()()();
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 25)(1, "h3", 26);
    i0.ɵɵtext(2, "CCD reference:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "ccdHyphens");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(5, 1, ctx_r16.ccdCaseNumber), "");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_2_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 25)(1, "h3", 26);
    i0.ɵɵtext(2, "Exception reference:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "ccdHyphens");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(5, 1, ctx_r17.ccdCaseNumber), "");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_2_td_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 27);
    i0.ɵɵtext(1, "Unallocated payments");
    i0.ɵɵelementEnd();
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_2_td_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 28);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r19.unprocessedRecordCount);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_2_div_27_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 10)(1, "button", 29);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_1_div_2_div_27_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r21.redirectToFeeSearchPage($event)); });
    i0.ɵɵtext(2, " Take telephony payment ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", !ctx_r20.isAddFeeBtnEnabled)("ngClass", !ctx_r20.isAddFeeBtnEnabled ? "govuk-button govuk-button--secondary govuk-button--disabled govuk-!-margin-right-1" : "govuk-button govuk-button--secondary govuk-!-margin-right-1");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_1_div_2_div_1_Template, 6, 3, "div", 12);
    i0.ɵɵtemplate(2, CaseTransactionsComponent_ng_container_2_div_1_div_2_div_2_Template, 6, 3, "div", 12);
    i0.ɵɵelementStart(3, "div", 13);
    i0.ɵɵelement(4, "hr", 14);
    i0.ɵɵelementStart(5, "table", 15)(6, "thead", 16)(7, "tr", 17)(8, "td", 18);
    i0.ɵɵtext(9, "Total payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 18);
    i0.ɵɵtext(11, "Total remissions");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 18);
    i0.ɵɵtext(13, "Amount due");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(14, CaseTransactionsComponent_ng_container_2_div_1_div_2_td_14_Template, 2, 0, "td", 19);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "tbody", 20)(16, "tr", 21)(17, "td", 22);
    i0.ɵɵtext(18);
    i0.ɵɵpipe(19, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(20, "td", 22);
    i0.ɵɵtext(21);
    i0.ɵɵpipe(22, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "td", 22);
    i0.ɵɵtext(24);
    i0.ɵɵpipe(25, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(26, CaseTransactionsComponent_ng_container_2_div_1_div_2_td_26_Template, 2, 1, "td", 23);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵtemplate(27, CaseTransactionsComponent_ng_container_2_div_1_div_2_div_27_Template, 3, 2, "div", 24);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r14.isExceptionRecord);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r14.isExceptionRecord);
    i0.ɵɵadvance(12);
    i0.ɵɵproperty("ngIf", ctx_r14.isBulkScanEnable);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(19, 8, ctx_r14.totalPayments, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(22, 13, ctx_r14.totalRemissions, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(25, 18, ctx_r14.clAmountDue, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r14.isBulkScanEnable);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r14.takePayment);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 40);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r27 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r31 = i0.ɵɵnextContext(4);
    i0.ɵɵattribute("rowspan", paymentGroup_r27.fees.length);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 2, ctx_r31.getGroupOutstandingAmount(paymentGroup_r27), "GBP", "symbol-narrow", "1.2-2"), "* ");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 37);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r29 = i0.ɵɵnextContext().$implicit;
    const ctx_r32 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 1, ctx_r32.calculateAmountDue(fee_r29), "GBP", "symbol-narrow", "1.2-2"), " ");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_15_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 37)(1, "a", 41);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_15_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r39); const fee_r29 = i0.ɵɵnextContext().$implicit; const ctx_r37 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r37.confirmRemoveFee(fee_r29.id)); });
    i0.ɵɵtext(2, "Remove");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const fee_r29 = i0.ɵɵnextContext().$implicit;
    const ctx_r33 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", !ctx_r33.isCheckAmountdueExist(fee_r29.amount_due) || fee_r29.remissions ? "disable-link" : "");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_16_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 37)(1, "a", 41);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_16_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r43); const fee_r29 = i0.ɵɵnextContext().$implicit; const ctx_r41 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r41.confirmRemoveFee(fee_r29.id)); });
    i0.ɵɵtext(2, "Remove");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const paymentGroup_r27 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", (paymentGroup_r27.payments == null ? null : paymentGroup_r27.payments.length) > 0 || (paymentGroup_r27.remissions == null ? null : paymentGroup_r27.remissions.length) > 0 ? "disable-link" : "");
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 37);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 37);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "td", 37);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 37);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 37);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(13, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_13_Template, 3, 7, "td", 38);
    i0.ɵɵtemplate(14, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_14_Template, 3, 6, "td", 39);
    i0.ɵɵtemplate(15, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_15_Template, 3, 1, "td", 39);
    i0.ɵɵtemplate(16, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_td_16_Template, 3, 1, "td", 39);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r29 = ctx.$implicit;
    const i_r30 = ctx.index;
    const paymentGroup_r27 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\t", fee_r29.code, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(fee_r29.description);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(fee_r29.volume ? fee_r29.volume : "-");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(9, 9, fee_r29.net_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(12, 14, fee_r29.calculated_amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", paymentGroup_r27.old && i_r30 == 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !paymentGroup_r27.old);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !paymentGroup_r27.old);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", paymentGroup_r27.old);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_tr_1_Template, 17, 19, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r27 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", paymentGroup_r27.fees);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "tr", 17)(2, "td", 42);
    i0.ɵɵtext(3, "No fees recorded");
    i0.ɵɵelementEnd()()();
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 43);
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(1, "svg", 44);
    i0.ɵɵelement(2, "path", 45);
    i0.ɵɵelementEnd();
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(3, "div", 46)(4, "span", 47);
    i0.ɵɵtext(5, "information");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, " * These fees have already been processed offline. Check the notes in CCD for more information. ");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_20_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r53 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 51)(2, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_20_tr_1_Template_a_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r53); const payment_r51 = restoredCtx.$implicit; const ctx_r52 = i0.ɵɵnextContext(6); return i0.ɵɵresetView(ctx_r52.goToPayementView(payment_r51.paymentGroupReference, payment_r51.reference, payment_r51.method)); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "td", 51);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 53);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "lowercase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 54);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "lowercase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 51);
    i0.ɵɵtext(14);
    i0.ɵɵpipe(15, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "td", 51);
    i0.ɵɵtext(17);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td", 51);
    i0.ɵɵtext(19);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const payment_r51 = ctx.$implicit;
    const ctx_r50 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r51.reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 7, payment_r51.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 10, payment_r51.channel));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 12, payment_r51.method));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(15, 14, payment_r51.amount, "GBP", "symbol-narrow", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", ctx_r50.getAllocationStatus(payment_r51), "");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r51.status);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_20_tr_1_Template, 20, 19, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r46 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r46.allPayments);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 42);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_37_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 51);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 51);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 51);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 51);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 51);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const remission_r55 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r55.remission_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 5, remission_r55.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(remission_r55.hwf_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r55.fee_code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(12, 8, remission_r55.hwf_amount, "GBP", "symbol-narrow", "1.2-2"));
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_37_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_37_tr_1_Template, 13, 13, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r48 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r48.remissions);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_38_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 55);
    i0.ɵɵtext(2, "No remissions recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 48)(1, "h3", 26);
    i0.ɵɵtext(2, "Payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "table", 15)(4, "thead", 16)(5, "tr", 17)(6, "td", 49);
    i0.ɵɵtext(7, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 18);
    i0.ɵɵtext(9, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 18);
    i0.ɵɵtext(11, "Channel");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 18);
    i0.ɵɵtext(13, "Method");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td", 50);
    i0.ɵɵtext(15, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "td", 18);
    i0.ɵɵtext(17, "Allocation status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td", 18);
    i0.ɵɵtext(19, "Payment status");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(20, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_20_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(21, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_21_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "h3", 26);
    i0.ɵɵtext(23, "Remissions");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "table", 15)(25, "thead", 16)(26, "tr", 17)(27, "td", 18);
    i0.ɵɵtext(28, "Remission reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(29, "td", 18);
    i0.ɵɵtext(30, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(31, "td", 18);
    i0.ɵɵtext(32, "Remission code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(33, "td", 18);
    i0.ɵɵtext(34, "Fee code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(35, "td", 18);
    i0.ɵɵtext(36, "Remission amount");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(37, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_37_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(38, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_tbody_38_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(20);
    i0.ɵɵproperty("ngIf", (ctx_r26.allPayments == null ? null : ctx_r26.allPayments.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r26.allPayments == null ? null : ctx_r26.allPayments.length) === 0);
    i0.ɵɵadvance(16);
    i0.ɵɵproperty("ngIf", (ctx_r26.remissions == null ? null : ctx_r26.remissions.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r26.remissions == null ? null : ctx_r26.remissions.length) === 0);
} }
function CaseTransactionsComponent_ng_container_2_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 30)(1, "div", 8)(2, "div", 31)(3, "h3", 26);
    i0.ɵɵtext(4, "Fees");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(5, "div", 31)(6, "table", 15)(7, "thead", 16)(8, "tr", 17)(9, "td", 18);
    i0.ɵɵtext(10, "Code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 18);
    i0.ɵɵtext(12, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 18);
    i0.ɵɵtext(14, "Volume");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 18);
    i0.ɵɵtext(16, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 18);
    i0.ɵɵtext(18, "Calculated amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td", 18);
    i0.ɵɵtext(20, "Amount due");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 18);
    i0.ɵɵtext(22, "Action");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(23, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_23_Template, 2, 1, "tbody", 32);
    i0.ɵɵtemplate(24, CaseTransactionsComponent_ng_container_2_div_1_div_4_tbody_24_Template, 4, 0, "tbody", 33);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(25, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_25_Template, 7, 0, "div", 34);
    i0.ɵɵtemplate(26, CaseTransactionsComponent_ng_container_2_div_1_div_4_div_26_Template, 39, 4, "div", 35);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(23);
    i0.ɵɵproperty("ngForOf", ctx_r15.paymentGroups);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r15.paymentGroups == null ? null : ctx_r15.paymentGroups.length) === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r15.isHistoricGroupAvailable);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r15.allPayments == null ? null : ctx_r15.allPayments.length) > 0 || (ctx_r15.remissions == null ? null : ctx_r15.remissions.length) > 0);
} }
function CaseTransactionsComponent_ng_container_2_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_1_div_1_Template, 4, 0, "div", 7);
    i0.ɵɵtemplate(2, CaseTransactionsComponent_ng_container_2_div_1_div_2_Template, 28, 23, "div", 7);
    i0.ɵɵelement(3, "div", 8);
    i0.ɵɵtemplate(4, CaseTransactionsComponent_ng_container_2_div_1_div_4_Template, 27, 4, "div", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.takePayment);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r9.takePayment);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.takePayment);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_37_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 8)(2, "div", 31)(3, "span", 61);
    i0.ɵɵtext(4, "Existing fees");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(5, "div", 31)(6, "table", 15)(7, "thead", 16)(8, "tr", 17)(9, "td", 18);
    i0.ɵɵtext(10, "Code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 18);
    i0.ɵɵtext(12, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 18);
    i0.ɵɵtext(14, "Volume");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 18);
    i0.ɵɵtext(16, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 18);
    i0.ɵɵtext(18, "Calculated amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td", 18);
    i0.ɵɵtext(20, "Group amount outstanding");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(21, "tbody", 20)(22, "tr", 17)(23, "td", 62);
    i0.ɵɵtext(24, "No fees recorded");
    i0.ɵɵelementEnd()()()()()()();
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_tr_26_td_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 73);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r60 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r66 = i0.ɵɵnextContext(3);
    i0.ɵɵattribute("rowspan", paymentGroup_r60.fees.length);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 2, ctx_r66.getGroupOutstandingAmount(paymentGroup_r60), "GBP", "symbol-narrow", "1.2-2"), " ");
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_tr_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 67);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 68);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "td", 69);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 70);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 71);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(13, CaseTransactionsComponent_ng_container_2_div_2_div_38_tr_26_td_13_Template, 3, 7, "td", 72);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r64 = ctx.$implicit;
    const i_r65 = ctx.index;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(fee_r64.code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", fee_r64.description, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", fee_r64.volume ? fee_r64.volume : "-", " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(9, 6, fee_r64.net_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(12, 11, fee_r64.calculated_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", i_r65 == 0);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_tbody_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 62);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_25_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r77 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 51)(2, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_25_tr_1_Template_a_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r77); const payment_r74 = restoredCtx.$implicit; const paymentGroup_r60 = i0.ɵɵnextContext(3).$implicit; const ctx_r75 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r75.goToPayementView(paymentGroup_r60.payment_group_reference, payment_r74.reference, payment_r74.method)); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "td", 51);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 53);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "lowercase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 54);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "lowercase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 51);
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 51);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 51);
    i0.ɵɵtext(18);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const payment_r74 = ctx.$implicit;
    const ctx_r73 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r74.reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 7, payment_r74.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 10, payment_r74.channel));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 12, payment_r74.method));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r74.amount);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r73.getAllocationStatus(payment_r74), "");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r74.status);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_25_tr_1_Template, 19, 14, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r60 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", paymentGroup_r60.payments);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 62);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_42_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 51);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 51);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 51);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 51);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 51);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const remission_r80 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r80.remission_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 5, remission_r80.date_created, "dd MMM"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(remission_r80.hwf_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r80.fee_code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(remission_r80.hwf_amount);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_42_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_42_tr_1_Template, 12, 8, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r60 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", paymentGroup_r60.remissions);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 55);
    i0.ɵɵtext(2, "No remissions recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_div_44_Template(rf, ctx) { if (rf & 1) {
    const _r84 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "button", 29);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_div_44_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r84); const paymentGroup_r60 = i0.ɵɵnextContext(2).$implicit; const ctx_r82 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r82.loadFeeSummaryPage(paymentGroup_r60)); });
    i0.ɵɵtext(2, " Add telephone payment ");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const paymentGroup_r60 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r72 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", ctx_r72.getGroupOutstandingAmount(paymentGroup_r60) <= 0 || ctx_r72.isUnprocessedRecordSelected)("ngClass", ctx_r72.getGroupOutstandingAmount(paymentGroup_r60) <= 0 || ctx_r72.isUnprocessedRecordSelected ? "govuk-button govuk-button--secondary govuk-button--disabled govuk-!-margin-right-1" : "govuk-button govuk-button--secondary govuk-!-margin-right-1");
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 74)(1, "details")(2, "summary", 75)(3, "span", 76);
    i0.ɵɵtext(4, "Allocated payments and remissions");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(5, "div", 77)(6, "span", 26);
    i0.ɵɵtext(7, "Payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "table", 15)(9, "thead", 16)(10, "tr", 17)(11, "td", 18);
    i0.ɵɵtext(12, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 18);
    i0.ɵɵtext(14, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 18);
    i0.ɵɵtext(16, "Channel");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 18);
    i0.ɵɵtext(18, "Method");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td", 18);
    i0.ɵɵtext(20, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 18);
    i0.ɵɵtext(22, "Allocation status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "td", 18);
    i0.ɵɵtext(24, "Status");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(25, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_25_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(26, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_26_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "span", 26);
    i0.ɵɵtext(28, "Remissions");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(29, "table", 15)(30, "thead", 16)(31, "tr", 17)(32, "td", 18);
    i0.ɵɵtext(33, "Remission reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(34, "td", 18);
    i0.ɵɵtext(35, "Date created");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(36, "td", 18);
    i0.ɵɵtext(37, "Remission code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(38, "td", 18);
    i0.ɵɵtext(39, "Fee applied against");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(40, "td", 18);
    i0.ɵɵtext(41, "Remission amount");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(42, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_42_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(43, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_tbody_43_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(44, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_div_44_Template, 3, 2, "div", 0);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r60 = i0.ɵɵnextContext().$implicit;
    const ctx_r63 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(25);
    i0.ɵɵproperty("ngIf", (paymentGroup_r60.payments == null ? null : paymentGroup_r60.payments.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (paymentGroup_r60.payments == null ? null : paymentGroup_r60.payments.length) === 0);
    i0.ɵɵadvance(16);
    i0.ɵɵproperty("ngIf", (paymentGroup_r60.remissions == null ? null : paymentGroup_r60.remissions.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (paymentGroup_r60.remissions == null ? null : paymentGroup_r60.remissions.length) === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r63.takePayment);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_38_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 8)(2, "div", 63)(3, "span", 26);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(5, "div", 8)(6, "div", 31)(7, "span", 61);
    i0.ɵɵtext(8, "Exisiting fees");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(9, "div", 64)(10, "table", 15)(11, "thead", 16)(12, "tr", 17)(13, "td", 18);
    i0.ɵɵtext(14, "Code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 18);
    i0.ɵɵtext(16, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 18);
    i0.ɵɵtext(18, "Volume");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td", 18);
    i0.ɵɵtext(20, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 18);
    i0.ɵɵtext(22, "Calculated amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "td", 65);
    i0.ɵɵtext(24, "Group amount outstanding");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(25, "tbody", 20);
    i0.ɵɵtemplate(26, CaseTransactionsComponent_ng_container_2_div_2_div_38_tr_26_Template, 14, 16, "tr", 36);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(27, CaseTransactionsComponent_ng_container_2_div_2_div_38_tbody_27_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(28, CaseTransactionsComponent_ng_container_2_div_2_div_38_div_28_Template, 45, 5, "div", 66);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r60 = ctx.$implicit;
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("Group reference: ", paymentGroup_r60.payment_group_reference, "");
    i0.ɵɵadvance(22);
    i0.ɵɵproperty("ngForOf", paymentGroup_r60.fees);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", paymentGroup_r60.fees.length == 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", paymentGroup_r60.payments || paymentGroup_r60.remissions);
} }
function CaseTransactionsComponent_ng_container_2_div_2_ccpay_app_unprocessed_payments_39_Template(rf, ctx) { if (rf & 1) {
    const _r88 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ccpay-app-unprocessed-payments", 78);
    i0.ɵɵlistener("getUnprocessedFeeCount", function CaseTransactionsComponent_ng_container_2_div_2_ccpay_app_unprocessed_payments_39_Template_ccpay_app_unprocessed_payments_getUnprocessedFeeCount_0_listener($event) { i0.ɵɵrestoreView(_r88); const ctx_r87 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r87.getUnprocessedFeeCount($event)); })("selectedUnprocessedFeeEvent", function CaseTransactionsComponent_ng_container_2_div_2_ccpay_app_unprocessed_payments_39_Template_ccpay_app_unprocessed_payments_selectedUnprocessedFeeEvent_0_listener($event) { i0.ɵɵrestoreView(_r88); const ctx_r89 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r89.selectedUnprocessedFeeEvent($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r58 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("IS_BUTTON_ENABLE", ctx_r58.takePayment)("LEVEL", 5)("PAYMENTSLENGTH", ctx_r58.allPayments == null ? null : ctx_r58.allPayments.length)("PAYMENTREF", ctx_r58.paymentRef)("ISTURNOFF", ctx_r58.isTurnOff)("ISSFENABLE", ctx_r58.isStrategicFixEnable)("FEE_RECORDS_EXISTS", ctx_r58.isFeeRecordsExist)("IS_OS_AMT_AVAILABLE", ctx_r58.isGrpOutstandingAmtPositive);
} }
function CaseTransactionsComponent_ng_container_2_div_2_div_40_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 79)(1, "div", 80)(2, "h3", 26);
    i0.ɵɵtext(3, "Surplus payments");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "div", 31);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r59 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" Total surplus payments received: ", i0.ɵɵpipeBind4(6, 1, ctx_r59.totalRefundAmount, "GBP", "symbol", "1.2-2"), " ");
} }
const _c0$3 = function (a0) { return { "disable": a0 }; };
function CaseTransactionsComponent_ng_container_2_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r91 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div")(1, "div", 8)(2, "div", 10)(3, "h1", 11);
    i0.ɵɵtext(4, "Case transactions");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(5, "div", 56)(6, "a", 57);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_2_Template_a_click_6_listener($event) { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r90.redirectToFeeSearchPage($event)); });
    i0.ɵɵtext(7, "Add a new fee");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(8, "div", 8)(9, "div", 58)(10, "h3", 26);
    i0.ɵɵtext(11, "CCD reference:");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "span");
    i0.ɵɵtext(13);
    i0.ɵɵpipe(14, "ccdHyphens");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(15, "div", 13);
    i0.ɵɵelement(16, "hr", 14);
    i0.ɵɵelementStart(17, "table", 15)(18, "thead", 16)(19, "tr", 17)(20, "td", 18);
    i0.ɵɵtext(21, "Total payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "td", 18);
    i0.ɵɵtext(23, "Total remissions");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "td", 18);
    i0.ɵɵtext(25, "Amount due");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(26, "tbody", 20)(27, "tr", 21)(28, "td", 37);
    i0.ɵɵtext(29);
    i0.ɵɵpipe(30, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(31, "td", 37);
    i0.ɵɵtext(32);
    i0.ɵɵpipe(33, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(34, "td", 37);
    i0.ɵɵtext(35);
    i0.ɵɵpipe(36, "currency");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵtemplate(37, CaseTransactionsComponent_ng_container_2_div_2_div_37_Template, 25, 0, "div", 0);
    i0.ɵɵtemplate(38, CaseTransactionsComponent_ng_container_2_div_2_div_38_Template, 29, 4, "div", 59);
    i0.ɵɵtemplate(39, CaseTransactionsComponent_ng_container_2_div_2_ccpay_app_unprocessed_payments_39_Template, 1, 8, "ccpay-app-unprocessed-payments", 60);
    i0.ɵɵtemplate(40, CaseTransactionsComponent_ng_container_2_div_2_div_40_Template, 7, 6, "div", 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c0$3, !ctx_r10.isAddFeeBtnEnabled));
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(14, 9, ctx_r10.ccdCaseNumber), "");
    i0.ɵɵadvance(16);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(30, 11, ctx_r10.totalPayments, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(33, 16, ctx_r10.totalRemissions, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(36, 21, ctx_r10.totalFees - ctx_r10.totalRemissions - ctx_r10.totalPayments, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", (ctx_r10.paymentGroups == null ? null : ctx_r10.paymentGroups.length) === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r10.paymentGroups);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r10.isBulkScanEnable);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r10.totalRefundAmount > 0 && ctx_r10.takePayment);
} }
function CaseTransactionsComponent_ng_container_2_div_3_ccpay_app_unprocessed_payments_1_Template(rf, ctx) { if (rf & 1) {
    const _r94 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ccpay-app-unprocessed-payments", 82);
    i0.ɵɵlistener("getUnprocessedFeeCount", function CaseTransactionsComponent_ng_container_2_div_3_ccpay_app_unprocessed_payments_1_Template_ccpay_app_unprocessed_payments_getUnprocessedFeeCount_0_listener($event) { i0.ɵɵrestoreView(_r94); const ctx_r93 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r93.getUnprocessedFeeCount($event)); })("selectedUnprocessedFeeEvent", function CaseTransactionsComponent_ng_container_2_div_3_ccpay_app_unprocessed_payments_1_Template_ccpay_app_unprocessed_payments_selectedUnprocessedFeeEvent_0_listener($event) { i0.ɵɵrestoreView(_r94); const ctx_r95 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r95.selectedUnprocessedFeeEvent($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r92 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("IS_BUTTON_ENABLE", ctx_r92.takePayment)("LEVEL", 1)("ISTURNOFF", ctx_r92.isTurnOff)("ISSFENABLE", ctx_r92.isStrategicFixEnable)("FEE_RECORDS_EXISTS", ctx_r92.isFeeRecordsExist)("IS_OS_AMT_AVAILABLE", ctx_r92.isGrpOutstandingAmtPositive)("PAYMENTSLENGTH", ctx_r92.allPayments == null ? null : ctx_r92.allPayments.length)("PAYMENTREF", ctx_r92.paymentRef);
} }
function CaseTransactionsComponent_ng_container_2_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_3_ccpay_app_unprocessed_payments_1_Template, 1, 8, "ccpay-app-unprocessed-payments", 81);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r11.isBulkScanEnable && !ctx_r11.takePayment);
} }
function CaseTransactionsComponent_ng_container_2_div_4_tbody_17_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r101 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 89);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 90);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 91);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 92);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(11, "td", 89);
    i0.ɵɵelementStart(12, "td", 51)(13, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_2_div_4_tbody_17_tr_1_Template_a_click_13_listener() { const restoredCtx = i0.ɵɵrestoreView(_r101); const payment_r99 = restoredCtx.$implicit; const ctx_r100 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r100.goToPayementView(payment_r99.paymentGroupReference, payment_r99.reference, payment_r99.method)); });
    i0.ɵɵtext(14, "Review");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const payment_r99 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r99.status);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 4, payment_r99.amount, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 9, payment_r99.date_created, "dd MMM yyyy HH:mm:ss"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r99.paymentGroupReference);
} }
function CaseTransactionsComponent_ng_container_2_div_4_tbody_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_4_tbody_17_tr_1_Template, 15, 12, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r96 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r96.allPayments);
} }
function CaseTransactionsComponent_ng_container_2_div_4_ccpay_app_unprocessed_payments_18_Template(rf, ctx) { if (rf & 1) {
    const _r103 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ccpay-app-unprocessed-payments", 93);
    i0.ɵɵlistener("getUnprocessedFeeCount", function CaseTransactionsComponent_ng_container_2_div_4_ccpay_app_unprocessed_payments_18_Template_ccpay_app_unprocessed_payments_getUnprocessedFeeCount_0_listener($event) { i0.ɵɵrestoreView(_r103); const ctx_r102 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r102.getUnprocessedFeeCount($event)); })("selectedUnprocessedFeeEvent", function CaseTransactionsComponent_ng_container_2_div_4_ccpay_app_unprocessed_payments_18_Template_ccpay_app_unprocessed_payments_selectedUnprocessedFeeEvent_0_listener($event) { i0.ɵɵrestoreView(_r103); const ctx_r104 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r104.selectedUnprocessedFeeEvent($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r97 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("IS_BUTTON_ENABLE", ctx_r97.takePayment)("LEVEL", 2)("ISTURNOFF", ctx_r97.isTurnOff)("ISSFENABLE", ctx_r97.isStrategicFixEnable)("FEE_RECORDS_EXISTS", ctx_r97.isFeeRecordsExist)("IS_OS_AMT_AVAILABLE", ctx_r97.isGrpOutstandingAmtPositive)("PAYMENTSLENGTH", ctx_r97.allPayments == null ? null : ctx_r97.allPayments.length)("PAYMENTREF", ctx_r97.paymentRef);
} }
function CaseTransactionsComponent_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 79)(1, "div", 31)(2, "span", 26);
    i0.ɵɵtext(3, "Payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "table", 15)(5, "thead", 16)(6, "tr", 17)(7, "td", 83);
    i0.ɵɵtext(8, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 84);
    i0.ɵɵtext(10, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 85);
    i0.ɵɵtext(12, "Date allocated");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 86);
    i0.ɵɵtext(14, "Request reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(15, "td", 87)(16, "td", 18);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(17, CaseTransactionsComponent_ng_container_2_div_4_tbody_17_Template, 2, 1, "tbody", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(18, CaseTransactionsComponent_ng_container_2_div_4_ccpay_app_unprocessed_payments_18_Template, 1, 8, "ccpay-app-unprocessed-payments", 88);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(17);
    i0.ɵɵproperty("ngIf", (ctx_r12.allPayments == null ? null : ctx_r12.allPayments.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r12.isBulkScanEnable && !ctx_r12.takePayment);
} }
function CaseTransactionsComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_2_div_1_Template, 5, 3, "div", 0);
    i0.ɵɵtemplate(2, CaseTransactionsComponent_ng_container_2_div_2_Template, 41, 28, "div", 0);
    i0.ɵɵtemplate(3, CaseTransactionsComponent_ng_container_2_div_3_Template, 2, 1, "div", 0);
    i0.ɵɵtemplate(4, CaseTransactionsComponent_ng_container_2_div_4_Template, 19, 2, "div", 6);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.viewStatus === "main1" && !ctx_r0.isTurnOff && ctx_r0.takePayment);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.takePayment && ctx_r0.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.takePayment);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.takePayment);
} }
function CaseTransactionsComponent_ng_container_3_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 107);
    i0.ɵɵelementStart(1, "b");
    i0.ɵɵtext(2, " Case reference: ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3);
    i0.ɵɵpipe(4, "ccdHyphens");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r105 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind1(4, 1, ctx_r105.ccdCaseNumber), " ");
} }
function CaseTransactionsComponent_ng_container_3_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 108);
    i0.ɵɵelementStart(1, "b");
    i0.ɵɵtext(2, " Exception reference:");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3);
    i0.ɵɵpipe(4, "ccdHyphens");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r106 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind1(4, 1, ctx_r106.ccdCaseNumber), " ");
} }
function CaseTransactionsComponent_ng_container_3_td_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 109);
    i0.ɵɵtext(1, "Unallocated payments");
    i0.ɵɵelementEnd();
} }
function CaseTransactionsComponent_ng_container_3_td_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 28);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r108 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r108.unprocessedRecordCount);
} }
function CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_td_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 51);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r119 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r119.cpoDetails["responsibleParty"]);
} }
function CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_td_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 51);
} }
function CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r122 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr")(1, "td", 51);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 51);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_td_6_Template, 2, 1, "td", 110);
    i0.ɵɵtemplate(7, CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_td_7_Template, 1, 0, "td", 110);
    i0.ɵɵelementStart(8, "td", 51);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 37)(11, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_Template_a_click_11_listener() { const restoredCtx = i0.ɵɵrestoreView(_r122); const orderRef_r117 = restoredCtx.$implicit; const ctx_r121 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r121.goToOrderViewDetailSection(orderRef_r117)); });
    i0.ɵɵtext(12, "Review");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(13, "td", 111)(14, "button", 29);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_Template_button_click_14_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r122); const orderRef_r117 = restoredCtx.$implicit; const ctx_r123 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r123.redirectToOrderFeeSearchPage($event, orderRef_r117)); });
    i0.ɵɵtext(15, " Take telephony payment ");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const orderRef_r117 = ctx.$implicit;
    const ctx_r116 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(orderRef_r117.orderStatus);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 7, orderRef_r117.orderTotalFees, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r116.cpoDetails !== null);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r116.cpoDetails === null);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(orderRef_r117.orderRefId);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("disabled", !orderRef_r117.orderAddBtnEnable)("ngClass", !orderRef_r117.orderAddBtnEnable ? "govuk-button govuk-button--secondary govuk-button--disabled govuk-!-margin-right-1" : "govuk-button govuk-button--secondary govuk-!-margin-right-1");
} }
function CaseTransactionsComponent_ng_container_3_tbody_54_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_3_tbody_54_tr_1_Template, 16, 12, "tr", 59);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r110 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r110.orderLevelFees);
} }
function CaseTransactionsComponent_ng_container_3_tbody_55_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 112)(1, "td", 113);
    i0.ɵɵtext(2, "No service requests on this case.");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_3_ccpay_app_unprocessed_payments_65_Template(rf, ctx) { if (rf & 1) {
    const _r125 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ccpay-app-unprocessed-payments", 114);
    i0.ɵɵlistener("getUnprocessedFeeCount", function CaseTransactionsComponent_ng_container_3_ccpay_app_unprocessed_payments_65_Template_ccpay_app_unprocessed_payments_getUnprocessedFeeCount_0_listener($event) { i0.ɵɵrestoreView(_r125); const ctx_r124 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r124.getUnprocessedFeeCount($event)); })("selectedUnprocessedFeeEvent", function CaseTransactionsComponent_ng_container_3_ccpay_app_unprocessed_payments_65_Template_ccpay_app_unprocessed_payments_selectedUnprocessedFeeEvent_0_listener($event) { i0.ɵɵrestoreView(_r125); const ctx_r126 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r126.selectedUnprocessedFeeEvent($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r112 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("IS_BUTTON_ENABLE", ctx_r112.takePayment)("LEVEL", 3)("PAYMENTSLENGTH", ctx_r112.allPayments == null ? null : ctx_r112.allPayments.length)("ISTURNOFF", ctx_r112.isTurnOff)("ISSFENABLE", ctx_r112.isStrategicFixEnable)("PAYMENTREF", ctx_r112.paymentRef)("FEE_RECORDS_EXISTS", ctx_r112.isFeeRecordsExist)("IS_OS_AMT_AVAILABLE", ctx_r112.isGrpOutstandingAmtPositive);
} }
function CaseTransactionsComponent_ng_container_3_tbody_69_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r130 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 115);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 90);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 91);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 92);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(11, "td", 89);
    i0.ɵɵelementStart(12, "td", 51)(13, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_3_tbody_69_tr_1_Template_a_click_13_listener() { const restoredCtx = i0.ɵɵrestoreView(_r130); const payment_r128 = restoredCtx.$implicit; const ctx_r129 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r129.goToPayementView(payment_r128.paymentGroupReference, payment_r128.reference, payment_r128.method)); });
    i0.ɵɵtext(14, "Review");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const payment_r128 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r128.status);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 4, payment_r128.amount, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 9, payment_r128.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r128.paymentGroupReference);
} }
function CaseTransactionsComponent_ng_container_3_tbody_69_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_3_tbody_69_tr_1_Template, 15, 12, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r113 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r113.allPayments);
} }
function CaseTransactionsComponent_ng_container_3_tbody_70_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 113);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_3_div_71_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "span", 26);
    i0.ɵɵelement(2, "br");
    i0.ɵɵtext(3, "Refunds");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(4, "ccpay-refund-status", 116);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r115 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ccdCaseNumber", ctx_r115.ccdCaseNumber)("isTurnOff", ctx_r115.isTurnOff)("orderParty", ctx_r115.orderParty)("LOGGEDINUSERROLES", ctx_r115.LOGGEDINUSERROLES);
} }
function CaseTransactionsComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r132 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div")(2, "div")(3, "h1", 94);
    i0.ɵɵtext(4, "Case transactions");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, CaseTransactionsComponent_ng_container_3_ng_container_5_Template, 5, 3, "ng-container", 95);
    i0.ɵɵtemplate(6, CaseTransactionsComponent_ng_container_3_ng_container_6_Template, 5, 3, "ng-container", 96);
    i0.ɵɵelementStart(7, "div")(8, "table", 15)(9, "thead", 16)(10, "tr", 17)(11, "td", 97);
    i0.ɵɵtext(12, "Total payments");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(13, CaseTransactionsComponent_ng_container_3_td_13_Template, 2, 0, "td", 98);
    i0.ɵɵelementStart(14, "td", 97);
    i0.ɵɵtext(15, "Total remissions");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "td", 86);
    i0.ɵɵtext(17, "Amount due");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(18, "td", 86);
    i0.ɵɵtext(19, "Over payment");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(20, "tbody", 20)(21, "tr", 21)(22, "td", 22);
    i0.ɵɵtext(23);
    i0.ɵɵpipe(24, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(25, CaseTransactionsComponent_ng_container_3_td_25_Template, 2, 1, "td", 23);
    i0.ɵɵelementStart(26, "td", 22);
    i0.ɵɵtext(27);
    i0.ɵɵpipe(28, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(29, "td", 22);
    i0.ɵɵtext(30);
    i0.ɵɵpipe(31, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(32, "td", 22);
    i0.ɵɵtext(33);
    i0.ɵɵpipe(34, "currency");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelement(35, "input", 99, 2);
    i0.ɵɵelementStart(37, "div", 100)(38, "span", 26);
    i0.ɵɵtext(39, "Service requests");
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerStart(40);
    i0.ɵɵelementStart(41, "table", 15)(42, "thead", 16)(43, "tr", 17)(44, "td", 85);
    i0.ɵɵtext(45, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(46, "td", 84);
    i0.ɵɵtext(47, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(48, "td", 101);
    i0.ɵɵtext(49, "Party");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(50, "td", 102);
    i0.ɵɵtext(51, "Request reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(52, "td", 87)(53, "td", 103);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(54, CaseTransactionsComponent_ng_container_3_tbody_54_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(55, CaseTransactionsComponent_ng_container_3_tbody_55_Template, 3, 0, "tbody", 104);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementStart(56, "span");
    i0.ɵɵelement(57, "br");
    i0.ɵɵelementStart(58, "a", 105);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_3_Template_a_click_58_listener($event) { i0.ɵɵrestoreView(_r132); const ctx_r131 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r131.redirectToFeeSearchPage($event)); });
    i0.ɵɵtext(59, "Create service request and pay");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(60, "br");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(61, "div")(62, "span", 26);
    i0.ɵɵelement(63, "br");
    i0.ɵɵtext(64, "Payments");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(65, CaseTransactionsComponent_ng_container_3_ccpay_app_unprocessed_payments_65_Template, 1, 8, "ccpay-app-unprocessed-payments", 106);
    i0.ɵɵelementContainerStart(66);
    i0.ɵɵelementStart(67, "table", 15);
    i0.ɵɵelement(68, "thead", 16);
    i0.ɵɵtemplate(69, CaseTransactionsComponent_ng_container_3_tbody_69_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(70, CaseTransactionsComponent_ng_container_3_tbody_70_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(71, CaseTransactionsComponent_ng_container_3_div_71_Template, 5, 4, "div", 0);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r1.isExceptionRecord);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.isExceptionRecord);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", ctx_r1.isBulkScanEnable);
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(24, 16, ctx_r1.totalPayments, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.isBulkScanEnable);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(28, 21, ctx_r1.totalRemissions, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(31, 26, ctx_r1.clAmountDue, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(34, 31, ctx_r1.overPaymentAmount, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(21);
    i0.ɵɵproperty("ngIf", (ctx_r1.orderLevelFees == null ? null : ctx_r1.orderLevelFees.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r1.orderLevelFees == null ? null : ctx_r1.orderLevelFees.length) === 0);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disable-link", !ctx_r1.isAddFeeBtnEnabled);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", ctx_r1.isBulkScanEnable);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", (ctx_r1.allPayments == null ? null : ctx_r1.allPayments.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r1.allPayments == null ? null : ctx_r1.allPayments.length) === 0 && ctx_r1.unprocessedRecordCount <= 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r1.check4AllowedRoles2AccessPBApayment());
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_td_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 51);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r142 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r142.cpoDetails["responsibleParty"]);
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_td_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 51);
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_a_11_Template(rf, ctx) { if (rf & 1) {
    const _r147 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_a_11_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r147); const orderRef_r140 = i0.ɵɵnextContext().$implicit; const ctx_r145 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r145.loadPBAAccountPage(orderRef_r140)); });
    i0.ɵɵtext(1, " Pay now");
    i0.ɵɵelementEnd();
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r149 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 51);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 51);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_td_6_Template, 2, 1, "td", 120);
    i0.ɵɵtemplate(7, CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_td_7_Template, 1, 0, "td", 120);
    i0.ɵɵelementStart(8, "td", 51);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 121);
    i0.ɵɵtemplate(11, CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_a_11_Template, 2, 0, "a", 122);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 37)(13, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_Template_a_click_13_listener() { const restoredCtx = i0.ɵɵrestoreView(_r149); const orderRef_r140 = restoredCtx.$implicit; const ctx_r148 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r148.goToOrderViewDetailSection(orderRef_r140)); });
    i0.ɵɵtext(14, "Review");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const orderRef_r140 = ctx.$implicit;
    const ctx_r139 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(orderRef_r140.orderStatus);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 6, orderRef_r140.orderTotalFees, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r139.cpoDetails !== null);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r139.cpoDetails === null);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(orderRef_r140.orderRefId);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r139.serviceRequestValue !== "false" && ctx_r139.check4AllowedRoles2AccessPBApayment() && orderRef_r140.orderStatus === "Not paid");
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_tr_1_Template, 15, 11, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r137 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r137.orderLevelFees);
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "tr", 17)(2, "td", 123);
    i0.ɵɵtext(3, "No service requests on this case.");
    i0.ɵɵelementEnd()()();
} }
function CaseTransactionsComponent_ng_container_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "table", 15)(2, "thead", 16)(3, "tr", 17)(4, "td", 85);
    i0.ɵɵtext(5, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 101);
    i0.ɵɵtext(7, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 101);
    i0.ɵɵtext(9, "Party");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 119);
    i0.ɵɵtext(11, "Request reference\t");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(12, "td", 87)(13, "td", 18);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(14, CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_14_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(15, CaseTransactionsComponent_ng_container_4_ng_container_2_tbody_15_Template, 4, 0, "tbody", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r133 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(14);
    i0.ɵɵproperty("ngIf", (ctx_r133.orderLevelFees == null ? null : ctx_r133.orderLevelFees.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r133.orderLevelFees == null ? null : ctx_r133.orderLevelFees.length) === 0 && ctx_r133.serviceRequestValue === "false");
} }
function CaseTransactionsComponent_ng_container_4_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "h1", 124);
    i0.ɵɵtext(2, "If you are expecting to pay and are not able to see a service request,");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "p");
    i0.ɵɵtext(4, "please refresh and try in some time.");
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} }
function CaseTransactionsComponent_ng_container_4_div_5_tbody_18_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r156 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 17)(1, "td", 51);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 51);
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 51);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 51);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(11, "td", 51);
    i0.ɵɵelementStart(12, "td", 51)(13, "a", 52);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_4_div_5_tbody_18_tr_1_Template_a_click_13_listener() { const restoredCtx = i0.ɵɵrestoreView(_r156); const payment_r154 = restoredCtx.$implicit; const ctx_r155 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r155.goToPayementView(payment_r154.paymentGroupReference, payment_r154.reference, payment_r154.method)); });
    i0.ɵɵtext(14, "Review");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const payment_r154 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(payment_r154.status);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(5, 4, payment_r154.amount, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 9, payment_r154.date_created, "dd MMM yyyy"));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(payment_r154 == null ? null : payment_r154.reference);
} }
function CaseTransactionsComponent_ng_container_4_div_5_tbody_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20);
    i0.ɵɵtemplate(1, CaseTransactionsComponent_ng_container_4_div_5_tbody_18_tr_1_Template, 15, 12, "tr", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r150 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r150.allPayments);
} }
function CaseTransactionsComponent_ng_container_4_div_5_tbody_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 20)(1, "td", 113);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function CaseTransactionsComponent_ng_container_4_div_5_ccpay_app_unprocessed_payments_20_Template(rf, ctx) { if (rf & 1) {
    const _r158 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ccpay-app-unprocessed-payments", 127);
    i0.ɵɵlistener("getUnprocessedFeeCount", function CaseTransactionsComponent_ng_container_4_div_5_ccpay_app_unprocessed_payments_20_Template_ccpay_app_unprocessed_payments_getUnprocessedFeeCount_0_listener($event) { i0.ɵɵrestoreView(_r158); const ctx_r157 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r157.getUnprocessedFeeCount($event)); })("selectedUnprocessedFeeEvent", function CaseTransactionsComponent_ng_container_4_div_5_ccpay_app_unprocessed_payments_20_Template_ccpay_app_unprocessed_payments_selectedUnprocessedFeeEvent_0_listener($event) { i0.ɵɵrestoreView(_r158); const ctx_r159 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r159.selectedUnprocessedFeeEvent($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r152 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("IS_BUTTON_ENABLE", ctx_r152.takePayment)("LEVEL", 4)("ISTURNOFF", ctx_r152.isTurnOff)("ISSFENABLE", ctx_r152.isStrategicFixEnable)("PAYMENTSLENGTH", ctx_r152.allPayments == null ? null : ctx_r152.allPayments.length)("PAYMENTREF", ctx_r152.paymentRef)("FEE_RECORDS_EXISTS", ctx_r152.isAnyFeeGroupAvilable)("IS_OS_AMT_AVAILABLE", ctx_r152.isGrpOutstandingAmtPositive);
} }
function CaseTransactionsComponent_ng_container_4_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "span", 26);
    i0.ɵɵelement(2, "br");
    i0.ɵɵtext(3, "Payments");
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerStart(4);
    i0.ɵɵelementStart(5, "table", 15)(6, "thead", 16)(7, "tr", 17)(8, "td", 85);
    i0.ɵɵtext(9, "Status");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 84);
    i0.ɵɵtext(11, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 125);
    i0.ɵɵtext(13, "Date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td", 119);
    i0.ɵɵtext(15, "Payment reference");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(16, "td", 83)(17, "td", 18);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(18, CaseTransactionsComponent_ng_container_4_div_5_tbody_18_Template, 2, 1, "tbody", 33);
    i0.ɵɵtemplate(19, CaseTransactionsComponent_ng_container_4_div_5_tbody_19_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(20, CaseTransactionsComponent_ng_container_4_div_5_ccpay_app_unprocessed_payments_20_Template, 1, 8, "ccpay-app-unprocessed-payments", 126);
    i0.ɵɵelementContainerEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r135 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(18);
    i0.ɵɵproperty("ngIf", (ctx_r135.allPayments == null ? null : ctx_r135.allPayments.length) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r135.allPayments == null ? null : ctx_r135.allPayments.length) === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r135.isBulkScanEnable && !ctx_r135.takePayment);
} }
function CaseTransactionsComponent_ng_container_4_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 31)(1, "span", 26);
    i0.ɵɵelement(2, "br");
    i0.ɵɵtext(3, "Refunds");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(4, "ccpay-refund-status", 128);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r136 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ccdCaseNumber", ctx_r136.ccdCaseNumber)("orderParty", ctx_r136.orderParty);
} }
function CaseTransactionsComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 117);
    i0.ɵɵtemplate(2, CaseTransactionsComponent_ng_container_4_ng_container_2_Template, 16, 2, "ng-container", 0);
    i0.ɵɵtemplate(3, CaseTransactionsComponent_ng_container_4_ng_container_3_Template, 5, 0, "ng-container", 0);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 31);
    i0.ɵɵtemplate(5, CaseTransactionsComponent_ng_container_4_div_5_Template, 21, 3, "div", 0);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, CaseTransactionsComponent_ng_container_4_div_6_Template, 5, 2, "div", 118);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r2.serviceRequestValue !== "false" ? "govuk-margin-btm-20px" : "");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !((ctx_r2.orderLevelFees == null ? null : ctx_r2.orderLevelFees.length) === 0 && !ctx_r2.isAnyFeeGroupAvilable) && ctx_r2.serviceRequestValue !== "false");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r2.orderLevelFees == null ? null : ctx_r2.orderLevelFees.length) === 0 && ctx_r2.serviceRequestValue !== "false" && !ctx_r2.isAnyFeeGroupAvilable);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.serviceRequestValue === "false");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r2.check4AllowedRoles2AccessPBApayment());
} }
function CaseTransactionsComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r161 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "ccpay-service-request", 129);
    i0.ɵɵlistener("goToServiceRquestComponent", function CaseTransactionsComponent_ng_container_7_Template_ccpay_service_request_goToServiceRquestComponent_1_listener() { i0.ɵɵrestoreView(_r161); const ctx_r160 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r160.goToServiceRequestPage()); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("viewStatus", ctx_r4.viewStatus)("orderRef", ctx_r4.orderRef)("orderStatus", ctx_r4.orderStatus)("orderCreated", ctx_r4.orderCreated)("orderParty", ctx_r4.orderParty)("orderCCDEvent", ctx_r4.orderCCDEvent)("orderDetail", ctx_r4.orderDetail)("paymentGroupList", ctx_r4.paymentGroups)("LOGGEDINUSERROLES", ctx_r4.LOGGEDINUSERROLES)("ccdCaseNumber", ctx_r4.ccdCaseNumber)("orderFeesTotal", ctx_r4.orderFeesTotal)("orderTotalPayments", ctx_r4.orderTotalPayments)("orderRemissionTotal", ctx_r4.orderRemissionTotal)("isServiceRequest", ctx_r4.serviceRequestValue);
} }
function CaseTransactionsComponent_ccpay_add_remission_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-add-remission", 130);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r5.isTurnOff)("isStrategicFixEnable", ctx_r5.isStrategicFixEnable)("viewCompStatus", ctx_r5.viewStatus)("fee", ctx_r5.feeId)("orderStatus", ctx_r5.orderStatus)("paidAmount", ctx_r5.orderTotalPayments)("isRefundRemission", ctx_r5.isRefundRemission)("caseType", ctx_r5.caseType)("paymentGroupRef", ctx_r5.orderRef)("isFromServiceRequestPage", true)("payment", ctx_r5.payment)("ccdCaseNumber", ctx_r5.ccdCaseNumber);
} }
function CaseTransactionsComponent_ccpay_add_remission_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-add-remission", 131);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r6.isTurnOff)("isStrategicFixEnable", ctx_r6.isStrategicFixEnable)("viewCompStatus", ctx_r6.viewStatus)("isFromServiceRequestPage", true)("payment", ctx_r6.payment)("orderStatus", ctx_r6.orderStatus)("paidAmount", ctx_r6.orderTotalPayments)("isRefundRemission", ctx_r6.isRefundRemission)("caseType", ctx_r6.caseType)("paymentGroupRef", ctx_r6.orderRef)("ccdCaseNumber", ctx_r6.ccdCaseNumber);
} }
function CaseTransactionsComponent_ccpay_add_remission_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-add-remission", 132);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r7.isTurnOff)("isStrategicFixEnable", ctx_r7.isStrategicFixEnable)("viewCompStatus", ctx_r7.viewStatus)("payment", ctx_r7.payment)("orderStatus", ctx_r7.orderStatus)("paidAmount", ctx_r7.orderTotalPayments)("isRefundRemission", ctx_r7.isRefundRemission)("caseType", ctx_r7.caseType)("feeamount", ctx_r7.remissionFeeAmt)("remission", ctx_r7.remissions)("isFromServiceRequestPage", true)("ccdCaseNumber", ctx_r7.ccdCaseNumber);
} }
function CaseTransactionsComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r163 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 133)(2, "span", 134);
    i0.ɵɵtext(3, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "strong", 135)(5, "span", 136);
    i0.ɵɵtext(6, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, " Are you sure you want to delete this fee? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(8, "div", 137)(9, "form", 138)(10, "button", 139);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_11_Template_button_click_10_listener() { i0.ɵɵrestoreView(_r163); const ctx_r162 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r162.cancelRemoval()); });
    i0.ɵɵtext(11, " Cancel ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "button", 140);
    i0.ɵɵlistener("click", function CaseTransactionsComponent_ng_container_11_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r163); const ctx_r164 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r164.removeFee(ctx_r164.feeId)); });
    i0.ɵɵtext(13, " Remove ");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(12);
    i0.ɵɵproperty("disabled", ctx_r8.isRemoveBtnDisabled)("ngClass", ctx_r8.isRemoveBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
const BS_ENABLE_FLAG$2 = 'bulk-scan-enabling-fe';
class CaseTransactionsComponent {
    router;
    paymentViewService;
    bulkScaningPaymentService;
    caseTransactionsService;
    paymentLibComponent;
    OrderslistService;
    LOGGEDINUSERROLES;
    isTakePayment;
    isFromServiceRequestPage;
    takePayment;
    ccdCaseNumber;
    excReference;
    paymentGroups = [];
    payments = [];
    nonPayments = [];
    allPayments = [];
    remissions = [];
    fees = [];
    errorMessage;
    totalFees;
    totalPayments = 0;
    totalNonOffPayments;
    totalRemissions = 0;
    selectedOption;
    dcnNumber;
    paymentRef;
    isTurnOff;
    isRefundRemission = true;
    isStrategicFixEnable;
    isAddFeeBtnEnabled = true;
    isExceptionRecord = false;
    isUnprocessedRecordSelected = false;
    exceptionRecordReference;
    isAnyFeeGroupAvilable = true;
    isHistoricGroupAvailable = false;
    isBulkScanEnable;
    isRemissionsMatch;
    viewStatus = 'main';
    isRemoveBtnDisabled = false;
    feeId;
    clAmountDue = 0;
    overPaymentAmount = 0;
    unprocessedRecordCount;
    isFeeRecordsExist = false;
    isGrpOutstandingAmtPositive = false;
    totalRefundAmount;
    caseType;
    // lsCcdNumber: any = ls.get<any>('ccdNumber');
    payment;
    paymentGroup;
    paymentView;
    //Order changes
    orderDetail = [];
    isAddRemissionEnable = false;
    orderRemissionDetails = [];
    orderLevelFees = [];
    ispaymentGroupApisuccess = false;
    cpoDetails = null;
    orderRef;
    orderStatus;
    orderParty;
    orderCreated;
    orderCCDEvent;
    serviceRequestValue;
    orderAddBtnEnable;
    orderFeesTotal = 0.00;
    orderRemissionTotal = 0.00;
    orderTotalPayments = 0.00;
    orderPendingPayments = 0.00;
    isCPODown;
    test;
    isPBA = false;
    isIssueRefunfBtnEnable = false;
    isAddRemissionBtnEnabled = false;
    isRefundRemissionBtnEnable = false;
    allowedRolesToAccessRefund = ['payments-refund-approver', 'payments-refund'];
    isEligible4PBAPayment = ['pui-finance-manager', 'pui-user-manager', 'pui-organisation-manager', 'pui-case-manager'];
    currentDate = new Date();
    //isFromServiceRequestPage: boolean;
    navigationpage;
    remissionFeeAmt;
    constructor(router, paymentViewService, bulkScaningPaymentService, caseTransactionsService, paymentLibComponent, OrderslistService) {
        this.router = router;
        this.paymentViewService = paymentViewService;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
        this.caseTransactionsService = caseTransactionsService;
        this.paymentLibComponent = paymentLibComponent;
        this.OrderslistService = OrderslistService;
    }
    ngOnInit() {
        this.navigationpage = '';
        if (this.OrderslistService.getpaymentPageView() !== null) {
            this.OrderslistService.getpaymentPageView().subscribe((data) => this.paymentView = data);
        }
        if ((this.LOGGEDINUSERROLES === undefined || this.LOGGEDINUSERROLES.length === 0) && this.OrderslistService.getUserRolesList() !== null) {
            this.OrderslistService.getUserRolesList().subscribe((data) => this.LOGGEDINUSERROLES = data);
        }
        if (this.OrderslistService.getnavigationPageValue() !== null) {
            this.OrderslistService.getnavigationPageValue().subscribe((data) => this.navigationpage = data);
        }
        if (this.paymentView !== undefined && this.paymentView !== null && this.paymentView.payment_group_reference !== undefined && this.navigationpage === 'paymentdetailspage') {
            this.goToPayementView(this.paymentView.payment_group_reference, this.paymentView.reference, this.paymentView.method);
        }
        this.isGrpOutstandingAmtPositive = false;
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.caseType = this.paymentLibComponent.CASETYPE;
        if (this.paymentLibComponent.CCD_CASE_NUMBER === '') {
            this.ccdCaseNumber = this.paymentLibComponent.EXC_REFERENCE;
        }
        this.excReference = this.paymentLibComponent.EXC_REFERENCE;
        this.takePayment = this.paymentLibComponent.TAKEPAYMENT;
        const serviceRequest = this.paymentLibComponent.SERVICEREQUEST;
        if (serviceRequest !== undefined && serviceRequest.toString() === 'true') {
            this.serviceRequestValue = 'true';
        }
        else {
            this.serviceRequestValue = 'false';
            this.paymentLibComponent.isFromServiceRequestPage = false;
        }
        this.isBulkScanEnable = this.paymentLibComponent.ISBSENABLE;
        this.dcnNumber = this.paymentLibComponent.DCN_NUMBER;
        this.selectedOption = this.paymentLibComponent.SELECTED_OPTION.toLocaleLowerCase();
        this.isTurnOff = this.paymentLibComponent.ISTURNOFF;
        this.isStrategicFixEnable = this.paymentLibComponent.ISSFENABLE;
        if (!this.isTurnOff) {
            // if (this.lsCcdNumber !== this.ccdCaseNumber) {
            //   this.router.navigateByUrl(`/ccd-search?takePayment=true`);
            // }
            this.caseTransactionsService.getPaymentGroups(this.ccdCaseNumber).subscribe(paymentGroups => {
                this.isAnyFeeGroupAvilable = true;
                this.paymentGroups = paymentGroups['payment_groups'];
                this.calculateAmounts();
                this.calculateOrderFeesAmounts();
                this.calculateRefundAmount();
                if (this.isFromServiceRequestPage) {
                    this.OrderslistService.getSelectedOrderRefId().subscribe((data) => this.orderRef = data);
                    this.goToOrderViewDetailSection(this.orderRef);
                }
                else {
                    this.paymentViewService.getPartyDetails(this.ccdCaseNumber).subscribe(response => {
                        this.cpoDetails = JSON.parse(response).content[0];
                    }, (error) => {
                        this.errorMessage = error ? error.replace(/"/g, "") : "";
                        this.isCPODown = true;
                    });
                }
            }, (error) => {
                this.errorMessage = error ? error.replace(/"/g, "") : "";
                this.isAnyFeeGroupAvilable = false;
                this.setDefaults();
            });
        }
        else {
            this.caseTransactionsService.getPaymentGroups(this.ccdCaseNumber).subscribe(paymentGroups => {
                this.isAnyFeeGroupAvilable = true;
                this.paymentGroups = paymentGroups['payment_groups'];
                this.calculateAmounts();
                this.calculateOrderFeesAmounts();
                this.totalRefundAmount = this.calculateRefundAmount();
                this.paymentViewService.getPartyDetails(this.ccdCaseNumber).subscribe(response => {
                    this.cpoDetails = JSON.parse(response).content[0];
                }, (error) => {
                    this.errorMessage = error ? error.replace(/"/g, "") : "";
                    this.setDefaults();
                    this.isCPODown = true;
                });
            }, (error) => {
                this.errorMessage = error ? error.replace(/"/g, "") : "";
                this.isAnyFeeGroupAvilable = false;
                this.setDefaults();
            });
        }
        if (this.paymentGroups !== undefined) {
            this.checkForExceptionRecord();
        }
        if (this.OrderslistService.getisFromServiceRequestPages() !== null) {
            this.OrderslistService.getisFromServiceRequestPages().subscribe((data) => this.isFromServiceRequestPage = data);
        }
    }
    setDefaults() {
        this.totalPayments = 0.00;
        this.totalRemissions = 0.00;
        this.totalNonOffPayments = 0.00;
        this.totalFees = 0.00;
    }
    getAllocationStatus(payments) {
        let paymentAllocation = payments.payment_allocation, isAllocationStatusExist = paymentAllocation.length > 0;
        return isAllocationStatusExist ? paymentAllocation[0].allocation_status : '-';
        //return "-";
    }
    checkForExceptionRecord() {
        if (this.paymentGroups.length === 0 && (this.selectedOption.toLocaleLowerCase() === 'ccdorexception' || this.selectedOption.toLocaleLowerCase() === 'rc')) {
            this.bulkScaningPaymentService.getBSPaymentsByCCD(this.ccdCaseNumber).subscribe(recordData => {
                if (recordData['data'] && recordData['data'].exception_record_reference && recordData['data'].exception_record_reference.length > 0 && recordData['data'].ccd_reference > 0) {
                    this.isExceptionRecord = false;
                    this.isAddFeeBtnEnabled = true;
                }
                if (recordData['data'] && recordData['data'].exception_record_reference && recordData['data'].exception_record_reference.length > 0 && recordData['data'].ccd_reference === undefined) {
                    this.isExceptionRecord = true;
                    this.isAddFeeBtnEnabled = false;
                }
                if (recordData['data'] && recordData['data'].exception_record_reference && recordData['data'].exception_record_reference.length === undefined && recordData['data'].ccd_reference > 0) {
                    this.isExceptionRecord = false;
                    this.isAddFeeBtnEnabled = true;
                }
            });
        }
        if (this.paymentGroups.length === 0 && this.selectedOption.toLocaleLowerCase() === 'dcn') {
            if (this.paymentLibComponent.CCD_CASE_NUMBER.length > 0 && this.paymentLibComponent.EXC_REFERENCE.length > 0) {
                this.isExceptionRecord = false;
                this.isAddFeeBtnEnabled = true;
            }
            else if (this.paymentLibComponent.CCD_CASE_NUMBER.length === 0 && this.paymentLibComponent.EXC_REFERENCE.length > 0) {
                this.isExceptionRecord = true;
                this.isAddFeeBtnEnabled = false;
            }
            else {
                this.isExceptionRecord = false;
                this.isAddFeeBtnEnabled = true;
            }
        }
        if (this.paymentGroups.length > 0)
            this.paymentGroups.forEach(paymentGroup => {
                if (paymentGroup.payments) {
                    paymentGroup.payments.forEach(payment => {
                        if (payment.case_reference !== undefined && payment.ccd_case_number === undefined) {
                            this.isExceptionRecord = true;
                            this.isAddFeeBtnEnabled = false;
                        }
                        else {
                            this.isExceptionRecord = false;
                            this.isAddFeeBtnEnabled = true;
                        }
                    });
                }
            });
    }
    calculateOrderFeesAmounts() {
        let feesTotal = 0.00;
        this.paymentGroups.forEach(paymentGroup => {
            this.resetOrderVariables();
            if (paymentGroup.fees) {
                paymentGroup.fees.forEach(fee => {
                    this.orderFeesTotal = this.orderFeesTotal + fee.calculated_amount;
                    this.overPaymentAmount = this.overPaymentAmount + fee.over_payment;
                });
            }
            if (paymentGroup.remissions) {
                paymentGroup.remissions.forEach(remission => {
                    this.orderRemissionTotal = this.orderRemissionTotal + remission.hwf_amount;
                });
            }
            if (paymentGroup.payments) {
                const isFeeOverPaymentExist = this.overPaymentAmount === 0;
                paymentGroup.payments.forEach(payment => {
                    if (isFeeOverPaymentExist) {
                        this.overPaymentAmount = this.overPaymentAmount + payment.over_payment;
                    }
                    if (payment.status.toUpperCase() === 'SUCCESS') {
                        this.orderTotalPayments = this.orderTotalPayments + payment.amount;
                    }
                });
            }
            // this.orderPendingPayments = (this.orderFeesTotal - this.orderRemissionTotal) - this.orderTotalPayments;
            if (paymentGroup.service_request_status === 'Paid') {
                this.orderStatus = paymentGroup.service_request_status;
                this.orderAddBtnEnable = false;
            }
            else if (paymentGroup.service_request_status === 'Partially paid' || paymentGroup.service_request_status === 'Not paid') {
                this.orderStatus = paymentGroup.service_request_status;
                this.orderAddBtnEnable = true;
            }
            else if (paymentGroup.service_request_status === 'Disputed') {
                this.orderStatus = paymentGroup.service_request_status;
                this.orderAddBtnEnable = true;
            }
            //this.orderLevelFees.push({orderRefId:paymentGroup['payment_group_reference'],orderTotalFees: this.orderFeesTotal,orderStatus: this.orderStatus,orderParty:'Santosh', orderCCDEvent:'Case Creation',orderCreated: new Date(), orderAddBtnEnable: this.orderAddBtnEnable}); this.cpoDetails['createdTimestamp']
            if (this.cpoDetails !== null) {
                this.orderLevelFees.push({ orderRefId: paymentGroup['payment_group_reference'], orderTotalFees: this.orderFeesTotal, orderStatus: this.orderStatus, orderParty: this.cpoDetails['responsibleParty'], orderCCDEvent: this.cpoDetails['action'], orderCreated: paymentGroup['date_created'], orderAddBtnEnable: this.orderAddBtnEnable });
            }
            else {
                this.orderLevelFees.push({ orderRefId: paymentGroup['payment_group_reference'], orderTotalFees: this.orderFeesTotal, orderStatus: this.orderStatus, orderParty: '', orderCCDEvent: '', orderCreated: paymentGroup['date_created'], orderAddBtnEnable: this.orderAddBtnEnable });
            }
            if (this.orderStatus !== 'Paid') {
                this.OrderslistService.setOrdersList(this.orderLevelFees);
            }
        });
    }
    ;
    resetOrderVariables() {
        this.orderFeesTotal = 0.00;
        this.orderTotalPayments = 0.00;
        this.orderRemissionTotal = 0.00;
        this.orderPendingPayments = 0.00;
        this.isAddFeeBtnEnabled = true;
    }
    ;
    goToOrderViewDetailSection(orderReferenceObj) {
        if (this.isFromServiceRequestPage) {
            this.OrderslistService.setOrderRefId(orderReferenceObj);
            this.orderRef = orderReferenceObj;
        }
        else {
            this.OrderslistService.setOrderRefId(orderReferenceObj.orderRefId);
            this.orderRef = orderReferenceObj.orderRefId;
        }
        this.orderFeesTotal = 0.00;
        this.orderRemissionTotal = 0.00;
        this.orderTotalPayments = 0.00;
        this.orderPendingPayments = 0.00;
        this.orderDetail = this.paymentGroups.filter(x => x.payment_group_reference === this.orderRef);
        this.orderDetail.forEach(orderDetail => {
            if (orderDetail.fees) {
                orderDetail.fees.forEach(fee => {
                    this.orderFeesTotal = this.orderFeesTotal + fee.calculated_amount;
                });
            }
            if (orderDetail.remissions) {
                orderDetail.remissions.forEach(remission => {
                    this.orderRemissionTotal = this.orderRemissionTotal + remission.hwf_amount;
                });
                if (orderDetail.payments) {
                    this.payment = orderDetail.payments[0];
                    orderDetail.payments.forEach(payment => {
                        if (payment.status.toUpperCase() === 'SUCCESS') {
                            this.orderTotalPayments = this.orderTotalPayments + payment.amount;
                        }
                    });
                }
            }
            this.orderStatus = orderDetail.service_request_status;
        });
        //this.orderPendingPayments = (this.orderFeesTotal - this.orderRemissionTotal) - this.orderTotalPayments;
        // this.orderRef = orderReferenceObj.orderRefId;
        // if (this.orderPendingPayments <= 0.00) {
        //   this.orderStatus = 'Paid';
        // } else if (this.orderFeesTotal > 0 && (this.orderTotalPayments > 0 || this.orderRemissionTotal > 0) && (this.orderTotalPayments < this.orderPendingPayments)) {
        //   this.orderStatus = 'Partially paid'
        // } else {
        //   this.orderStatus = 'Not paid'
        // }
        if (this.cpoDetails !== null) {
            this.orderParty = this.cpoDetails['responsibleParty'];
            this.orderCreated = this.cpoDetails['createdTimestamp'];
            this.orderCCDEvent = this.cpoDetails['action'];
        }
        else {
            this.orderParty = '';
            this.orderCCDEvent = '';
            this.orderCreated = orderReferenceObj.orderCreated;
        }
        this.viewStatus = 'order-full-view';
    }
    redirectToOrderFeeSearchPage(event, orderef) {
        if (orderef.orderAddBtnEnable) {
            event.preventDefault();
            this.paymentLibComponent.bspaymentdcn = null;
            this.paymentLibComponent.paymentGroupReference = orderef.orderRefId;
            this.paymentLibComponent.isTurnOff = this.isTurnOff;
            this.paymentLibComponent.viewName = 'fee-summary';
        }
    }
    calculateAmounts() {
        let feesTotal = 0.00, paymentsTotal = 0.00, remissionsTotal = 0.00, nonOffLinePayment = 0.00;
        this.paymentGroups.forEach(paymentGroup => {
            if (paymentGroup.fees) {
                paymentGroup.fees.forEach(fee => {
                    // new feature Apportionment toggle changes
                    if (!this.isTurnOff) {
                        if (fee.date_created) {
                            let a = fee.amount_due === undefined;
                            let b = fee.amount_due <= 0;
                            this.clAmountDue = a ? this.clAmountDue + fee.net_amount : b ? this.clAmountDue + 0 : this.clAmountDue + fee.amount_due;
                        }
                        fee['payment_group_reference'] = paymentGroup['payment_group_reference'];
                        this.fees.push(fee);
                    }
                    else {
                        feesTotal = feesTotal + fee.calculated_amount;
                        this.fees.push(fee);
                    }
                });
            }
            if (this.isTurnOff) {
                this.totalFees = feesTotal;
            }
            if (paymentGroup.payments) {
                paymentGroup.payments.forEach(payment => {
                    // new feature Apportionment toggle changes
                    if (!this.isTurnOff) {
                        let allocationLen = payment.payment_allocation;
                        if (payment.status.toUpperCase() === 'SUCCESS') {
                            paymentsTotal = paymentsTotal + payment.amount;
                            if (allocationLen.length === 0 || allocationLen.length > 0 && allocationLen[0].allocation_status === 'Allocated') {
                                nonOffLinePayment = nonOffLinePayment + payment.amount;
                            }
                            if (allocationLen.length > 0) {
                                this.nonPayments.push(payment);
                            }
                        }
                        if (allocationLen.length === 0) {
                            this.payments.push(payment);
                        }
                        payment.paymentGroupReference = paymentGroup.payment_group_reference;
                        this.allPayments.push(payment);
                    }
                    else {
                        if (payment.status.toUpperCase() === 'SUCCESS') {
                            paymentsTotal = paymentsTotal + payment.amount;
                            this.payments.push(payment);
                        }
                        payment.paymentGroupReference = paymentGroup.payment_group_reference;
                        this.allPayments.push(payment);
                    }
                });
            }
            this.totalPayments = paymentsTotal;
            // new feature Apportionment toggle changes
            if (!this.isTurnOff) {
                this.totalNonOffPayments = nonOffLinePayment;
            }
            if (paymentGroup.remissions) {
                paymentGroup.remissions.forEach(remisison => {
                    remissionsTotal = remissionsTotal + remisison.hwf_amount;
                    this.remissions.push(remisison);
                });
            }
            this.totalRemissions = remissionsTotal;
        });
    }
    calculateRefundAmount() {
        if (!this.isTurnOff) {
            let isNewPaymentGroup = false;
            this.paymentGroups.forEach((paymentGroup, index) => {
                let grpOutstandingAmount = 0.00, feesTotal = 0.00, paymentsTotal = 0.00, remissionsTotal = 0.00, fees = [];
                if (paymentGroup.fees) {
                    // this.isFeeRecordsExist = true;
                    paymentGroup.fees.forEach(fee => {
                        feesTotal = feesTotal + fee.calculated_amount;
                        this.isRemissionsMatch = false;
                        if (paymentGroup.remissions) {
                            paymentGroup.remissions.forEach(rem => {
                                if (rem.fee_code === fee.code) {
                                    this.isRemissionsMatch = true;
                                    fee['remissions'] = rem;
                                    // if(!fees.find(k => k.code=fee.code))
                                    // {
                                    fees.push(fee);
                                    //}
                                }
                            });
                        }
                        if (!this.isRemissionsMatch) {
                            fees.push(fee);
                        }
                        if (fee.date_created) {
                            isNewPaymentGroup = true;
                        }
                        else {
                            this.isHistoricGroupAvailable = true;
                            this.paymentGroups[index]['old'] = true;
                        }
                    });
                    this.paymentGroups[index].fees = fees;
                }
                if (paymentGroup.payments) {
                    paymentGroup.payments.forEach(payment => {
                        if (payment.status.toUpperCase() === 'SUCCESS') {
                            paymentsTotal = paymentsTotal + payment.amount;
                        }
                    });
                }
                if (paymentGroup.remissions) {
                    paymentGroup.remissions.forEach(remission => {
                        remissionsTotal = remissionsTotal + remission.hwf_amount;
                    });
                }
                grpOutstandingAmount = (feesTotal - remissionsTotal) - paymentsTotal;
                if (grpOutstandingAmount > 0 && isNewPaymentGroup) {
                    this.isAnyFeeGroupAvilable = true;
                    this.isFeeRecordsExist = true;
                    this.paymentRef = paymentGroup.payment_group_reference;
                }
                if (paymentGroup.fees && paymentGroup.fees.length > 0 && grpOutstandingAmount <= 0 && isNewPaymentGroup) {
                    this.isAnyFeeGroupAvilable = false;
                }
            });
            if ((!isNewPaymentGroup && this.isHistoricGroupAvailable) || (!isNewPaymentGroup && !this.isHistoricGroupAvailable)) {
                this.isAnyFeeGroupAvilable = false;
            }
        }
        else {
            let totalRefundAmount = 0, isFeeAmountZero = false;
            this.paymentGroups.forEach(paymentGroup => {
                let grpOutstandingAmount = 0.00, feesTotal = 0.00, paymentsTotal = 0.00, remissionsTotal = 0.00;
                if (paymentGroup.fees) {
                    this.isFeeRecordsExist = true;
                    paymentGroup.fees.forEach(fee => {
                        feesTotal = feesTotal + fee.calculated_amount;
                        if (fee.calculated_amount === 0) {
                            isFeeAmountZero = true;
                        }
                    });
                }
                if (paymentGroup.payments) {
                    paymentGroup.payments.forEach(payment => {
                        if (payment.status.toUpperCase() === 'SUCCESS') {
                            paymentsTotal = paymentsTotal + payment.amount;
                        }
                    });
                }
                if (paymentGroup.remissions) {
                    paymentGroup.remissions.forEach(remission => {
                        remissionsTotal = remissionsTotal + remission.hwf_amount;
                    });
                }
                grpOutstandingAmount = (feesTotal - remissionsTotal) - paymentsTotal;
                if (grpOutstandingAmount < 0) {
                    if (totalRefundAmount === 0) {
                        totalRefundAmount = grpOutstandingAmount;
                    }
                    else {
                        totalRefundAmount = (totalRefundAmount + grpOutstandingAmount);
                    }
                }
                else if (grpOutstandingAmount > 0 || (grpOutstandingAmount === 0 && isFeeAmountZero)) {
                    this.isGrpOutstandingAmtPositive = true;
                }
            });
            return totalRefundAmount * -1;
        }
    }
    getGroupOutstandingAmount(paymentGroup) {
        return this.bulkScaningPaymentService.calculateOutStandingAmount(paymentGroup);
    }
    redirectToFeeSearchPage(event) {
        event.preventDefault();
        let url = this.isBulkScanEnable ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
        url += this.isTurnOff ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
        url += this.isStrategicFixEnable ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
        url += `&caseType=${this.caseType}`;
        this.router.navigateByUrl(`/fee-search?selectedOption=${this.selectedOption}&ccdCaseNumber=${this.ccdCaseNumber}${url}`);
    }
    addRemission(fee) {
        if (this.chkForAddRemission(fee.code)) {
            this.feeId = fee;
            this.viewStatus = 'addremission';
            this.paymentViewService.getApportionPaymentDetails(this.payment.reference).subscribe(paymentGroup => {
                this.paymentGroup = paymentGroup;
                this.paymentGroup.payments = this.paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj['reference'].includes(this.paymentLibComponent.paymentReference));
                this.payment = this.paymentGroup.payments[0];
                // const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
                // this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
            }, (error) => this.errorMessage = error ? error.replace(/"/g, "") : "");
        }
    }
    addRefundForRemission(payment, remission, fees) {
        this.paymentViewService.getApportionPaymentDetails(payment.reference).subscribe(paymentGroup => {
            this.paymentGroup = paymentGroup;
            this.paymentGroup.payments = paymentGroup.payments.filter(paymentGroupObj => paymentGroupObj.reference === payment.reference);
            this.payment = this.paymentGroup.payments[0];
            this.remissions = remission;
            this.remissionFeeAmt = fees.filter(data => data.code === this.remissions['fee_code'])[0].net_amount;
            this.viewStatus = 'addrefundforremission';
            // const paymentAllocation = this.paymentGroup.payments[0].payment_allocation;
            // this.isStatusAllocated = paymentAllocation.length > 0 && paymentAllocation[0].allocation_status === 'Allocated' || paymentAllocation.length === 0;
        }, (error) => this.errorMessage = error);
    }
    redirectToremissionPage(event) {
        event.preventDefault();
        this.paymentLibComponent.viewName = 'remission';
    }
    goToServiceRequestPage() {
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.TAKEPAYMENT = false;
        this.paymentLibComponent.SERVICEREQUEST = 'true';
        this.paymentLibComponent.isFromServiceRequestPage = true;
        window.location.reload();
    }
    redirectToReportsPage(event) {
        event.preventDefault();
        this.router.navigateByUrl(`/reports?selectedOption=${this.selectedOption}&ccdCaseNumber=${this.ccdCaseNumber}`);
    }
    loadFeeSummaryPage(paymentGroup) {
        this.paymentLibComponent.bspaymentdcn = null;
        this.paymentLibComponent.paymentGroupReference = paymentGroup.payment_group_reference;
        this.paymentLibComponent.isTurnOff = this.isTurnOff;
        this.paymentLibComponent.viewName = 'fee-summary';
    }
    goToPaymentViewComponent(paymentGroup) {
        this.paymentLibComponent.paymentMethod = paymentGroup.paymentMethod;
        this.paymentLibComponent.paymentGroupReference = paymentGroup.paymentGroupReference;
        this.paymentLibComponent.paymentReference = paymentGroup.paymentReference;
        this.paymentLibComponent.viewName = 'payment-view';
    }
    goToPayementView(paymentGroupReference, paymentReference, paymentMethod) {
        this.goToPaymentViewComponent({ paymentGroupReference, paymentReference, paymentMethod });
    }
    selectedUnprocessedFeeEvent(unprocessedRecordId) {
        if (unprocessedRecordId) {
            if (this.isTurnOff) {
                this.isAddFeeBtnEnabled = false;
            }
            this.isUnprocessedRecordSelected = true;
        }
        else {
            if (this.isTurnOff) {
                this.isAddFeeBtnEnabled = true;
            }
            this.isUnprocessedRecordSelected = false;
        }
    }
    getUnprocessedFeeCount(unProcessedRecordCount) {
        this.unprocessedRecordCount = unProcessedRecordCount;
    }
    calculateAmountDue(fee) {
        if (fee.date_created) {
            return fee.amount_due !== undefined ? fee.amount_due : fee.net_amount;
        }
        else {
            return "0.00";
        }
    }
    confirmRemoveFee(fee) {
        this.isRemoveBtnDisabled = false;
        this.feeId = fee;
        this.viewStatus = 'feeRemovalConfirmation';
    }
    cancelRemoval() {
        this.viewStatus = 'main';
    }
    removeFee(fee) {
        this.isRemoveBtnDisabled = true;
        this.paymentViewService.deleteFeeFromPaymentGroup(fee).subscribe((success) => {
            window.location.reload();
        }, (error) => {
            this.errorMessage = error;
            this.isRemoveBtnDisabled = false;
        });
    }
    isCheckAmountdueExist(amountDue) {
        return typeof amountDue === 'undefined';
    }
    issueRefund(payment) {
        if (payment !== null && payment !== undefined) {
            if (this.chkIssueRefundBtnEnable(payment)) {
                this.viewStatus = 'issuerefund';
                this.payment = payment;
                this.paymentLibComponent.isFromServiceRequestPage = true;
                this.isRefundRemission = true;
            }
        }
    }
    chkForAddRemission(feeCode) {
        if (this.chkForPBAPayment() && this.check4AllowedRoles2AccessRefund()) {
            if (this.orderDetail[0]['remissions'].length > 0) {
                for (const remission of this.orderDetail[0]['remissions']) {
                    if (remission.fee_code === feeCode) {
                        return false;
                    }
                }
            }
            return true;
        }
        else {
            return false;
        }
    }
    chkForPBAPayment() {
        if (this.orderDetail !== null && this.orderDetail !== undefined) {
            this.orderDetail.forEach(orderDetail => {
                if (orderDetail.payments) {
                    orderDetail.payments.forEach(payment => {
                        if (payment.method.toLocaleLowerCase() === 'payment by account' && this.allowFurtherAccessAfter4Days(payment)) {
                            this.isPBA = true;
                        }
                    });
                }
            });
            if (this.isPBA) {
                return true;
            }
            else {
                return false;
            }
            ;
        }
    }
    chkIssueRefundBtnEnable(payment) {
        if (payment !== null && payment !== undefined) {
            return payment.issue_refund && payment.refund_enable;
        }
        else {
            return false;
        }
        // if (this.check4AllowedRoles2AccessRefund() && this.allowFurtherAccessAfter4Days(payment) &&
        //   payment.method === 'payment by account' && payment.status.toLocaleLowerCase() === 'success') {
        //   this.isIssueRefunfBtnEnable = true;
        // }
        // if (this.isIssueRefunfBtnEnable) {
        //   return true;
        // } else {
        //   return false;
        // };
    }
    chkIsRefundRemissionBtnEnable() {
        if (this.orderDetail !== null && this.orderDetail !== undefined) {
            this.paymentLibComponent.isFromServiceRequestPage = true;
            this.orderDetail.forEach(orderDetail => {
                if (orderDetail.payments) {
                    orderDetail.payments.forEach(payment => {
                        if (payment.method.toLocaleLowerCase() === 'payment by account' && payment.status.toLocaleLowerCase() === 'success' && this.allowFurtherAccessAfter4Days(payment)) {
                            this.isRefundRemissionBtnEnable = true;
                        }
                    });
                }
            });
            if (this.isRefundRemissionBtnEnable) {
                return true;
            }
            else {
                return false;
            }
            ;
        }
    }
    check4AllowedRoles2AccessRefund = () => {
        return this.allowedRolesToAccessRefund.some(role => this.LOGGEDINUSERROLES.indexOf(role) !== -1);
    };
    check4AllowedRoles2AccessPBApayment = () => {
        return this.isEligible4PBAPayment.some(role => this.LOGGEDINUSERROLES.indexOf(role) !== -1);
    };
    allowFurtherAccessAfter4Days = (payment) => {
        if (payment !== null && payment !== undefined) {
            let tmp4DayAgo = new Date();
            tmp4DayAgo.setDate(tmp4DayAgo.getDate() - 4);
            return tmp4DayAgo >= new Date(payment.date_created);
        }
    };
    loadPBAAccountPage(orderRef) {
        this.paymentLibComponent.pbaPayOrderRef = orderRef;
        this.paymentLibComponent.viewName = 'pba-payment';
    }
    static ɵfac = function CaseTransactionsComponent_Factory(t) { return new (t || CaseTransactionsComponent)(i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(BulkScaningPaymentService), i0.ɵɵdirectiveInject(CaseTransactionsService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: CaseTransactionsComponent, selectors: [["ccpay-case-transactions"]], inputs: { LOGGEDINUSERROLES: "LOGGEDINUSERROLES", isTakePayment: "isTakePayment", isFromServiceRequestPage: "isFromServiceRequestPage" }, decls: 12, vars: 8, consts: [[4, "ngIf"], ["type", "hidden", "value", "FEEREMOVALCONFIRMATION_2", 1, "iFrameDrivenImageValue"], ["myInput", ""], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "fee", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "isFromServiceRequestPage", "payment", "ccdCaseNumber", 4, "ngIf"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "isFromServiceRequestPage", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "ccdCaseNumber", 4, "ngIf"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "feeamount", "remission", "isFromServiceRequestPage", "ccdCaseNumber", 4, "ngIf"], ["class", "govuk-grid-row govuk-grid__surplus-payments", 4, "ngIf"], ["class", "govuk-grid-row", 4, "ngIf"], [1, "govuk-grid-row"], ["class", " govuk-!-margin-top-9", 4, "ngIf"], [1, "govuk-grid-column-two-thirds"], [1, "govuk-heading-xl"], ["class", "govuk-grid-column-two-thirds govuk-!-padding-bottom-6 govuk-!-padding-top-6", 4, "ngIf"], [1, "govuk-grid-column-full", "govuk-!-padding-bottom-3"], [1, "govuk-section-break", "govuk-section-break--visible"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header"], ["class", "govuk-table__header govuk-table__header--custom", "scope", "col", 4, "ngIf"], [1, "govuk-table__body"], [1, "totalpayments", "govuk-table__row"], [1, "govuk-table__cell", "summary-table-font"], ["class", "govuk-table__cell case-transaction__color summary-table-font", 4, "ngIf"], ["class", "govuk-grid-column-two-thirds", 4, "ngIf"], [1, "govuk-grid-column-two-thirds", "govuk-!-padding-bottom-6", "govuk-!-padding-top-6"], [1, "heading-medium"], ["scope", "col", 1, "govuk-table__header", "govuk-table__header--custom"], [1, "govuk-table__cell", "case-transaction__color", "summary-table-font"], ["type", "submit", 3, "disabled", "ngClass", "click"], [1, "govuk-!-margin-top-9"], [1, "govuk-grid-column-full"], ["class", "govuk-table__body", 4, "ngFor", "ngForOf"], ["class", "govuk-table__body", 4, "ngIf"], ["class", "hmcts-banner", 4, "ngIf"], ["class", "panel panel-no--style", 4, "ngIf"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], [1, "govuk-table__cell"], ["class", "govuk-table__cell govuk-!-font-weight-bold", 4, "ngIf"], ["class", "govuk-table__cell", 4, "ngIf"], [1, "govuk-table__cell", "govuk-!-font-weight-bold"], [3, "ngClass", "click"], ["colspan", "7", 1, "govuk-table__cell"], [1, "hmcts-banner"], ["fill", "currentColor", "role", "presentation", "focusable", "false", "xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 25 25", "height", "25", "width", "25", 1, "hmcts-banner__icon"], ["d", "M13.7,18.5h-2.4v-2.4h2.4V18.5z M12.5,13.7c-0.7,0-1.2-0.5-1.2-1.2V7.7c0-0.7,0.5-1.2,1.2-1.2s1.2,0.5,1.2,1.2v4.8\n                C13.7,13.2,13.2,13.7,12.5,13.7z M12.5,0.5c-6.6,0-12,5.4-12,12s5.4,12,12,12s12-5.4,12-12S19.1,0.5,12.5,0.5z"], [1, "hmcts-banner__message"], [1, "hmcts-banner__assistive"], [1, "panel", "panel-no--style"], ["scope", "col", 1, "govuk-table__header", "col-28"], ["scope", "col", 1, "govuk-table__header", "col-15"], [1, "govuk-table__cell", "whitespace-inherit"], ["href", "javascript:void(0)", 3, "click"], [1, "channel", "govuk-table__cell", "whitespace-inherit"], [1, "govuk-table__cell", "capitalize", "whitespace-inherit"], ["colspan", "5", 1, "govuk-table__cell"], ["align", "right", 1, "govuk-grid-column-one-third"], [1, "button", 3, "ngClass", "click"], [1, "govuk-grid-column-two-thirds", "govuk-!-padding-bottom-6"], [4, "ngFor", "ngForOf"], [3, "IS_BUTTON_ENABLE", "LEVEL", "PAYMENTSLENGTH", "PAYMENTREF", "ISTURNOFF", "ISSFENABLE", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent", 4, "ngIf"], [1, "heading-small"], ["colspan", "6", 1, "govuk-table__cell"], [1, "govuk-grid-column-full", "govuk-grid-column-full--gr"], [1, "feeclass"], ["scope", "col", 1, "groupamount", "govuk-table__header"], ["class", "govuk-inset-text govuk-inset-text__no-border", 4, "ngIf"], [1, "govuk-table__cell", "govuk-table__cell--col1"], [1, "govuk-table__cell", "govuk-table__cell--col2"], [1, "govuk-table__cell", "govuk-table__cell--col3", "align-center"], [1, "govuk-table__cell", "govuk-table__cell--col4"], [1, "govuk-table__cell", "govuk-table__cell--col5"], ["class", "govuk-table__cell govuk-table__cell--col6 govuk-table__custom--col6", 4, "ngIf"], [1, "govuk-table__cell", "govuk-table__cell--col6", "govuk-table__custom--col6"], [1, "govuk-inset-text", "govuk-inset-text__no-border"], [1, "govuk-hidetext"], [1, "summary"], [1, "panel", "panel-border-narrow"], [3, "IS_BUTTON_ENABLE", "LEVEL", "PAYMENTSLENGTH", "PAYMENTREF", "ISTURNOFF", "ISSFENABLE", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent"], [1, "govuk-grid-row", "govuk-grid__surplus-payments"], [1, "govuk-grid-column-full", "govuk-grid__surplus-payments-col1"], [3, "IS_BUTTON_ENABLE", "LEVEL", "ISTURNOFF", "ISSFENABLE", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "PAYMENTSLENGTH", "PAYMENTREF", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent", 4, "ngIf"], [3, "IS_BUTTON_ENABLE", "LEVEL", "ISTURNOFF", "ISSFENABLE", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "PAYMENTSLENGTH", "PAYMENTREF", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent"], ["scope", "col", 1, "govuk-table__header", "col-13"], ["scope", "col", 1, "govuk-table__header", "col-10"], ["scope", "col", 1, "govuk-table__header", "col-14"], ["scope", "col", 1, "govuk-table__header", "col-20"], ["scope", "col", 1, "govuk-table__header", "col-9"], ["class", "govuk-table", 3, "IS_BUTTON_ENABLE", "LEVEL", "ISTURNOFF", "ISSFENABLE", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "PAYMENTSLENGTH", "PAYMENTREF", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent", 4, "ngIf"], [1, "govuk-table__cell", "col-13", "whitespace-inherit"], [1, "govuk-table__cell", "col-10", "whitespace-inherit"], [1, "govuk-table__cell", "col-17", "whitespace-inherit"], [1, "govuk-table__cell", "col-24", "whitespace-inherit"], [1, "govuk-table", 3, "IS_BUTTON_ENABLE", "LEVEL", "ISTURNOFF", "ISSFENABLE", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "PAYMENTSLENGTH", "PAYMENTREF", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent"], [1, "govuk-grid-column-two-thirds", "govuk-heading-l", "govuk-!-margin-top-0"], ["class", " govuk-!-margin-bottom-6 alignself", 4, "ngIf"], ["class", "govuk-!-margin-bottom-3 col-55 alignself", 4, "ngIf"], ["scope", "col", 1, "govuk-table__header", "col-25"], ["class", "govuk-table__header govuk-table__header--custom col-25", "scope", "col", 4, "ngIf"], ["type", "hidden", "value", "ORDERIDDETAILS", 1, "iFrameDrivenImageValue"], [1, "paymentrequest"], ["scope", "col", 1, "govuk-table__header", "col-18"], ["scope", "col", 1, "govuk-table__header", "col-21"], ["scope", "col", 1, "govuk-table__header", "col"], ["class", "govuk-table__body alignleft", 4, "ngIf"], [3, "click"], [3, "IS_BUTTON_ENABLE", "LEVEL", "PAYMENTSLENGTH", "ISTURNOFF", "ISSFENABLE", "PAYMENTREF", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent", 4, "ngIf"], [1, "govuk-!-margin-bottom-6", "alignself"], [1, "govuk-!-margin-bottom-3", "col-55", "alignself"], ["scope", "col", 1, "govuk-table__header", "govuk-table__header--custom", "col-25"], ["class", "govuk-table__cell whitespace-inherit", 4, "ngIf"], [1, "alignright"], [1, "govuk-table__body", "alignleft"], ["colspan", "6"], [3, "IS_BUTTON_ENABLE", "LEVEL", "PAYMENTSLENGTH", "ISTURNOFF", "ISSFENABLE", "PAYMENTREF", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent"], [1, "govuk-table__cell", "col-14", "whitespace-inherit"], [3, "ccdCaseNumber", "isTurnOff", "orderParty", "LOGGEDINUSERROLES"], [1, "govuk-grid-column-full", 3, "ngClass"], ["class", "govuk-grid-column-full", 4, "ngIf"], ["scope", "col", 1, "govuk-table__header", "col-24"], ["class", "govuk-table__cell  whitespace-inherit", 4, "ngIf"], [1, "govuk-table__cell", "of-visible"], ["href", "javascript:void(0)", 3, "click", 4, "ngIf"], ["colspan", "7", 1, "alignleft"], [1, "govuk-heading-l", "govuk-heading-lw"], ["scope", "col", 1, "govuk-table__header", "col-17"], ["class", "govuk-table", 3, "IS_BUTTON_ENABLE", "LEVEL", "ISTURNOFF", "ISSFENABLE", "PAYMENTSLENGTH", "PAYMENTREF", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent", 4, "ngIf"], [1, "govuk-table", 3, "IS_BUTTON_ENABLE", "LEVEL", "ISTURNOFF", "ISSFENABLE", "PAYMENTSLENGTH", "PAYMENTREF", "FEE_RECORDS_EXISTS", "IS_OS_AMT_AVAILABLE", "getUnprocessedFeeCount", "selectedUnprocessedFeeEvent"], [3, "ccdCaseNumber", "orderParty"], [3, "viewStatus", "orderRef", "orderStatus", "orderCreated", "orderParty", "orderCCDEvent", "orderDetail", "paymentGroupList", "LOGGEDINUSERROLES", "ccdCaseNumber", "orderFeesTotal", "orderTotalPayments", "orderRemissionTotal", "isServiceRequest", "goToServiceRquestComponent"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "fee", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "isFromServiceRequestPage", "payment", "ccdCaseNumber"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "isFromServiceRequestPage", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "paymentGroupRef", "ccdCaseNumber"], [3, "isTurnOff", "isStrategicFixEnable", "viewCompStatus", "payment", "orderStatus", "paidAmount", "isRefundRemission", "caseType", "feeamount", "remission", "isFromServiceRequestPage", "ccdCaseNumber"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "govuk-button-grb"], ["novalidate", ""], ["type", "submit", 1, "button", "govuk-button--secondary", 3, "click"], ["type", "submit", 1, "button", 3, "disabled", "ngClass", "click"]], template: function CaseTransactionsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div")(1, "main");
            i0.ɵɵtemplate(2, CaseTransactionsComponent_ng_container_2_Template, 5, 4, "ng-container", 0);
            i0.ɵɵtemplate(3, CaseTransactionsComponent_ng_container_3_Template, 72, 36, "ng-container", 0);
            i0.ɵɵtemplate(4, CaseTransactionsComponent_ng_container_4_Template, 7, 5, "ng-container", 0);
            i0.ɵɵelement(5, "input", 1, 2);
            i0.ɵɵtemplate(7, CaseTransactionsComponent_ng_container_7_Template, 2, 14, "ng-container", 0);
            i0.ɵɵtemplate(8, CaseTransactionsComponent_ccpay_add_remission_8_Template, 1, 12, "ccpay-add-remission", 3);
            i0.ɵɵtemplate(9, CaseTransactionsComponent_ccpay_add_remission_9_Template, 1, 11, "ccpay-add-remission", 4);
            i0.ɵɵtemplate(10, CaseTransactionsComponent_ccpay_add_remission_10_Template, 1, 12, "ccpay-add-remission", 5);
            i0.ɵɵtemplate(11, CaseTransactionsComponent_ng_container_11_Template, 14, 2, "ng-container", 0);
            i0.ɵɵelementEnd()();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "main1");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "main" && !ctx.isTurnOff && ctx.takePayment);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", !ctx.takePayment && ctx.viewStatus === "main");
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "order-full-view");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addremission" && ctx.feeId);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "issuerefund" && ctx.payment);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "addrefundforremission" && ctx.payment);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "feeRemovalConfirmation");
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.NgControlStatusGroup, i1$1.NgForm, UnprocessedPaymentsComponent, AddRemissionComponent, RefundStatusComponent, ServiceRequestComponent, i3.LowerCasePipe, i3.CurrencyPipe, i3.DatePipe, CcdHyphensPipe], styles: [".govuk-grid-column-full--gr[_ngcontent-%COMP%]{position:relative;margin-bottom:10px}.disable[_ngcontent-%COMP%]{text-decoration:none;cursor:default;color:#fff;background-color:gray;pointer-events:none}.govuk-grid__surplus-payments[_ngcontent-%COMP%]{margin:20px 0}.govuk-grid__surplus-payments[_ngcontent-%COMP%] > .govuk-grid-column-full[_ngcontent-%COMP%]{padding:0}.govuk-grid__surplus-payments-col1[_ngcontent-%COMP%]{margin-bottom:10px}.govuk-inset-text__no-border[_ngcontent-%COMP%]{border-left:0px}.govuk-hidetext[_ngcontent-%COMP%]{font-size:22px;padding-bottom:10px}.lowercase[_ngcontent-%COMP%]{text-transform:lowercase}.channel[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}.govuk-heading-xl[_ngcontent-%COMP%]{font-size:48px;margin-bottom:1px}.govuk-section-break--visible[_ngcontent-%COMP%]{border-bottom:2px solid black}.totalpayments.govuk-table__row[_ngcontent-%COMP%]{border-bottom:2px solid black!important}.govuk-inset-text[_ngcontent-%COMP%]{margin-left:1em}.govuk-button[_ngcontent-%COMP%]{font-size:19px;margin-bottom:0!important}.groupamount.govuk-table__header[_ngcontent-%COMP%], .govuk-table__cell.govuk-table__cell--col6.govuk-table__custom--col6[_ngcontent-%COMP%]{text-align:right}.feeclass[_ngcontent-%COMP%]{padding-left:.7em}.align-center[_ngcontent-%COMP%]{text-align:center}details[_ngcontent-%COMP%]   summary[_ngcontent-%COMP%]{display:list-item}.case-transaction__color[_ngcontent-%COMP%]{color:#a71414;font-weight:700;text-align:center}.capitalize[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}.govuk-inset-text__no-left-margin[_ngcontent-%COMP%]{margin-left:0;padding-left:0}.whitespace-inherit[_ngcontent-%COMP%]{white-space:inherit!important}.govuk-section-records-break[_ngcontent-%COMP%]{margin:10px;border-bottom:2px solid black!important}.exisitng-fees[_ngcontent-%COMP%]{margin-left:12px}.add-telephony-payment[_ngcontent-%COMP%]{margin-top:-2em;margin-left:-2em}.govuk-table__header--custom[_ngcontent-%COMP%]{text-align:center}.disable-link[_ngcontent-%COMP%]{cursor:default;pointer-events:none;color:#8e8c8c}.panel-no--style[_ngcontent-%COMP%]{border-left-style:none}.col-28[_ngcontent-%COMP%]{width:28%!important}.col-8[_ngcontent-%COMP%]{width:8%!important}.col-60[_ngcontent-%COMP%]{width:60%!important}.col-32[_ngcontent-%COMP%]{width:32%!important}.col-34[_ngcontent-%COMP%]{width:34%!important}.col-15[_ngcontent-%COMP%]{width:15%!important;padding-right:0!important;padding-left:0!important}.col-16[_ngcontent-%COMP%]{width:16%!important}.col-14[_ngcontent-%COMP%]{width:14%!important}.col-17[_ngcontent-%COMP%]{width:17%!important}.col-12[_ngcontent-%COMP%]{width:12%!important}.col-9[_ngcontent-%COMP%]{width:9%!important}.col-10[_ngcontent-%COMP%]{width:10%!important}.col-11[_ngcontent-%COMP%]{width:11%!important}.col-13[_ngcontent-%COMP%]{width:13%!important}.col-21[_ngcontent-%COMP%]{width:21%!important}.col-20[_ngcontent-%COMP%]{width:20%!important}.col-24[_ngcontent-%COMP%]{width:24%!important}.govuk-table__cell[_ngcontent-%COMP%], .govuk-table__header[_ngcontent-%COMP%]{padding:10px 10px 10px 0}.col-27[_ngcontent-%COMP%]{width:27%!important}td[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden!important}.col-19[_ngcontent-%COMP%]{width:19%!important;padding-left:0!important}.col-18[_ngcontent-%COMP%]{width:18%!important;padding-left:0!important;padding-right:0!important}.col-37[_ngcontent-%COMP%]{width:37%!important}.col-55[_ngcontent-%COMP%]{width:55%!important}.govuk-table[_ngcontent-%COMP%]{margin-bottom:1px}.hmcts-banner[_ngcontent-%COMP%] > .hmcts-banner__message[_ngcontent-%COMP%]{font-size:19px;line-height:1.25}.summary-table-font[_ngcontent-%COMP%]{font-size:36px}.order-class[_ngcontent-%COMP%]{padding-top:3em}.govuk-table__header[_ngcontent-%COMP%]:last-child{text-align:right}.govuk-table__cell[_ngcontent-%COMP%]:last-child{text-align:right}.govuk-grid-column-two-thirds[_ngcontent-%COMP%]{width:64%!important;padding:0!important}.govuk-heading-l[_ngcontent-%COMP%]{font-size:36px;margin-bottom:10px}.govuk-heading-lw[_ngcontent-%COMP%]{width:70%}.paymentrequest[_ngcontent-%COMP%]{margin-top:1em}.mar-17[_ngcontent-%COMP%]{margin-left:17px}.col-61[_ngcontent-%COMP%]{width:61px!important;padding:0!important}.error[_ngcontent-%COMP%]{width:960px;margin:auto}.summarypage[_ngcontent-%COMP%]{padding-left:36em;margin-top:2em}.summarypagealign[_ngcontent-%COMP%]{width:100%;text-align:right;margin-top:2em}.govuk-inset-text[_ngcontent-%COMP%]{font-size:2.1875rem}table[_ngcontent-%COMP%]{table-layout:fixed;width:100%}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{word-wrap:break-word}.totalPay[_ngcontent-%COMP%]{padding-right:14px;float:right;margin-top:2em}.govuk-back-link[_ngcontent-%COMP%]{font-size:1.5rem!important}.totalfees[_ngcontent-%COMP%]{float:right;margin-top:2em}.refundBtn[_ngcontent-%COMP%]{text-align:right;width:18%}.col-25[_ngcontent-%COMP%]{width:25%!important}.of-visible[_ngcontent-%COMP%]{overflow:visible!important}.col-51[_ngcontent-%COMP%]{width:51%!important}.alignright[_ngcontent-%COMP%]{text-align:right}.alignleft[_ngcontent-%COMP%]{text-align:left}.alignself[_ngcontent-%COMP%]{align-self:flex-end}.maxwidth[_ngcontent-%COMP%]{width:100%}.govuk-padding-btm[_ngcontent-%COMP%]{padding-bottom:50px}.govuk-margin-btm-20px[_ngcontent-%COMP%]{margin-bottom:20px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CaseTransactionsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-case-transactions', template: "<!-- <div class=\"govuk-width-container\"> -->\n  <!-- <main class=\"govuk-main-wrapper\"> -->\n<div>\n  <main>\n    <ng-container  *ngIf=\"viewStatus === 'main1'\">\n      <div *ngIf=\"viewStatus === 'main1'&& !isTurnOff && takePayment\">\n          <div   *ngIf=\"takePayment\" class=\"govuk-grid-row\">\n\n            <div class=\"govuk-grid-column-two-thirds\">\n              <h1 class=\"govuk-heading-xl\">Case transactions</h1>\n            </div>\n          </div>\n\n          <div   *ngIf=\"takePayment\" class=\"govuk-grid-row\">\n            <div *ngIf='!isExceptionRecord' class=\"govuk-grid-column-two-thirds govuk-!-padding-bottom-6 govuk-!-padding-top-6\">\n              <h3 class=\"heading-medium\">CCD reference:</h3>\n              <span> {{ ccdCaseNumber | ccdHyphens }}</span>\n            </div>\n\n            <div *ngIf='isExceptionRecord' class=\"govuk-grid-column-two-thirds govuk-!-padding-bottom-6 govuk-!-padding-top-6\">\n              <h3 class=\"heading-medium\">Exception reference:</h3>\n              <span> {{ ccdCaseNumber | ccdHyphens }}</span>\n            </div>\n            <div class=\"govuk-grid-column-full govuk-!-padding-bottom-3\">\n              <hr class=\"govuk-section-break govuk-section-break--visible\">\n              <table class=\"govuk-table\">\n                <thead class=\"govuk-table__head\">\n                  <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__header\" scope=\"col\">Total payments</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Total remissions</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Amount due</td>\n                    <td class=\"govuk-table__header govuk-table__header--custom\" scope=\"col\" *ngIf=\"isBulkScanEnable\">Unallocated payments</td>\n                  </tr>\n                </thead>\n                <tbody class=\"govuk-table__body\">\n                  <tr class=\"totalpayments govuk-table__row\">\n                    <td class=\"govuk-table__cell summary-table-font\">{{ totalPayments | currency :'GBP':'symbol':'1.2-2' }}</td>\n                    <td class=\"govuk-table__cell summary-table-font\">{{ totalRemissions | currency :'GBP':'symbol':'1.2-2' }}</td>\n                    <td class=\"govuk-table__cell summary-table-font\">{{ clAmountDue | currency :'GBP':'symbol':'1.2-2'}}</td>\n                    <td class=\"govuk-table__cell case-transaction__color summary-table-font\" *ngIf=\"isBulkScanEnable\">{{unprocessedRecordCount}}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            <div class=\"govuk-grid-column-two-thirds\" *ngIf=\"takePayment\">\n              <button type=\"submit\" (click)=\"redirectToFeeSearchPage($event)\"\n                [disabled]=\"!isAddFeeBtnEnabled\"\n                [ngClass]='!isAddFeeBtnEnabled ? \"govuk-button govuk-button--secondary govuk-button--disabled govuk-!-margin-right-1\" : \"govuk-button govuk-button--secondary govuk-!-margin-right-1\"'>\n                Take telephony payment\n              </button>\n          </div>\n\n          </div>\n          <div class=\"govuk-grid-row\">\n\n          </div>\n          <div  *ngIf=\"takePayment\" class=\" govuk-!-margin-top-9\">\n\n            <div class=\"govuk-grid-row\">\n              <div class=\"govuk-grid-column-full\">\n                  <h3 class=\"heading-medium\">Fees</h3>\n              </div>\n              <div class=\"govuk-grid-column-full\">\n                <table class=\"govuk-table\">\n                  <thead class=\"govuk-table__head\">\n                  <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__header\" scope=\"col\">Code</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Description</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Volume</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Fee amount</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Calculated amount</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Amount due</td>\n                    <td class=\"govuk-table__header\" scope=\"col\">Action</td>\n\n                  </tr>\n                  </thead>\n                  <tbody class=\"govuk-table__body\" *ngFor=\"let paymentGroup of paymentGroups;\">\n                    <tr class=\"govuk-table__row\" *ngFor=\"let fee of paymentGroup.fees; let i = index;\">\n                      <td class=\"govuk-table__cell\">\t{{fee.code}} </td>\n                      <td class=\"govuk-table__cell\">{{fee.description}}</td>\n                      <td class=\"govuk-table__cell\">{{fee.volume? fee.volume : '-'}}</td>\n                      <td class=\"govuk-table__cell\">{{ fee.net_amount | currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n                      <td class=\"govuk-table__cell\">{{fee.calculated_amount | currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n                      <td class=\"govuk-table__cell govuk-!-font-weight-bold\"  [attr.rowspan]=\"paymentGroup.fees.length\" *ngIf=\"paymentGroup.old && i==0\"> {{getGroupOutstandingAmount(paymentGroup)| currency:'GBP':'symbol-narrow':'1.2-2'}}* </td>\n                      <td class=\"govuk-table__cell\" *ngIf=\"!paymentGroup.old\"> {{calculateAmountDue(fee) | currency:'GBP':'symbol-narrow':'1.2-2'}} </td>\n                      <td class=\"govuk-table__cell\" *ngIf=\"!paymentGroup.old\">\n                        <a (click)=\"confirmRemoveFee(fee.id)\" [ngClass]='!isCheckAmountdueExist(fee.amount_due) || fee.remissions ? \"disable-link\" : \"\"'>Remove</a>\n                      </td>\n                      <td class=\"govuk-table__cell\" *ngIf=\"paymentGroup.old\">\n                        <a (click)=\"confirmRemoveFee(fee.id)\" [ngClass]='paymentGroup.payments?.length > 0 || paymentGroup.remissions?.length > 0 ? \"disable-link\" : \"\"'>Remove</a>\n                    </td>\n                    </tr>\n                  </tbody>\n                  <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroups?.length === 0\">\n                    <tr class=\"govuk-table__row\" >\n                      <td class=\"govuk-table__cell\" colspan=\"7\">No fees recorded</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div class=\"hmcts-banner\" *ngIf=\"isHistoricGroupAvailable\">\n              <svg class=\"hmcts-banner__icon\" fill=\"currentColor\" role=\"presentation\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 25 25\" height=\"25\" width=\"25\">\n                  <path d=\"M13.7,18.5h-2.4v-2.4h2.4V18.5z M12.5,13.7c-0.7,0-1.2-0.5-1.2-1.2V7.7c0-0.7,0.5-1.2,1.2-1.2s1.2,0.5,1.2,1.2v4.8\n                C13.7,13.2,13.2,13.7,12.5,13.7z M12.5,0.5c-6.6,0-12,5.4-12,12s5.4,12,12,12s12-5.4,12-12S19.1,0.5,12.5,0.5z\"></path>\n              </svg>\n              <div class=\"hmcts-banner__message\">\n                <span class=\"hmcts-banner__assistive\">information</span>\n                * These fees have already been processed offline. Check the notes in CCD for more information.\n              </div>\n            </div>\n            <div class=\"panel panel-no--style\" *ngIf=\"allPayments?.length > 0 || remissions?.length > 0\">\n                <!-- payments -->\n                <h3 class=\"heading-medium\">Payments</h3>\n                  <table class=\"govuk-table\">\n                    <thead class=\"govuk-table__head\">\n                      <tr class=\"govuk-table__row\">\n                          <td class=\"govuk-table__header col-28\" scope=\"col\">Payment reference</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Date created</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Channel</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Method</td>\n                          <td class=\"govuk-table__header col-15\" scope=\"col\">Amount</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Allocation status</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Payment status</td>\n                        </tr>\n                    </thead>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length > 0\">\n                      <tr class=\"govuk-table__row\"  *ngFor=\"let payment of allPayments\">\n                          <td class=\"govuk-table__cell whitespace-inherit\">\n                            <a href=\"javascript:void(0)\" (click)=\"goToPayementView(payment.paymentGroupReference, payment.reference, payment.method)\">{{ payment.reference }}</a>\n                          </td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.date_created | date:'dd MMM yyyy' }}</td>\n                          <td class=\"channel govuk-table__cell whitespace-inherit\">{{ payment.channel | lowercase }}</td>\n                          <td class=\"govuk-table__cell capitalize whitespace-inherit\">{{ payment.method | lowercase}}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.amount | currency:'GBP':'symbol-narrow':'1.2-2' }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\"> {{getAllocationStatus(payment)}}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.status }}</td>\n                        </tr>\n                    </tbody>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length === 0\">\n                      <td class=\"govuk-table__cell\" colspan=\"7\">No payments recorded</td>\n                    </tbody>\n                  </table>\n\n                  <!-- remissions -->\n                  <h3 class=\"heading-medium\">Remissions</h3>\n                  <table class=\"govuk-table\">\n                    <thead class=\"govuk-table__head\">\n                      <tr class=\"govuk-table__row\">\n                          <td class=\"govuk-table__header\" scope=\"col\">Remission reference</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Date created</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Remission code</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Fee code</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Remission amount</td>\n                        </tr>\n                    </thead>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"remissions?.length > 0\">\n                      <tr class=\"govuk-table__row\" *ngFor=\"let remission of remissions\">\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.remission_reference }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.date_created | date:'dd MMM yyyy' }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.hwf_reference }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.fee_code }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.hwf_amount | currency:'GBP':'symbol-narrow':'1.2-2'}}</td>\n                        </tr>\n                    </tbody>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"remissions?.length === 0\">\n                      <td class=\"govuk-table__cell\" colspan=\"5\">No remissions recorded</td>\n                    </tbody>\n                  </table>\n            </div>\n          </div>\n      </div>\n\n      <div  *ngIf=\"takePayment && isTurnOff\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-grid-column-two-thirds\">\n          <h1 class=\"govuk-heading-xl\">Case transactions</h1>\n        </div>\n\n        <div  class=\"govuk-grid-column-one-third\" align=\"right\" >\n          <a [ngClass]=\"{ 'disable': !isAddFeeBtnEnabled} \" (click)=\"redirectToFeeSearchPage($event)\" class=\"button\">Add a new fee</a>\n        </div>\n      </div>\n\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-grid-column-two-thirds govuk-!-padding-bottom-6\">\n          <h3 class=\"heading-medium\">CCD reference:</h3>\n          <span> {{ ccdCaseNumber | ccdHyphens }}</span>\n        </div>\n\n        <div class=\"govuk-grid-column-full govuk-!-padding-bottom-3\">\n          <hr class=\"govuk-section-break govuk-section-break--visible\">\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                <td class=\"govuk-table__header\" scope=\"col\">Total payments</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Total remissions</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Amount due</td>\n              </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\">\n              <tr class=\"totalpayments govuk-table__row\">\n                <td class=\"govuk-table__cell\">{{ totalPayments | currency :'GBP':'symbol':'1.2-2' }}</td>\n                <td class=\"govuk-table__cell\">{{ totalRemissions | currency :'GBP':'symbol':'1.2-2' }}</td>\n                <td class=\"govuk-table__cell\">{{ (totalFees - totalRemissions) - totalPayments | currency :'GBP':'symbol':'1.2-2'}}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n\n      <!-- No fees start -->\n      <div *ngIf=\"paymentGroups?.length === 0\">\n        <div class=\"govuk-grid-row\">\n          <div class=\"govuk-grid-column-full\">\n            <span class=\"heading-small\">Existing fees</span>\n          </div>\n\n          <div class=\"govuk-grid-column-full\">\n            <table class=\"govuk-table\">\n              <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                <td class=\"govuk-table__header\" scope=\"col\">Code</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Description</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Volume</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Fee amount</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Calculated amount</td>\n                <td class=\"govuk-table__header\" scope=\"col\">Group amount outstanding</td>\n              </tr>\n              </thead>\n              <tbody class=\"govuk-table__body\">\n              <tr class=\"govuk-table__row\">\n                <td class=\"govuk-table__cell\" colspan=\"6\">No fees recorded</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <!-- No fees end -->\n\n      <div *ngFor=\"let paymentGroup of paymentGroups\">\n\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-grid-column-full govuk-grid-column-full--gr\">\n          <span class=\"heading-medium\">Group reference: {{paymentGroup.payment_group_reference}}</span>\n        </div>\n      </div>\n        <div class=\"govuk-grid-row\">\n\n          <!--New Code start-->\n\n          <div class=\"govuk-grid-column-full\">\n            <span class=\"heading-small\">Exisiting fees</span>\n          </div>\n          <div class=feeclass>\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n            <tr class=\"govuk-table__row\">\n              <td class=\"govuk-table__header\" scope=\"col\">Code</td>\n              <td class=\"govuk-table__header\" scope=\"col\">Description</td>\n              <td class=\"govuk-table__header\" scope=\"col\">Volume</td>\n              <td class=\"govuk-table__header\" scope=\"col\">Fee amount</td>\n              <td class=\"govuk-table__header\" scope=\"col\">Calculated amount</td>\n              <td class=\"groupamount govuk-table__header\" scope=\"col\">Group amount outstanding</td>\n            </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\" >\n            <tr class=\"govuk-table__row\"  *ngFor=\"let fee of paymentGroup.fees;  let i = index;\">\n              <td class=\"govuk-table__cell govuk-table__cell--col1\">{{fee.code}}</td>\n              <td class=\"govuk-table__cell govuk-table__cell--col2\"> {{fee.description}} </td>\n              <td class=\"govuk-table__cell govuk-table__cell--col3 align-center\"> {{fee.volume? fee.volume : '-'}} </td>\n              <td class=\"govuk-table__cell govuk-table__cell--col4\"> {{ fee.net_amount | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n              <td class=\"govuk-table__cell govuk-table__cell--col5\"> {{fee.calculated_amount | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n              <td class=\"govuk-table__cell govuk-table__cell--col6 govuk-table__custom--col6\" [attr.rowspan]=\"paymentGroup.fees.length\" *ngIf=\"i==0\">\n                {{getGroupOutstandingAmount(paymentGroup) | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n            </tr>\n            </tbody>\n            <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.fees.length==0\">\n            <td class=\"govuk-table__cell\" colspan=\"6\">No payments recorded</td>\n            </tbody>\n          </table>\n        </div>\n        </div>\n      <div class=\"govuk-inset-text govuk-inset-text__no-border\" *ngIf=\"paymentGroup.payments || paymentGroup.remissions\">\n        <details>\n          <summary class=\"govuk-hidetext\">\n          <span class=\"summary\">Allocated payments and remissions</span>\n          </summary>\n\n            <div class=\"panel panel-border-narrow\">\n                <!-- payments -->\n                <span class=\"heading-medium\">Payments</span>\n                  <table class=\"govuk-table\">\n                    <thead class=\"govuk-table__head\">\n                      <tr class=\"govuk-table__row\">\n                          <td class=\"govuk-table__header\" scope=\"col\">Payment reference</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Date created</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Channel</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Method</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Allocation status</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Status</td>\n                        </tr>\n                    </thead>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.payments?.length > 0\">\n                      <tr class=\"govuk-table__row\"  *ngFor=\"let payment of paymentGroup.payments\">\n                          <td class=\"govuk-table__cell whitespace-inherit\">\n                            <a href=\"javascript:void(0)\" (click)=\"goToPayementView(paymentGroup.payment_group_reference, payment.reference, payment.method)\">{{ payment.reference }}</a>\n                          </td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.date_created | date:'dd MMM yyyy' }}</td>\n                          <td class=\"channel govuk-table__cell whitespace-inherit\">{{ payment.channel | lowercase }}</td>\n                          <td class=\"govuk-table__cell capitalize whitespace-inherit\">{{ payment.method | lowercase}}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.amount }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\"> {{getAllocationStatus(payment)}}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.status }}</td>\n                        </tr>\n                    </tbody>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.payments?.length === 0\">\n                      <td class=\"govuk-table__cell\" colspan=\"6\">No payments recorded</td>\n                    </tbody>\n                  </table>\n\n                  <!-- remissions -->\n                  <span class=\"heading-medium\">Remissions</span>\n                  <table class=\"govuk-table\">\n                    <thead class=\"govuk-table__head\">\n                      <tr class=\"govuk-table__row\">\n                          <td class=\"govuk-table__header\" scope=\"col\">Remission reference</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Date created</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Remission code</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Fee applied against</td>\n                          <td class=\"govuk-table__header\" scope=\"col\">Remission amount</td>\n                        </tr>\n                    </thead>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.remissions?.length > 0\">\n                      <tr class=\"govuk-table__row\" *ngFor=\"let remission of paymentGroup.remissions\">\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.remission_reference }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.date_created | date:'dd MMM' }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.hwf_reference }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.fee_code }}</td>\n                          <td class=\"govuk-table__cell whitespace-inherit\">{{ remission.hwf_amount }}</td>\n                        </tr>\n                    </tbody>\n                    <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.remissions?.length === 0\">\n                      <td class=\"govuk-table__cell\" colspan=\"5\">No remissions recorded</td>\n                    </tbody>\n                  </table>\n            </div>\n      </details>\n\n\n          <div *ngIf=\"takePayment\">\n              <button type=\"submit\" (click)=\"loadFeeSummaryPage(paymentGroup)\"\n                [disabled]=\"(getGroupOutstandingAmount(paymentGroup) <= 0 || isUnprocessedRecordSelected)\"\n                [ngClass]='(getGroupOutstandingAmount(paymentGroup) <= 0 || isUnprocessedRecordSelected) ? \"govuk-button govuk-button--secondary govuk-button--disabled govuk-!-margin-right-1\" : \"govuk-button govuk-button--secondary govuk-!-margin-right-1\"'>\n                  Add telephone payment\n              </button>\n          </div>\n        </div>\n      </div>\n        <ccpay-app-unprocessed-payments\n        *ngIf=\"isBulkScanEnable\"\n        [IS_BUTTON_ENABLE]=\"takePayment\"\n        [LEVEL]=\"5\"\n        [PAYMENTSLENGTH]=\"allPayments?.length\"\n        [PAYMENTREF]=\"paymentRef\"\n        [ISTURNOFF]=\"isTurnOff\"\n        [ISSFENABLE]=\"isStrategicFixEnable\"\n        [FEE_RECORDS_EXISTS]=\"isFeeRecordsExist\"\n        (getUnprocessedFeeCount) = \"getUnprocessedFeeCount($event)\"\n        [IS_OS_AMT_AVAILABLE]=\"isGrpOutstandingAmtPositive\"\n        (selectedUnprocessedFeeEvent) = \"selectedUnprocessedFeeEvent($event)\">\n      </ccpay-app-unprocessed-payments>\n      <div class=\"govuk-grid-row govuk-grid__surplus-payments\"  *ngIf=\"totalRefundAmount > 0 && takePayment\">\n        <div class=\"govuk-grid-column-full govuk-grid__surplus-payments-col1\">\n          <h3 class=\"heading-medium\">Surplus payments</h3>\n        </div>\n        <div class=\"govuk-grid-column-full\">\n          Total surplus payments received: {{totalRefundAmount | currency :'GBP':'symbol':'1.2-2'}}\n        </div>\n      </div>\n      </div>\n\n      <div  *ngIf=\"takePayment\">\n        <ccpay-app-unprocessed-payments\n        *ngIf=\"isBulkScanEnable && !takePayment\"\n        [IS_BUTTON_ENABLE]=\"takePayment\"\n        [LEVEL]=\"1\"\n        [ISTURNOFF]=\"isTurnOff\"\n        [ISSFENABLE]=\"isStrategicFixEnable\"\n        [FEE_RECORDS_EXISTS]=\"isFeeRecordsExist\"\n        [IS_OS_AMT_AVAILABLE]=\"isGrpOutstandingAmtPositive\"\n        (getUnprocessedFeeCount) = \"getUnprocessedFeeCount($event)\"\n        [PAYMENTSLENGTH]=\"allPayments?.length\"\n        [PAYMENTREF]=\"paymentRef\"\n        (selectedUnprocessedFeeEvent) = \"selectedUnprocessedFeeEvent($event)\">\n        </ccpay-app-unprocessed-payments>\n      </div>\n\n      <div *ngIf=\"!takePayment\" class=\"govuk-grid-row govuk-grid__surplus-payments\">\n\n        <div class=\"govuk-grid-column-full\">\n\n          <span class=\"heading-medium\">Payments</span>\n          <table class=\"govuk-table\">\n              <thead class=\"govuk-table__head\">\n                <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__header col-13\" scope=\"col\">Status</td>\n                    <td class=\"govuk-table__header col-10\" scope=\"col\">Amount</td>\n                    <td class=\"govuk-table__header col-14\" scope=\"col\">Date allocated</td>\n                    <td class=\"govuk-table__header col-20\" scope=\"col\">Request reference</td>\n                    <td class=\"govuk-table__header col-9\" scope=\"col\"></td>\n                    <td class=\"govuk-table__header\" scope=\"col\"></td>\n                  </tr>\n              </thead>\n              <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length > 0\">\n                <tr class=\"govuk-table__row\"  *ngFor=\"let payment of allPayments\">\n                    <td class=\"govuk-table__cell col-13 whitespace-inherit\">{{ payment.status }}</td>\n                    <td class=\"govuk-table__cell col-10 whitespace-inherit\">{{ payment.amount | currency :'GBP':'symbol':'1.2-2' }}</td>\n                    <td class=\"govuk-table__cell col-17 whitespace-inherit\">{{ payment.date_created | date:'dd MMM yyyy HH:mm:ss' }}</td>\n                    <td class=\"govuk-table__cell col-24 whitespace-inherit\">{{ payment.paymentGroupReference }}</td>\n                    <td class=\"govuk-table__cell col-13 whitespace-inherit\"></td>\n                    <td class=\"govuk-table__cell whitespace-inherit\">\n                        <a href=\"javascript:void(0)\" (click)=\"goToPayementView(payment.paymentGroupReference, payment.reference, payment.method)\">Review</a>\n                      </td>\n                  </tr>\n              </tbody>\n\n            </table>\n            <ccpay-app-unprocessed-payments class=\"govuk-table\"\n            *ngIf=\"isBulkScanEnable && !takePayment\"\n            [IS_BUTTON_ENABLE]=\"takePayment\"\n            [LEVEL]=\"2\"\n            [ISTURNOFF]=\"isTurnOff\"\n            [ISSFENABLE]=\"isStrategicFixEnable\"\n            [FEE_RECORDS_EXISTS]=\"isFeeRecordsExist\"\n            [IS_OS_AMT_AVAILABLE]=\"isGrpOutstandingAmtPositive\"\n            [PAYMENTSLENGTH]=\"allPayments?.length\"\n            [PAYMENTREF]=\"paymentRef\"\n            (getUnprocessedFeeCount) = \"getUnprocessedFeeCount($event)\"\n            (selectedUnprocessedFeeEvent) = \"selectedUnprocessedFeeEvent($event)\">\n        </ccpay-app-unprocessed-payments>\n        </div>\n      </div>\n    </ng-container>\n\n<!--Order Case Transactions Page-->\n   <ng-container *ngIf=\"viewStatus === 'main' && !isTurnOff && takePayment\">\n      <div>\n\n          <div>\n              <h1 class=\"govuk-grid-column-two-thirds govuk-heading-l govuk-!-margin-top-0\">Case transactions</h1>\n              <ng-container *ngIf='!isExceptionRecord' class=\" govuk-!-margin-bottom-6 alignself\">\n                 <b> Case reference: </b>{{ ccdCaseNumber | ccdHyphens }}\n              </ng-container>\n              <ng-container *ngIf='isExceptionRecord' class=\"govuk-!-margin-bottom-3 col-55 alignself\" >\n                  <b> Exception reference:</b>{{ ccdCaseNumber | ccdHyphens }}\n              </ng-container>\n              <div>\n              <table class=\"govuk-table\">\n                <thead class=\"govuk-table__head\">\n                  <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__header col-25\" scope=\"col\">Total payments</td>\n                    <td class=\"govuk-table__header govuk-table__header--custom col-25\" scope=\"col\" *ngIf=\"isBulkScanEnable\">Unallocated payments</td>\n                    <td class=\"govuk-table__header col-25\" scope=\"col\">Total remissions</td>\n                    <td class=\"govuk-table__header col-20\" scope=\"col\">Amount due</td>\n                    <td class=\"govuk-table__header col-20\" scope=\"col\">Over payment</td>\n                  </tr>\n                </thead>\n                <tbody class=\"govuk-table__body\">\n                  <tr class=\"totalpayments govuk-table__row\">\n                    <td class=\"govuk-table__cell summary-table-font\">{{ totalPayments | currency :'GBP':'symbol':'1.2-2' }}</td>\n                    <td class=\"govuk-table__cell case-transaction__color summary-table-font\" *ngIf=\"isBulkScanEnable\">{{unprocessedRecordCount}}</td>\n\n                    <td class=\"govuk-table__cell summary-table-font\">{{ totalRemissions | currency :'GBP':'symbol':'1.2-2' }}</td>\n                    <td class=\"govuk-table__cell summary-table-font\">{{ clAmountDue | currency :'GBP':'symbol':'1.2-2'}}</td>\n                    <td class=\"govuk-table__cell summary-table-font\">{{ overPaymentAmount | currency :'GBP':'symbol':'1.2-2'}}</td>\n\n                     </tr>\n                </tbody>\n              </table>\n              </div>\n          </div>\n          <input #myInput type='hidden' class='iFrameDrivenImageValue' value='ORDERIDDETAILS'>\n\n            <!--Payment Request-->\n          <div class=\"paymentrequest\">\n              <span class=\"heading-medium\">Service requests</span>\n              <ng-container>\n              <table class=\"govuk-table\">\n                  <thead class=\"govuk-table__head\">\n                  <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__header  col-14\" scope=\"col\">Status</td>\n                    <td class=\"govuk-table__header  col-10\" scope=\"col\">Amount</td>\n                    <td class=\"govuk-table__header  col-18\" scope=\"col\">Party</td>\n                    <td class=\"govuk-table__header  col-21\" scope=\"col\">Request reference</td>\n                    <td class=\"govuk-table__header  col-9\" scope=\"col\"></td>\n                    <td class=\"govuk-table__header col\" scope=\"col\"></td>\n                  </tr>\n                  </thead>\n                  <tbody class=\"govuk-table__body\"  *ngIf=\"orderLevelFees?.length > 0\">\n                    <tr *ngFor=\"let orderRef of orderLevelFees;let i = index;\">\n                      <td class=\"govuk-table__cell whitespace-inherit\">{{orderRef.orderStatus}}</td>\n                      <td class=\"govuk-table__cell whitespace-inherit\">{{ orderRef.orderTotalFees | currency :'GBP':'symbol':'1.2-2' }}</td>\n                      <td *ngIf=\"cpoDetails !== null\" class=\"govuk-table__cell whitespace-inherit\">{{cpoDetails['responsibleParty']}}</td>\n                      <td *ngIf=\"cpoDetails === null\" class=\"govuk-table__cell whitespace-inherit\"></td>\n                      <td class=\"govuk-table__cell whitespace-inherit\">{{orderRef.orderRefId}}</td>\n                      <td class=\"govuk-table__cell\">\n                              <a href=\"javascript:void(0)\" (click)=\"goToOrderViewDetailSection(orderRef)\">Review</a>\n                      </td>\n                      <td  class=\"alignright\">\n\n                        <button type=\"submit\" (click)=\"redirectToOrderFeeSearchPage($event,orderRef)\"\n                        [disabled]=\"!orderRef.orderAddBtnEnable\"\n                        [ngClass]='!orderRef.orderAddBtnEnable ? \"govuk-button govuk-button--secondary govuk-button--disabled govuk-!-margin-right-1\" : \"govuk-button govuk-button--secondary govuk-!-margin-right-1\"'>\n                        Take telephony payment\n                      </button></td>\n                    </tr>\n                  </tbody>\n                  <tbody class=\"govuk-table__body alignleft\" *ngIf=\"orderLevelFees?.length === 0\">\n                    <td colspan=\"6\">No service requests on this case.</td>\n                  </tbody>\n              </table>\n            </ng-container>\n              <!-- <ng-container *ngIf=\"orderLevelFees?.length === 0\">\n                  <br/>No service requests on this case.<br/>\n              </ng-container> -->\n              <span>\n                  <br/>\n                  <a (click)=\"redirectToFeeSearchPage($event)\"\n                    [class.disable-link]=\"!isAddFeeBtnEnabled\">Create service request and pay</a><br/>\n            </span>\n          </div>\n          <div>\n              <span class=\"heading-medium\"><br/>Payments</span>\n              <ccpay-app-unprocessed-payments\n              *ngIf=\"isBulkScanEnable\"\n              [IS_BUTTON_ENABLE]=\"takePayment\"\n              [LEVEL]=\"3\"\n              [PAYMENTSLENGTH]=\"allPayments?.length\"\n              [ISTURNOFF]=\"isTurnOff\"\n              [ISSFENABLE]=\"isStrategicFixEnable\"\n              [PAYMENTREF]=\"paymentRef\"\n              [FEE_RECORDS_EXISTS]=\"isFeeRecordsExist\"\n              (getUnprocessedFeeCount) = \"getUnprocessedFeeCount($event)\"\n              [IS_OS_AMT_AVAILABLE]=\"isGrpOutstandingAmtPositive\"\n              (selectedUnprocessedFeeEvent) = \"selectedUnprocessedFeeEvent($event)\">\n               </ccpay-app-unprocessed-payments>\n\n              <ng-container>\n              <table class=\"govuk-table\">\n                  <thead class=\"govuk-table__head\">\n                  </thead>\n                  <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length > 0\">\n                    <tr class=\"govuk-table__row\"  *ngFor=\"let payment of allPayments\">\n                        <td class=\"govuk-table__cell col-14 whitespace-inherit\">{{ payment.status }}</td>\n                        <td class=\"govuk-table__cell col-10 whitespace-inherit\">{{ payment.amount | currency :'GBP':'symbol':'1.2-2' }}</td>\n                        <td class=\"govuk-table__cell col-17 whitespace-inherit\">{{ payment.date_created | date:'dd MMM yyyy' }}</td>\n                        <td class=\"govuk-table__cell col-24 whitespace-inherit\">{{ payment.paymentGroupReference }}</td>\n                        <td class=\"govuk-table__cell col-13 whitespace-inherit\"></td>\n                        <td class=\"govuk-table__cell whitespace-inherit\">\n                            <a href=\"javascript:void(0)\" (click)=\"goToPayementView(payment.paymentGroupReference, payment.reference, payment.method)\">Review</a>\n                          </td>\n                      </tr>\n                  </tbody>\n\n                  <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length === 0 && unprocessedRecordCount <= 0\">\n                    <td colspan=\"6\">No payments recorded</td>\n                  </tbody>\n                </table>\n\n              </ng-container>\n\n          </div>\n          <div *ngIf=\"!check4AllowedRoles2AccessPBApayment()\">\n              <span class=\"heading-medium\"><br/>Refunds</span>\n              <ccpay-refund-status\n              [ccdCaseNumber]=\"ccdCaseNumber\"\n              [isTurnOff]=\"isTurnOff\"\n              [orderParty]=\"orderParty\"\n              [LOGGEDINUSERROLES]=\"LOGGEDINUSERROLES\"\n              ></ccpay-refund-status>\n          </div>\n      </div>\n   </ng-container>\n\n   <ng-container *ngIf=\"!takePayment && viewStatus === 'main'\">\n      <div  class=\"govuk-grid-column-full\" [ngClass]='serviceRequestValue!== \"false\" ? \"govuk-margin-btm-20px\" : \"\"'>\n        <!-- <span *ngIf=\"serviceRequestValue === 'false'\" class=\"heading-medium\">Service requests</span> -->\n        <ng-container *ngIf=\"!(orderLevelFees?.length === 0 && !isAnyFeeGroupAvilable) && serviceRequestValue !== 'false' \">\n          <table class=\"govuk-table\">\n              <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                <td class=\"govuk-table__header col-14\" scope=\"col\">Status</td>\n                <td class=\"govuk-table__header col-18\" scope=\"col\">Amount</td>\n                <td class=\"govuk-table__header col-18\" scope=\"col\">Party</td>\n                <td class=\"govuk-table__header col-24\" scope=\"col\">Request reference\t</td>\n                <td class=\"govuk-table__header col-9\" scope=\"col\"></td>\n                <td class=\"govuk-table__header\" scope=\"col\"></td>\n              </tr>\n              </thead>\n              <tbody class=\"govuk-table__body\" *ngIf=\"orderLevelFees?.length > 0\">\n                <tr class=\"govuk-table__row\"  *ngFor=\"let orderRef of orderLevelFees;let i = index;\">\n                  <td class=\"govuk-table__cell whitespace-inherit\">{{orderRef.orderStatus}}</td>\n                  <td class=\"govuk-table__cell whitespace-inherit\">{{orderRef.orderTotalFees | currency :'GBP':'symbol':'1.2-2'}}</td>\n                  <td *ngIf=\"cpoDetails !== null\" class=\"govuk-table__cell  whitespace-inherit\">{{cpoDetails['responsibleParty']}}</td>\n                  <td *ngIf=\"cpoDetails === null\" class=\"govuk-table__cell  whitespace-inherit\"></td>\n                  <td class=\"govuk-table__cell whitespace-inherit\">{{orderRef.orderRefId}}</td>\n                  <td class=\"govuk-table__cell of-visible\"> <a href=\"javascript:void(0)\" (click)=\"loadPBAAccountPage(orderRef)\" *ngIf=\"serviceRequestValue !== 'false' && check4AllowedRoles2AccessPBApayment() && orderRef.orderStatus === 'Not paid'\"> Pay now</a></td>\n                  <td class=\"govuk-table__cell\">\n                      <a href=\"javascript:void(0)\" (click)=\"goToOrderViewDetailSection(orderRef)\">Review</a>\n                </td>\n                </tr>\n              </tbody>\n              <tbody class=\"govuk-table__body\" *ngIf=\"orderLevelFees?.length === 0 && serviceRequestValue === 'false'\">\n                <tr class=\"govuk-table__row\" >\n                  <td class=\"alignleft\" colspan=\"7\">No service requests on this case.</td>\n                </tr>\n              </tbody>\n          </table>\n        </ng-container>\n        <ng-container *ngIf=\"orderLevelFees?.length === 0 && serviceRequestValue !== 'false' && !isAnyFeeGroupAvilable\">\n          <h1 class=\"govuk-heading-l govuk-heading-lw\">If you are expecting to pay and are not able to see a service request,</h1>\n          <p>please refresh and try in some time.</p>\n        </ng-container>\n    <!-- </div> -->\n        </div>\n        <div class=\"govuk-grid-column-full\">\n            <div  *ngIf=\"serviceRequestValue === 'false'\">\n            <span class=\"heading-medium\"><br/>Payments</span>\n            <ng-container >\n              <table class=\"govuk-table\">\n              <thead class=\"govuk-table__head\">\n                <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__header col-14\" scope=\"col\">Status</td>\n                    <td class=\"govuk-table__header col-10\" scope=\"col\">Amount</td>\n                    <td class=\"govuk-table__header col-17\" scope=\"col\">Date</td>\n                    <td class=\"govuk-table__header col-24\" scope=\"col\">Payment reference</td>\n                    <td class=\"govuk-table__header col-13\" scope=\"col\"></td>\n                    <td class=\"govuk-table__header\" scope=\"col\"></td>\n                  </tr>\n              </thead>\n              <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length > 0\">\n                <tr class=\"govuk-table__row\"  *ngFor=\"let payment of allPayments\">\n                    <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.status }}</td>\n                    <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.amount | currency :'GBP':'symbol':'1.2-2' }}</td>\n                    <td class=\"govuk-table__cell whitespace-inherit\">{{ payment.date_created | date:'dd MMM yyyy' }}</td>\n                    <td class=\"govuk-table__cell whitespace-inherit\">{{ payment?.reference }}</td>\n                    <td class=\"govuk-table__cell whitespace-inherit\"></td>\n                    <td class=\"govuk-table__cell whitespace-inherit\">\n                        <a href=\"javascript:void(0)\" (click)=\"goToPayementView(payment.paymentGroupReference, payment.reference, payment.method)\">Review</a>\n                      </td>\n                  </tr>\n              </tbody>\n\n              <tbody class=\"govuk-table__body\" *ngIf=\"allPayments?.length === 0\">\n                <td colspan=\"6\">No payments recorded</td>\n              </tbody>\n              </table>\n              <ccpay-app-unprocessed-payments class=\"govuk-table\"\n            *ngIf=\"isBulkScanEnable && !takePayment\"\n            [IS_BUTTON_ENABLE]=\"takePayment\"\n            [LEVEL]=\"4\"\n            [ISTURNOFF]=\"isTurnOff\"\n            [ISSFENABLE]=\"isStrategicFixEnable\"\n            [PAYMENTSLENGTH]=\"allPayments?.length\"\n            [PAYMENTREF]=\"paymentRef\"\n            (getUnprocessedFeeCount) = \"getUnprocessedFeeCount($event)\"\n            [FEE_RECORDS_EXISTS]=\"isAnyFeeGroupAvilable\"\n            [IS_OS_AMT_AVAILABLE]=\"isGrpOutstandingAmtPositive\"\n            (selectedUnprocessedFeeEvent) = \"selectedUnprocessedFeeEvent($event)\">\n              </ccpay-app-unprocessed-payments>\n            </ng-container>\n\n          </div>\n        </div>\n        <div class=\"govuk-grid-column-full\" *ngIf=\"!check4AllowedRoles2AccessPBApayment()\">\n            <span class=\"heading-medium\"><br/>Refunds</span>\n            <ccpay-refund-status\n            [ccdCaseNumber]=\"ccdCaseNumber\"\n            [orderParty] =\"orderParty\"\n             ></ccpay-refund-status>\n        </div>\n\n   </ng-container>\n\n\n<input #myInput type='hidden' class='iFrameDrivenImageValue' value='FEEREMOVALCONFIRMATION_2'>\n\n<!-- Order Full View Details-->\n<ng-container *ngIf=\"viewStatus === 'order-full-view'\">\n  <ccpay-service-request\n  [viewStatus] = \"viewStatus\"\n  [orderRef] = \"orderRef\"\n  [orderStatus] = \"orderStatus\"\n  [orderCreated] = \"orderCreated\"\n  [orderParty] = \"orderParty\"\n  [orderCCDEvent] = \"orderCCDEvent\"\n  [orderDetail] = \"orderDetail\"\n  [paymentGroupList] = \"paymentGroups\"\n  [LOGGEDINUSERROLES] = \"LOGGEDINUSERROLES\"\n  [ccdCaseNumber] = \"ccdCaseNumber\"\n  [orderFeesTotal] = \"orderFeesTotal\"\n  [orderTotalPayments] = \"orderTotalPayments\"\n  [orderRemissionTotal] = \"orderRemissionTotal\"\n  [isServiceRequest] = \"serviceRequestValue\"\n  (goToServiceRquestComponent) = \"goToServiceRequestPage()\"\n  ></ccpay-service-request>\n\n</ng-container>\n<ccpay-add-remission *ngIf=\"viewStatus === 'addremission' && feeId\"\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[fee]=\"feeId\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[paymentGroupRef]=\"orderRef\"\n[isFromServiceRequestPage] = \"true\"\n[payment] = \"payment\"\n[ccdCaseNumber]=\"ccdCaseNumber\"></ccpay-add-remission>\n\n<ccpay-add-remission *ngIf=\"viewStatus === 'issuerefund' && payment\"\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[isFromServiceRequestPage] = \"true\"\n[payment]=\"payment\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[paymentGroupRef]=\"orderRef\"\n[ccdCaseNumber]=\"ccdCaseNumber\"></ccpay-add-remission>\n<ccpay-add-remission *ngIf=\"viewStatus === 'addrefundforremission' && payment\"\n[isTurnOff]=\"isTurnOff\"\n[isStrategicFixEnable]=\"isStrategicFixEnable\"\n[viewCompStatus]= \"viewStatus\"\n[payment]=\"payment\"\n[orderStatus] =\"orderStatus\"\n[paidAmount]= \"orderTotalPayments\"\n[isRefundRemission]=\"isRefundRemission\"\n[caseType]=\"caseType\"\n[feeamount]=\"remissionFeeAmt\"\n[remission] = \"remissions\"\n[isFromServiceRequestPage]=\"true\"\n[ccdCaseNumber]=\"ccdCaseNumber\"></ccpay-add-remission>\n\n<ng-container *ngIf=\"viewStatus === 'feeRemovalConfirmation'\">\n  <div class=\"govuk-warning-text\">\n    <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n    <strong class=\"govuk-warning-text__text\">\n      <span class=\"govuk-warning-text__assistive\">Warning</span>\n      Are you sure you want to delete this fee?\n    </strong>\n  </div>\n  <div class=\"govuk-button-grb\">\n    <form novalidate>\n      <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"cancelRemoval()\">\n        Cancel\n      </button>\n      <button type=\"submit\" class=\"button\"\n      [disabled]=\"isRemoveBtnDisabled\"\n      [ngClass]='isRemoveBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'\n      (click)=\"removeFee(feeId)\">\n        Remove\n      </button>\n    </form>\n  </div>\n</ng-container>\n</main>\n</div>\n<!-- </main> -->\n<!-- </div class=\"govuk-width-container\"> -->\n", styles: [".govuk-grid-column-full--gr{position:relative;margin-bottom:10px}.disable{text-decoration:none;cursor:default;color:#fff;background-color:gray;pointer-events:none}.govuk-grid__surplus-payments{margin:20px 0}.govuk-grid__surplus-payments>.govuk-grid-column-full{padding:0}.govuk-grid__surplus-payments-col1{margin-bottom:10px}.govuk-inset-text__no-border{border-left:0px}.govuk-hidetext{font-size:22px;padding-bottom:10px}.lowercase{text-transform:lowercase}.channel:first-letter{text-transform:uppercase}.govuk-heading-xl{font-size:48px;margin-bottom:1px}.govuk-section-break--visible{border-bottom:2px solid black}.totalpayments.govuk-table__row{border-bottom:2px solid black!important}.govuk-inset-text{margin-left:1em}.govuk-button{font-size:19px;margin-bottom:0!important}.groupamount.govuk-table__header,.govuk-table__cell.govuk-table__cell--col6.govuk-table__custom--col6{text-align:right}.feeclass{padding-left:.7em}.align-center{text-align:center}details summary{display:list-item}.case-transaction__color{color:#a71414;font-weight:700;text-align:center}.capitalize:first-letter{text-transform:uppercase}.govuk-inset-text__no-left-margin{margin-left:0;padding-left:0}.whitespace-inherit{white-space:inherit!important}.govuk-section-records-break{margin:10px;border-bottom:2px solid black!important}.exisitng-fees{margin-left:12px}.add-telephony-payment{margin-top:-2em;margin-left:-2em}.govuk-table__header--custom{text-align:center}.disable-link{cursor:default;pointer-events:none;color:#8e8c8c}.panel-no--style{border-left-style:none}.col-28{width:28%!important}.col-8{width:8%!important}.col-60{width:60%!important}.col-32{width:32%!important}.col-34{width:34%!important}.col-15{width:15%!important;padding-right:0!important;padding-left:0!important}.col-16{width:16%!important}.col-14{width:14%!important}.col-17{width:17%!important}.col-12{width:12%!important}.col-9{width:9%!important}.col-10{width:10%!important}.col-11{width:11%!important}.col-13{width:13%!important}.col-21{width:21%!important}.col-20{width:20%!important}.col-24{width:24%!important}.govuk-table__cell,.govuk-table__header{padding:10px 10px 10px 0}.col-27{width:27%!important}td{white-space:nowrap;overflow:hidden!important}.col-19{width:19%!important;padding-left:0!important}.col-18{width:18%!important;padding-left:0!important;padding-right:0!important}.col-37{width:37%!important}.col-55{width:55%!important}.govuk-table{margin-bottom:1px}.hmcts-banner>.hmcts-banner__message{font-size:19px;line-height:1.25}.summary-table-font{font-size:36px}.order-class{padding-top:3em}.govuk-table__header:last-child{text-align:right}.govuk-table__cell:last-child{text-align:right}.govuk-grid-column-two-thirds{width:64%!important;padding:0!important}.govuk-heading-l{font-size:36px;margin-bottom:10px}.govuk-heading-lw{width:70%}.paymentrequest{margin-top:1em}.mar-17{margin-left:17px}.col-61{width:61px!important;padding:0!important}.error{width:960px;margin:auto}.summarypage{padding-left:36em;margin-top:2em}.summarypagealign{width:100%;text-align:right;margin-top:2em}.govuk-inset-text{font-size:2.1875rem}table{table-layout:fixed;width:100%}th,td{word-wrap:break-word}.totalPay{padding-right:14px;float:right;margin-top:2em}.govuk-back-link{font-size:1.5rem!important}.totalfees{float:right;margin-top:2em}.refundBtn{text-align:right;width:18%}.col-25{width:25%!important}.of-visible{overflow:visible!important}.col-51{width:51%!important}.alignright{text-align:right}.alignleft{text-align:left}.alignself{align-self:flex-end}.maxwidth{width:100%}.govuk-padding-btm{padding-bottom:50px}.govuk-margin-btm-20px{margin-bottom:20px}\n"] }]
    }], function () { return [{ type: i1$2.Router }, { type: PaymentViewService }, { type: BulkScaningPaymentService }, { type: CaseTransactionsService }, { type: PaymentLibComponent }, { type: OrderslistService }]; }, { LOGGEDINUSERROLES: [{
            type: Input,
            args: ['LOGGEDINUSERROLES']
        }], isTakePayment: [{
            type: Input
        }], isFromServiceRequestPage: [{
            type: Input
        }] }); })();

class PaymentToPayhubRequest {
    currency = 'GBP';
    description = 'PayBubble payment';
    channel = 'telephony';
    provider = 'pci pal';
    case_type;
    ccd_case_number;
    amount;
    constructor(ccd_case_number, amount, caseType) {
        this.ccd_case_number = ccd_case_number;
        this.amount = amount.toFixed(2);
        this.case_type = caseType;
    }
}

class PayhubAntennaRequest {
    currency = 'GBP';
    case_type;
    ccd_case_number;
    amount;
    constructor(ccd_case_number, amount, caseType) {
        this.ccd_case_number = ccd_case_number;
        this.amount = amount.toFixed(2);
        this.case_type = caseType;
    }
}

function FeeSummaryComponent_div_0_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 8)(1, "a", 9);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_0_li_2_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r7.loadCaseTransactionPage()); });
    i0.ɵɵtext(2, "Back");
    i0.ɵɵelementEnd()();
} }
function FeeSummaryComponent_div_0_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 8)(1, "a", 9);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_0_li_3_Template_a_click_1_listener($event) { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r9.redirectToFeeSearchPage($event, "summary")); });
    i0.ɵɵtext(2, "Back");
    i0.ɵɵelementEnd()();
} }
function FeeSummaryComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5)(1, "ol", 6);
    i0.ɵɵtemplate(2, FeeSummaryComponent_div_0_li_2_Template, 3, 0, "li", 7);
    i0.ɵɵtemplate(3, FeeSummaryComponent_div_0_li_3_Template, 3, 0, "li", 7);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isTurnOff);
} }
function FeeSummaryComponent_div_1_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div")(1, "div", 26)(2, "h2", 27);
    i0.ɵɵtext(3, " Payment Group details could not be retrieved ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 28);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" ", ctx_r12.errorMessage, " ");
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_3_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r33 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 47);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_3_a_1_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r33); const fee_r20 = i0.ɵɵnextContext(2).$implicit; const ctx_r31 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r31.confirmRemoveFee(fee_r20.id)); });
    i0.ɵɵelement(1, "br");
    i0.ɵɵtext(2, "Remove");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r20 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r30 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("ngClass", ctx_r30.isPaymentExist || fee_r20.remissions ? "disable-link" : "");
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 45);
    i0.ɵɵtemplate(1, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_3_a_1_Template, 3, 1, "a", 46);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r20 = i0.ɵɵnextContext().$implicit;
    const ctx_r22 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r22.isPaymentExist || !fee_r20.remissions);
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r38 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 45)(1, "a", 48);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_4_Template_a_click_1_listener() { i0.ɵɵrestoreView(_r38); const fee_r20 = i0.ɵɵnextContext().$implicit; const ctx_r36 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r36.confirmRemoveFee(fee_r20.id)); });
    i0.ɵɵtext(2, "Remove");
    i0.ɵɵelementEnd()();
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_a_5_Template(rf, ctx) { if (rf & 1) {
    const _r41 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 49);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_a_5_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r41); const fee_r20 = i0.ɵɵnextContext().$implicit; const ctx_r39 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r39.addRemission(fee_r20)); });
    i0.ɵɵtext(1, " Add help with fees or remission ");
    i0.ɵɵelementEnd();
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_a_6_Template(rf, ctx) { if (rf & 1) {
    const _r44 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 49);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_a_6_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r44); const fee_r20 = i0.ɵɵnextContext().$implicit; const ctx_r42 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r42.addRemission(fee_r20)); });
    i0.ɵɵtext(1, " Add help with fees or remission ");
    i0.ɵɵelementEnd();
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_7_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 50);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r20 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r45 = i0.ɵɵnextContext(4);
    let tmp_0_0;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("Remission,", (tmp_0_0 = ctx_r45.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_0_0.hwf_reference, "");
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "br");
    i0.ɵɵtemplate(2, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_7_div_2_Template, 2, 1, "div", 44);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r20 = i0.ɵɵnextContext().$implicit;
    const ctx_r26 = i0.ɵɵnextContext(4);
    let tmp_0_0;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ((tmp_0_0 = ctx_r26.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_0_0.hwf_amount) > 0);
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_td_8_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "br");
    i0.ɵɵelementStart(2, "div", 50);
    i0.ɵɵtext(3, "1");
    i0.ɵɵelementEnd()();
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_td_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 39);
    i0.ɵɵtext(1);
    i0.ɵɵtemplate(2, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_td_8_span_2_Template, 4, 0, "span", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r20 = i0.ɵɵnextContext().$implicit;
    const ctx_r27 = i0.ɵɵnextContext(4);
    let tmp_1_0;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", fee_r20.volume, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ((tmp_1_0 = ctx_r27.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_1_0.hwf_amount) > 0);
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 50);
    i0.ɵɵelement(1, "br")(2, "br");
    i0.ɵɵelementEnd();
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "br");
    i0.ɵɵelementStart(2, "div", 51);
    i0.ɵɵtext(3);
    i0.ɵɵpipe(4, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const fee_r20 = i0.ɵɵnextContext().$implicit;
    const ctx_r29 = i0.ɵɵnextContext(4);
    let tmp_0_0;
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" -", ((tmp_0_0 = ctx_r29.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_0_0.hwf_amount) ? i0.ɵɵpipeBind4(4, 1, (tmp_0_0 = ctx_r29.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_0_0.hwf_amount, "GBP", "symbol-narrow", "1.2-2") : "-", " ");
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 31)(1, "td", 39);
    i0.ɵɵtext(2);
    i0.ɵɵtemplate(3, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_3_Template, 2, 1, "span", 40);
    i0.ɵɵtemplate(4, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_4_Template, 3, 0, "span", 40);
    i0.ɵɵtemplate(5, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_a_5_Template, 2, 0, "a", 41);
    i0.ɵɵtemplate(6, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_a_6_Template, 2, 0, "a", 41);
    i0.ɵɵtemplate(7, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_7_Template, 3, 1, "span", 2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(8, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_td_8_Template, 3, 2, "td", 42);
    i0.ɵɵelementStart(9, "td", 43);
    i0.ɵɵelement(10, "br");
    i0.ɵɵtemplate(11, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_div_11_Template, 3, 0, "div", 44);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 43);
    i0.ɵɵtext(13);
    i0.ɵɵpipe(14, "currency");
    i0.ɵɵtemplate(15, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_span_15_Template, 5, 6, "span", 2);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const fee_r20 = ctx.$implicit;
    const ctx_r19 = i0.ɵɵnextContext(4);
    let tmp_1_0;
    let tmp_2_0;
    let tmp_3_0;
    let tmp_4_0;
    let tmp_5_0;
    let tmp_7_0;
    let tmp_9_0;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("", fee_r20.description, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r19.isPaymentExist || (((tmp_1_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_1_0.hwf_amount) === 0 || !((tmp_1_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_1_0.hwf_amount))) && !ctx_r19.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (!ctx_r19.isPaymentExist || (((tmp_2_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_2_0.hwf_amount) === 0 || !((tmp_2_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_2_0.hwf_amount))) && ctx_r19.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (((tmp_3_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_3_0.hwf_amount) === 0 || !((tmp_3_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_3_0.hwf_amount)) && !ctx_r19.isPaymentExist && !ctx_r19.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (((tmp_4_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_4_0.hwf_amount) === 0 || !((tmp_4_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_4_0.hwf_amount)) && ctx_r19.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ((tmp_5_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_5_0.hwf_amount) > 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", fee_r20.volume && fee_r20.volume > 0);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ((tmp_7_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_7_0.hwf_amount) > 0);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(14, 10, fee_r20.calculated_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ((tmp_9_0 = ctx_r19.getRemissionByFeeCode(fee_r20.code)) == null ? null : tmp_9_0.hwf_amount) > 0);
} }
function FeeSummaryComponent_div_1_table_12_tbody_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 37);
    i0.ɵɵtemplate(1, FeeSummaryComponent_div_1_table_12_tbody_10_tr_1_Template, 16, 15, "tr", 38);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r18.paymentGroup.fees);
} }
function FeeSummaryComponent_div_1_table_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "table", 29)(1, "thead", 30)(2, "tr", 31)(3, "th", 32);
    i0.ɵɵtext(4, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "th", 33);
    i0.ɵɵtext(6, "Quantity");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(7, "th", 34);
    i0.ɵɵelementStart(8, "th", 35);
    i0.ɵɵtext(9, "Amount");
    i0.ɵɵelementEnd()()();
    i0.ɵɵtemplate(10, FeeSummaryComponent_div_1_table_12_tbody_10_Template, 2, 1, "tbody", 36);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(10);
    i0.ɵɵproperty("ngIf", ctx_r13.paymentGroup.fees);
} }
function FeeSummaryComponent_div_1_button_14_Template(rf, ctx) { if (rf & 1) {
    const _r52 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 52);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_button_14_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r52); const ctx_r51 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r51.redirectToFeeSearchPage($event, "summary")); });
    i0.ɵɵtext(1, " Add fee ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r14.isPaymentExist)("ngClass", ctx_r14.isPaymentExist ? "govuk-button govuk-button--secondary button--disabled" : "govuk-button govuk-button--secondary");
} }
function FeeSummaryComponent_div_1_a_15_Template(rf, ctx) { if (rf & 1) {
    const _r54 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 53);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_a_15_Template_a_click_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r53 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r53.redirectToFeeSearchPage($event, "summary")); });
    i0.ɵɵtext(1, "Add a new fee");
    i0.ɵɵelementEnd();
} }
function FeeSummaryComponent_div_1_button_21_Template(rf, ctx) { if (rf & 1) {
    const _r56 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 54);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_button_21_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r56); const ctx_r55 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r55.takePayment()); });
    i0.ɵɵtext(1, " Take payment ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r16.totalFee <= 0 || ctx_r16.isConfirmationBtnDisabled)("ngClass", ctx_r16.totalFee <= 0 || !ctx_r16.platForm || !ctx_r16.service || ctx_r16.isConfirmationBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function FeeSummaryComponent_div_1_button_22_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, " Allocate payment ");
    i0.ɵɵelementEnd();
} }
function FeeSummaryComponent_div_1_button_22_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, " Continue ");
    i0.ɵɵelementEnd();
} }
function FeeSummaryComponent_div_1_button_22_Template(rf, ctx) { if (rf & 1) {
    const _r60 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 55);
    i0.ɵɵlistener("click", function FeeSummaryComponent_div_1_button_22_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r60); const ctx_r59 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r59.goToAllocatePage(ctx_r59.outStandingAmount, ctx_r59.isFeeAmountZero)); });
    i0.ɵɵtemplate(1, FeeSummaryComponent_div_1_button_22_span_1_Template, 2, 0, "span", 2);
    i0.ɵɵtemplate(2, FeeSummaryComponent_div_1_button_22_span_2_Template, 2, 0, "span", 2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r17.outStandingAmount > 0 || ctx_r17.isFeeAmountZero && ctx_r17.outStandingAmount === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r17.outStandingAmount < 0 || !ctx_r17.isFeeAmountZero && ctx_r17.outStandingAmount === 0);
} }
function FeeSummaryComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10)(1, "main", 11);
    i0.ɵɵelement(2, "input", 12, 13);
    i0.ɵɵelementStart(4, "div", 14)(5, "h1", 15);
    i0.ɵɵtext(6, "Summary ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "p", 16);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "ccdHyphens");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(10, FeeSummaryComponent_div_1_div_10_Template, 6, 1, "div", 2);
    i0.ɵɵelementStart(11, "div", 17);
    i0.ɵɵtemplate(12, FeeSummaryComponent_div_1_table_12_Template, 11, 1, "table", 18);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "div", 19);
    i0.ɵɵtemplate(14, FeeSummaryComponent_div_1_button_14_Template, 2, 2, "button", 20);
    i0.ɵɵtemplate(15, FeeSummaryComponent_div_1_a_15_Template, 2, 0, "a", 21);
    i0.ɵɵelementStart(16, "div", 22)(17, "p", 23);
    i0.ɵɵtext(18);
    i0.ɵɵpipe(19, "currency");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(20, "div");
    i0.ɵɵtemplate(21, FeeSummaryComponent_div_1_button_21_Template, 2, 2, "button", 24);
    i0.ɵɵtemplate(22, FeeSummaryComponent_div_1_button_22_Template, 3, 2, "button", 25);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(8);
    i0.ɵɵtextInterpolate1("Case reference:", i0.ɵɵpipeBind1(9, 8, ctx_r1.ccdCaseNumber), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.errorMessage);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.errorMessage && ctx_r1.paymentGroup);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.isTurnOff);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.isTurnOff);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("Total to pay: ", i0.ɵɵpipeBind4(19, 10, ctx_r1.outStandingAmount, "GBP", "symbol-narrow", "1.2-2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r1.bsPaymentDcnNumber);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.bsPaymentDcnNumber);
} }
function FeeSummaryComponent_ng_container_2_button_14_Template(rf, ctx) { if (rf & 1) {
    const _r64 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 65);
    i0.ɵɵlistener("click", function FeeSummaryComponent_ng_container_2_button_14_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r64); const ctx_r63 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r63.removeFee(ctx_r63.currentFee)); });
    i0.ɵɵtext(1, " Remove ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r62 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r62.isRemoveBtnDisabled ? "button button--disabled govuk-!-margin-right-1" : "button govuk-!-margin-right-1");
} }
function FeeSummaryComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r66 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 56, 13);
    i0.ɵɵelementStart(3, "div", 57)(4, "span", 58);
    i0.ɵɵtext(5, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "strong", 59)(7, "span", 60);
    i0.ɵɵtext(8, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, " Are you sure you want to delete this fee? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(10, "div", 61)(11, "form", 62)(12, "button", 63);
    i0.ɵɵlistener("click", function FeeSummaryComponent_ng_container_2_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r66); const ctx_r65 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r65.cancelRemission()); });
    i0.ɵɵtext(13, " Cancel ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(14, FeeSummaryComponent_ng_container_2_button_14_Template, 2, 1, "button", 64);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(14);
    i0.ɵɵproperty("ngIf", !ctx_r2.isRemoveBtnDisabled);
} }
function FeeSummaryComponent_ccpay_add_remission_3_Template(rf, ctx) { if (rf & 1) {
    const _r68 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ccpay-add-remission", 66);
    i0.ɵɵlistener("cancelRemission", function FeeSummaryComponent_ccpay_add_remission_3_Template_ccpay_add_remission_cancelRemission_0_listener() { i0.ɵɵrestoreView(_r68); const ctx_r67 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r67.cancelRemission()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("isTurnOff", ctx_r3.isTurnOff)("isStrategicFixEnable", ctx_r3.isStrategicFixEnable)("fee", ctx_r3.currentFee)("caseType", ctx_r3.caseType)("ccdCaseNumber", ctx_r3.ccdCaseNumber)("paymentGroupRef", ctx_r3.paymentGroupRef);
} }
function FeeSummaryComponent_input_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "input", 67, 13);
} }
const BS_ENABLE_FLAG$1 = 'bulk-scan-enabling-fe';
class FeeSummaryComponent {
    router;
    bulkScaningPaymentService;
    location;
    paymentViewService;
    paymentLibComponent;
    OrderslistService;
    paymentGroupRef;
    ccdCaseNumber;
    isTurnOff;
    caseType;
    bsPaymentDcnNumber;
    paymentGroup;
    errorMessage;
    viewStatus = 'main';
    currentFee;
    totalFee;
    payhubHtml;
    service = "";
    platForm = "";
    upPaymentErrorMessage;
    selectedOption;
    isBackButtonEnable = true;
    outStandingAmount;
    isFeeAmountZero = false;
    totalAfterRemission = 0;
    isConfirmationBtnDisabled = false;
    isRemoveBtnDisabled = false;
    isPaymentExist = false;
    isRemissionsExist = false;
    isRemissionsMatch = false;
    isStrategicFixEnable;
    constructor(router, bulkScaningPaymentService, location, paymentViewService, paymentLibComponent, OrderslistService) {
        this.router = router;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
        this.location = location;
        this.paymentViewService = paymentViewService;
        this.paymentLibComponent = paymentLibComponent;
        this.OrderslistService = OrderslistService;
    }
    ngOnInit() {
        this.viewStatus = 'main';
        this.caseType = this.paymentLibComponent.CASETYPE;
        this.bsPaymentDcnNumber = this.paymentLibComponent.bspaymentdcn;
        this.selectedOption = this.paymentLibComponent.SELECTED_OPTION.toLocaleLowerCase();
        this.isStrategicFixEnable = this.paymentLibComponent.ISSFENABLE;
        this.OrderslistService.setCaseType(this.paymentLibComponent.CASETYPE);
        this.platForm = 'Antenna';
        this.paymentViewService.getBSfeature().subscribe(features => {
            let result = JSON.parse(features).filter(feature => feature.uid === BS_ENABLE_FLAG$1);
            this.paymentLibComponent.ISBSENABLE = result[0] ? result[0].enable : false;
        }, err => {
            this.paymentLibComponent.ISBSENABLE = false;
        });
        if (this.bsPaymentDcnNumber) {
            this.getUnassignedPaymentlist();
        }
        this.getPaymentGroup();
    }
    getUnassignedPaymentlist() {
        if (this.selectedOption === 'dcn') {
            this.bulkScaningPaymentService.getBSPaymentsByDCN(this.paymentLibComponent.DCN_NUMBER).subscribe(unassignedPayments => {
                if (unassignedPayments['data'].payments) {
                    this.service = unassignedPayments['data'].responsible_service_id;
                }
                else {
                    this.upPaymentErrorMessage = 'error';
                }
            }, (error) => this.upPaymentErrorMessage = error);
        }
        else {
            this.bulkScaningPaymentService.getBSPaymentsByCCD(this.ccdCaseNumber).subscribe(unassignedPayments => {
                if (unassignedPayments['data'].payments) {
                    this.service = unassignedPayments['data'].responsible_service_id;
                }
                else {
                    this.upPaymentErrorMessage = 'error';
                }
            }, (error) => this.upPaymentErrorMessage = error);
        }
    }
    getRemissionByFeeCode(feeCode) {
        if (this.paymentGroup && this.paymentGroup.remissions && this.paymentGroup.remissions.length > 0) {
            for (const remission of this.paymentGroup.remissions) {
                if (remission.fee_code === feeCode) {
                    return remission;
                }
            }
        }
        return null;
    }
    addRemission(fee) {
        this.currentFee = fee;
        this.viewStatus = 'add_remission';
    }
    getPaymentGroup() {
        let fees = [];
        this.paymentViewService.getPaymentGroupDetails(this.paymentGroupRef).subscribe(paymentGroup => {
            this.paymentGroup = paymentGroup;
            this.isPaymentExist = paymentGroup.payments ? paymentGroup.payments.length > 0 : false;
            this.isRemissionsExist = paymentGroup.remissions ? paymentGroup.remissions.length > 0 : false;
            if (paymentGroup.fees) {
                paymentGroup.fees.forEach(fee => {
                    this.totalAfterRemission = this.totalAfterRemission + fee.net_amount;
                    if (fee.calculated_amount === 0) {
                        this.isFeeAmountZero = true;
                    }
                    if (paymentGroup.remissions) {
                        this.isRemissionsMatch = false;
                        paymentGroup.remissions.forEach(rem => {
                            if (rem.fee_code === fee.code) {
                                this.isRemissionsMatch = true;
                                fee['remissions'] = rem;
                                fees.push(fee);
                            }
                        });
                        if (!this.isRemissionsMatch) {
                            fees.push(fee);
                        }
                    }
                    else {
                        fees.push(fee);
                    }
                });
                paymentGroup.fees = fees;
            }
            this.outStandingAmount = this.bulkScaningPaymentService.calculateOutStandingAmount(paymentGroup);
        }, (error) => this.errorMessage = error.replace(/"/g, ""));
    }
    confirmRemoveFee(fee) {
        this.isRemoveBtnDisabled = false;
        this.currentFee = fee;
        this.viewStatus = 'feeRemovalConfirmation';
    }
    removeFee(fee) {
        this.isRemoveBtnDisabled = true;
        this.paymentViewService.deleteFeeFromPaymentGroup(fee).subscribe((success) => {
            if (this.paymentGroup.fees && this.paymentGroup.fees.length > 1) {
                this.totalAfterRemission = 0;
                this.getPaymentGroup();
                this.viewStatus = 'main';
                return;
            }
            this.loadCaseTransactionPage();
        }, (error) => {
            this.errorMessage = error;
            this.isRemoveBtnDisabled = false;
        });
    }
    loadCaseTransactionPage() {
        this.paymentLibComponent.TAKEPAYMENT = true;
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentViewService.getBSfeature().subscribe(features => {
            let result = JSON.parse(features).filter(feature => feature.uid === BS_ENABLE_FLAG$1);
            this.paymentLibComponent.ISBSENABLE = result[0] ? result[0].enable : false;
        }, err => {
            this.paymentLibComponent.ISBSENABLE = false;
        });
        let partUrl = `selectedOption=${this.paymentLibComponent.SELECTED_OPTION}`;
        partUrl += this.bsPaymentDcnNumber ? `&dcn=${this.bsPaymentDcnNumber}` : '';
        partUrl += this.paymentLibComponent.ISBSENABLE ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
        partUrl += this.paymentLibComponent.ISTURNOFF ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
        partUrl += this.paymentLibComponent.ISSFENABLE ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
        partUrl += `&caseType=${this.paymentLibComponent.CASETYPE}`;
        let url = `/payment-history/${this.ccdCaseNumber}?view=case-transactions&takePayment=true&${partUrl}`;
        this.router.navigateByUrl(url);
    }
    cancelRemission() {
        this.viewStatus = 'main';
    }
    redirectToFeeSearchPage(event, page) {
        event.preventDefault();
        let partUrl = this.bsPaymentDcnNumber ? `&dcn=${this.bsPaymentDcnNumber}` : '';
        partUrl += this.paymentLibComponent.ISBSENABLE ? '&isBulkScanning=Enable' : '&isBulkScanning=Disable';
        partUrl += this.paymentLibComponent.ISTURNOFF ? '&isTurnOff=Enable' : '&isTurnOff=Disable';
        partUrl += this.paymentLibComponent.ISSFENABLE ? '&isStFixEnable=Enable' : '&isStFixEnable=Disable';
        partUrl += `&caseType=${this.paymentLibComponent.CASETYPE}`;
        if (this.viewStatus === 'feeRemovalConfirmation' || this.viewStatus === 'add_remission') {
            this.viewStatus = 'main';
            return;
        }
        let url = `/fee-search?ccdCaseNumber=${this.ccdCaseNumber}&selectedOption=${this.paymentLibComponent.SELECTED_OPTION}&paymentGroupRef=${this.paymentGroupRef}${partUrl}`;
        this.router.navigateByUrl(url);
    }
    takePayment() {
        this.isConfirmationBtnDisabled = true;
        const requestBody = new PaymentToPayhubRequest(this.ccdCaseNumber, this.outStandingAmount, this.caseType), antennaReqBody = new PayhubAntennaRequest(this.ccdCaseNumber, this.outStandingAmount, this.caseType);
        if (this.platForm === 'Antenna') {
            this.paymentViewService.postPaymentAntennaToPayHub(antennaReqBody, this.paymentGroupRef).subscribe(response => {
                this.isBackButtonEnable = false;
                window.location.href = '/makePaymentByTelephoneyProvider';
            }, (error) => {
                this.errorMessage = error;
                this.isConfirmationBtnDisabled = false;
                this.router.navigateByUrl('/pci-pal-failure');
            });
        }
    }
    goToAllocatePage(outStandingAmount, isFeeAmountZero) {
        if (outStandingAmount > 0 || (outStandingAmount === 0 && isFeeAmountZero)) {
            this.paymentLibComponent.paymentGroupReference = this.paymentGroupRef;
            this.paymentLibComponent.viewName = 'allocate-payments';
        }
        else {
            this.loadCaseTransactionPage();
        }
    }
    isCheckAmountdueExist(amountDue) {
        return typeof amountDue === 'undefined';
    }
    static ɵfac = function FeeSummaryComponent_Factory(t) { return new (t || FeeSummaryComponent)(i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(BulkScaningPaymentService), i0.ɵɵdirectiveInject(i3.Location), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FeeSummaryComponent, selectors: [["ccpay-fee-summary"]], inputs: { paymentGroupRef: "paymentGroupRef", ccdCaseNumber: "ccdCaseNumber", isTurnOff: "isTurnOff", caseType: "caseType" }, decls: 5, vars: 5, consts: [["class", "govuk-breadcrumbs", 4, "ngIf"], ["class", "fee-summary", 4, "ngIf"], [4, "ngIf"], [3, "isTurnOff", "isStrategicFixEnable", "fee", "caseType", "ccdCaseNumber", "paymentGroupRef", "cancelRemission", 4, "ngIf"], ["type", "hidden", "class", "iFrameDrivenImageValue", "value", "PCIPAL", 4, "ngIf"], [1, "govuk-breadcrumbs"], [1, "govuk-breadcrumbs__list"], ["class", "govuk-breadcrumbs__list-item", 4, "ngIf"], [1, "govuk-breadcrumbs__list-item"], [1, "govuk-back-link", "govuk-label", 3, "click"], [1, "fee-summary"], [1, "govuk-main-wrapper"], ["type", "hidden", "value", "FEESUMMARY", 1, "iFrameDrivenImageValue"], ["myInput", ""], [1, "summaryheader"], [1, "heading-large", "govuk-!-margin-top-3", "govuk-!-margin-bottom-4"], [1, "govuk-!-margin-top-5", "caseref"], [1, "govuk-!-margin-top-3"], ["class", "govuk-table  govuk-!-margin-bottom-2", 4, "ngIf"], [1, "addfee"], [3, "disabled", "ngClass", "click", 4, "ngIf"], ["class", "govuk-button govuk-button--secondary", 3, "click", 4, "ngIf"], [1, "feeAddButton"], [1, "paddigleft", "govuk-!-margin-top-2"], ["type", "submit", 3, "disabled", "ngClass", "click", 4, "ngIf"], ["type", "button", "class", "button govuk-!-margin-right-1", 3, "click", 4, "ngIf"], ["role", "group", "aria-labelledby", "failure-error-summary-heading", "tabindex", "-1", 1, "error-summary"], ["id", "failure-error-summary-heading", 1, "heading-medium", "error-summary-heading"], [1, "govuk-error-summary__body"], [1, "govuk-table", "govuk-!-margin-bottom-2"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "class600"], ["scope", "col", 1, "class60"], ["scope", "col", 1, "class80"], ["scope", "col", 1, "class100"], ["class", "govuk-table__body", 4, "ngIf"], [1, "govuk-table__body"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], [1, "govuk-table__cell"], ["class", "no-border", 4, "ngIf"], ["class", "remissionActive", 3, "click", 4, "ngIf"], ["class", "govuk-table__cell", 4, "ngIf"], [1, "govuk-table__cell", "alignright"], ["class", "govuk-table__cell_border", 4, "ngIf"], [1, "no-border"], [3, "ngClass", "click", 4, "ngIf"], [3, "ngClass", "click"], [3, "click"], [1, "remissionActive", 3, "click"], [1, "govuk-table__cell_border"], [1, "govuk-table__cell_rmborder", "alignright"], [3, "disabled", "ngClass", "click"], [1, "govuk-button", "govuk-button--secondary", 3, "click"], ["type", "submit", 3, "disabled", "ngClass", "click"], ["type", "button", 1, "button", "govuk-!-margin-right-1", 3, "click"], ["type", "hidden", "value", "FEEREMOVALCONFIRMATION_1", 1, "iFrameDrivenImageValue"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "govuk-button-grb"], ["novalidate", ""], ["type", "submit", 1, "button", "govuk-button--secondary", 3, "click"], ["type", "submit", "class", "button", 3, "ngClass", "click", 4, "ngIf"], ["type", "submit", 1, "button", 3, "ngClass", "click"], [3, "isTurnOff", "isStrategicFixEnable", "fee", "caseType", "ccdCaseNumber", "paymentGroupRef", "cancelRemission"], ["type", "hidden", "value", "PCIPAL", 1, "iFrameDrivenImageValue"]], template: function FeeSummaryComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, FeeSummaryComponent_div_0_Template, 4, 2, "div", 0);
            i0.ɵɵtemplate(1, FeeSummaryComponent_div_1_Template, 23, 15, "div", 1);
            i0.ɵɵtemplate(2, FeeSummaryComponent_ng_container_2_Template, 15, 1, "ng-container", 2);
            i0.ɵɵtemplate(3, FeeSummaryComponent_ccpay_add_remission_3_Template, 1, 6, "ccpay-add-remission", 3);
            i0.ɵɵtemplate(4, FeeSummaryComponent_input_4_Template, 2, 0, "input", 4);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.isBackButtonEnable);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "main");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "feeRemovalConfirmation");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "add_remission" && ctx.currentFee);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "payhub_view" && ctx.payhubHtml);
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.NgControlStatusGroup, i1$1.NgForm, AddRemissionComponent, i3.CurrencyPipe, CcdHyphensPipe], styles: [".fee-summary[_ngcontent-%COMP%]   .grey-text[_ngcontent-%COMP%]{color:#6b7376;font-weight:500}.fee-summary[_ngcontent-%COMP%]   .govuk-table[_ngcontent-%COMP%]{margin-bottom:0}.fee-summary[_ngcontent-%COMP%]   .no-border[_ngcontent-%COMP%]{border:none;border-bottom:none}.fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], .fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{font-size:19px;vertical-align:top}.fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]   .no-padding[_ngcontent-%COMP%], .fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .no-padding[_ngcontent-%COMP%]{padding:0}.fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]   .subcolumn-1[_ngcontent-%COMP%], .fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .subcolumn-1[_ngcontent-%COMP%]{width:45%}.fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]   .subcolumn-2[_ngcontent-%COMP%], .fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .subcolumn-2[_ngcontent-%COMP%]{width:25%;text-align:right}.fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]   .subcolumn-3[_ngcontent-%COMP%], .fee-summary[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .subcolumn-3[_ngcontent-%COMP%]{width:30%;text-align:center}table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:700}.govuk-button-grb[_ngcontent-%COMP%]{padding-bottom:20px}.govuk-button-grb[_ngcontent-%COMP%]   .govuk-button--secondary[_ngcontent-%COMP%]{background-color:#dee0e2;box-shadow:0 2px #858688;color:#0b0c0c;margin-right:10px}.govuk-form-group--mg[_ngcontent-%COMP%]{margin-top:10px!important}.govuk-fieldset__heading--fz[_ngcontent-%COMP%]{font-size:16px}.remissionDisable[_ngcontent-%COMP%]{color:gray;cursor:default}.heading-xlarge[_ngcontent-%COMP%]{margin:0 0 14px -20px}.govuk-select--custom[_ngcontent-%COMP%]{width:50%}.disable-link[_ngcontent-%COMP%]{cursor:default;pointer-events:none;color:#8e8c8c}.govuk-table__header[_ngcontent-%COMP%], .govuk-table__cell_border[_ngcontent-%COMP%]{padding:10px 0 0;border-top:1px solid #bfc1c3;text-align:left}.govuk-table__header[_ngcontent-%COMP%], .govuk-table__cell[_ngcontent-%COMP%]{padding:10px 0}.govuk-table__header[_ngcontent-%COMP%], .govuk-table__cell_rmborder[_ngcontent-%COMP%]{padding:10px 0 0;border-top:1px solid #bfc1c3;text-align:left}.govuk-table__fessheader[_ngcontent-%COMP%]{font-weight:700}.govuk-button[_ngcontent-%COMP%]{font-size:19px}.feeAddButton[_ngcontent-%COMP%]{padding-left:65rem}.remissionActive[_ngcontent-%COMP%]{padding-left:10px}.paddigleft[_ngcontent-%COMP%]{padding-left:2em}.govuk-back-link[_ngcontent-%COMP%]{font-size:1.5rem!important}.govuk-warning-text__text[_ngcontent-%COMP%]{font-size:19px}.summaryheader[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-between;width:960px}.class600[_ngcontent-%COMP%]{width:600px}.class60[_ngcontent-%COMP%]{width:60px}.class80[_ngcontent-%COMP%]{width:80px;text-align:right}.class100[_ngcontent-%COMP%]{width:100px;text-align:right}.alignright[_ngcontent-%COMP%]{text-align:right}.caseref[_ngcontent-%COMP%]{align-self:flex-end}.addfee[_ngcontent-%COMP%]{display:flex;flex-direction:row}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FeeSummaryComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-fee-summary', template: "\n<div class=\"govuk-breadcrumbs\" *ngIf=\"isBackButtonEnable\">\n  <ol class=\"govuk-breadcrumbs__list\">\n    <li class=\"govuk-breadcrumbs__list-item\" *ngIf=\"!isTurnOff\">\n      <a (click)=\"loadCaseTransactionPage()\" class=\"govuk-back-link govuk-label\">Back</a>\n    </li>\n    <li class=\"govuk-breadcrumbs__list-item\" *ngIf=\"isTurnOff\">\n        <a (click)=\"redirectToFeeSearchPage($event,'summary')\" class=\"govuk-back-link govuk-label\">Back</a>\n      </li>\n  </ol>\n</div>\n<div class=\"fee-summary\" *ngIf=\"viewStatus === 'main'\">\n    <main class=\"govuk-main-wrapper\">\n      <input #myInput type='hidden' class='iFrameDrivenImageValue' value='FEESUMMARY'>\n      <div class=\"summaryheader\">\n          <h1 class=\"heading-large govuk-!-margin-top-3 govuk-!-margin-bottom-4\">Summary </h1>\n          <p class=\"govuk-!-margin-top-5 caseref\">Case reference:{{ccdCaseNumber | ccdHyphens}}</p>\n        </div>\n\n  <!-- <div class=\"govuk-grid-row\">\n    <div class=\"govuk-grid-column-two-thirds\">\n      <h1 class=\"heading-xlarge\">Fee Summary</h1>\n    </div>\n\n\n    \u00A0<div\u00A0class=\"govuk-grid-column-one-third\"\u00A0align=\"right\">\n      \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0<button\u00A0 *ngIf=\"!isTurnOff\" (click)=\"redirectToFeeSearchPage($event,'summary')\"\n      \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0[disabled]=\"isPaymentExist\"\n      \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0[ngClass]='isPaymentExist ?\u00A0\"button\u00A0button--disabled govuk-!-margin-right-1\"\u00A0:\u00A0\"button govuk-!-margin-right-1\"'>\n              Add a new fee\n            </button>\n\n            <a *ngIf=\"isTurnOff\" (click)=\"redirectToFeeSearchPage($event,'summary')\" class=\"button\">Add a new fee</a>\n    </div>\n  </div> -->\n\n\n  <div *ngIf=\"errorMessage\">\n    <div class=\"error-summary\" role=\"group\" aria-labelledby=\"failure-error-summary-heading\" tabindex=\"-1\">\n      <h2 class=\"heading-medium error-summary-heading\" id=\"failure-error-summary-heading\">\n        Payment Group details could not be retrieved\n      </h2>\n      <div class=\"govuk-error-summary__body\">\n        {{ errorMessage }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"govuk-!-margin-top-3\">\n      <table class=\"govuk-table  govuk-!-margin-bottom-2\" *ngIf=\"!errorMessage && paymentGroup\">\n          <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                  <th class=\"govuk-table__header\" scope=\"col\" class=\"class600\">Description</th>\n                  <th class=\"govuk-table__header\" scope=\"col\" class=\"class60\">Quantity</th>\n                  <th class=\"govuk-table__header\" scope=\"col\" class=\"class80\"></th>\n                  <th class=\"govuk-table__header\" scope=\"col\" class=\"class100\">Amount</th>\n              </tr>\n          </thead>\n\n          <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.fees\">\n              <tr class=\"govuk-table__row\" *ngFor=\"let fee of paymentGroup.fees; let i = index;\">\n                      <td class=\"govuk-table__cell\">{{ fee.description }}\n\n                          <span class=\"no-border\" *ngIf=\"(isPaymentExist || (getRemissionByFeeCode(fee.code)?.hwf_amount === 0 || !getRemissionByFeeCode(fee.code)?.hwf_amount)) && !isTurnOff\">\n\n\n                              <a (click)=\"confirmRemoveFee(fee.id)\" *ngIf=\"(!isPaymentExist || !fee.remissions)\" [ngClass]='isPaymentExist || fee.remissions? \"disable-link\" : \"\"'> <br>Remove</a>\n                          </span>\n\n                          <span class=\"no-border\" *ngIf=\"(!isPaymentExist || (getRemissionByFeeCode(fee.code)?.hwf_amount === 0 || !getRemissionByFeeCode(fee.code)?.hwf_amount)) && isTurnOff \">\n                              <a (click)=\"confirmRemoveFee(fee.id)\">Remove</a>\n                            </span>\n\n                            <a (click)=\"addRemission(fee)\" class=\"remissionActive\"  *ngIf=\"(getRemissionByFeeCode(fee.code)?.hwf_amount === 0 || !getRemissionByFeeCode(fee.code)?.hwf_amount) && !isPaymentExist && !isTurnOff\">\n                                  Add help with fees or remission\n                            </a>\n                            <a (click)=\"addRemission(fee)\" class=\"remissionActive\"   *ngIf=\"(getRemissionByFeeCode(fee.code)?.hwf_amount === 0 || !getRemissionByFeeCode(fee.code)?.hwf_amount) && isTurnOff\">\n                                  Add help with fees or remission\n                            </a>\n                            <span *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\">\n                              <br>\n                                <div class=\"govuk-table__cell_border\" *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\">Remission,{{ getRemissionByFeeCode(fee.code)?.hwf_reference }}</div>\n                            </span>\n                      </td>\n\n                      <td class=\"govuk-table__cell\" *ngIf=\"fee.volume && fee.volume > 0\">\n                          {{ fee.volume }}\n                          <span  *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\">\n                             <br>\n                             <div class=\"govuk-table__cell_border\">1</div>\n                          </span>\n                      </td>\n\n                      <td  class=\"govuk-table__cell alignright\">\n                       <br>\n                        <div *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\" class=\"govuk-table__cell_border\"> <br><br></div>\n                      </td>\n                      <td class=\"govuk-table__cell alignright\" >\n                        {{ fee.calculated_amount | currency:'GBP':'symbol-narrow':'1.2-2' }}\n                        <span *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\">\n                            <br>\n                            <div class=\"govuk-table__cell_rmborder alignright\">\n                                -{{ getRemissionByFeeCode(fee.code)?.hwf_amount? ( getRemissionByFeeCode(fee.code)?.hwf_amount  | currency:'GBP':'symbol-narrow':'1.2-2') : '-' }}\n                              </div>\n                            </span>\n                      </td>\n\n\n              </tr>\n              <!-- <tr>\n                  <td *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\">\n                      <br>\n                        <div class=\"govuk-table__cell_border\" *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount > 0\">Remission,{{ getRemissionByFeeCode(fee.code)?.hwf_reference }}</div>\n                    </td>\n                    <td *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount ===''\">\n                        <div class=\"govuk-table__cell_border\"></div>\n                    </td>\n                    <td *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount === ''\">\n                        <br>\n                          <div class=\"govuk-table__cell_border\" *ngIf = \"getRemissionByFeeCode(fee.code)?.hwf_amount === ''\"></div>\n                      </td>\n                      <td>\n                          <br>\n                            <div class=\"govuk-table__cell_border\" style=\"text-align: right;\">\n                                -{{ getRemissionByFeeCode(fee.code)?.hwf_amount? ( getRemissionByFeeCode(fee.code)?.hwf_amount  | currency:'GBP':'symbol-narrow':'1.2-2') : '-' }}\n                              </div>\n                        </td>\n              </tr> -->\n          </tbody>\n      </table>\n  </div>\n  <div class=\"addfee\">\n      <button  *ngIf=\"!isTurnOff\" (click)=\"redirectToFeeSearchPage($event,'summary')\"\n              [disabled]=\"isPaymentExist\"\n              [ngClass]='isPaymentExist ? \"govuk-button govuk-button--secondary button--disabled\" : \"govuk-button govuk-button--secondary\"'>\n                Add fee\n      </button>\n    <a *ngIf=\"isTurnOff\" (click)=\"redirectToFeeSearchPage($event,'summary')\" class=\"govuk-button govuk-button--secondary\">Add a new fee</a>\n   <div  class=\"feeAddButton\">\n          <p class=\"paddigleft govuk-!-margin-top-2\">Total to pay: {{ outStandingAmount | currency:'GBP':'symbol-narrow':'1.2-2'}}</p>\n    </div>\n  </div>\n<!--\n  <div class=\"govuk-form-group govuk-form-group--mg\" *ngIf=\"!bsPaymentDcnNumber\">\n      <label class=\"govuk-label custom-govuk-label govuk-fieldset__heading--fz\" for=\"responsibleOffice\">\n        <strong>What service is this fee for?</strong>\n      </label>\n      <select class=\"govuk-select govuk-select--custom\" id=\"responsibleOffice\" [(ngModel)]=\"service\" name=\"responsibleOffice\">\n        <option value=\"\" selected='selected'>Please select</option>\n        <option value=\"AA07\">Divorce</option>\n        <option value=\"AA09\">Financial Remedy</option>\n        <option value=\"AA08\">Probate</option>\n      </select>\n  </div> -->\n\n  <div>\n      <button *ngIf=\"!bsPaymentDcnNumber\" type=\"submit\" (click)=\"takePayment()\"\n      [disabled]=\"totalFee <= 0 || isConfirmationBtnDisabled\"\n      [ngClass]='totalFee <= 0 || !platForm || !service || isConfirmationBtnDisabled? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'>\n        Take payment\n    </button>\n    <button *ngIf=\"bsPaymentDcnNumber\" type=\"button\" (click)=\"goToAllocatePage(outStandingAmount, isFeeAmountZero)\" class=\"button govuk-!-margin-right-1\">\n      <span *ngIf=\"outStandingAmount > 0 || (isFeeAmountZero && outStandingAmount === 0)\">\n        Allocate payment\n      </span>\n      <span *ngIf=\"outStandingAmount < 0 || (!isFeeAmountZero && outStandingAmount === 0)\">\n        Continue\n      </span>\n    </button>\n  </div>\n\n</main>\n</div>\n\n  <ng-container *ngIf=\"viewStatus === 'feeRemovalConfirmation'\">\n    <input #myInput type='hidden' class='iFrameDrivenImageValue' value='FEEREMOVALCONFIRMATION_1'>\n      <div class=\"govuk-warning-text\">\n        <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n        <strong class=\"govuk-warning-text__text\">\n          <span class=\"govuk-warning-text__assistive\">Warning</span>\n          Are you sure you want to delete this fee?\n        </strong>\n      </div>\n      <div class=\"govuk-button-grb\">\n        <form novalidate>\n          <button type=\"submit\" class=\"button govuk-button--secondary\" (click)=\"cancelRemission()\">\n            Cancel\n          </button>\n          <button type=\"submit\" class=\"button\"\n          *ngIf =\"!isRemoveBtnDisabled\"\n          [ngClass]='isRemoveBtnDisabled ? \"button button--disabled govuk-!-margin-right-1\" : \"button govuk-!-margin-right-1\"'\n          (click)=\"removeFee(currentFee)\">\n            Remove\n          </button>\n        </form>\n      </div>\n    </ng-container>\n<ccpay-add-remission *ngIf=\"viewStatus === 'add_remission' && currentFee\"\n [isTurnOff]=\"isTurnOff\"\n [isStrategicFixEnable]=\"isStrategicFixEnable\"\n [fee]=\"currentFee\"\n [caseType]=\"caseType\"\n [ccdCaseNumber]=\"ccdCaseNumber\"\n [paymentGroupRef]=\"paymentGroupRef\"\n (cancelRemission)=\"cancelRemission()\"></ccpay-add-remission>\n <input *ngIf=\"viewStatus === 'payhub_view' && payhubHtml\" #myInput type='hidden' class='iFrameDrivenImageValue' value='PCIPAL'>\n", styles: [".fee-summary .grey-text{color:#6b7376;font-weight:500}.fee-summary .govuk-table{margin-bottom:0}.fee-summary .no-border{border:none;border-bottom:none}.fee-summary table th,.fee-summary table td{font-size:19px;vertical-align:top}.fee-summary table th .no-padding,.fee-summary table td .no-padding{padding:0}.fee-summary table th .subcolumn-1,.fee-summary table td .subcolumn-1{width:45%}.fee-summary table th .subcolumn-2,.fee-summary table td .subcolumn-2{width:25%;text-align:right}.fee-summary table th .subcolumn-3,.fee-summary table td .subcolumn-3{width:30%;text-align:center}table th{font-weight:700}.govuk-button-grb{padding-bottom:20px}.govuk-button-grb .govuk-button--secondary{background-color:#dee0e2;box-shadow:0 2px #858688;color:#0b0c0c;margin-right:10px}.govuk-form-group--mg{margin-top:10px!important}.govuk-fieldset__heading--fz{font-size:16px}.remissionDisable{color:gray;cursor:default}.heading-xlarge{margin:0 0 14px -20px}.govuk-select--custom{width:50%}.disable-link{cursor:default;pointer-events:none;color:#8e8c8c}.govuk-table__header,.govuk-table__cell_border{padding:10px 0 0;border-top:1px solid #bfc1c3;text-align:left}.govuk-table__header,.govuk-table__cell{padding:10px 0}.govuk-table__header,.govuk-table__cell_rmborder{padding:10px 0 0;border-top:1px solid #bfc1c3;text-align:left}.govuk-table__fessheader{font-weight:700}.govuk-button{font-size:19px}.feeAddButton{padding-left:65rem}.remissionActive{padding-left:10px}.paddigleft{padding-left:2em}.govuk-back-link{font-size:1.5rem!important}.govuk-warning-text__text{font-size:19px}.summaryheader{display:flex;flex-direction:row;justify-content:space-between;width:960px}.class600{width:600px}.class60{width:60px}.class80{width:80px;text-align:right}.class100{width:100px;text-align:right}.alignright{text-align:right}.caseref{align-self:flex-end}.addfee{display:flex;flex-direction:row}\n"] }]
    }], function () { return [{ type: i1$2.Router }, { type: BulkScaningPaymentService }, { type: i3.Location }, { type: PaymentViewService }, { type: PaymentLibComponent }, { type: OrderslistService }]; }, { paymentGroupRef: [{
            type: Input
        }], ccdCaseNumber: [{
            type: Input
        }], isTurnOff: [{
            type: Input
        }], caseType: [{
            type: Input
        }] }); })();

class ErrorBannerComponent {
    errorMessage;
    constructor() { }
    ngOnInit() {
    }
    static ɵfac = function ErrorBannerComponent_Factory(t) { return new (t || ErrorBannerComponent)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ErrorBannerComponent, selectors: [["ccpay-error-banner"]], inputs: { errorMessage: "errorMessage" }, decls: 7, vars: 2, consts: [["aria-labelledby", "error-summary-title", "role", "alert", "tabindex", "-1", "data-module", "govuk-error-summary", 1, "govuk-error-summary"], ["id", "error-summary-title", 1, "govuk-error-summary__title", "govuk-error-summary__title-custom"], [1, "govuk-error-summary__body"], [1, "govuk-list", "govuk-error-summary__list"]], template: function ErrorBannerComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "h2", 1);
            i0.ɵɵtext(2);
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "div", 2)(4, "ul", 3)(5, "li");
            i0.ɵɵtext(6);
            i0.ɵɵelementEnd()()()();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵtextInterpolate1(" ", ctx.errorMessage.title, " ");
            i0.ɵɵadvance(4);
            i0.ɵɵtextInterpolate1(" ", ctx.errorMessage.body, " ");
        } }, styles: [".govuk-error-summary[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:24px}.govuk-error-summary__list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{font-size:19px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ErrorBannerComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-error-banner', template: "<div class=\"govuk-error-summary\" aria-labelledby=\"error-summary-title\" role=\"alert\" tabindex=\"-1\" data-module=\"govuk-error-summary\">\n  <h2 class=\"govuk-error-summary__title govuk-error-summary__title-custom\" id=\"error-summary-title\">\n      {{errorMessage.title}}\n  </h2>\n  <div class=\"govuk-error-summary__body\">\n    <ul class=\"govuk-list govuk-error-summary__list\">\n      <li>\n          {{errorMessage.body}}\n      </li>\n    </ul>\n  </div>\n</div>", styles: [".govuk-error-summary h2{font-size:24px}.govuk-error-summary__list li{font-size:19px}\n"] }]
    }], function () { return []; }, { errorMessage: [{
            type: Input,
            args: ['errorMessage']
        }] }); })();

class UnidentifiedPaymentsRequest {
    payment_allocation_status;
    payment_group_reference;
    payment_reference;
    unidentified_reason;
    constructor(payment_group_reference, payment_reference, unidentified_reason) {
        this.payment_allocation_status = {
            description: '',
            name: "Unidentified"
        };
        this.payment_group_reference = payment_group_reference;
        this.payment_reference = payment_reference;
        this.unidentified_reason = unidentified_reason;
    }
}

class AllocatePaymentRequest {
    amount;
    banked_date;
    ccd_case_number;
    exception_record;
    currency;
    document_control_number;
    external_provider;
    giro_slip_no;
    payer_name;
    payment_channel;
    payment_status;
    payment_method;
    case_type;
    payment_allocation_dto;
    constructor(ccd_case_number, unAllocatedPayment, caseType, exceptionRecord, allocatedRequest) {
        this.amount = unAllocatedPayment.amount;
        this.banked_date = unAllocatedPayment.date_banked;
        this.ccd_case_number = ccd_case_number;
        this.exception_record = exceptionRecord;
        this.currency = unAllocatedPayment.currency;
        this.document_control_number = unAllocatedPayment.dcn_reference;
        this.external_provider = 'exela';
        this.giro_slip_no = unAllocatedPayment.bgc_reference;
        this.payer_name = unAllocatedPayment.payer_name;
        this.payment_channel = {
            description: '',
            name: 'bulk scan'
        };
        this.payment_status = {
            description: 'bulk scan payment completed',
            name: 'success'
        };
        this.payment_method = unAllocatedPayment.payment_method;
        this.case_type = caseType;
        if (allocatedRequest) {
            this.payment_allocation_dto = allocatedRequest;
        }
    }
}

function MarkUnidentifiedPaymentComponent_div_1_p_40_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a reason for marking this payment as unidentified.");
    i0.ɵɵelementEnd();
} }
function MarkUnidentifiedPaymentComponent_div_1_p_40_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a vaild reason");
    i0.ɵɵelementEnd();
} }
function MarkUnidentifiedPaymentComponent_div_1_p_40_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Reason should be at least 3 characters.");
    i0.ɵɵelementEnd();
} }
function MarkUnidentifiedPaymentComponent_div_1_p_40_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Reason should be 255 characters or under.");
    i0.ɵɵelementEnd();
} }
function MarkUnidentifiedPaymentComponent_div_1_p_40_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 23);
    i0.ɵɵtemplate(1, MarkUnidentifiedPaymentComponent_div_1_p_40_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, MarkUnidentifiedPaymentComponent_div_1_p_40_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(3, MarkUnidentifiedPaymentComponent_div_1_p_40_span_3_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(4, MarkUnidentifiedPaymentComponent_div_1_p_40_span_4_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r4.isInvesticationDetailEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r4.investicationDetailHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r4.investicationDetailMinHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r4.investicationDetailMaxHasError);
} }
const _c0$2 = function (a0) { return { "inline-error-class": a0 }; };
function MarkUnidentifiedPaymentComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "input", 2, 3);
    i0.ɵɵelementStart(3, "h1", 4);
    i0.ɵɵtext(4, "Mark payment as unidentified");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "div", 5);
    i0.ɵɵelement(6, "hr", 6);
    i0.ɵɵelementStart(7, "table", 7)(8, "thead", 8)(9, "tr", 9)(10, "td", 10);
    i0.ɵɵtext(11, "Payment asset number (DCN)");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "td", 10);
    i0.ɵɵtext(13, "Banked date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "td", 10);
    i0.ɵɵtext(15, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "td", 10);
    i0.ɵɵtext(17, "Method");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(18, "tbody", 11)(19, "tr", 9)(20, "td", 12);
    i0.ɵɵtext(21);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "td", 12);
    i0.ɵɵtext(23);
    i0.ɵɵpipe(24, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(25, "td", 12);
    i0.ɵɵtext(26);
    i0.ɵɵpipe(27, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(28, "td", 13);
    i0.ɵɵtext(29);
    i0.ɵɵpipe(30, "lowercase");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementStart(31, "form", 14)(32, "div", 15)(33, "p", 16);
    i0.ɵɵtext(34, " Give a reason for marking this payment as unidentified. ");
    i0.ɵɵelement(35, "br");
    i0.ɵɵtext(36, " Include any investigations you've made. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelement(37, "label", 17);
    i0.ɵɵelementStart(38, "textarea", 18);
    i0.ɵɵtext(39, "        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(40, MarkUnidentifiedPaymentComponent_div_1_p_40_Template, 5, 4, "p", 19);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(41, "div", 20)(42, "button", 21);
    i0.ɵɵlistener("click", function MarkUnidentifiedPaymentComponent_div_1_Template_button_click_42_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.saveAndContinue()); });
    i0.ɵɵtext(43, " Continue ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(44, "button", 22);
    i0.ɵɵlistener("click", function MarkUnidentifiedPaymentComponent_div_1_Template_button_click_44_listener() { i0.ɵɵrestoreView(_r10); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.cancelMarkUnidentifiedPayments("cancel")); });
    i0.ɵɵtext(45, " Cancel ");
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(21);
    i0.ɵɵtextInterpolate(ctx_r0.unassignedRecord.dcn_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(24, 7, ctx_r0.unassignedRecord.date_banked, "dd MMM yyyy"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(27, 10, ctx_r0.unassignedRecord.amount, "GBP", "symbol", "1.2-2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(30, 15, ctx_r0.trimUnderscore(ctx_r0.unassignedRecord.payment_method)), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("formGroup", ctx_r0.markPaymentUnidentifiedForm);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(17, _c0$2, ctx_r0.isInvesticationDetailEmpty || ctx_r0.investicationDetailHasError || ctx_r0.investicationDetailMinHasError || ctx_r0.investicationDetailMaxHasError));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.isInvesticationDetailEmpty || ctx_r0.investicationDetailHasError || ctx_r0.investicationDetailMinHasError || ctx_r0.investicationDetailMaxHasError);
} }
function MarkUnidentifiedPaymentComponent_ng_container_2_ccpay_error_banner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-error-banner", 32);
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("errorMessage", ctx_r12.errorMessage);
} }
function MarkUnidentifiedPaymentComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, MarkUnidentifiedPaymentComponent_ng_container_2_ccpay_error_banner_1_Template, 1, 1, "ccpay-error-banner", 24);
    i0.ɵɵelement(2, "input", 25, 3);
    i0.ɵɵelementStart(4, "div", 26)(5, "span", 27);
    i0.ɵɵtext(6, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "strong", 28)(8, "span", 29);
    i0.ɵɵtext(9, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "h1", 30);
    i0.ɵɵtext(11, " Are you sure you want to mark this payment as unidentified? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(12, "div", 5);
    i0.ɵɵelement(13, "hr", 6);
    i0.ɵɵelementStart(14, "table", 7)(15, "thead", 8)(16, "tr", 9)(17, "td", 10);
    i0.ɵɵtext(18, "Investigations");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(19, "tbody", 11)(20, "tr", 9)(21, "td", 12);
    i0.ɵɵtext(22);
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementStart(23, "div", 20)(24, "button", 31);
    i0.ɵɵlistener("click", function MarkUnidentifiedPaymentComponent_ng_container_2_Template_button_click_24_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r14.confirmPayments()); });
    i0.ɵɵtext(25, " Confirm ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "button", 22);
    i0.ɵɵlistener("click", function MarkUnidentifiedPaymentComponent_ng_container_2_Template_button_click_26_listener() { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r16.cancelMarkUnidentifiedPayments()); });
    i0.ɵɵtext(27, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.errorMessage.showError);
    i0.ɵɵadvance(21);
    i0.ɵɵtextInterpolate(ctx_r1.investigationComment);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r1.isConfirmButtondisabled);
} }
function MarkUnidentifiedPaymentComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 33, 3);
    i0.ɵɵelementStart(3, "div", 26)(4, "span", 27);
    i0.ɵɵtext(5, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "strong", 28)(7, "span", 29);
    i0.ɵɵtext(8, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, " Are you sure you want to cancel? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(10, "div", 20)(11, "button", 21);
    i0.ɵɵlistener("click", function MarkUnidentifiedPaymentComponent_ng_container_3_Template_button_click_11_listener() { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.gotoCasetransationPage()); });
    i0.ɵɵtext(12, " Yes ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "button", 22);
    i0.ɵɵlistener("click", function MarkUnidentifiedPaymentComponent_ng_container_3_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r19); const ctx_r20 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r20.cancelMarkUnidentifiedPayments()); });
    i0.ɵɵtext(14, " No ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} }
class MarkUnidentifiedPaymentComponent {
    formBuilder;
    paymentViewService;
    paymentLibComponent;
    bulkScaningPaymentService;
    caseType;
    markPaymentUnidentifiedForm;
    viewStatus;
    ccdCaseNumber;
    bspaymentdcn;
    isInvesticationDetailEmpty = false;
    investicationDetailHasError = false;
    investicationDetailMinHasError = false;
    investicationDetailMaxHasError = false;
    errorMessage = this.getErrorMessage(false);
    unassignedRecord;
    siteID = null;
    investigationComment;
    isConfirmButtondisabled = false;
    ccdReference = null;
    exceptionReference = null;
    isStrategicFixEnable = true;
    constructor(formBuilder, paymentViewService, paymentLibComponent, bulkScaningPaymentService) {
        this.formBuilder = formBuilder;
        this.paymentViewService = paymentViewService;
        this.paymentLibComponent = paymentLibComponent;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
    }
    ngOnInit() {
        this.viewStatus = 'mainForm';
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.bspaymentdcn = this.paymentLibComponent.bspaymentdcn;
        this.isStrategicFixEnable = this.paymentLibComponent.ISSFENABLE;
        this.getUnassignedPayment();
        this.markPaymentUnidentifiedForm = this.formBuilder.group({
            investicationDetail: new FormControl('', Validators.compose([
                Validators.required,
                Validators.minLength(3),
                Validators.maxLength(255),
                Validators.pattern('^([a-zA-Z0-9\\s,\\.]*)$')
            ]))
        });
    }
    getUnassignedPayment() {
        this.bulkScaningPaymentService.getBSPaymentsByDCN(this.bspaymentdcn).subscribe(unassignedPayments => {
            this.errorMessage = this.getErrorMessage(false);
            this.unassignedRecord = unassignedPayments['data'].payments.filter(payment => {
                return payment && payment.dcn_reference == this.bspaymentdcn;
            })[0];
            this.siteID = unassignedPayments['data'].responsible_service_id;
            const beCcdNumber = unassignedPayments['data'].ccd_reference, beExceptionNumber = unassignedPayments['data'].exception_record_reference, exceptionReference = beCcdNumber ? beCcdNumber === this.ccdCaseNumber ? null : this.ccdCaseNumber : this.ccdCaseNumber;
            this.ccdReference = beCcdNumber ? beCcdNumber : null;
            this.exceptionReference = beExceptionNumber ? beExceptionNumber : exceptionReference;
        }, (error) => {
            this.errorMessage = this.getErrorMessage(true);
        });
    }
    trimUnderscore(method) {
        return this.bulkScaningPaymentService.removeUnwantedString(method, ' ');
    }
    saveAndContinue() {
        this.resetForm([false, false, false, false]);
        const investicationField = this.markPaymentUnidentifiedForm.controls.investicationDetail;
        const formerror = investicationField.errors;
        if (this.markPaymentUnidentifiedForm.dirty && this.markPaymentUnidentifiedForm.valid) {
            this.investigationComment = this.markPaymentUnidentifiedForm.controls.investicationDetail.value;
            this.viewStatus = 'unidentifiedContinueConfirm';
        }
        else {
            if (investicationField.value == '') {
                this.resetForm([true, false, false, false]);
            }
            if (investicationField.value != '' && investicationField.invalid) {
                this.resetForm([false, true, false, false]);
            }
            if (formerror && formerror.minlength && formerror.minlength.actualLength < 3) {
                this.resetForm([false, false, true, false]);
            }
            if (formerror && formerror.maxlength && formerror.maxlength.actualLength > 255) {
                this.resetForm([false, false, false, true]);
            }
        }
    }
    resetForm(val) {
        this.isInvesticationDetailEmpty = val[0];
        this.investicationDetailHasError = val[1];
        this.investicationDetailMinHasError = val[2];
        this.investicationDetailMaxHasError = val[3];
    }
    confirmPayments() {
        this.isConfirmButtondisabled = true;
        const reason = this.markPaymentUnidentifiedForm.get('investicationDetail').value;
        if (!this.isStrategicFixEnable) {
            let allocatedRequest = {
                allocation_status: 'Unidentified',
                payment_allocation_status: {
                    description: '',
                    name: 'Unidentified'
                },
                unidentified_reason: reason,
                user_id: this.caseType,
            };
            const postStrategicBody = new AllocatePaymentRequest(this.ccdReference, this.unassignedRecord, this.caseType, this.exceptionReference, allocatedRequest);
            this.bulkScaningPaymentService.postBSWoPGStrategic(postStrategicBody).subscribe(res => {
                this.errorMessage = this.getErrorMessage(false);
                let response = JSON.parse(res);
                if (response.success) {
                    this.gotoCasetransationPage();
                }
            }, (error) => {
                this.errorMessage = this.getErrorMessage(true);
                this.isConfirmButtondisabled = false;
            });
        }
        else {
            this.bulkScaningPaymentService.patchBSChangeStatus(this.unassignedRecord.dcn_reference, 'PROCESSED').subscribe(res1 => {
                this.errorMessage = this.getErrorMessage(false);
                const requestBody = new AllocatePaymentRequest(this.ccdReference, this.unassignedRecord, this.siteID, this.exceptionReference);
                this.paymentViewService.postBSPayments(requestBody).subscribe(res2 => {
                    this.errorMessage = this.getErrorMessage(false);
                    const response2 = JSON.parse(res2), reqBody = new UnidentifiedPaymentsRequest(response2['data'].payment_group_reference, response2['data'].reference, reason);
                    if (response2.success) {
                        this.paymentViewService.postBSUnidentifiedPayments(reqBody).subscribe(res3 => {
                            this.errorMessage = this.getErrorMessage(false);
                            const response3 = JSON.parse(res3);
                            if (response3.success) {
                                this.gotoCasetransationPage();
                            }
                        }, (error) => {
                            this.bulkScaningPaymentService.patchBSChangeStatus(this.unassignedRecord.dcn_reference, 'COMPLETE').subscribe();
                            this.errorMessage = this.getErrorMessage(true);
                            this.isConfirmButtondisabled = false;
                        });
                    }
                }, (error) => {
                    this.bulkScaningPaymentService.patchBSChangeStatus(this.unassignedRecord.dcn_reference, 'COMPLETE').subscribe();
                    this.errorMessage = this.getErrorMessage(true);
                    this.isConfirmButtondisabled = false;
                });
            }, (error) => {
                this.errorMessage = this.getErrorMessage(true);
                this.isConfirmButtondisabled = false;
            });
        }
    }
    cancelMarkUnidentifiedPayments(type) {
        if (type && type === 'cancel') {
            if (this.markPaymentUnidentifiedForm.get('investicationDetail').value !== "") {
                this.viewStatus = 'unidentifiedCancelConfirm';
            }
            else {
                this.gotoCasetransationPage();
            }
        }
        else {
            this.viewStatus = 'mainForm';
        }
    }
    gotoCasetransationPage() {
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.TAKEPAYMENT = true;
        this.paymentLibComponent.ISBSENABLE = true;
    }
    getErrorMessage(isErrorExist) {
        return {
            title: "There is a problem with the service",
            body: "Try again later",
            showError: isErrorExist
        };
    }
    static ɵfac = function MarkUnidentifiedPaymentComponent_Factory(t) { return new (t || MarkUnidentifiedPaymentComponent)(i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(BulkScaningPaymentService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MarkUnidentifiedPaymentComponent, selectors: [["app-mark-unidentified-payment"]], inputs: { caseType: "caseType" }, decls: 4, vars: 3, consts: [[1, "mkpay-unidentified"], [4, "ngIf"], ["type", "hidden", "value", "MARKUNIDENTIFIED", 1, "iFrameDrivenImageValue"], ["myInput", ""], [1, "heading-large"], [1, "govuk-grid-column-full", "govuk-!-padding-bottom-3"], [1, "govuk-section-break", "govuk-section-break--visible"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header"], [1, "govuk-table__body"], [1, "govuk-table__cell"], [1, "capitalize", "govuk-table__cell"], ["novalidate", "", 3, "formGroup"], [1, "govuk-form-group"], [1, "unidentifiedSubText"], ["for", "investicationDetail", 1, "heading-small"], ["name", "investicationDetail", "id", "investicationDetail", "rows", "5", "formControlName", "investicationDetail", 1, "form-control", "form-control-3-4", 3, "ngClass"], ["class", "inline-error-message", 4, "ngIf"], [1, "govuk-button--group"], ["type", "submit", 1, "button", 3, "click"], ["type", "button", 1, "button", "govuk-button--secondary", 3, "click"], [1, "inline-error-message"], [3, "errorMessage", 4, "ngIf"], ["type", "hidden", "value", "UNIDENTIFIEDCONFIRMATION", 1, "iFrameDrivenImageValue"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "heading-small"], ["type", "submit", 1, "button", 3, "disabled", "click"], [3, "errorMessage"], ["type", "hidden", "value", "CANCELUNIDENTIFIED", 1, "iFrameDrivenImageValue"]], template: function MarkUnidentifiedPaymentComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, MarkUnidentifiedPaymentComponent_div_1_Template, 46, 19, "div", 1);
            i0.ɵɵtemplate(2, MarkUnidentifiedPaymentComponent_ng_container_2_Template, 28, 3, "ng-container", 1);
            i0.ɵɵtemplate(3, MarkUnidentifiedPaymentComponent_ng_container_3_Template, 15, 0, "ng-container", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "mainForm");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "unidentifiedContinueConfirm");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "unidentifiedCancelConfirm");
        } }, dependencies: [i3.NgClass, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.DefaultValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.FormGroupDirective, i1$1.FormControlName, ErrorBannerComponent, i3.LowerCasePipe, i3.CurrencyPipe, i3.DatePipe], styles: [".mkpay-unidentified[_ngcontent-%COMP%]{margin:10px 0 20px}.mkpay-unidentified[_ngcontent-%COMP%]   .govuk-button--group[_ngcontent-%COMP%]   .govuk-button--secondary[_ngcontent-%COMP%]{margin-left:10px;background-color:#b3b8bdf2}.mkpay-unidentified[_ngcontent-%COMP%]   .inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0}.mkpay-unidentified[_ngcontent-%COMP%]   .inline-error-message[_ngcontent-%COMP%]{color:#a71414;font-weight:700;margin-top:10px}.govuk-grid-column-full[_ngcontent-%COMP%]{padding:0}.unidentifiedSubText[_ngcontent-%COMP%]{line-height:45px}.govuk-warning-text__text[_ngcontent-%COMP%]{font-size:19px}.lowercase[_ngcontent-%COMP%]{text-transform:lowercase}.capitalize[_ngcontent-%COMP%]{text-transform:capitalize}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MarkUnidentifiedPaymentComponent, [{
        type: Component,
        args: [{ selector: 'app-mark-unidentified-payment', template: "<div class=\"mkpay-unidentified\" >\n  <div *ngIf=\"viewStatus === 'mainForm'\">\n    <input #myInput  type='hidden' class='iFrameDrivenImageValue' value='MARKUNIDENTIFIED'>\n    <h1 class=\"heading-large\">Mark payment as unidentified</h1>\n\n    <div class=\"govuk-grid-column-full govuk-!-padding-bottom-3\">\n      <hr class=\"govuk-section-break govuk-section-break--visible\">\n      <table class=\"govuk-table\">\n        <thead class=\"govuk-table__head\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header\" scope=\"col\">Payment asset number (DCN)</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Banked date</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Method</td>\n           \n        </tr>\n      </thead>\n      <tbody class=\"govuk-table__body\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell\">{{unassignedRecord.dcn_reference}}</td>\n            <td class=\"govuk-table__cell\"> {{unassignedRecord.date_banked | date:'dd MMM yyyy'}}</td>\n            <td class=\"govuk-table__cell\"> {{unassignedRecord.amount | currency :'GBP':'symbol':'1.2-2'}}</td>\n            <td class=\"capitalize govuk-table__cell\"> {{trimUnderscore(unassignedRecord.payment_method) | lowercase}}  </td>\n        </tr>\n      </tbody>\n    </table>\n    </div>\n    <form [formGroup]=\"markPaymentUnidentifiedForm\" novalidate>\n      <div class=\"govuk-form-group\">\n        <p class=\"unidentifiedSubText\">\n          Give a reason for marking this payment as unidentified.\n          <br/>\n          Include any investigations you've made.\n        </p>\n        <label class=\"heading-small\" for=\"investicationDetail\">\n\n        </label>\n        <textarea class=\"form-control form-control-3-4\" [ngClass]=\"{'inline-error-class': isInvesticationDetailEmpty || investicationDetailHasError || investicationDetailMinHasError || investicationDetailMaxHasError}\" name=\"investicationDetail\" id=\"investicationDetail\" rows=\"5\" formControlName=\"investicationDetail\">\n        </textarea>\n        <p class=\"inline-error-message\" *ngIf=\"isInvesticationDetailEmpty || investicationDetailHasError || investicationDetailMinHasError || investicationDetailMaxHasError\">\n          <span *ngIf=\"isInvesticationDetailEmpty\">Enter a reason for marking this payment as unidentified.</span>\n          <span *ngIf=\"investicationDetailHasError\">Enter a vaild reason</span>\n          <span *ngIf=\"investicationDetailMinHasError\">Reason should be at least 3 characters.</span>\n          <span *ngIf=\"investicationDetailMaxHasError\">Reason should be 255 characters or under.</span>\n        </p>\n      </div>\n      <div class=\"govuk-button--group\">\n        <button type=\"submit\" class=\"button\" (click)=\"saveAndContinue()\">\n          Continue\n        </button>\n        <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelMarkUnidentifiedPayments('cancel')\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n   <ng-container *ngIf=\"viewStatus === 'unidentifiedContinueConfirm'\">\n      <ccpay-error-banner *ngIf=\"errorMessage.showError\" [errorMessage]=\"errorMessage\"></ccpay-error-banner>\n      <input #myInput type='hidden' class='iFrameDrivenImageValue' value='UNIDENTIFIEDCONFIRMATION'>\n      <div class=\"govuk-warning-text\">\n        <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n        <strong class=\"govuk-warning-text__text\">\n        <span class=\"govuk-warning-text__assistive\">Warning</span>\n        <h1 class=\"heading-small\"> Are you sure you want to mark this payment as unidentified? </h1>\n         \n        </strong>\n\n        <div class=\"govuk-grid-column-full govuk-!-padding-bottom-3\">\n          <hr class=\"govuk-section-break govuk-section-break--visible\">\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n            <tr class=\"govuk-table__row\">\n              <td class=\"govuk-table__header\" scope=\"col\">Investigations</td>\n            </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\">\n            <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell\">{{investigationComment}}</td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n      <div class=\"govuk-button--group\">\n        <button type=\"submit\" class=\"button\" [disabled]=\"isConfirmButtondisabled\" (click)=\"confirmPayments()\">\n          Confirm\n        </button>\n        <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelMarkUnidentifiedPayments()\">\n          Cancel\n        </button>\n      </div>\n    </ng-container>\n      <ng-container *ngIf=\"viewStatus === 'unidentifiedCancelConfirm'\">\n        <input #myInput type='hidden' class='iFrameDrivenImageValue' value='CANCELUNIDENTIFIED'>\n      <div class=\"govuk-warning-text\">\n        <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n        <strong class=\"govuk-warning-text__text\">\n        <span class=\"govuk-warning-text__assistive\">Warning</span>\n          Are you sure you want to cancel?\n        </strong>\n      </div>\n      <div class=\"govuk-button--group\">\n        <button type=\"submit\" class=\"button\" (click)=\"gotoCasetransationPage()\">\n          Yes\n        </button>\n        <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelMarkUnidentifiedPayments()\">\n          No\n        </button>\n      </div>\n    </ng-container>\n</div>\n", styles: [".mkpay-unidentified{margin:10px 0 20px}.mkpay-unidentified .govuk-button--group .govuk-button--secondary{margin-left:10px;background-color:#b3b8bdf2}.mkpay-unidentified .inline-error-class{outline:3px solid #a71414;outline-offset:0}.mkpay-unidentified .inline-error-message{color:#a71414;font-weight:700;margin-top:10px}.govuk-grid-column-full{padding:0}.unidentifiedSubText{line-height:45px}.govuk-warning-text__text{font-size:19px}.lowercase{text-transform:lowercase}.capitalize{text-transform:capitalize}\n"] }]
    }], function () { return [{ type: i1$1.FormBuilder }, { type: PaymentViewService }, { type: PaymentLibComponent }, { type: BulkScaningPaymentService }]; }, { caseType: [{
            type: Input
        }] }); })();

class UnsolicitedPaymentsRequest {
    payment_allocation_status;
    payment_group_reference;
    payment_reference;
    receiving_office;
    receiving_email_address;
    sending_email_address;
    unidentified_reason;
    constructor(payment_group_reference, payment_reference, reason, responsible_office, responsible_person, email_id) {
        this.payment_allocation_status = {
            description: '',
            name: "Transferred"
        };
        this.payment_group_reference = payment_group_reference;
        this.payment_reference = payment_reference;
        this.unidentified_reason = reason;
        this.receiving_office = responsible_office;
        this.receiving_email_address = email_id;
        this.sending_email_address = responsible_person;
    }
}

function MarkUnsolicitedPaymentComponent_div_1_ccpay_error_banner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-error-banner", 27);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("errorMessage", ctx_r3.errorMessage);
} }
function MarkUnsolicitedPaymentComponent_div_1_p_38_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a reason for marking this payment as transferred.");
    i0.ɵɵelementEnd();
} }
function MarkUnsolicitedPaymentComponent_div_1_p_38_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid reason");
    i0.ɵɵelementEnd();
} }
function MarkUnsolicitedPaymentComponent_div_1_p_38_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Reason should be at least 3 characters.");
    i0.ɵɵelementEnd();
} }
function MarkUnsolicitedPaymentComponent_div_1_p_38_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Reason should be 255 characters or under.");
    i0.ɵɵelementEnd();
} }
function MarkUnsolicitedPaymentComponent_div_1_p_38_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 28);
    i0.ɵɵtemplate(1, MarkUnsolicitedPaymentComponent_div_1_p_38_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, MarkUnsolicitedPaymentComponent_div_1_p_38_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(3, MarkUnsolicitedPaymentComponent_div_1_p_38_span_3_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(4, MarkUnsolicitedPaymentComponent_div_1_p_38_span_4_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r5.isReasonEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r5.reasonHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r5.reasonMinHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r5.reasonMaxHasError);
} }
function MarkUnsolicitedPaymentComponent_div_1_option_45_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 29);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const siteID_r12 = ctx.$implicit;
    i0.ɵɵpropertyInterpolate("value", siteID_r12.siteId);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("", siteID_r12.siteName, " (", siteID_r12.siteId, ")");
} }
function MarkUnsolicitedPaymentComponent_div_1_p_46_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Please select Receiving Site ID");
    i0.ɵɵelementEnd();
} }
function MarkUnsolicitedPaymentComponent_div_1_p_46_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Please select a valid Receiving Site ID");
    i0.ɵɵelementEnd();
} }
function MarkUnsolicitedPaymentComponent_div_1_p_46_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 28);
    i0.ɵɵtemplate(1, MarkUnsolicitedPaymentComponent_div_1_p_46_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, MarkUnsolicitedPaymentComponent_div_1_p_46_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.isResponsibleOfficeEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r7.responsibleOfficeHasError);
} }
const _c0$1 = function (a0) { return { "inline-error-class": a0 }; };
function MarkUnsolicitedPaymentComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, MarkUnsolicitedPaymentComponent_div_1_ccpay_error_banner_1_Template, 1, 1, "ccpay-error-banner", 2);
    i0.ɵɵelementStart(2, "h1", 3);
    i0.ɵɵtext(3, "Mark payment as transferred");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵelement(5, "hr", 5);
    i0.ɵɵelementStart(6, "table", 6)(7, "thead", 7)(8, "tr", 8)(9, "td", 9);
    i0.ɵɵtext(10, "Payment asset number (DCN)");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 9);
    i0.ɵɵtext(12, "Banked date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 9);
    i0.ɵɵtext(14, "Amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 9);
    i0.ɵɵtext(16, "Method");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(17, "tbody", 10)(18, "tr", 8)(19, "td", 11);
    i0.ɵɵtext(20);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(21, "td", 11);
    i0.ɵɵtext(22);
    i0.ɵɵpipe(23, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "td", 11);
    i0.ɵɵtext(25);
    i0.ɵɵpipe(26, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "td", 12);
    i0.ɵɵtext(28);
    i0.ɵɵpipe(29, "lowercase");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementStart(30, "form", 13);
    i0.ɵɵelement(31, "input", 14, 15);
    i0.ɵɵelementStart(33, "div", 16)(34, "label", 17);
    i0.ɵɵtext(35, " Reason for payment being marked as transferred ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(36, "textarea", 18);
    i0.ɵɵtext(37, "        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(38, MarkUnsolicitedPaymentComponent_div_1_p_38_Template, 5, 4, "p", 19);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(39, "div", 16)(40, "label", 20);
    i0.ɵɵtext(41, " Receiving Site ID (Receiving court/Bulk centre site ID) ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(42, "select", 21);
    i0.ɵɵlistener("change", function MarkUnsolicitedPaymentComponent_div_1_Template_select_change_42_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.selectchange($event)); });
    i0.ɵɵelementStart(43, "option", 22);
    i0.ɵɵtext(44, "Please select");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(45, MarkUnsolicitedPaymentComponent_div_1_option_45_Template, 2, 3, "option", 23);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(46, MarkUnsolicitedPaymentComponent_div_1_p_46_Template, 3, 2, "p", 19);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(47, "div", 24)(48, "button", 25);
    i0.ɵɵlistener("click", function MarkUnsolicitedPaymentComponent_div_1_Template_button_click_48_listener() { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.saveAndContinue()); });
    i0.ɵɵtext(49, " Confirm ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(50, "button", 26);
    i0.ɵɵlistener("click", function MarkUnsolicitedPaymentComponent_div_1_Template_button_click_50_listener() { i0.ɵɵrestoreView(_r16); const ctx_r18 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r18.cancelMarkUnsolicitedPayments("cancel")); });
    i0.ɵɵtext(51, " Cancel ");
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.errorMessage.showError);
    i0.ɵɵadvance(19);
    i0.ɵɵtextInterpolate(ctx_r0.unassignedRecord.dcn_reference);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(23, 11, ctx_r0.unassignedRecord.date_banked, "dd MMM yyyy"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(26, 14, ctx_r0.unassignedRecord.amount, "GBP", "symbol", "1.2-2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(29, 19, ctx_r0.trimUnderscore(ctx_r0.unassignedRecord.payment_method)), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("formGroup", ctx_r0.markPaymentUnsolicitedForm);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(21, _c0$1, ctx_r0.reasonHasError || ctx_r0.reasonMinHasError || ctx_r0.reasonMaxHasError));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.isReasonEmpty || ctx_r0.reasonHasError || ctx_r0.reasonMinHasError || ctx_r0.reasonMaxHasError);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngForOf", ctx_r0.siteIDList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isResponsibleOfficeEmpty || ctx_r0.responsibleOfficeHasError);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r0.isContinueButtondisabled);
} }
function MarkUnsolicitedPaymentComponent_ng_container_2_ccpay_error_banner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-error-banner", 27);
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("errorMessage", ctx_r19.errorMessage);
} }
function MarkUnsolicitedPaymentComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, MarkUnsolicitedPaymentComponent_ng_container_2_ccpay_error_banner_1_Template, 1, 1, "ccpay-error-banner", 2);
    i0.ɵɵelementStart(2, "div", 30)(3, "span", 31);
    i0.ɵɵtext(4, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "strong", 32)(6, "span", 33);
    i0.ɵɵtext(7, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "h1", 34);
    i0.ɵɵtext(9, " Are you sure you want to mark this payment as transferred? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelement(10, "input", 35, 15);
    i0.ɵɵelementStart(12, "div", 4);
    i0.ɵɵelement(13, "hr", 5);
    i0.ɵɵelementStart(14, "table", 6)(15, "thead", 7)(16, "tr", 8)(17, "td", 9);
    i0.ɵɵtext(18, "Reason");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "td", 9);
    i0.ɵɵtext(20, "Receiving site ID");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(21, "tbody", 10)(22, "tr", 8)(23, "td", 11);
    i0.ɵɵtext(24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(25, "td", 11);
    i0.ɵɵtext(26);
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementStart(27, "div", 24)(28, "button", 25);
    i0.ɵɵlistener("click", function MarkUnsolicitedPaymentComponent_ng_container_2_Template_button_click_28_listener() { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r21.confirmPayments()); });
    i0.ɵɵtext(29, " Confirm ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(30, "button", 26);
    i0.ɵɵlistener("click", function MarkUnsolicitedPaymentComponent_ng_container_2_Template_button_click_30_listener() { i0.ɵɵrestoreView(_r22); const ctx_r23 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r23.cancelMarkUnsolicitedPayments()); });
    i0.ɵɵtext(31, " Cancel ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.errorMessage.showError);
    i0.ɵɵadvance(23);
    i0.ɵɵtextInterpolate(ctx_r1.reason);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r1.selectedSiteName);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r1.isConfirmButtondisabled);
} }
function MarkUnsolicitedPaymentComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "input", 36, 15);
    i0.ɵɵelementStart(3, "div", 30)(4, "span", 31);
    i0.ɵɵtext(5, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "strong", 32)(7, "span", 33);
    i0.ɵɵtext(8, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, " Are you sure you want to cancel? ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(10, "div", 24)(11, "button", 37);
    i0.ɵɵlistener("click", function MarkUnsolicitedPaymentComponent_ng_container_3_Template_button_click_11_listener() { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r25.gotoCasetransationPage()); });
    i0.ɵɵtext(12, " Yes ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "button", 26);
    i0.ɵɵlistener("click", function MarkUnsolicitedPaymentComponent_ng_container_3_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r26); const ctx_r27 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r27.cancelMarkUnsolicitedPayments()); });
    i0.ɵɵtext(14, " No ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} }
class MarkUnsolicitedPaymentComponent {
    formBuilder;
    paymentViewService;
    paymentLibComponent;
    bulkScaningPaymentService;
    caseType;
    markPaymentUnsolicitedForm;
    viewStatus;
    reasonHasError = false;
    isReasonEmpty = false;
    reasonMinHasError = false;
    reasonMaxHasError = false;
    responsibleOfficeHasError = false;
    isResponsibleOfficeEmpty = false;
    errorMessage = this.getErrorMessage(false);
    ccdCaseNumber;
    bspaymentdcn;
    unassignedRecord;
    siteID = null;
    reason;
    responsiblePerson;
    responsibleOffice;
    emailId;
    isConfirmButtondisabled = false;
    isContinueButtondisabled = false;
    ccdReference = null;
    exceptionReference = null;
    selectedSiteId;
    selectedSiteName;
    isStrategicFixEnable = true;
    siteIDList;
    constructor(formBuilder, paymentViewService, paymentLibComponent, bulkScaningPaymentService) {
        this.formBuilder = formBuilder;
        this.paymentViewService = paymentViewService;
        this.paymentLibComponent = paymentLibComponent;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
    }
    ngOnInit() {
        this.resetForm([false, false, false, false, false, false], 'all');
        this.viewStatus = 'mainForm';
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.bspaymentdcn = this.paymentLibComponent.bspaymentdcn;
        this.isStrategicFixEnable = this.paymentLibComponent.ISSFENABLE;
        this.getUnassignedPayment();
        this.paymentViewService.getSiteID().subscribe(siteids => {
            this.isContinueButtondisabled = false;
            this.errorMessage = this.getErrorMessage(false);
            this.siteIDList = JSON.parse(siteids);
        }, err => {
            window.scrollTo(0, 0);
            this.isContinueButtondisabled = true;
            this.errorMessage = this.getErrorMessage(true);
        });
        this.markPaymentUnsolicitedForm = this.formBuilder.group({
            reason: new FormControl('', Validators.compose([
                Validators.required,
                Validators.minLength(3),
                Validators.maxLength(255),
                Validators.pattern('^([a-zA-Z0-9\\s,\\.]*)$')
            ])),
            responsibleOffice: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^([a-zA-Z0-9\\s\\n,\\.-:]*)$')
            ])),
            responsiblePerson: new FormControl(''),
            emailId: new FormControl('')
        });
    }
    trimUnderscore(method) {
        return this.bulkScaningPaymentService.removeUnwantedString(method, ' ');
    }
    confirmPayments() {
        this.isConfirmButtondisabled = true;
        const controls = this.markPaymentUnsolicitedForm.controls;
        if (!this.isStrategicFixEnable) {
            let allocatedRequest = {
                allocation_status: 'Transferred',
                payment_allocation_status: {
                    description: '',
                    name: 'Transferred'
                },
                unidentified_reason: controls.reason.value,
                receiving_office: this.selectedSiteId,
                user_id: this.caseType,
            };
            const postStrategicBody = new AllocatePaymentRequest(this.ccdReference, this.unassignedRecord, this.caseType, this.exceptionReference, allocatedRequest);
            this.bulkScaningPaymentService.postBSWoPGStrategic(postStrategicBody).subscribe(res => {
                this.errorMessage = this.getErrorMessage(false);
                let response = JSON.parse(res);
                if (response.success) {
                    this.gotoCasetransationPage();
                }
            }, (error) => {
                this.errorMessage = this.getErrorMessage(true);
                this.isConfirmButtondisabled = false;
            });
        }
        else {
            // controls.responsibleOffice.setValue('P219');
            this.bulkScaningPaymentService.patchBSChangeStatus(this.unassignedRecord.dcn_reference, 'PROCESSED').subscribe(res1 => {
                this.errorMessage = this.getErrorMessage(false);
                const response1 = JSON.parse(res1), requestBody = new AllocatePaymentRequest(this.ccdReference, this.unassignedRecord, this.siteID, this.exceptionReference);
                this.paymentViewService.postBSPayments(requestBody).subscribe(res2 => {
                    this.errorMessage = this.getErrorMessage(false);
                    const response2 = JSON.parse(res2), reqBody = new UnsolicitedPaymentsRequest(response2['data'].payment_group_reference, response2['data'].reference, controls.reason.value, this.selectedSiteId, controls.responsiblePerson.value, controls.emailId.value);
                    if (response2.success) {
                        this.paymentViewService.postBSUnsolicitedPayments(reqBody).subscribe(res3 => {
                            this.errorMessage = this.getErrorMessage(false);
                            const response3 = JSON.parse(res3);
                            if (response3.success) {
                                this.gotoCasetransationPage();
                            }
                        }, (error) => {
                            this.bulkScaningPaymentService.patchBSChangeStatus(this.unassignedRecord.dcn_reference, 'COMPLETE').subscribe();
                            this.errorMessage = this.getErrorMessage(true);
                            this.isConfirmButtondisabled = false;
                        });
                    }
                }, (error) => {
                    this.bulkScaningPaymentService.patchBSChangeStatus(this.unassignedRecord.dcn_reference, 'COMPLETE').subscribe();
                    this.errorMessage = this.getErrorMessage(true);
                    this.isConfirmButtondisabled = false;
                });
            }, (error) => {
                this.errorMessage = this.getErrorMessage(true);
                this.isConfirmButtondisabled = false;
            });
        }
    }
    saveAndContinue() {
        this.resetForm([false, false, false, false, false, false], 'all');
        const formerror = this.markPaymentUnsolicitedForm.controls.reason.errors;
        const reasonField = this.markPaymentUnsolicitedForm.controls.reason;
        //const officeIdField = this.selectedSiteId;
        const officeIdField = this.markPaymentUnsolicitedForm.controls.responsibleOffice;
        if (this.markPaymentUnsolicitedForm.dirty && this.markPaymentUnsolicitedForm.valid) {
            const controls = this.markPaymentUnsolicitedForm.controls;
            this.emailId = controls.emailId.value;
            this.responsibleOffice = officeIdField.value;
            this.responsiblePerson = controls.responsiblePerson.value;
            this.reason = controls.reason.value;
            this.viewStatus = 'unsolicitedContinueConfirm';
        }
        else {
            if (reasonField.value == '') {
                this.resetForm([true, false, false, false, false, false], 'reason');
            }
            if (reasonField.value != '' && this.markPaymentUnsolicitedForm.controls.reason.invalid) {
                this.resetForm([false, true, false, false, false, false], 'reason');
            }
            if (formerror && formerror.minlength && formerror.minlength.actualLength < 3) {
                this.resetForm([false, false, true, false, false, false], 'reason');
            }
            if (formerror && formerror.maxlength && formerror.maxlength.actualLength > 255) {
                this.resetForm([false, false, false, true, false, false], 'reason');
            }
            if (officeIdField.value == '') {
                this.resetForm([false, false, false, false, true, false], 'responsibleOffice');
            }
            if (officeIdField.value != '' && officeIdField.invalid) {
                this.resetForm([false, false, false, false, false, true], 'responsibleOffice');
            }
        }
    }
    resetForm(val, field) {
        if (field === 'reason' || field === 'all') {
            this.isReasonEmpty = val[0];
            this.reasonHasError = val[1];
            this.reasonMinHasError = val[2];
            this.reasonMaxHasError = val[3];
        }
        if (field === 'responsibleOffice' || field === 'all') {
            this.isResponsibleOfficeEmpty = val[4];
            this.responsibleOfficeHasError = val[5];
        }
    }
    cancelMarkUnsolicitedPayments(type) {
        if (type && type === 'cancel') {
            if (this.checkingFormValue()) {
                this.viewStatus = 'unsolicitedCancelConfirm';
            }
            else {
                this.gotoCasetransationPage();
            }
        }
        else {
            this.markPaymentUnsolicitedForm.controls.responsibleOffice.setValue('');
            this.viewStatus = 'mainForm';
        }
    }
    checkingFormValue() {
        const formFields = this.markPaymentUnsolicitedForm.value;
        let valueExists = false;
        for (var field in formFields) {
            if (formFields.hasOwnProperty(field) && formFields[field] !== "") {
                valueExists = true;
                break;
            }
        }
        return valueExists;
    }
    gotoCasetransationPage() {
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.TAKEPAYMENT = true;
        this.paymentLibComponent.ISBSENABLE = true;
    }
    getUnassignedPayment() {
        this.bulkScaningPaymentService.getBSPaymentsByDCN(this.bspaymentdcn).subscribe(unassignedPayments => {
            this.unassignedRecord = unassignedPayments['data'].payments.filter(payment => {
                return payment && payment.dcn_reference == this.bspaymentdcn;
            })[0];
            this.siteID = unassignedPayments['data'].responsible_service_id;
            const beCcdNumber = unassignedPayments['data'].ccd_reference, beExceptionNumber = unassignedPayments['data'].exception_record_reference, exceptionReference = beCcdNumber ? beCcdNumber === this.ccdCaseNumber ? null : this.ccdCaseNumber : this.ccdCaseNumber;
            this.ccdReference = beCcdNumber ? beCcdNumber : null;
            this.exceptionReference = beExceptionNumber ? beExceptionNumber : exceptionReference;
        }, (error) => {
            this.errorMessage = this.getErrorMessage(true);
        });
    }
    getErrorMessage(isErrorExist) {
        return {
            title: "Something went wrong.",
            body: "Please try again later.",
            showError: isErrorExist
        };
    }
    selectchange(args) {
        this.selectedSiteId = args.target.value;
        this.selectedSiteName = args.target.options[args.target.selectedIndex].text;
    }
    static ɵfac = function MarkUnsolicitedPaymentComponent_Factory(t) { return new (t || MarkUnsolicitedPaymentComponent)(i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(BulkScaningPaymentService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MarkUnsolicitedPaymentComponent, selectors: [["app-mark-unsolicited-payment"]], inputs: { caseType: "caseType" }, decls: 4, vars: 3, consts: [[1, "mkpay-unidentified"], [4, "ngIf"], [3, "errorMessage", 4, "ngIf"], [1, "heading-large"], [1, "govuk-grid-column-full", "govuk-!-padding-bottom-3"], [1, "govuk-section-break", "govuk-section-break--visible"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header"], [1, "govuk-table__body"], [1, "govuk-table__cell"], [1, "capitalize", "govuk-table__cell"], ["novalidate", "", 3, "formGroup"], ["type", "hidden", "value", "MARKTRANSFERRED", 1, "iFrameDrivenImageValue"], ["myInput", ""], [1, "govuk-form-group"], ["for", "reason", 1, "govuk-label", "custom-govuk-label", "custom-govuk-label"], ["name", "reason", "id", "reason", "rows", "5", "formControlName", "reason", 1, "form-control", "form-control-3-4", 3, "ngClass"], ["class", "inline-error-message", 4, "ngIf"], ["for", "responsibleOffice", 1, "govuk-label", "custom-govuk-label"], ["id", "responsibleOffice", "formControlName", "responsibleOffice", 1, "form-control", "short-input", 3, "change"], ["value", "", "selected", "selected"], [3, "value", 4, "ngFor", "ngForOf"], [1, "govuk-button--group"], ["type", "submit", 1, "button", 3, "disabled", "click"], ["type", "button", 1, "button", "govuk-button--secondary", 3, "click"], [3, "errorMessage"], [1, "inline-error-message"], [3, "value"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "heading-small"], ["type", "hidden", "value", "TRANSFERREDCONFIRMATION", 1, "iFrameDrivenImageValue"], ["type", "hidden", "value", "CANCELTRANSFERRED", 1, "iFrameDrivenImageValue"], ["type", "submit", 1, "button", 3, "click"]], template: function MarkUnsolicitedPaymentComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, MarkUnsolicitedPaymentComponent_div_1_Template, 52, 23, "div", 1);
            i0.ɵɵtemplate(2, MarkUnsolicitedPaymentComponent_ng_container_2_Template, 32, 4, "ng-container", 1);
            i0.ɵɵtemplate(3, MarkUnsolicitedPaymentComponent_ng_container_3_Template, 15, 0, "ng-container", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "mainForm");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "unsolicitedContinueConfirm");
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "unsolicitedCancelConfirm");
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.NgSelectOption, i1$1.ɵNgSelectMultipleOption, i1$1.DefaultValueAccessor, i1$1.SelectControlValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.FormGroupDirective, i1$1.FormControlName, ErrorBannerComponent, i3.LowerCasePipe, i3.CurrencyPipe, i3.DatePipe], styles: [".mkpay-unidentified[_ngcontent-%COMP%]{margin:10px 0 20px}.mkpay-unidentified[_ngcontent-%COMP%]   .govuk-button--secondary[_ngcontent-%COMP%]{margin-left:10px;background-color:#b3b8bdf2}.mkpay-unidentified[_ngcontent-%COMP%]   .inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0}.mkpay-unidentified[_ngcontent-%COMP%]   .inline-error-message[_ngcontent-%COMP%]{color:#a71414;font-weight:700;margin-top:10px}.lowercase[_ngcontent-%COMP%]{text-transform:lowercase}.capitalize[_ngcontent-%COMP%]{text-transform:capitalize}.custom-govuk-label[_ngcontent-%COMP%], .govuk-warning-text__text[_ngcontent-%COMP%]{font-size:19px}#responsibleOffice[_ngcontent-%COMP%]{color:#000;width:75%;font-weight:white}select[_ngcontent-%COMP%]   option[_ngcontent-%COMP%]{background:white}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MarkUnsolicitedPaymentComponent, [{
        type: Component,
        args: [{ selector: 'app-mark-unsolicited-payment', template: "<div class=\"mkpay-unidentified\">\n  <div *ngIf=\"viewStatus === 'mainForm'\">\n  <ccpay-error-banner *ngIf=\"errorMessage.showError\" [errorMessage]=\"errorMessage\"></ccpay-error-banner>\n  <h1 class=\"heading-large\">Mark payment as transferred</h1>\n  <div class=\"govuk-grid-column-full govuk-!-padding-bottom-3\">\n    <hr class=\"govuk-section-break govuk-section-break--visible\">\n    <table class=\"govuk-table\">\n      <thead class=\"govuk-table__head\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header\" scope=\"col\">Payment asset number (DCN)</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Banked date</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Method</td>\n        </tr>\n      </thead>\n      <tbody class=\"govuk-table__body\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell\">{{unassignedRecord.dcn_reference}}</td>\n            <td class=\"govuk-table__cell\"> {{unassignedRecord.date_banked | date:'dd MMM yyyy'}}</td>\n            <td class=\"govuk-table__cell\"> {{unassignedRecord.amount | currency :'GBP':'symbol':'1.2-2'}}</td>\n            <td class=\"capitalize govuk-table__cell\"> {{trimUnderscore(unassignedRecord.payment_method) | lowercase}}  </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  \n  <form [formGroup]=\"markPaymentUnsolicitedForm\" novalidate>\n    <input #myInput type='hidden' class='iFrameDrivenImageValue' value='MARKTRANSFERRED'>\n    <div class=\"govuk-form-group\">\n      <label class=\"govuk-label custom-govuk-label custom-govuk-label\" for=\"reason\">\n        Reason for payment being marked as transferred   \n      </label>\n        <textarea class=\"form-control form-control-3-4\" [ngClass]=\"{'inline-error-class': reasonHasError || reasonMinHasError || reasonMaxHasError}\" name=\"reason\" id=\"reason\" rows=\"5\" formControlName=\"reason\">\n        </textarea>\n        <p class=\"inline-error-message\" *ngIf=\"isReasonEmpty || reasonHasError || reasonMinHasError || reasonMaxHasError\">\n          <span *ngIf=\"isReasonEmpty\">Enter a reason for marking this payment as transferred.</span>\n          <span *ngIf=\"reasonHasError\">Enter a valid reason</span>\n          <span *ngIf=\"reasonMinHasError\">Reason should be at least 3 characters.</span>\n          <span *ngIf=\"reasonMaxHasError\">Reason should be 255 characters or under.</span>\n        </p>\n    </div>\n    <div class=\"govuk-form-group\">\n      <label class=\"govuk-label custom-govuk-label\" for=\"responsibleOffice\">\n        Receiving Site ID (Receiving court/Bulk centre site ID)    \n      </label>\n      <select class=\"form-control short-input\" id=\"responsibleOffice\" formControlName=\"responsibleOffice\" (change)=\"selectchange($event)\">\n        <option value=\"\" selected='selected'>Please select</option>\n        <option  *ngFor=\"let siteID of siteIDList;\" value=\"{{siteID.siteId}}\">{{siteID.siteName}} ({{siteID.siteId}})</option>\n      </select>\n      <p class=\"inline-error-message\" *ngIf=\"isResponsibleOfficeEmpty || responsibleOfficeHasError\">\n        <span *ngIf=\"isResponsibleOfficeEmpty\">Please select Receiving Site ID</span>\n        <span *ngIf=\"responsibleOfficeHasError\">Please select a valid Receiving Site ID</span>\n      </p>\n    </div>\n   <div class=\"govuk-button--group\">\n      <button type=\"submit\" [disabled]=\"isContinueButtondisabled\" class=\"button\" (click)=\"saveAndContinue()\">\n        Confirm\n      </button>\n      <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelMarkUnsolicitedPayments('cancel')\">\n        Cancel\n      </button>\n    </div>\n  </form>\n  \n</div>\n       <ng-container *ngIf=\"viewStatus === 'unsolicitedContinueConfirm'\">\n          <ccpay-error-banner *ngIf=\"errorMessage.showError\" [errorMessage]=\"errorMessage\"></ccpay-error-banner>\n      <div class=\"govuk-warning-text\">\n        <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n        <strong class=\"govuk-warning-text__text\">\n        <span class=\"govuk-warning-text__assistive\">Warning</span>\n        <h1 class=\"heading-small\"> Are you sure you want to mark this payment as transferred? </h1>\n        </strong>\n        <input #myInput type='hidden' class='iFrameDrivenImageValue' value='TRANSFERREDCONFIRMATION'>\n        <div class=\"govuk-grid-column-full govuk-!-padding-bottom-3\">\n          <hr class=\"govuk-section-break govuk-section-break--visible\">\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n            <tr class=\"govuk-table__row\">\n              <td class=\"govuk-table__header\" scope=\"col\">Reason</td>\n              <td class=\"govuk-table__header\" scope=\"col\">Receiving site ID</td>\n            </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\">\n            <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__cell\">{{reason}}</td>\n            <td class=\"govuk-table__cell\">{{selectedSiteName}}</td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n      <div class=\"govuk-button--group\">\n        <button type=\"submit\" class=\"button\" [disabled]=\"isConfirmButtondisabled\" (click)=\"confirmPayments()\">\n          Confirm\n        </button>\n        <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelMarkUnsolicitedPayments()\">\n          Cancel\n        </button>\n      </div>\n    </ng-container>\n      <ng-container *ngIf=\"viewStatus === 'unsolicitedCancelConfirm'\">\n        <input #myInput type='hidden' class='iFrameDrivenImageValue' value='CANCELTRANSFERRED'>\n      <div class=\"govuk-warning-text\">\n        <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n        <strong class=\"govuk-warning-text__text\">\n        <span class=\"govuk-warning-text__assistive\">Warning</span>\n          Are you sure you want to cancel?\n        </strong>\n      </div>\n      <div class=\"govuk-button--group\">\n        <button type=\"submit\" class=\"button\" (click)=\"gotoCasetransationPage()\">\n          Yes\n        </button>\n        <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelMarkUnsolicitedPayments()\">\n          No\n        </button>\n      </div>\n    </ng-container>\n</div>", styles: [".mkpay-unidentified{margin:10px 0 20px}.mkpay-unidentified .govuk-button--secondary{margin-left:10px;background-color:#b3b8bdf2}.mkpay-unidentified .inline-error-class{outline:3px solid #a71414;outline-offset:0}.mkpay-unidentified .inline-error-message{color:#a71414;font-weight:700;margin-top:10px}.lowercase{text-transform:lowercase}.capitalize{text-transform:capitalize}.custom-govuk-label,.govuk-warning-text__text{font-size:19px}#responsibleOffice{color:#000;width:75%;font-weight:white}select option{background:white}\n"] }]
    }], function () { return [{ type: i1$1.FormBuilder }, { type: PaymentViewService }, { type: PaymentLibComponent }, { type: BulkScaningPaymentService }]; }, { caseType: [{
            type: Input
        }] }); })();

function ProcessedPaymentsComponent_tr_17_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 4)(1, "td", 9)(2, "a", 10);
    i0.ɵɵlistener("click", function ProcessedPaymentsComponent_tr_17_Template_a_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const processedRecord_r2 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.redirectToPaymentViewPage(processedRecord_r2.paymentGroupReference, processedRecord_r2.reference, processedRecord_r2.method)); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(4, "td", 9);
    i0.ɵɵtext(5);
    i0.ɵɵpipe(6, "date");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 9);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 11);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "lowercase");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 11);
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const processedRecord_r2 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(processedRecord_r2.document_control_number);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind2(6, 5, processedRecord_r2.banked_date, "dd MMM yyyy"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(9, 8, processedRecord_r2.amount, "GBP", "symbol", "1.2-2"), "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(12, 13, ctx_r0.trimUnderscore(processedRecord_r2.method)), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", processedRecord_r2.payment_allocation[0] ? processedRecord_r2.payment_allocation[0].allocation_status : "-", " ");
} }
function ProcessedPaymentsComponent_tr_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 4)(1, "td", 12);
    i0.ɵɵtext(2, " No processed payments ");
    i0.ɵɵelementEnd()();
} }
class ProcessedPaymentsComponent {
    router;
    bulkScaningPaymentService;
    NONPAYMENTS;
    goToPaymentViewComponent = new EventEmitter();
    constructor(router, bulkScaningPaymentService) {
        this.router = router;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
    }
    ngOnInit() {
    }
    trimUnderscore(method) {
        return this.bulkScaningPaymentService.removeUnwantedString(method, ' ');
    }
    redirectToPaymentViewPage(paymentGroupReference, paymentReference, paymentMethod) {
        this.goToPaymentViewComponent.emit({ paymentGroupReference, paymentReference, paymentMethod });
    }
    static ɵfac = function ProcessedPaymentsComponent_Factory(t) { return new (t || ProcessedPaymentsComponent)(i0.ɵɵdirectiveInject(i1$2.Router), i0.ɵɵdirectiveInject(BulkScaningPaymentService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ProcessedPaymentsComponent, selectors: [["ccpay-app-processed-payments"]], inputs: { NONPAYMENTS: "NONPAYMENTS" }, outputs: { goToPaymentViewComponent: "goToPaymentViewComponent" }, decls: 19, vars: 2, consts: [[1, "processed-payments", "govuk-grid-column-full", "govuk-!-padding-bottom-3"], [1, "heading-medium"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header"], [1, "govuk-table__body"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], ["class", "govuk-table__row", 4, "ngIf"], [1, "govuk-table__cell"], ["href", "javascript:void(0)", 3, "click"], [1, "capitalize", "govuk-table__cell"], ["colspan", "5", 1, "govuk-table__cell"]], template: function ProcessedPaymentsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0)(1, "h3", 1);
            i0.ɵɵtext(2, "Processed payments");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(3, "table", 2)(4, "thead", 3)(5, "tr", 4)(6, "td", 5);
            i0.ɵɵtext(7, "Payment asset number (DCN)");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(8, "td", 5);
            i0.ɵɵtext(9, "Banked date");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(10, "td", 5);
            i0.ɵɵtext(11, "Amount");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(12, "td", 5);
            i0.ɵɵtext(13, "Method");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(14, "td", 5);
            i0.ɵɵtext(15, "Allocation status");
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(16, "tbody", 6);
            i0.ɵɵtemplate(17, ProcessedPaymentsComponent_tr_17_Template, 15, 15, "tr", 7);
            i0.ɵɵtemplate(18, ProcessedPaymentsComponent_tr_18_Template, 3, 0, "tr", 8);
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance(17);
            i0.ɵɵproperty("ngForOf", ctx.NONPAYMENTS);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.NONPAYMENTS.length === 0);
        } }, dependencies: [i3.NgForOf, i3.NgIf, i3.LowerCasePipe, i3.CurrencyPipe, i3.DatePipe], styles: [".lowercase[_ngcontent-%COMP%]{text-transform:lowercase}.capitalize[_ngcontent-%COMP%]:first-letter{text-transform:uppercase}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ProcessedPaymentsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-app-processed-payments', template: "<div class=\"processed-payments govuk-grid-column-full govuk-!-padding-bottom-3\">\n  <h3 class=\"heading-medium\">Processed payments</h3>\n    <table class=\"govuk-table\">\n      <thead class=\"govuk-table__head\">\n        <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header\" scope=\"col\">Payment asset number (DCN)</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Banked date</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Method</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Allocation status</td>\n           </tr>\n      </thead>\n      <tbody class=\"govuk-table__body\" >\n        <tr class=\"govuk-table__row\" *ngFor=\"let processedRecord of NONPAYMENTS\">\n            <td class=\"govuk-table__cell\">\n                <a href=\"javascript:void(0)\" (click)=\"redirectToPaymentViewPage(processedRecord.paymentGroupReference, processedRecord.reference, processedRecord.method)\">{{processedRecord.document_control_number}}</a>\n            </td>\n            <td class=\"govuk-table__cell\"> {{processedRecord.banked_date | date:'dd MMM yyyy'}}</td>\n            <td class=\"govuk-table__cell\"> {{processedRecord.amount | currency :'GBP':'symbol':'1.2-2'}}</td>\n            <td class=\"capitalize govuk-table__cell\"> {{ trimUnderscore(processedRecord.method) | lowercase}}  </td>\n            <td class=\"capitalize govuk-table__cell\"> {{ processedRecord.payment_allocation[0] ? processedRecord.payment_allocation[0].allocation_status : '-' }}  </td>\n\n          </tr>\n          <tr class=\"govuk-table__row\" *ngIf=\"NONPAYMENTS.length === 0\">\n            <td class=\"govuk-table__cell\" colspan=\"5\">\n              No processed payments\n             </td>\n\n          </tr>\n\n      </tbody>\n    </table>\n</div>\n", styles: [".lowercase{text-transform:lowercase}.capitalize:first-letter{text-transform:uppercase}\n"] }]
    }], function () { return [{ type: i1$2.Router }, { type: BulkScaningPaymentService }]; }, { NONPAYMENTS: [{
            type: Input,
            args: ['NONPAYMENTS']
        }], goToPaymentViewComponent: [{
            type: Output
        }] }); })();

class IAllocationPaymentsRequest {
    payment_allocation_status;
    payment_group_reference;
    payment_reference;
    reason;
    explanation;
    user_name;
    constructor(payment_group_reference, payment_reference, reason, explanation, userName) {
        this.payment_allocation_status = {
            description: '',
            name: "Allocated"
        };
        this.payment_group_reference = payment_group_reference;
        this.payment_reference = payment_reference;
        this.reason = reason ? reason : null;
        this.explanation = explanation ? explanation : null;
        this.user_name = userName ? userName : null;
    }
}

class keyValuePipe {
    constructor() { }
    transform(input) {
        let keys = [];
        for (let key in input) {
            if (input.hasOwnProperty(key)) {
                keys.push({ key: key, value: input[key] });
            }
        }
        return keys;
    }
    static ɵfac = function keyValuePipe_Factory(t) { return new (t || keyValuePipe)(); };
    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "keyValue", type: keyValuePipe, pure: true });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(keyValuePipe, [{
        type: Pipe,
        args: [{
                name: 'keyValue'
            }]
    }], function () { return []; }, null); })();

function AllocatePaymentsComponent_ng_container_1_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11)(1, "input", 12);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_ng_container_1_div_11_Template_input_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const orderRef_r4 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r6.OrderListSelectEvent(orderRef_r4.orderRefId)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 13);
    i0.ɵɵtext(3);
    i0.ɵɵpipe(4, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const orderRef_r4 = ctx.$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("value", orderRef_r4.orderTotalFees);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate2(" ", i0.ɵɵpipeBind4(4, 3, orderRef_r4.orderTotalFees, "GBP", "symbol", "1.2-2"), "(", orderRef_r4.orderStatus, ")");
} }
function AllocatePaymentsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 2)(2, "ol", 3)(3, "li", 4)(4, "a", 5);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_ng_container_1_Template_a_click_4_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.gotoCasetransationPage()); });
    i0.ɵɵtext(5, "Back");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(6, "div", 6)(7, "h1", 7);
    i0.ɵɵtext(8, "Select payment request");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "p", 8);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(11, AllocatePaymentsComponent_ng_container_1_div_11_Template, 5, 8, "div", 9);
    i0.ɵɵelementStart(12, "div", 6)(13, "button", 10);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_ng_container_1_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.redirectToOrderFeeSearchPage()); });
    i0.ɵɵtext(14, " Continue ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate1("Case reference: ", ctx_r0.ccdReference, "");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.orderLevelFees);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r0.isContinueButtondisabled);
} }
function AllocatePaymentsComponent_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 2)(1, "ol", 3)(2, "li", 4)(3, "a", 24);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_div_2_div_3_Template_a_click_3_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.gotoSummaryPage($event)); });
    i0.ɵɵtext(4, "Back");
    i0.ɵɵelementEnd()()()();
} }
function AllocatePaymentsComponent_div_2_div_10_tr_20_td_1_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 41)(1, "div", 42)(2, "input", 43);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_div_2_div_10_tr_20_td_1_Template_input_click_2_listener() { i0.ɵɵrestoreView(_r25); const paymentGroup_r16 = i0.ɵɵnextContext(2).$implicit; const ctx_r23 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r23.selectedPaymentGroup(paymentGroup_r16)); });
    i0.ɵɵelementEnd();
    i0.ɵɵelement(3, "label", 44);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const i_r20 = i0.ɵɵnextContext().index;
    const paymentGroup_r16 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵattribute("rowspan", paymentGroup_r16.fees.length);
    i0.ɵɵadvance(2);
    i0.ɵɵpropertyInterpolate1("id", "unpaiedFee-", i_r20, "");
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate1("for", "unpaiedFee-", i_r20, "");
} }
function AllocatePaymentsComponent_div_2_div_10_tr_20_td_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 45);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentGroup_r16 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵattribute("rowspan", paymentGroup_r16.fees.length);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 2, ctx_r22.getGroupOutstandingAmount(paymentGroup_r16), "GBP", "symbol-narrow", "1.2-2"), " ");
} }
function AllocatePaymentsComponent_div_2_div_10_tr_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 29);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_div_2_div_10_tr_20_td_1_Template, 4, 3, "td", 34);
    i0.ɵɵelementStart(2, "td", 35);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "td", 36);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "td", 37);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "td", 38);
    i0.ɵɵtext(9);
    i0.ɵɵpipe(10, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 39);
    i0.ɵɵtext(12);
    i0.ɵɵpipe(13, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(14, AllocatePaymentsComponent_div_2_div_10_tr_20_td_14_Template, 3, 7, "td", 40);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r19 = ctx.$implicit;
    const i_r20 = ctx.index;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", i_r20 == 0);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(fee_r19.code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", fee_r19.description, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", fee_r19.volume ? fee_r19.volume : "-", " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(10, 7, fee_r19.fee_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(13, 12, fee_r19.calculated_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", i_r20 == 0);
} }
function AllocatePaymentsComponent_div_2_div_10_tbody_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 31)(1, "td", 46);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function AllocatePaymentsComponent_div_2_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 25)(1, "h3", 26);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "table", 27)(4, "thead", 28)(5, "tr", 29);
    i0.ɵɵelement(6, "td", 30);
    i0.ɵɵelementStart(7, "td", 30);
    i0.ɵɵtext(8, "Code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 30);
    i0.ɵɵtext(10, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 30);
    i0.ɵɵtext(12, "Volume");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 30);
    i0.ɵɵtext(14, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 30);
    i0.ɵɵtext(16, "Calculated amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "td", 30);
    i0.ɵɵtext(18, "Group amount outstanding");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(19, "tbody", 31);
    i0.ɵɵtemplate(20, AllocatePaymentsComponent_div_2_div_10_tr_20_Template, 15, 17, "tr", 32);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(21, AllocatePaymentsComponent_div_2_div_10_tbody_21_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const paymentGroup_r16 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("Group reference: ", paymentGroup_r16.payment_group_reference, "");
    i0.ɵɵadvance(18);
    i0.ɵɵproperty("ngForOf", paymentGroup_r16.fees);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", paymentGroup_r16.fees.length == 0);
} }
function AllocatePaymentsComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r30 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "input", 14, 15);
    i0.ɵɵtemplate(3, AllocatePaymentsComponent_div_2_div_3_Template, 5, 0, "div", 16);
    i0.ɵɵelementStart(4, "div", 17)(5, "h1", 18);
    i0.ɵɵtext(6, "Allocate payment to fee group");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "h2", 19);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(10, AllocatePaymentsComponent_div_2_div_10_Template, 22, 3, "div", 20);
    i0.ɵɵelementStart(11, "div", 21)(12, "button", 22);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_div_2_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r29.saveAndContinue()); });
    i0.ɵɵtext(13, " Continue ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "button", 23);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_div_2_Template_button_click_14_listener() { i0.ɵɵrestoreView(_r30); const ctx_r31 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r31.gotoCasetransationPage()); });
    i0.ɵɵtext(15, " Cancel ");
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.paymentRef);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("Amount left to be allocated: ", i0.ɵɵpipeBind4(9, 4, ctx_r1.unAllocatedPayment.amount, "GBP", "symbol-narrow", "1.2-2"), "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.paymentGroups);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r1.isContinueButtondisabled);
} }
function AllocatePaymentsComponent_ng_container_3_ccpay_error_banner_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-error-banner", 61);
} if (rf & 2) {
    const ctx_r32 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("errorMessage", ctx_r32.errorMessage);
} }
function AllocatePaymentsComponent_ng_container_3_div_9_h3_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "h3", 63);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r38 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("Group reference: ", ctx_r38.paymentGroup.payment_group_reference, " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_9_tr_18_td_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 65);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "currency");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r43 = i0.ɵɵnextContext(4);
    i0.ɵɵattribute("rowspan", ctx_r43.paymentGroup.fees.length);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(2, 2, ctx_r43.afterFeeAllocateOutstanding, "GBP", "symbol-narrow", "1.2-2"), " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_9_tr_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 29)(1, "td", 35);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "td", 36);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "td", 37);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 38);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "td", 39);
    i0.ɵɵtext(11);
    i0.ɵɵpipe(12, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(13, AllocatePaymentsComponent_ng_container_3_div_9_tr_18_td_13_Template, 3, 7, "td", 64);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const fee_r41 = ctx.$implicit;
    const i_r42 = ctx.index;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(fee_r41.code);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", fee_r41.description, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", fee_r41.volume ? fee_r41.volume : "-", " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(9, 6, fee_r41.fee_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind4(12, 11, fee_r41.calculated_amount, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", i_r42 == 0);
} }
function AllocatePaymentsComponent_ng_container_3_div_9_tbody_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tbody", 31)(1, "td", 46);
    i0.ɵɵtext(2, "No payments recorded");
    i0.ɵɵelementEnd()();
} }
function AllocatePaymentsComponent_ng_container_3_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 25);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_div_9_h3_1_Template, 2, 1, "h3", 62);
    i0.ɵɵelementStart(2, "table", 27)(3, "thead", 28)(4, "tr", 29)(5, "td", 30);
    i0.ɵɵtext(6, "Code");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "td", 30);
    i0.ɵɵtext(8, "Description");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "td", 30);
    i0.ɵɵtext(10, "Volume");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "td", 30);
    i0.ɵɵtext(12, "Fee amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(13, "td", 30);
    i0.ɵɵtext(14, "Calculated amount");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "td", 30);
    i0.ɵɵtext(16, "Amount Due");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(17, "tbody", 31);
    i0.ɵɵtemplate(18, AllocatePaymentsComponent_ng_container_3_div_9_tr_18_Template, 14, 16, "tr", 32);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(19, AllocatePaymentsComponent_ng_container_3_div_9_tbody_19_Template, 3, 0, "tbody", 33);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r34 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r34.isTurnOff);
    i0.ɵɵadvance(17);
    i0.ɵɵproperty("ngForOf", ctx_r34.paymentGroup.fees);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r34.paymentGroup.fees.length == 0);
} }
function AllocatePaymentsComponent_ng_container_3_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 66)(1, "span", 67);
    i0.ɵɵtext(2, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "strong", 68)(4, "span", 69);
    i0.ɵɵtext(5, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "currency");
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r35 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate2(" ", ctx_r35.paymentSectionLabel.title, " ", i0.ɵɵpipeBind4(7, 2, ctx_r35.remainingAmount, "GBP", "symbol-narrow", "1.2-2"), " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_5_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r51 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 75)(1, "input", 76);
    i0.ɵɵlistener("ngModelChange", function AllocatePaymentsComponent_ng_container_3_div_11_div_5_div_1_Template_input_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r51); const ctx_r50 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r50.paymentReason = $event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 77);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const reason_r49 = ctx.$implicit;
    const ctx_r48 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("id", reason_r49.key);
    i0.ɵɵpropertyInterpolate("value", reason_r49.value);
    i0.ɵɵproperty("ngModel", ctx_r48.paymentReason);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", reason_r49.value, " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 73);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_div_11_div_5_div_1_Template, 4, 4, "div", 74);
    i0.ɵɵpipe(2, "keyValue");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r44 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", ctx_r44.paymentReasonHasError ? "govuk-radios govuk-radios--conditional form-group-error" : "govuk-radios govuk-radios--conditional");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(2, 2, ctx_r44.reasonList.overPayment));
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_6_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r55 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 75)(1, "input", 76);
    i0.ɵɵlistener("ngModelChange", function AllocatePaymentsComponent_ng_container_3_div_11_div_6_div_1_Template_input_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r55); const ctx_r54 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r54.paymentReason = $event); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 77);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const reason_r53 = ctx.$implicit;
    const ctx_r52 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("id", reason_r53.key);
    i0.ɵɵpropertyInterpolate("value", reason_r53.value);
    i0.ɵɵproperty("ngModel", ctx_r52.paymentReason);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", reason_r53.value, " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 73);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_div_11_div_6_div_1_Template, 4, 4, "div", 74);
    i0.ɵɵpipe(2, "keyValue");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", ctx_r45.paymentReasonHasError ? "govuk-radios govuk-radios--conditional form-group-error" : "govuk-radios govuk-radios--conditional");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(2, 2, ctx_r45.reasonList.shortFall));
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_11_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r59 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 75)(1, "input", 78);
    i0.ɵɵlistener("ngModelChange", function AllocatePaymentsComponent_ng_container_3_div_11_div_11_div_1_Template_input_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r58.paymentExplanation = $event); })("click", function AllocatePaymentsComponent_ng_container_3_div_11_div_11_div_1_Template_input_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r59); const explanation_r57 = restoredCtx.$implicit; const ctx_r60 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r60.selectRadioButton(explanation_r57.key, "explanation")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 77);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const explanation_r57 = ctx.$implicit;
    const ctx_r56 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("id", explanation_r57.key);
    i0.ɵɵpropertyInterpolate("value", explanation_r57.value);
    i0.ɵɵproperty("ngModel", ctx_r56.paymentExplanation);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", explanation_r57.value, " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 73);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_div_11_div_11_div_1_Template, 4, 4, "div", 74);
    i0.ɵɵpipe(2, "keyValue");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r46 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", ctx_r46.paymentExplanationHasError ? "govuk-radios govuk-radios--conditional form-group-error" : "govuk-radios govuk-radios--conditional");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(2, 2, ctx_r46.explanationList.overPayment));
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_12_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r64 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 75)(1, "input", 78);
    i0.ɵɵlistener("ngModelChange", function AllocatePaymentsComponent_ng_container_3_div_11_div_12_div_1_Template_input_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r64); const ctx_r63 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r63.paymentExplanation = $event); })("click", function AllocatePaymentsComponent_ng_container_3_div_11_div_12_div_1_Template_input_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r64); const explanation_r62 = restoredCtx.$implicit; const ctx_r65 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r65.selectRadioButton(explanation_r62.key, "explanation")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 77);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const explanation_r62 = ctx.$implicit;
    const ctx_r61 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("id", explanation_r62.key);
    i0.ɵɵpropertyInterpolate("value", explanation_r62.value);
    i0.ɵɵproperty("ngModel", ctx_r61.paymentExplanation);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", explanation_r62.value, " ");
} }
function AllocatePaymentsComponent_ng_container_3_div_11_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 73);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_div_11_div_12_div_1_Template, 4, 4, "div", 74);
    i0.ɵɵpipe(2, "keyValue");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r47 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", ctx_r47.paymentExplanationHasError ? "govuk-radios govuk-radios--conditional form-group-error" : "govuk-radios govuk-radios--conditional");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(2, 2, ctx_r47.explanationList.shortFall));
} }
const _c0 = function (a0) { return { "inline-error-message": a0 }; };
function AllocatePaymentsComponent_ng_container_3_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 55)(1, "div", 55)(2, "fieldset", 70)(3, "span", 71);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, AllocatePaymentsComponent_ng_container_3_div_11_div_5_Template, 3, 4, "div", 72);
    i0.ɵɵtemplate(6, AllocatePaymentsComponent_ng_container_3_div_11_div_6_Template, 3, 4, "div", 72);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(7, "div", 55)(8, "fieldset", 70)(9, "span", 71);
    i0.ɵɵtext(10, " Provide an explanatory note ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(11, AllocatePaymentsComponent_ng_container_3_div_11_div_11_Template, 3, 4, "div", 72);
    i0.ɵɵtemplate(12, AllocatePaymentsComponent_ng_container_3_div_11_div_12_Template, 3, 4, "div", 72);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r36 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c0, ctx_r36.paymentReasonHasError));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r36.paymentSectionLabel.reason, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r36.isRemainingAmountGtZero);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r36.isRemainingAmountLtZero);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c0, ctx_r36.paymentExplanationHasError));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r36.isRemainingAmountGtZero);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r36.isRemainingAmountLtZero);
} }
function AllocatePaymentsComponent_ng_container_3_p_19_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a explanation");
    i0.ɵɵelementEnd();
} }
function AllocatePaymentsComponent_ng_container_3_p_19_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Enter a valid explanation");
    i0.ɵɵelementEnd();
} }
function AllocatePaymentsComponent_ng_container_3_p_19_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Explanation should be at least 3 characters.");
    i0.ɵɵelementEnd();
} }
function AllocatePaymentsComponent_ng_container_3_p_19_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Explanation should be 255 characters or under.");
    i0.ɵɵelementEnd();
} }
function AllocatePaymentsComponent_ng_container_3_p_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 79);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_p_19_span_1_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(2, AllocatePaymentsComponent_ng_container_3_p_19_span_2_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(3, AllocatePaymentsComponent_ng_container_3_p_19_span_3_Template, 2, 0, "span", 1);
    i0.ɵɵtemplate(4, AllocatePaymentsComponent_ng_container_3_p_19_span_4_Template, 2, 0, "span", 1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r37 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r37.isPaymentDetailsEmpty);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r37.isPaymentDetailsInvalid);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r37.paymentDetailsMinHasError);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r37.paymentDetailsMaxHasError);
} }
const _c1 = function (a0) { return { "inline-error-class": a0 }; };
function AllocatePaymentsComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r71 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_3_ccpay_error_banner_1_Template, 1, 1, "ccpay-error-banner", 47);
    i0.ɵɵelement(2, "input", 48, 15);
    i0.ɵɵelementStart(4, "h1", 18);
    i0.ɵɵtext(5, "Confirm allocation");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(6, "h2", 49);
    i0.ɵɵtext(7);
    i0.ɵɵpipe(8, "currency");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(9, AllocatePaymentsComponent_ng_container_3_div_9_Template, 20, 3, "div", 50);
    i0.ɵɵtemplate(10, AllocatePaymentsComponent_ng_container_3_div_10_Template, 8, 7, "div", 51);
    i0.ɵɵtemplate(11, AllocatePaymentsComponent_ng_container_3_div_11_Template, 13, 11, "div", 52);
    i0.ɵɵelementStart(12, "form", 53)(13, "div", 54)(14, "div", 55)(15, "span", 56);
    i0.ɵɵtext(16, " Please enter details ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "textarea", 57);
    i0.ɵɵtext(18, "          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(19, AllocatePaymentsComponent_ng_container_3_p_19_Template, 5, 4, "p", 58);
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(20, "div", 59)(21, "button", 60);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_ng_container_3_Template_button_click_21_listener() { i0.ɵɵrestoreView(_r71); const ctx_r70 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r70.confirmAllocatePayement()); });
    i0.ɵɵtext(22, " Confirm ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(23, "button", 23);
    i0.ɵɵlistener("click", function AllocatePaymentsComponent_ng_container_3_Template_button_click_23_listener($event) { i0.ɵɵrestoreView(_r71); const ctx_r72 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r72.cancelAllocatePayment($event)); });
    i0.ɵɵtext(24, " Cancel ");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.errorMessage.showError);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("value", ctx_r2.feedbackUrlLabel);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1(" Amount to be allocated: ", i0.ɵɵpipeBind4(8, 12, ctx_r2.amountForAllocation, "GBP", "symbol-narrow", "1.2-2"), " ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.paymentGroup);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isRemainingAmountGtZero || ctx_r2.isRemainingAmountLtZero || ctx_r2.remainingAmount === 0);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.isRemainingAmountGtZero || ctx_r2.isRemainingAmountLtZero);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("formGroup", ctx_r2.overUnderPaymentForm);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", ctx_r2.isMoreDetailsBoxHide ? "govuk-radios__conditional govuk-radios__conditional--hidden" : ctx_r2.isPaymentDetailsEmpty || ctx_r2.isPaymentDetailsInvalid || ctx_r2.paymentDetailsMinHasError || ctx_r2.paymentDetailsMaxHasError ? "govuk-radios__conditional inline-error-border" : "govuk-radios__conditional");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(17, _c1, ctx_r2.isPaymentDetailsEmpty || ctx_r2.isPaymentDetailsInvalid || ctx_r2.paymentDetailsMinHasError || ctx_r2.paymentDetailsMaxHasError));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.isPaymentDetailsEmpty || ctx_r2.isPaymentDetailsInvalid || ctx_r2.paymentDetailsMinHasError || ctx_r2.paymentDetailsMaxHasError);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r2.isConfirmButtondisabled)("ngClass", ctx_r2.isConfirmButtondisabled ? "button button--disabled" : "button");
} }
class AllocatePaymentsComponent {
    errorHandlerService;
    caseTransactionsService;
    formBuilder;
    paymentViewService;
    paymentLibComponent;
    bulkScaningPaymentService;
    OrderslistService;
    isTurnOff;
    caseType;
    overUnderPaymentForm;
    viewStatus;
    ccdCaseNumber;
    bspaymentdcn;
    recordId;
    feedbackUrlLabel;
    unAllocatedPayment = {
        amount: 0
    };
    siteID = null;
    // errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
    errorMessage = null;
    paymentGroup;
    paymentGroups = [];
    remainingAmount;
    isRemainingAmountGtZero;
    isMoreDetailsBoxHide = true;
    isRemainingAmountLtZero;
    afterFeeAllocateOutstanding;
    amountForAllocation;
    isConfirmButtondisabled = false;
    isContinueButtondisabled = true;
    otherPaymentExplanation = null;
    selectedOption = null;
    isFeeAmountZero = false;
    paymentReasonHasError = false;
    paymentExplanationHasError = false;
    isPaymentDetailsEmpty = false;
    isPaymentDetailsInvalid = false;
    paymentDetailsMinHasError = false;
    paymentDetailsMaxHasError = false;
    isUserNameEmpty = false;
    isUserNameInvalid = false;
    ccdReference = null;
    exceptionReference = null;
    paymentReason = null;
    paymentExplanation = null;
    userName = null;
    paymentSectionLabel;
    paymentRef = null;
    isStrategicFixEnable = true;
    orderLevelFees = [];
    cookieUserName = [];
    enCookieUserName;
    userNameField = null;
    reasonList = {
        overPayment: {
            hwfReward: 'Help with Fees (HWF) awarded.  Please include the HWF reference number in the explanatory note',
            wrongFee: 'Incorrect payment received',
            notIssueCase: 'Unable to issue case',
            otherDeduction: 'Other'
        },
        shortFall: {
            helpWithFee: 'Help with Fees (HWF) application declined',
            wrongFee: 'Incorrect payment received',
            other: 'Other'
        }
    };
    explanationList = {
        overPayment: {
            referRefund: 'Details in case notes.  Refund due',
            noRefund: 'Details in case notes. No refund due',
            noCase: 'No case created.  Refund due',
            other: 'Other'
        },
        shortFall: {
            holdCase: 'I have put a stop on the case and contacted the applicant requesting the balance of payment',
            heldCase: 'I have put a stop on the case.  The applicant needs to be contacted to request the balance of payment',
            other: 'Other'
        }
    };
    refund = {
        reason: {
            duplicate: 'Duplicate payment',
            humanerror: 'Human error',
            caseWithdrawn: 'Case withdrawn',
            other: 'Other'
        }
    };
    constructor(errorHandlerService, caseTransactionsService, formBuilder, paymentViewService, paymentLibComponent, bulkScaningPaymentService, OrderslistService) {
        this.errorHandlerService = errorHandlerService;
        this.caseTransactionsService = caseTransactionsService;
        this.formBuilder = formBuilder;
        this.paymentViewService = paymentViewService;
        this.paymentLibComponent = paymentLibComponent;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
        this.OrderslistService = OrderslistService;
    }
    ngOnInit() {
        this.viewStatus = 'mainForm';
        if (this.paymentLibComponent.paymentGroupReference !== null) {
            this.viewStatus = 'allocatePaymentConfirmation';
        }
        this.ccdCaseNumber = this.paymentLibComponent.CCD_CASE_NUMBER;
        this.bspaymentdcn = this.paymentLibComponent.bspaymentdcn;
        this.paymentRef = this.paymentLibComponent.paymentGroupReference;
        this.selectedOption = this.paymentLibComponent.SELECTED_OPTION;
        this.isStrategicFixEnable = this.paymentLibComponent.ISSFENABLE;
        this.isTurnOff = this.paymentLibComponent.isTurnOff;
        this.overUnderPaymentForm = this.formBuilder.group({
            moreDetails: new FormControl('', Validators.compose([
                Validators.required,
                Validators.minLength(3),
                Validators.maxLength(255),
                Validators.pattern('^([a-zA-Z0-9\\s,\\.]*)$')
            ])),
            userName: new FormControl('', Validators.compose([
                Validators.required,
                Validators.pattern('^([a-zA-Z0-9\\s]*)$')
            ])),
        });
        this.OrderslistService.getOrdersList().subscribe((data) => this.orderLevelFees = data.filter(data => data.orderStatus !== 'Paid'));
        this.OrderslistService.getCaseType().subscribe((data) => this.caseType = data);
        this.getUnassignedPayment();
    }
    getGroupOutstandingAmount(paymentGroup) {
        return this.bulkScaningPaymentService.calculateOutStandingAmount(paymentGroup);
    }
    getPaymentGroupDetails() {
        if (!this.isTurnOff) {
            this.paymentViewService.getPaymentGroupDetails(this.paymentRef).subscribe(paymentGroup => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                this.paymentGroup = paymentGroup;
                this.saveAndContinue();
            }, (error) => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
            });
        }
        else {
            this.caseTransactionsService.getPaymentGroups(this.ccdCaseNumber).subscribe(paymentGroups => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                this.paymentGroups = paymentGroups['payment_groups'].filter(paymentGroup => {
                    paymentGroup.fees.forEach(fee => {
                        if (fee.calculated_amount === 0) {
                            this.isFeeAmountZero = true;
                        }
                    });
                    let fstCon = this.getGroupOutstandingAmount(paymentGroup), scndCn = fstCon > 0 || (fstCon == 0 && this.isFeeAmountZero) && paymentGroup.payment_group_reference === this.paymentRef;
                    return this.paymentRef ? scndCn : fstCon > 0 || (fstCon == 0 && this.isFeeAmountZero);
                });
            }, (error) => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
            });
        }
    }
    selectedPaymentGroup(paymentGroup) {
        this.isContinueButtondisabled = false;
        this.paymentGroup = paymentGroup;
    }
    gotoCasetransationPage() {
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.isTurnOff = this.isTurnOff;
        this.paymentLibComponent.TAKEPAYMENT = true;
        this.paymentLibComponent.ISBSENABLE = true;
    }
    gotoSummaryPage(event) {
        event.preventDefault();
        this.paymentLibComponent.viewName = 'fee-summary';
        this.paymentLibComponent.isTurnOff = this.isTurnOff;
        this.paymentLibComponent.TAKEPAYMENT = true;
        this.paymentLibComponent.ISBSENABLE = true;
    }
    cancelAllocatePayment(event) {
        event.preventDefault();
        this.resetForm([false, false, false, false, false, false, false, false], 'all');
        if (!this.isTurnOff) {
            this.paymentLibComponent.viewName = 'fee-summary';
            this.paymentLibComponent.isTurnOff = this.isTurnOff;
            this.paymentLibComponent.TAKEPAYMENT = true;
            this.paymentLibComponent.ISBSENABLE = true;
        }
        else {
            this.viewStatus = 'mainForm';
        }
    }
    confirmAllocatePayement() {
        this.enCookieUserName = document.cookie.split(";").find(row => row.includes("user-info")).split("=")[1].split(";");
        this.cookieUserName = JSON.parse(decodeURIComponent(this.enCookieUserName));
        const fullName = this.cookieUserName['forename'] + ' ' + this.cookieUserName['surname'];
        const paymentDetailsField = this.overUnderPaymentForm.controls.moreDetails, paymentFormError = this.overUnderPaymentForm.controls.moreDetails.errors, userNameField = fullName, isEmptyCondtion = this.paymentReason && this.paymentExplanation, isOtherOptionSelected = this.paymentExplanation === 'Other';
        this.resetForm([false, false, false, false, false, false, false, false], 'all');
        if ((!this.isRemainingAmountGtZero && !this.isRemainingAmountLtZero) || isEmptyCondtion && (!isOtherOptionSelected && userNameField.length > 0 || isOtherOptionSelected && userNameField.length > 0 && paymentDetailsField.valid)) {
            this.isConfirmButtondisabled = true;
            this.otherPaymentExplanation = this.paymentExplanation === 'Other' ? paymentDetailsField.value : this.paymentExplanation;
            this.userName = userNameField;
            this.finalServiceCall();
        }
        else {
            if (!this.paymentReason) {
                this.resetForm([true, false, false, false, false, false, false, false], 'reason');
            }
            if (!this.paymentExplanation) {
                this.resetForm([false, true, false, false, false, false, false, false], 'explanation');
            }
            if (this.paymentExplanation && isOtherOptionSelected) {
                if (paymentDetailsField.value == '') {
                    this.resetForm([false, false, true, false, false, false, false, false], 'other');
                }
                if (paymentDetailsField.value != '' && paymentDetailsField.invalid) {
                    this.resetForm([false, false, false, true, false, false, false, false], 'other');
                }
                if (paymentFormError && paymentFormError.minlength && paymentFormError.minlength.actualLength < 3) {
                    this.resetForm([false, false, false, false, true, false, false, false], 'other');
                }
                if (paymentFormError && paymentFormError.maxlength && paymentFormError.maxlength.actualLength > 255) {
                    this.resetForm([false, false, false, false, false, true, false, false], 'other');
                }
            }
            if (userNameField.length === 0) {
                this.resetForm([false, false, false, false, false, false, true, false], 'username');
            }
        }
    }
    resetForm(vals, field) {
        if (field === 'reason' || field === 'all') {
            this.paymentReasonHasError = vals[0];
        }
        if (field === 'explanation' || field === 'all') {
            this.paymentExplanationHasError = vals[1];
        }
        if (field === 'other' || field === 'all') {
            this.isPaymentDetailsEmpty = vals[2];
            this.isPaymentDetailsInvalid = vals[3];
            this.paymentDetailsMinHasError = vals[4];
            this.paymentDetailsMaxHasError = vals[5];
        }
        if (field === 'username' || field === 'all') {
            this.isUserNameEmpty = vals[6];
            this.isUserNameInvalid = vals[7];
        }
    }
    finalServiceCall() {
        if (!this.isStrategicFixEnable) {
            let allocatedRequest = {
                reason: this.paymentReason,
                allocation_status: 'Allocated',
                explanation: this.otherPaymentExplanation,
                payment_allocation_status: {
                    description: '',
                    name: 'Allocated'
                },
                payment_group_reference: this.paymentGroup.payment_group_reference,
                case_type: this.caseType,
                user_name: this.userName
            };
            const postStrategicBody = new AllocatePaymentRequest(this.ccdReference, this.unAllocatedPayment, this.caseType, this.exceptionReference, allocatedRequest);
            this.bulkScaningPaymentService.postBSPaymentStrategic(postStrategicBody, this.paymentGroup.payment_group_reference).subscribe(res => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                let response = JSON.parse(res);
                if (response.success) {
                    this.gotoCasetransationPage();
                }
            }, (error) => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
                window.scrollTo(0, 0);
                this.isConfirmButtondisabled = false;
            });
        }
        else {
            this.bulkScaningPaymentService.patchBSChangeStatus(this.unAllocatedPayment.dcn_reference, 'PROCESSED').subscribe(res1 => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                let response1 = JSON.parse(res1);
                if (response1.success) {
                    const requestBody = new AllocatePaymentRequest(this.ccdReference, this.unAllocatedPayment, this.siteID, this.exceptionReference);
                    this.bulkScaningPaymentService.postBSAllocatePayment(requestBody, this.paymentGroup.payment_group_reference).subscribe(res2 => {
                        this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                        let response2 = JSON.parse(res2);
                        const reqBody = new IAllocationPaymentsRequest(response2['data'].payment_group_reference, response2['data'].reference, this.paymentReason, this.otherPaymentExplanation, this.userName);
                        if (response2.success) {
                            this.paymentViewService.postBSAllocationPayments(reqBody).subscribe(res3 => {
                                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                                let response3 = JSON.parse(res3);
                                if (response3.success) {
                                    this.gotoCasetransationPage();
                                }
                            }, (error) => {
                                this.bulkScaningPaymentService.patchBSChangeStatus(this.unAllocatedPayment.dcn_reference, 'COMPLETE').subscribe();
                                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
                                window.scrollTo(0, 0);
                                this.isConfirmButtondisabled = false;
                            });
                        }
                    }, (error) => {
                        this.bulkScaningPaymentService.patchBSChangeStatus(this.unAllocatedPayment.dcn_reference, 'COMPLETE').subscribe();
                        this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
                        window.scrollTo(0, 0);
                        this.isConfirmButtondisabled = false;
                    });
                }
            }, (error) => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
                window.scrollTo(0, 0);
                this.isConfirmButtondisabled = false;
            });
        }
    }
    saveAndContinue() {
        if (this.paymentGroup) {
            this.isMoreDetailsBoxHide = true;
            this.overUnderPaymentForm.get('moreDetails').reset();
            this.overUnderPaymentForm.get('moreDetails').setValue('');
            this.overUnderPaymentForm.get('userName').reset();
            this.overUnderPaymentForm.get('userName').setValue('');
            this.paymentReason = '';
            this.paymentExplanation = '';
            let GroupOutstandingAmount = this.getGroupOutstandingAmount(this.paymentGroup);
            const remainingToBeAssigned = this.unAllocatedPayment.amount - GroupOutstandingAmount;
            this.isRemainingAmountGtZero = remainingToBeAssigned > 0;
            this.isRemainingAmountLtZero = remainingToBeAssigned < 0;
            this.paymentSectionLabel = this.isRemainingAmountGtZero ? {
                title: 'There is an Over payment of',
                reason: 'Provide a reason. This will be used in the Refund process.',
            } : this.isRemainingAmountLtZero ? {
                title: 'There is an Under payment of',
                reason: 'Provide a reason',
            } : {
                title: 'Amount left to be allocated',
                reason: '',
            };
            this.feedbackUrlLabel = this.isRemainingAmountGtZero ? 'CONFIRMALLOCATION_SURPLUS' : this.isRemainingAmountLtZero ? 'CONFIRMALLOCATION_SHORTFALL' : 'CONFIRMALLOCATION';
            this.remainingAmount = this.isRemainingAmountGtZero ? remainingToBeAssigned : this.isRemainingAmountLtZero ? remainingToBeAssigned * -1 : 0;
            this.afterFeeAllocateOutstanding = remainingToBeAssigned >= 0 ? 0 : (remainingToBeAssigned * -1);
            this.amountForAllocation = GroupOutstandingAmount >= this.unAllocatedPayment.amount ? this.unAllocatedPayment.amount : GroupOutstandingAmount;
            if (this.isTurnOff) {
                this.viewStatus = 'allocatePaymentConfirmation';
            }
        }
    }
    getUnassignedPayment() {
        this.bulkScaningPaymentService.getBSPaymentsByDCN(this.bspaymentdcn).subscribe(unassignedPayments => {
            this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
            this.unAllocatedPayment = unassignedPayments['data'].payments.filter(payment => {
                return payment && payment.dcn_reference == this.bspaymentdcn;
            })[0];
            this.siteID = unassignedPayments['data'].responsible_service_id;
            const beCcdNumber = unassignedPayments['data'].ccd_reference, beExceptionNumber = unassignedPayments['data'].exception_record_reference, exceptionReference = beCcdNumber ? beCcdNumber === this.ccdCaseNumber ? null : this.ccdCaseNumber : this.ccdCaseNumber;
            this.ccdReference = beCcdNumber ? beCcdNumber : null;
            this.exceptionReference = beExceptionNumber ? beExceptionNumber : exceptionReference;
            this.getPaymentGroupDetails();
        }, (error) => {
            this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
        });
    }
    selectRadioButton(key, type) {
        this.isMoreDetailsBoxHide = true;
        if (type === 'explanation' && key === 'other') {
            this.isPaymentDetailsEmpty = false;
            this.isPaymentDetailsInvalid = false;
            this.paymentDetailsMinHasError = false;
            this.paymentDetailsMaxHasError = false;
            this.isMoreDetailsBoxHide = false;
        }
    }
    OrderListSelectEvent(orderef) {
        this.isContinueButtondisabled = false;
        this.recordId = orderef;
    }
    redirectToOrderFeeSearchPage() {
        // this.paymentLibComponent.bspaymentdcn = null;
        this.paymentLibComponent.paymentGroupReference = this.recordId;
        this.paymentLibComponent.isTurnOff = this.isTurnOff;
        this.paymentLibComponent.viewName = 'fee-summary';
    }
    static ɵfac = function AllocatePaymentsComponent_Factory(t) { return new (t || AllocatePaymentsComponent)(i0.ɵɵdirectiveInject(ErrorHandlerService), i0.ɵɵdirectiveInject(CaseTransactionsService), i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(PaymentViewService), i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(BulkScaningPaymentService), i0.ɵɵdirectiveInject(OrderslistService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AllocatePaymentsComponent, selectors: [["app-allocate-payments"]], inputs: { isTurnOff: "isTurnOff", caseType: "caseType" }, decls: 4, vars: 3, consts: [[1, "allocate-payments"], [4, "ngIf"], [1, "govuk-breadcrumbs"], [1, "govuk-breadcrumbs__list"], [1, "govuk-breadcrumbs__list-item"], [1, "govuk-back-link", "govuk-label", 3, "click"], [1, "paymentrequest"], [1, "govuk-heading-xl", "govuk-!-margin-top-3", "govuk-!-margin-bottom-4"], [1, "govuk-!-margin-top-5", "casererf"], ["class", "multiple-choice unprocessed-payments--radio-button", 4, "ngFor", "ngForOf"], ["type", "submit", 1, "button", "allbtb", "button--disabled", "govuk-!-margin-right-1", 3, "disabled", "click"], [1, "multiple-choice", "unprocessed-payments--radio-button"], ["id", "'orderfee'+i+''", "aria-label", "orderLevelRecord", "name", "orderLevelRecord", "type", "radio", 3, "value", "click"], ["for", "radio-inline-1"], ["type", "hidden", "value", "ALLOCATEPAYMENTS", 1, "iFrameDrivenImageValue"], ["myInput", ""], ["class", "govuk-breadcrumbs", 4, "ngIf"], [1, "govuk-heading-section"], [1, "govuk-heading-xl"], [1, "govuk-heading-l"], ["class", "payment-group-section", 4, "ngFor", "ngForOf"], [1, "govuk-button-group-allocate"], ["type", "button", 1, "button", "govuk-!-margin-right-1", 3, "disabled", "click"], ["type", "button", 1, "button", "govuk-button--secondary", 3, "click"], ["href", "#", 1, "govuk-back-link", 3, "click"], [1, "payment-group-section"], [1, "govuk-heading-m"], [1, "govuk-table"], [1, "govuk-table__head"], [1, "govuk-table__row"], ["scope", "col", 1, "govuk-table__header"], [1, "govuk-table__body"], ["class", "govuk-table__row", 4, "ngFor", "ngForOf"], ["class", "govuk-table__body", 4, "ngIf"], ["class", "govuk-table__cell govuk-table__cell--col1 govuk-table__custom--col1", 4, "ngIf"], [1, "govuk-table__cell", "govuk-table__cell--col1"], [1, "govuk-table__cell", "govuk-table__cell--col2"], [1, "govuk-table__cell", "govuk-table__cell--col3"], [1, "govuk-table__cell", "govuk-table__cell--col4"], [1, "govuk-table__cell", "govuk-table__cell--col5"], ["class", "govuk-table__cell govuk-table__cell--col6 govuk-table__custom--col6", 4, "ngIf"], [1, "govuk-table__cell", "govuk-table__cell--col1", "govuk-table__custom--col1"], [1, "multiple-choice"], ["name", "unassignedRecord", "type", "radio", 3, "id", "click"], [3, "for"], [1, "govuk-table__cell", "govuk-table__cell--col6", "govuk-table__custom--col6"], ["colspan", "6", 1, "govuk-table__cell"], [3, "errorMessage", 4, "ngIf"], ["type", "hidden", 1, "iFrameDrivenImageValue", 3, "value"], [1, "govuk-heading-l", "govuk-heading-l--custom"], ["class", "payment-group-section", 4, "ngIf"], ["class", "govuk-warning-text", 4, "ngIf"], ["class", "govuk-form-group", 4, "ngIf"], ["novalidate", "", 3, "formGroup"], ["id", "conditional-how-contacted-conditional-3", 3, "ngClass"], [1, "govuk-form-group"], ["id", "more-detail-hint", 1, "govuk-hint", "govuk-font__custom"], ["id", "moreDetails", "name", "moreDetails", "rows", "5", "formControlName", "moreDetails", 1, "govuk-textarea", 3, "ngClass"], ["class", "inline-error-message", 4, "ngIf"], [1, "govuk-button--group"], ["type", "submit", 3, "disabled", "ngClass", "click"], [3, "errorMessage"], ["class", "govuk-heading-m--custom", 4, "ngIf"], [1, "govuk-heading-m--custom"], ["class", "govuk-table__cell govuk-table__cell--col6", 4, "ngIf"], [1, "govuk-table__cell", "govuk-table__cell--col6"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text", "govuk-warning-text__custom"], [1, "govuk-warning-text__assistive"], ["aria-describedby", "how-contacted-conditional-hint", 1, "govuk-fieldset"], ["id", "how-contacted-conditional-hint", 1, "govuk-hint", 3, "ngClass"], ["data-module", "govuk-radios", 3, "ngClass", 4, "ngIf"], ["data-module", "govuk-radios", 3, "ngClass"], ["class", "govuk-radios__item", 4, "ngFor", "ngForOf"], [1, "govuk-radios__item"], ["name", "paymentReason", "type", "radio", 1, "govuk-radios__input", 3, "id", "ngModel", "value", "ngModelChange"], ["for", "how-contacted-conditional", 1, "govuk-label", "govuk-radios__label", "govuk-font__custom"], ["name", "paymentExplanation", "type", "radio", 1, "govuk-radios__input", 3, "id", "ngModel", "value", "ngModelChange", "click"], [1, "inline-error-message"]], template: function AllocatePaymentsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵtemplate(1, AllocatePaymentsComponent_ng_container_1_Template, 15, 3, "ng-container", 1);
            i0.ɵɵtemplate(2, AllocatePaymentsComponent_div_2_Template, 16, 9, "div", 1);
            i0.ɵɵtemplate(3, AllocatePaymentsComponent_ng_container_3_Template, 25, 19, "ng-container", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "mainForm" && !ctx.isTurnOff);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "mainForm" && ctx.isTurnOff);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "mainForm" && ctx.isTurnOff || ctx.viewStatus === "allocatePaymentConfirmation");
        } }, dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.DefaultValueAccessor, i1$1.RadioControlValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.NgModel, i1$1.FormGroupDirective, i1$1.FormControlName, ErrorBannerComponent, i3.CurrencyPipe, keyValuePipe], styles: [".allocate-payments[_ngcontent-%COMP%]{margin:20px 0}.allocate-payments[_ngcontent-%COMP%]   .govuk-table__cell--col1[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-table__cell--col3[_ngcontent-%COMP%]{width:10%}.allocate-payments[_ngcontent-%COMP%]   .govuk-table__cell--col2[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-table__cell--col6[_ngcontent-%COMP%]{width:25%}.allocate-payments[_ngcontent-%COMP%]   .govuk-table__cell--col4[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-table__cell--col5[_ngcontent-%COMP%]{width:15%}.allocate-payments[_ngcontent-%COMP%]   .govuk-button-group-allocate[_ngcontent-%COMP%]{display:flex;justify-content:flex-start}.allocate-payments[_ngcontent-%COMP%]   .govuk-button--secondary[_ngcontent-%COMP%]{margin-left:10px;background-color:#b3b8bdf2}.allocate-payments[_ngcontent-%COMP%]   .govuk-custom-warning__message[_ngcontent-%COMP%]{font-size:30px;position:relative;top:12px;font-weight:700}.allocate-payments[_ngcontent-%COMP%]   .govuk-warning-text-custom[_ngcontent-%COMP%]{margin-bottom:0!important;padding:10px 0 5px}.allocate-payments[_ngcontent-%COMP%]   .govuk-table__custom--col1[_ngcontent-%COMP%]{padding-top:0;padding-bottom:20px;padding-left:15px}.allocate-payments[_ngcontent-%COMP%]   .govuk-table__custom--col6[_ngcontent-%COMP%]{text-align:center}.allocate-payments[_ngcontent-%COMP%]   .govuk-list__custom[_ngcontent-%COMP%]{padding-left:20px}.allocate-payments[_ngcontent-%COMP%]   .govuk-warning-text__custom[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-list__custom[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-heading-m--custom[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-label--m[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-radios__item[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-hint[_ngcontent-%COMP%], .allocate-payments[_ngcontent-%COMP%]   .govuk-font__custom[_ngcontent-%COMP%]{font-size:19px}.allocate-payments[_ngcontent-%COMP%]   .govuk-radios__conditional--hidden[_ngcontent-%COMP%]{display:none}.allocate-payments[_ngcontent-%COMP%]   .form-group-error[_ngcontent-%COMP%]{border-left:5px solid #b10e1e;padding-left:15px}.allocate-payments[_ngcontent-%COMP%]   .inline-error-class[_ngcontent-%COMP%]{outline:3px solid #a71414;outline-offset:0}.allocate-payments[_ngcontent-%COMP%]   .inline-error-message[_ngcontent-%COMP%]{color:#a71414;font-weight:700;margin-top:10px}.allocate-payments[_ngcontent-%COMP%]   .inline-error-border[_ngcontent-%COMP%]{border-color:#a71414}.allbtb[_ngcontent-%COMP%]{margin-top:2em}.govuk-back-link[_ngcontent-%COMP%]{font-size:1.5rem!important}.multiple-choice[_ngcontent-%COMP%]{font-size:19px}.casererf[_ngcontent-%COMP%]{align-self:flex-end;font-size:19px}.paymentrequest[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-between;width:960px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AllocatePaymentsComponent, [{
        type: Component,
        args: [{ selector: 'app-allocate-payments', template: "<div class=\"allocate-payments\">\n  <ng-container *ngIf=\"viewStatus === 'mainForm' && !isTurnOff\">\n\n      <div class=\"govuk-breadcrumbs\">\n          <ol class=\"govuk-breadcrumbs__list\">\n            <li class=\"govuk-breadcrumbs__list-item\">\n              <a (click)=\"gotoCasetransationPage()\" class=\"govuk-back-link govuk-label\">Back</a>\n            </li>\n          </ol>\n        </div>\n  \n    <div class=\"paymentrequest\">\n        <h1 class=\"govuk-heading-xl govuk-!-margin-top-3 govuk-!-margin-bottom-4\">Select payment request</h1>\n        <p class=\"govuk-!-margin-top-5 casererf\">Case reference: {{ccdReference}}</p>\n    </div>\n \n    <div  *ngFor=\"let orderRef of orderLevelFees; let i = index;\" class=\"multiple-choice unprocessed-payments--radio-button\">\n      <input id=\"'orderfee'+i+''\"\n      aria-label=\"orderLevelRecord\"\n      name=\"orderLevelRecord\"\n    \n      (click)=\"OrderListSelectEvent(orderRef.orderRefId)\"\n      type=\"radio\"\n      value=\"{{orderRef.orderTotalFees}}\" />\n      <label for=\"radio-inline-1\"> {{orderRef.orderTotalFees | currency :'GBP':'symbol':'1.2-2'}}({{orderRef.orderStatus}})</label>\n    </div>\n  \n    <div class=\"paymentrequest\">\n        <button [disabled]=\"isContinueButtondisabled\" type=\"submit\" (click)=\"redirectToOrderFeeSearchPage()\" class=\"button allbtb button--disabled govuk-!-margin-right-1\">\n          Continue\n        </button>\n      </div>\n   \n  </ng-container>\n\n   <div *ngIf=\"viewStatus==='mainForm' && isTurnOff\">\n    <input #myInput type='hidden' class='iFrameDrivenImageValue' value='ALLOCATEPAYMENTS'>\n    <div class=\"govuk-breadcrumbs\" *ngIf=\"paymentRef\">\n      <ol class=\"govuk-breadcrumbs__list\">\n        <li class=\"govuk-breadcrumbs__list-item\">\n          <a href=\"#\" (click)=\"gotoSummaryPage($event)\" class=\"govuk-back-link\">Back</a>\n        </li>\n      </ol>\n    </div>\n    <div class=\"govuk-heading-section\">\n      <h1 class=\"govuk-heading-xl\">Allocate payment to fee group</h1>\n      <h2 class=\"govuk-heading-l\">Amount left to be allocated:\n        {{ unAllocatedPayment.amount | currency:'GBP':'symbol-narrow':'1.2-2' }}</h2>\n    </div>\n    <div class=\"payment-group-section\" *ngFor=\"let paymentGroup of paymentGroups\">\n      <h3 class=\"govuk-heading-m\">Group reference: {{paymentGroup.payment_group_reference}}</h3>\n      <table class=\"govuk-table\">\n        <thead class=\"govuk-table__head\">\n          <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header\" scope=\"col\"></td>\n            <td class=\"govuk-table__header\" scope=\"col\">Code</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Description</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Volume</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Fee amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Calculated amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Group amount outstanding</td>\n          </tr>\n        </thead>\n        <tbody class=\"govuk-table__body\">\n          <tr class=\"govuk-table__row\" *ngFor=\"let fee of paymentGroup.fees;  let i = index;\">\n            <td class=\"govuk-table__cell govuk-table__cell--col1 govuk-table__custom--col1\"\n              [attr.rowspan]=\"paymentGroup.fees.length\" *ngIf=\"i==0\">\n              <div class=\"multiple-choice\">\n                <input id=\"unpaiedFee-{{i}}\" name=\"unassignedRecord\" type=\"radio\"\n                  (click)=\"selectedPaymentGroup(paymentGroup)\" />\n                <label for=\"unpaiedFee-{{i}}\"></label>\n              </div>\n            </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col1\">{{fee.code}}</td>\n            <td class=\"govuk-table__cell govuk-table__cell--col2\"> {{fee.description}} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col3\"> {{fee.volume? fee.volume : '-'}} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col4\">\n              {{ fee.fee_amount | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col5\">\n              {{fee.calculated_amount | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col6 govuk-table__custom--col6\"\n              [attr.rowspan]=\"paymentGroup.fees.length\" *ngIf=\"i==0\">\n              {{getGroupOutstandingAmount(paymentGroup) | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n\n          </tr>\n\n        </tbody>\n        <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.fees.length==0\">\n          <td class=\"govuk-table__cell\" colspan=\"6\">No payments recorded</td>\n        </tbody>\n      </table>\n    </div>\n    <div class=\"govuk-button-group-allocate\">\n      <button type=\"button\" class=\"button govuk-!-margin-right-1\" [disabled]=\"isContinueButtondisabled\"\n        (click)=\"saveAndContinue()\">\n        Continue\n      </button>\n      <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"gotoCasetransationPage()\">\n        Cancel\n      </button>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"(viewStatus === 'mainForm' && isTurnOff) || viewStatus === 'allocatePaymentConfirmation'\">\n    <ccpay-error-banner *ngIf=\"errorMessage.showError\" [errorMessage]=\"errorMessage\"></ccpay-error-banner>\n    <input #myInput type='hidden' class='iFrameDrivenImageValue' value='{{feedbackUrlLabel}}'>\n    <h1 class=\"govuk-heading-xl\">Confirm allocation</h1>\n    <h2 class=\"govuk-heading-l govuk-heading-l--custom\">\n      Amount to be allocated: {{amountForAllocation | currency:'GBP':'symbol-narrow':'1.2-2'}}\n    </h2>\n    <div class=\"payment-group-section\" *ngIf=\"paymentGroup\">\n      <h3 class=\"govuk-heading-m--custom\" *ngIf=\"isTurnOff\">Group reference: {{paymentGroup.payment_group_reference}}\n      </h3>\n      <table class=\"govuk-table\">\n        <thead class=\"govuk-table__head\">\n          <tr class=\"govuk-table__row\">\n            <td class=\"govuk-table__header\" scope=\"col\">Code</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Description</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Volume</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Fee amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Calculated amount</td>\n            <td class=\"govuk-table__header\" scope=\"col\">Amount Due</td>\n          </tr>\n        </thead>\n        <tbody class=\"govuk-table__body\">\n          <tr class=\"govuk-table__row\" *ngFor=\"let fee of paymentGroup.fees; let i = index;\">\n            <td class=\"govuk-table__cell govuk-table__cell--col1\">{{fee.code}}</td>\n            <td class=\"govuk-table__cell govuk-table__cell--col2\"> {{fee.description}} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col3\"> {{fee.volume? fee.volume : '-'}} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col4\">\n              {{ fee.fee_amount | currency:'GBP':'symbol-narrow':'1.2-2' }} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col5\">\n              {{fee.calculated_amount | currency:'GBP':'symbol-narrow':'1.2-2'}} </td>\n            <td class=\"govuk-table__cell govuk-table__cell--col6\" [attr.rowspan]=\"paymentGroup.fees.length\"\n              *ngIf=\"i==0\"> {{afterFeeAllocateOutstanding | currency:'GBP':'symbol-narrow':'1.2-2'}} </td>\n          </tr>\n        </tbody>\n        <tbody class=\"govuk-table__body\" *ngIf=\"paymentGroup.fees.length == 0\">\n          <td class=\"govuk-table__cell\" colspan=\"6\">No payments recorded</td>\n        </tbody>\n      </table>\n    </div>\n    <div class=\"govuk-warning-text\" *ngIf=\"isRemainingAmountGtZero || isRemainingAmountLtZero || remainingAmount === 0\">\n      <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n      <strong class=\"govuk-warning-text__text govuk-warning-text__custom\">\n        <span class=\"govuk-warning-text__assistive\">Warning</span>\n        {{paymentSectionLabel.title}} {{ remainingAmount | currency:'GBP':'symbol-narrow':'1.2-2' }}\n      </strong>\n    </div>\n    <div class=\"govuk-form-group\" *ngIf=\"isRemainingAmountGtZero || isRemainingAmountLtZero\">\n      <div class=\"govuk-form-group\">\n        <fieldset class=\"govuk-fieldset\" aria-describedby=\"how-contacted-conditional-hint\">\n          <span id=\"how-contacted-conditional-hint\" class=\"govuk-hint\"\n            [ngClass]=\"{'inline-error-message': paymentReasonHasError}\">\n            {{paymentSectionLabel.reason}}\n          </span>\n          <div\n            [ngClass]=\"paymentReasonHasError ? 'govuk-radios govuk-radios--conditional form-group-error' : 'govuk-radios govuk-radios--conditional'\"\n            data-module=\"govuk-radios\" *ngIf=\"isRemainingAmountGtZero\">\n            <div class=\"govuk-radios__item\" *ngFor=\"let reason of reasonList.overPayment | keyValue\">\n              <input class=\"govuk-radios__input\" id=\"{{reason.key}}\" name=\"paymentReason\" type=\"radio\"\n                [(ngModel)]=\"paymentReason\" value={{reason.value}}>\n              <label class=\"govuk-label govuk-radios__label govuk-font__custom\" for=\"how-contacted-conditional\">\n                {{reason.value}}\n              </label>\n            </div>\n          </div>\n          <div\n            [ngClass]=\"paymentReasonHasError ? 'govuk-radios govuk-radios--conditional form-group-error' : 'govuk-radios govuk-radios--conditional'\"\n            data-module=\"govuk-radios\" *ngIf=\"isRemainingAmountLtZero\">\n            <div class=\"govuk-radios__item\" *ngFor=\"let reason of reasonList.shortFall | keyValue\">\n              <input class=\"govuk-radios__input\" id=\"{{reason.key}}\" name=\"paymentReason\" type=\"radio\"\n                [(ngModel)]=\"paymentReason\" value={{reason.value}}>\n              <label class=\"govuk-label govuk-radios__label govuk-font__custom\" for=\"how-contacted-conditional\">\n                {{reason.value}}\n              </label>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n      <div class=\"govuk-form-group\">\n        <fieldset class=\"govuk-fieldset\" aria-describedby=\"how-contacted-conditional-hint\">\n          <span id=\"how-contacted-conditional-hint\" class=\"govuk-hint\"\n            [ngClass]=\"{'inline-error-message': paymentExplanationHasError}\">\n            Provide an explanatory note\n          </span>\n          <div\n            [ngClass]=\"paymentExplanationHasError ? 'govuk-radios govuk-radios--conditional form-group-error' : 'govuk-radios govuk-radios--conditional'\"\n            data-module=\"govuk-radios\" *ngIf=\"isRemainingAmountGtZero\">\n            <div class=\"govuk-radios__item\" *ngFor=\"let explanation of explanationList.overPayment | keyValue\">\n              <input class=\"govuk-radios__input\" id=\"{{explanation.key}}\" name=\"paymentExplanation\" type=\"radio\"\n                [(ngModel)]=\"paymentExplanation\" value={{explanation.value}}\n                (click)=\"selectRadioButton(explanation.key, 'explanation')\">\n              <label class=\"govuk-label govuk-radios__label govuk-font__custom\" for=\"how-contacted-conditional\">\n                {{explanation.value}}\n              </label>\n            </div>\n          </div>\n          <div\n            [ngClass]=\"paymentExplanationHasError ? 'govuk-radios govuk-radios--conditional form-group-error' : 'govuk-radios govuk-radios--conditional'\"\n            data-module=\"govuk-radios\" *ngIf=\"isRemainingAmountLtZero\">\n            <div class=\"govuk-radios__item\" *ngFor=\"let explanation of explanationList.shortFall | keyValue\">\n              <input class=\"govuk-radios__input\" id=\"{{explanation.key}}\" name=\"paymentExplanation\" type=\"radio\"\n                [(ngModel)]=\"paymentExplanation\" value={{explanation.value}}\n                (click)=\"selectRadioButton(explanation.key, 'explanation')\">\n              <label class=\"govuk-label govuk-radios__label govuk-font__custom\" for=\"how-contacted-conditional\">\n                {{explanation.value}}\n              </label>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n    </div>\n\n    <form [formGroup]=\"overUnderPaymentForm\" novalidate>\n      <div\n        [ngClass]=\"isMoreDetailsBoxHide ? 'govuk-radios__conditional govuk-radios__conditional--hidden' : isPaymentDetailsEmpty || isPaymentDetailsInvalid || paymentDetailsMinHasError || paymentDetailsMaxHasError ? 'govuk-radios__conditional inline-error-border' : 'govuk-radios__conditional'\"\n        id=\"conditional-how-contacted-conditional-3\">\n        <div class=\"govuk-form-group\">\n          <span id=\"more-detail-hint\" class=\"govuk-hint govuk-font__custom\">\n            Please enter details\n          </span>\n          <textarea class=\"govuk-textarea\"\n            [ngClass]=\"{'inline-error-class': isPaymentDetailsEmpty || isPaymentDetailsInvalid || paymentDetailsMinHasError || paymentDetailsMaxHasError}\"\n            id=\"moreDetails\" name=\"moreDetails\" rows=\"5\" formControlName=\"moreDetails\">\n          </textarea>\n          <p class=\"inline-error-message\"\n            *ngIf=\"isPaymentDetailsEmpty || isPaymentDetailsInvalid || paymentDetailsMinHasError || paymentDetailsMaxHasError\">\n            <span *ngIf=\"isPaymentDetailsEmpty\">Enter a explanation</span>\n            <span *ngIf=\"isPaymentDetailsInvalid\">Enter a valid explanation</span>\n            <span *ngIf=\"paymentDetailsMinHasError\">Explanation should be at least 3 characters.</span>\n            <span *ngIf=\"paymentDetailsMaxHasError\">Explanation should be 255 characters or under.</span>\n          </p>\n        </div>\n      </div>\n      <div class=\"govuk-button--group\">\n        <button type=\"submit\" [disabled]=\"isConfirmButtondisabled\"\n          [ngClass]=\"isConfirmButtondisabled ? 'button button--disabled' : 'button'\"\n          (click)=\"confirmAllocatePayement()\">\n          Confirm\n        </button>\n        <button type=\"button\" class=\"button govuk-button--secondary\" (click)=\"cancelAllocatePayment($event)\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </ng-container>\n</div>", styles: [".allocate-payments{margin:20px 0}.allocate-payments .govuk-table__cell--col1,.allocate-payments .govuk-table__cell--col3{width:10%}.allocate-payments .govuk-table__cell--col2,.allocate-payments .govuk-table__cell--col6{width:25%}.allocate-payments .govuk-table__cell--col4,.allocate-payments .govuk-table__cell--col5{width:15%}.allocate-payments .govuk-button-group-allocate{display:flex;justify-content:flex-start}.allocate-payments .govuk-button--secondary{margin-left:10px;background-color:#b3b8bdf2}.allocate-payments .govuk-custom-warning__message{font-size:30px;position:relative;top:12px;font-weight:700}.allocate-payments .govuk-warning-text-custom{margin-bottom:0!important;padding:10px 0 5px}.allocate-payments .govuk-table__custom--col1{padding-top:0;padding-bottom:20px;padding-left:15px}.allocate-payments .govuk-table__custom--col6{text-align:center}.allocate-payments .govuk-list__custom{padding-left:20px}.allocate-payments .govuk-warning-text__custom,.allocate-payments .govuk-list__custom,.allocate-payments .govuk-heading-m--custom,.allocate-payments .govuk-label--m,.allocate-payments .govuk-radios__item,.allocate-payments .govuk-hint,.allocate-payments .govuk-font__custom{font-size:19px}.allocate-payments .govuk-radios__conditional--hidden{display:none}.allocate-payments .form-group-error{border-left:5px solid #b10e1e;padding-left:15px}.allocate-payments .inline-error-class{outline:3px solid #a71414;outline-offset:0}.allocate-payments .inline-error-message{color:#a71414;font-weight:700;margin-top:10px}.allocate-payments .inline-error-border{border-color:#a71414}.allbtb{margin-top:2em}.govuk-back-link{font-size:1.5rem!important}.multiple-choice{font-size:19px}.casererf{align-self:flex-end;font-size:19px}.paymentrequest{display:flex;flex-direction:row;justify-content:space-between;width:960px}\n"] }]
    }], function () { return [{ type: ErrorHandlerService }, { type: CaseTransactionsService }, { type: i1$1.FormBuilder }, { type: PaymentViewService }, { type: PaymentLibComponent }, { type: BulkScaningPaymentService }, { type: OrderslistService }]; }, { isTurnOff: [{
            type: Input
        }], caseType: [{
            type: Input
        }] }); })();

class SanitizeHtmlPipe {
    sanitizer;
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value) {
        return this.sanitizer.bypassSecurityTrustHtml(value);
    }
    static ɵfac = function SanitizeHtmlPipe_Factory(t) { return new (t || SanitizeHtmlPipe)(i0.ɵɵdirectiveInject(i2.DomSanitizer, 16)); };
    static ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "sanitizeHtml", type: SanitizeHtmlPipe, pure: true });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SanitizeHtmlPipe, [{
        type: Pipe,
        args: [{ name: 'sanitizeHtml' }]
    }], function () { return [{ type: i2.DomSanitizer }]; }, null); })();

const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
const EXCEL_EXTENSION = '.xlsx';
class XlFileService {
    constructor() { }
    exportAsExcelFile(json, excelFileName) {
        let worksheet;
        let workbook;
        if (excelFileName.match('Data_Loss') !== null) {
            worksheet = XLSX.utils.json_to_sheet(json, { header: ['loss_resp', 'payment_asset_dcn', 'env_ref', 'env_item', 'resp_service_id', 'resp_service_name', 'date_banked', 'bgc_batch', 'payment_method', 'amount'] });
            worksheet = this.setDataLossReportHeaders(worksheet);
            worksheet = this.autoFitColumns(worksheet, json);
        }
        else if (excelFileName.match('Unprocessed') !== null) {
            worksheet = XLSX.utils.json_to_sheet(json, { header: ['resp_service_id', 'resp_service_name', 'exception_ref', 'ccd_ref', 'date_banked', 'bgc_batch', 'payment_asset_dcn', 'env_ref', 'env_item', 'payment_method', 'amount'] });
            worksheet = this.setUnprocessedReportHeaders(worksheet);
            worksheet = this.autoFitColumns(worksheet, json);
        }
        else if (excelFileName.match('Processed_Unallocated') !== null) {
            worksheet = XLSX.utils.json_to_sheet(json, { header: ['resp_service_id', 'resp_service_name', 'allocation_status', 'receiving_office', 'allocation_reason', 'ccd_exception_reference', 'ccd_case_reference', 'payment_asset_dcn', 'env_ref', 'env_item', 'date_banked', 'bgc_batch', 'payment_method', 'amount'] });
            worksheet = this.setProcessedUnallocatedReportHeaders(worksheet);
            worksheet = this.autoFitColumns(worksheet, json);
        }
        else if (excelFileName.match('Payment failure') !== null) {
            worksheet = XLSX.utils.json_to_sheet(json, { header: ['payment_reference', 'ccd_reference', 'document_control_number', 'org_id', 'service_name', 'failure_reference', 'failure_reason', 'disputed_amount', 'event_name', 'event_date', 'representment_status', 'representment_date', 'refund_reference', 'refund_amount', 'refund_date'] });
            worksheet = this.setPaymentFailureReportHeaders(worksheet);
            worksheet = this.autoFitColumns(worksheet, json);
        }
        else {
            worksheet = XLSX.utils.json_to_sheet(json, { header: ['resp_service_id', 'resp_service_name', 'surplus_shortfall', 'balance', 'payment_amount', 'ccd_case_reference', 'ccd_exception_reference', 'processed_date', 'reason', 'explanation', 'user_name'] });
            worksheet = this.setShortFallReportHeaders(worksheet);
            worksheet = this.autoFitColumns(worksheet, json);
        }
        workbook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
        this.saveAsExcelFile(excelBuffer, excelFileName);
    }
    autoFitColumns(worksheet, json) {
        let objectMaxLength = [];
        let ColWidth = [];
        let obj = Object;
        for (let i = 0; i < json.length; i++) {
            let value = obj.values(json[i]);
            let key = obj.keys(json[i]);
            for (let j = 0; j < value.length; j++) {
                if (value[j] === null) {
                    value[j] = '';
                }
                objectMaxLength[j] =
                    key[j].length >= value[j].length
                        ? key[j].length + 2
                        : value[j].length + 1;
                if (value[j].length === undefined) {
                    objectMaxLength[j] = key[j].length + 2;
                }
                ColWidth.push({ 'width': +objectMaxLength[j] });
            }
        }
        worksheet['!cols'] = ColWidth;
        return worksheet;
    }
    setDataLossReportHeaders(worksheet) {
        worksheet.A1.v = "Loss_Resp";
        worksheet.B1.v = "Payment_Asset_DCN";
        worksheet.C1.v = "Envelope_Ref";
        worksheet.D1.v = "Envelope_Item";
        worksheet.E1.v = "Resp_Service ID";
        worksheet.F1.v = "Resp_Service Name";
        worksheet.G1.v = "Date_Banked";
        worksheet.H1.v = "BGC_Batch";
        worksheet.I1.v = "Payment_Method";
        worksheet.J1.v = "Amount";
        return worksheet;
    }
    setUnprocessedReportHeaders(worksheet) {
        worksheet.A1.v = "Resp_Service ID";
        worksheet.B1.v = "Resp_Service Name";
        worksheet.C1.v = "Exception_Ref";
        worksheet.D1.v = "CCD_Ref";
        worksheet.E1.v = "Date_Banked";
        worksheet.F1.v = "BGC_Batch";
        worksheet.G1.v = "Payment_Asset_DCN";
        worksheet.H1.v = "Envelope_Ref";
        worksheet.I1.v = "Envelope_Item";
        worksheet.J1.v = "Payment_Method";
        worksheet.K1.v = "Amount";
        return worksheet;
    }
    setProcessedUnallocatedReportHeaders(worksheet) {
        worksheet.A1.v = "Resp_Service ID";
        worksheet.B1.v = "Resp_Service Name";
        worksheet.C1.v = "Allocation_Status";
        worksheet.D1.v = "Receiving_Office";
        worksheet.E1.v = "Allocation_Reason";
        worksheet.F1.v = "CCD_Exception_Ref";
        worksheet.G1.v = "CCD_Case_Ref";
        worksheet.H1.v = "Payment_Asset_DCN";
        worksheet.I1.v = "Envelope_Ref";
        worksheet.J1.v = "Envelope_Item";
        worksheet.K1.v = "Date_Banked";
        worksheet.L1.v = "BGC_Batch";
        worksheet.M1.v = "Payment_Method";
        worksheet.N1.v = "Amount";
        return worksheet;
    }
    setPaymentFailureReportHeaders(worksheet) {
        worksheet.A1.v = "Payment reference";
        worksheet.B1.v = "CCD reference";
        worksheet.C1.v = "Document Control Number";
        worksheet.D1.v = "OrgID";
        worksheet.E1.v = "Service name";
        worksheet.F1.v = "Failure reference";
        worksheet.G1.v = "Failure reason";
        worksheet.H1.v = "Disputed amount";
        worksheet.I1.v = "Event name";
        worksheet.J1.v = "Event date";
        worksheet.K1.v = "Representment status";
        worksheet.L1.v = "Representment date";
        worksheet.M1.v = "Refund reference";
        worksheet.N1.v = "Refund amount";
        worksheet.O1.v = "Refund date";
        return worksheet;
    }
    setShortFallReportHeaders(worksheet) {
        worksheet.A1.v = "Resp_Service ID";
        worksheet.B1.v = "Resp_Service Name";
        worksheet.C1.v = "Over Payment_Under Payment";
        worksheet.D1.v = "Balance";
        worksheet.E1.v = "Payment_Amount";
        worksheet.F1.v = "CCD_Case_Ref";
        worksheet.G1.v = "Exception_Ref";
        worksheet.H1.v = "Processed_Date";
        worksheet.I1.v = "Reason";
        worksheet.J1.v = "Explanation";
        worksheet.K1.v = "Updated Name";
        return worksheet;
    }
    saveAsExcelFile(buffer, fileName) {
        const data = new Blob([buffer], {
            type: EXCEL_TYPE
        });
        FileSaver.saveAs(data, fileName + EXCEL_EXTENSION);
    }
    static ɵfac = function XlFileService_Factory(t) { return new (t || XlFileService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: XlFileService, factory: XlFileService.ɵfac });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(XlFileService, [{
        type: Injectable
    }], function () { return []; }, null); })();

function ReportsComponent_ccpay_error_banner_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ccpay-error-banner", 29);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("errorMessage", ctx_r1.errorMessage);
} }
function ReportsComponent_div_34_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 9)(1, "input", 30);
    i0.ɵɵlistener("click", function ReportsComponent_div_34_Template_input_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.validateDates("PAYMENT_FAILURE_EVENT")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(2, "label", 31);
    i0.ɵɵtext(3, "Payment failure event");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "span", 12);
    i0.ɵɵtext(5, "Failed payment transaction details");
    i0.ɵɵelementEnd()();
} }
function ReportsComponent_p_44_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Please select 'Date From' less than or equal to 'Date To'");
    i0.ɵɵelementEnd();
} }
function ReportsComponent_p_44_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, " Please select the date range between 7 days");
    i0.ɵɵelementEnd();
} }
function ReportsComponent_p_44_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, " Please select the date range between 30 days");
    i0.ɵɵelementEnd();
} }
function ReportsComponent_p_44_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 32);
    i0.ɵɵtemplate(1, ReportsComponent_p_44_span_1_Template, 2, 0, "span", 33);
    i0.ɵɵtemplate(2, ReportsComponent_p_44_span_2_Template, 2, 0, "span", 33);
    i0.ɵɵtemplate(3, ReportsComponent_p_44_span_3_Template, 2, 0, "span", 33);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.isStartDateLesthanEndDate);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.isDateRangeBetnWeek);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r3.isDateBetwnMonth);
} }
class ReportsComponent {
    xlFileService;
    errorHandlerService;
    formBuilder;
    bulkScaningPaymentService;
    paymentViewService;
    ISPAYMENTSTATUSENABLED;
    fmt = 'dd/MM/yyyy';
    loc = 'en-US';
    reportsForm;
    startDate;
    endDate;
    errorMeaagse;
    ccdCaseNumber;
    isDownLoadButtondisabled = false;
    isStartDateLesthanEndDate = false;
    isDateBetwnMonth = false;
    isDateRangeBetnWeek = false;
    //errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
    errorMessage = null;
    paymentGroups = [];
    constructor(xlFileService, errorHandlerService, formBuilder, bulkScaningPaymentService, paymentViewService) {
        this.xlFileService = xlFileService;
        this.errorHandlerService = errorHandlerService;
        this.formBuilder = formBuilder;
        this.bulkScaningPaymentService = bulkScaningPaymentService;
        this.paymentViewService = paymentViewService;
    }
    ngOnInit() {
        this.fromValidation();
    }
    getToday() {
        return new Date().toISOString().split('T')[0];
    }
    getSelectedFromDate() {
        this.validateDates(this.reportsForm.get('selectedreport').value);
    }
    validateDates(reportName) {
        const selectedStartDate = this.tranformDate(this.reportsForm.get('startDate').value), selectedEndDate = this.tranformDate(this.reportsForm.get('endDate').value);
        const isDateRangeMoreThanWeek = (new Date(selectedStartDate) - new Date(selectedEndDate)) / (1000 * 3600 * -24) > 7;
        const isDateRangeMoreThanMonth = (new Date(selectedStartDate) - new Date(selectedEndDate)) / (1000 * 3600 * -24) > 30;
        if (new Date(selectedStartDate) > new Date(selectedEndDate) && selectedEndDate !== '') {
            this.reportsForm.get('startDate').setValue('');
            this.isDateRangeBetnWeek = false;
            this.isDateBetwnMonth = false;
            this.isStartDateLesthanEndDate = true;
        }
        else if (reportName && reportName === 'SURPLUS_AND_SHORTFALL' && isDateRangeMoreThanWeek) {
            this.isDateRangeBetnWeek = true;
            this.isDateBetwnMonth = false;
            this.isStartDateLesthanEndDate = false;
        }
        else if (reportName && reportName === 'PAYMENT_FAILURE_EVENT' && isDateRangeMoreThanMonth) {
            this.isDateRangeBetnWeek = false;
            this.isDateBetwnMonth = true;
            this.isStartDateLesthanEndDate = false;
        }
        else {
            this.isDateBetwnMonth = false;
            this.isDateRangeBetnWeek = false;
            this.isStartDateLesthanEndDate = false;
        }
    }
    fromValidation() {
        this.reportsForm = this.formBuilder.group({
            selectedreport: new FormControl(''),
            startDate: new FormControl(''),
            endDate: new FormControl('')
        });
    }
    downloadReport() {
        this.isDownLoadButtondisabled = true;
        const dataLossRptDefault = [{ loss_resp: '', payment_asset_dcn: '', env_ref: '', env_item: '', resp_service_id: '', resp_service_name: '', date_banked: '', bgc_batch: '', payment_method: '', amount: '' }], unProcessedRptDefault = [{ resp_service_id: '', resp_service_name: '', exception_ref: '', ccd_ref: '', date_banked: '', bgc_batch: '', payment_asset_dcn: '', env_ref: '', env_item: '', payment_method: '', amount: '' }], processedUnallocated = [{ resp_service_id: '', resp_service_name: '', allocation_status: '', receiving_office: '', allocation_reason: '', ccd_exception_ref: '', ccd_case_ref: '', payment_asset_dcn: '', env_ref: '', env_item: '', date_banked: '', bgc_batch: '', payment_method: '', amount: '', updated_by: '' }], shortFallsRptDefault = [{ resp_service_id: '', resp_service_name: '', surplus_shortfall: '', balance: '', payment_amount: '', ccd_case_reference: '', ccd_exception_reference: '', processed_date: '', reason: '', explanation: '', user_name: '' }], selectedReportName = this.reportsForm.get('selectedreport').value, selectedStartDate = this.tranformDate(this.reportsForm.get('startDate').value), selectedEndDate = this.tranformDate(this.reportsForm.get('endDate').value);
        if (selectedReportName === 'PROCESSED_UNALLOCATED' || selectedReportName === 'SURPLUS_AND_SHORTFALL') {
            this.paymentViewService.downloadSelectedReport(selectedReportName, selectedStartDate, selectedEndDate).subscribe(response => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                const result = JSON.parse(response);
                let res = { data: this.applyDateFormat(result) };
                if (res['data'].length === 0 && selectedReportName === 'PROCESSED_UNALLOCATED') {
                    res.data = processedUnallocated;
                }
                else if (res['data'].length === 0 && selectedReportName === 'SURPLUS_AND_SHORTFALL') {
                    res.data = shortFallsRptDefault;
                }
                if (result['data'].length > 0) {
                    for (var i = 0; i < res['data'].length; i++) {
                        if (res['data'][i]["payment_asset_dcn"] !== undefined) {
                            res['data'][i]['env_ref'] = res['data'][i]["payment_asset_dcn"].substr(0, 13);
                            res['data'][i]['env_item'] = res['data'][i]["payment_asset_dcn"].substr(13, 21);
                        }
                        if (res['data'][i]["amount"] !== undefined) {
                            res['data'][i]['amount'] = this.convertToFloatValue(res['data'][i]['amount']);
                        }
                        if (res['data'][i]["balance"] !== undefined) {
                            res['data'][i]['balance'] = this.convertToFloatValue(res['data'][i]["balance"]);
                        }
                        let Op = res['data'][i]["surplus_shortfall"];
                        if (Op !== undefined) {
                            res['data'][i]['surplus_shortfall'] = Op == "Surplus" ? "Over payment" : "Under payment";
                        }
                        if (res['data'][i]["payment_amount"] !== undefined) {
                            res['data'][i]['payment_amount'] = this.convertToFloatValue(res['data'][i]['payment_amount']);
                        }
                    }
                }
                this.isDownLoadButtondisabled = false;
                this.xlFileService.exportAsExcelFile(res['data'], this.getFileName(this.reportsForm.get('selectedreport').value, selectedStartDate, selectedEndDate));
            }, (error) => {
                this.isDownLoadButtondisabled = false;
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
            });
        }
        else if (selectedReportName === 'PAYMENT_FAILURE_EVENT') {
            this.paymentViewService.downloadFailureReport(selectedStartDate, selectedEndDate).subscribe(response => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                const result = { data: JSON.parse(response)['payment_failure_report_list'] };
                let res = { data: this.applyDateFormat(result) };
                if (result['data'].length > 0) {
                    for (var i = 0; i < res['data'].length; i++) {
                        if (res['data'][i]["disputed_amount"] !== undefined) {
                            res['data'][i]['disputed_amount'] = this.convertToFloatValue(res['data'][i]["disputed_amount"]);
                        }
                        if (res['data'][i]["representment_status"] !== undefined) {
                            res['data'][i]['representment_status'] = res['data'][i]["representment_status"].toLowerCase() === 'yes' ? 'Success' : 'Failure';
                        }
                        if (res['data'][i]['representment_status'] === undefined) {
                            res['data'][i]['representment_status'] = 'No representment received';
                        }
                        if (res['data'][i]['representment_date'] === undefined) {
                            res['data'][i]['representment_date'] = 'N/A';
                        }
                        if (res['data'][i]['refund_reference'] === undefined) {
                            res['data'][i]['refund_reference'] = 'No refund available';
                        }
                        if (res['data'][i]['refund_amount'] === undefined) {
                            res['data'][i]['refund_amount'] = 'N/A';
                        }
                        if (res['data'][i]['refund_date'] === undefined) {
                            res['data'][i]['refund_date'] = 'N/A';
                        }
                        if (res['data'][i]['document_control_number'] === undefined) {
                            res['data'][i]['document_control_number'] = 'N/A';
                        }
                    }
                }
                this.isDownLoadButtondisabled = false;
                this.xlFileService.exportAsExcelFile(res['data'], this.getFileName(this.reportsForm.get('selectedreport').value, selectedStartDate, selectedEndDate));
            }, (error) => {
                this.isDownLoadButtondisabled = false;
                const errorContent = error.replace(/[^a-zA-Z ]/g, '').trim();
                const statusCode = error.replace(/[^a-zA-Z0-9 ]/g, '').trim().split(' ')[0];
                if (statusCode === '404') {
                    this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, true, errorContent);
                }
                else {
                    this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
                }
            });
        }
        else {
            this.bulkScaningPaymentService.downloadSelectedReport(selectedReportName, selectedStartDate, selectedEndDate).subscribe(response => {
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(false, false, '');
                const result = JSON.parse(response);
                let res = { data: this.applyDateFormat(result) };
                if (res['data'].length === 0 && selectedReportName === 'DATA_LOSS') {
                    res.data = dataLossRptDefault;
                }
                else if (res['data'].length === 0 && selectedReportName === 'UNPROCESSED') {
                    res.data = unProcessedRptDefault;
                }
                if (result['data'].length > 0) {
                    for (var i = 0; i < res['data'].length; i++) {
                        if (res['data'][i]["amount"] !== undefined) {
                            res['data'][i]['amount'] = this.convertToFloatValue(res['data'][i]['amount']);
                        }
                        if (res['data'][i]["payment_asset_dcn"] !== undefined) {
                            res['data'][i]['env_ref'] = res['data'][i]["payment_asset_dcn"].substr(0, 13);
                            res['data'][i]['env_item'] = res['data'][i]["payment_asset_dcn"].substr(13, 21);
                        }
                    }
                }
                this.isDownLoadButtondisabled = false;
                this.xlFileService.exportAsExcelFile(res['data'], this.getFileName(this.reportsForm.get('selectedreport').value, selectedStartDate, selectedEndDate));
            }, (error) => {
                this.isDownLoadButtondisabled = false;
                this.errorMessage = this.errorHandlerService.getServerErrorMessage(true, false, '');
            });
        }
    }
    getFileName(selectedOption, startDate, endDate) {
        const loc = 'en-US', stDt = formatDate(startDate, 'ddMMyy', loc), enDt = formatDate(endDate, 'ddMMyy', loc), now = new Date(), currentDate = formatDate(now, 'ddMMyy', loc), timestamp = `${currentDate}_${this.getTwodigit(now.getHours())}${this.getTwodigit(now.getMinutes())}${this.getTwodigit(now.getSeconds())}`, selectedOptionTxt = this.getCamelCaseString(selectedOption);
        return selectedOptionTxt + '_' + stDt + '_To_' + enDt + '_Run_' + timestamp;
    }
    tranformDate(strDate) {
        let result = '';
        if (strDate) {
            let parts = strDate.split('-');
            result = `${parts[1]}/${parts[2]}/${parts[0]}`;
        }
        return result;
    }
    getTwodigit(input) {
        return ("0" + input).slice(-2);
    }
    getCamelCaseString(selectedOption) {
        let result;
        switch (selectedOption) {
            case 'UNPROCESSED': {
                result = 'Unprocessed';
                break;
            }
            case 'DATA_LOSS': {
                result = 'Data_Loss';
                break;
            }
            case 'PROCESSED_UNALLOCATED': {
                result = 'Processed_Unallocated';
                break;
            }
            case 'SURPLUS_AND_SHORTFALL': {
                result = 'Over Payment_Under Payment';
                break;
            }
            case 'PAYMENT_FAILURE_EVENT': {
                result = 'Payment failure event';
                break;
            }
            default: {
                result = selectedOption;
                break;
            }
        }
        return result;
    }
    applyDateFormat(res) {
        return res['data'].map(value => {
            if (value['date_banked']) {
                value['date_banked'] = formatDate(value['date_banked'], this.fmt, this.loc);
            }
            if (value['event_date'] && value['event_date'].indexOf(',') === -1) {
                value['event_date'] = formatDate(value['event_date'], this.fmt, this.loc);
            }
            else if (value['event_date'] && value['event_date'].indexOf(',') !== -1) {
                value['event_date'] = this.multiDateFormater(value['event_date']);
            }
            if (value['representment_date'] && value['representment_date'].indexOf(',') === -1) {
                value['representment_date'] = formatDate(value['representment_date'], this.fmt, this.loc);
            }
            else if (value['representment_date'] && value['representment_date'].indexOf(',') !== -1) {
                value['representment_date'] = this.multiDateFormater(value['representment_date']);
            }
            if (value['refund_date'] && value['refund_date'].indexOf(',') === -1) {
                value['refund_date'] = formatDate(value['refund_date'], this.fmt, this.loc);
            }
            else if (value['refund_date'] && value['refund_date'].indexOf(',') !== -1) {
                value['refund_date'] = this.multiDateFormater(value['refund_date']);
            }
            return value;
        });
    }
    multiDateFormater(dateStr) {
        return dateStr.split(',').map((date) => formatDate(date, this.fmt, this.loc)).join(',');
    }
    convertToFloatValue(amt) {
        return amt ? Number.parseFloat(amt).toFixed(2) : '0.00';
    }
    static ɵfac = function ReportsComponent_Factory(t) { return new (t || ReportsComponent)(i0.ɵɵdirectiveInject(XlFileService), i0.ɵɵdirectiveInject(ErrorHandlerService), i0.ɵɵdirectiveInject(i1$1.FormBuilder), i0.ɵɵdirectiveInject(BulkScaningPaymentService), i0.ɵɵdirectiveInject(PaymentViewService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ReportsComponent, selectors: [["ccpay-reports"]], inputs: { ISPAYMENTSTATUSENABLED: "ISPAYMENTSTATUSENABLED" }, decls: 48, vars: 7, consts: [[1, "header"], ["type", "hidden", "value", "REPORTS", 1, "iFrameDrivenImageValue"], ["myInput", ""], [3, "errorMessage", 4, "ngIf"], [1, "govuk-fieldset__legend--xl"], [1, "govuk-fieldset__heading"], [3, "formGroup"], [1, "govuk-form-group"], ["data-module", "govuk-radios", 1, "govuk-radios", "govuk-radios--conditional"], [1, "govuk-radios__item"], ["required", "", "id", "DataLoss", "formControlName", "selectedreport", "name", "selectedreport", "type", "radio", "value", "DATA_LOSS", "data-aria-controls", "DataLoss", 1, "govuk-radios__input", 3, "click"], ["for", "DataLoss", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], [1, "form-hint"], ["id", "UnprocessedTransactions", "formControlName", "selectedreport", "name", "selectedreport", "type", "radio", "value", "UNPROCESSED", "data-aria-controls", "UnprocessedTransactions", 1, "govuk-radios__input", 3, "click"], ["for", "UnprocessedTransactions", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], ["id", "ProcessedUnallocated", "formControlName", "selectedreport", "name", "selectedreport", "type", "radio", "value", "PROCESSED_UNALLOCATED", "data-aria-controls", "ProcessedUnallocated", 1, "govuk-radios__input", 3, "click"], ["for", "ProcessedUnallocated", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], ["id", "ShortfallsandSurplus", "formControlName", "selectedreport", "name", "selectedreport", "type", "radio", "value", "SURPLUS_AND_SHORTFALL", "data-aria-controls", "ShortfallsandSurplus", 1, "govuk-radios__input", 3, "click"], ["for", "ShortfallsandSurplus", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], ["class", "govuk-radios__item", 4, "ngIf"], [1, "datefrom"], ["for", "date-from", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], ["id", "date-from", "name", "date-from", "type", "date", "formControlName", "startDate", "required", "", 1, "form-control", 3, "max", "change"], [1, "dateto"], ["for", "date-to", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], ["id", "date-to", "name", "search", "type", "date", "formControlName", "endDate", "required", "", 1, "form-control", 3, "max", "change"], ["class", "inline-error-message", 4, "ngIf"], [1, "btnsubmit"], ["type", "submit", 1, "button", 3, "disabled", "click"], [3, "errorMessage"], ["id", "PaymentFailureEvent", "formControlName", "selectedreport", "name", "selectedreport", "type", "radio", "value", "PAYMENT_FAILURE_EVENT", "data-aria-controls", "PaymentFailureEvent", 1, "govuk-radios__input", 3, "click"], ["for", "PaymentFailureEvent", 1, "govuk-label", "govuk-radios__label", "govuk-label--m"], [1, "inline-error-message"], [4, "ngIf"]], template: function ReportsComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵelement(1, "input", 1, 2);
            i0.ɵɵtemplate(3, ReportsComponent_ccpay_error_banner_3_Template, 1, 1, "ccpay-error-banner", 3);
            i0.ɵɵelementStart(4, "legend", 4)(5, "h1", 5);
            i0.ɵɵtext(6, " Choose the report type and date range");
            i0.ɵɵelementEnd()()();
            i0.ɵɵelementStart(7, "form", 6)(8, "div", 7)(9, "div", 8)(10, "div", 9)(11, "input", 10);
            i0.ɵɵlistener("click", function ReportsComponent_Template_input_click_11_listener() { return ctx.validateDates("DATA_LOSS"); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(12, "label", 11);
            i0.ɵɵtext(13, "Data loss");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(14, "span", 12);
            i0.ɵɵtext(15, "Missing transactions where data has been received from only either of Exela or Bulk scan");
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(16, "div", 9)(17, "input", 13);
            i0.ɵɵlistener("click", function ReportsComponent_Template_input_click_17_listener() { return ctx.validateDates("UNPROCESSED"); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(18, "label", 14);
            i0.ɵɵtext(19, "Unprocessed transactions");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(20, "span", 12);
            i0.ɵɵtext(21, "Transaction records that are still unprocessed by staff.");
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(22, "div", 9)(23, "input", 15);
            i0.ɵɵlistener("click", function ReportsComponent_Template_input_click_23_listener() { return ctx.validateDates("PROCESSED_UNALLOCATED"); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(24, "label", 16);
            i0.ɵɵtext(25, "Processed unallocated");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(26, "span", 12);
            i0.ɵɵtext(27, "Payments that are marked as \u2018Unidentified\u2019 or \u2018Transferred\u2019 (Unsolicited requests)");
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(28, "div", 9)(29, "input", 17);
            i0.ɵɵlistener("click", function ReportsComponent_Template_input_click_29_listener() { return ctx.validateDates("SURPLUS_AND_SHORTFALL"); });
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(30, "label", 18);
            i0.ɵɵtext(31, "Under payment and Over payment");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(32, "span", 12);
            i0.ɵɵtext(33, "Requests where balances are marked as Under payment/Over payment further case management. E.g: Refund approval, Customer contact");
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(34, ReportsComponent_div_34_Template, 6, 0, "div", 19);
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(35, "div", 7)(36, "div", 20)(37, "label", 21);
            i0.ɵɵtext(38, "Date from");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(39, "input", 22);
            i0.ɵɵlistener("change", function ReportsComponent_Template_input_change_39_listener() { return ctx.getSelectedFromDate(); });
            i0.ɵɵelementEnd()();
            i0.ɵɵelementStart(40, "div", 23)(41, "label", 24);
            i0.ɵɵtext(42, "Date to");
            i0.ɵɵelementEnd();
            i0.ɵɵelementStart(43, "input", 25);
            i0.ɵɵlistener("change", function ReportsComponent_Template_input_change_43_listener() { return ctx.getSelectedFromDate(); });
            i0.ɵɵelementEnd()()();
            i0.ɵɵtemplate(44, ReportsComponent_p_44_Template, 4, 3, "p", 26);
            i0.ɵɵelementStart(45, "div", 27)(46, "button", 28);
            i0.ɵɵlistener("click", function ReportsComponent_Template_button_click_46_listener() { return ctx.downloadReport(); });
            i0.ɵɵtext(47, "Download report");
            i0.ɵɵelementEnd()()();
        } if (rf & 2) {
            i0.ɵɵadvance(3);
            i0.ɵɵproperty("ngIf", ctx.errorMessage.showError);
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("formGroup", ctx.reportsForm);
            i0.ɵɵadvance(27);
            i0.ɵɵproperty("ngIf", ctx.ISPAYMENTSTATUSENABLED);
            i0.ɵɵadvance(5);
            i0.ɵɵproperty("max", ctx.getToday());
            i0.ɵɵadvance(4);
            i0.ɵɵproperty("max", ctx.getToday());
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngIf", ctx.isStartDateLesthanEndDate || ctx.isDateRangeBetnWeek || ctx.isDateBetwnMonth);
            i0.ɵɵadvance(2);
            i0.ɵɵproperty("disabled", !ctx.reportsForm.valid || ctx.isDownLoadButtondisabled || ctx.isStartDateLesthanEndDate || ctx.isDateRangeBetnWeek);
        } }, dependencies: [i3.NgIf, i1$1.ɵNgNoValidate, i1$1.DefaultValueAccessor, i1$1.RadioControlValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.RequiredValidator, i1$1.FormGroupDirective, i1$1.FormControlName, ErrorBannerComponent], styles: [".govuk-radios__input[_ngcontent-%COMP%]:focus + .govuk-radios__label[_ngcontent-%COMP%]:before{border-width:4px;box-shadow:0 0 0 4px #ffaf00}.datefrom[_ngcontent-%COMP%]{width:50%;float:left}.dateto[_ngcontent-%COMP%]{width:50%;float:right}.govuk-label--m[_ngcontent-%COMP%]{font-size:large}.form-hint[_ngcontent-%COMP%]{padding-left:.7em}.header[_ngcontent-%COMP%]{margin-top:10px;margin-bottom:15px}.btnsubmit[_ngcontent-%COMP%]{margin-bottom:30px}.inline-error-message[_ngcontent-%COMP%]{color:#a71414;font-weight:700;margin-top:10px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ReportsComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-reports', template: "<div class=\"header\">\n      <input #myInput type='hidden' class='iFrameDrivenImageValue' value='REPORTS'>\n      <ccpay-error-banner *ngIf=\"errorMessage.showError\" [errorMessage]=\"errorMessage\"></ccpay-error-banner>\n      <legend class=\"govuk-fieldset__legend--xl\">\n         <h1 class=\"govuk-fieldset__heading\"> Choose the report type and date range</h1>\n      </legend>\n</div>\n<form [formGroup]=\"reportsForm\">\n     <div  class=\"govuk-form-group\">\n        <div class=\"govuk-radios govuk-radios--conditional\" data-module=\"govuk-radios\">\n          <div  class=\"govuk-radios__item\">\n              <input \n              required\n              id=\"DataLoss\"\n              class=\"govuk-radios__input\"\n              formControlName=\"selectedreport\"\n              (click)=\"validateDates('DATA_LOSS')\"\n              name=\"selectedreport\"\n              type=\"radio\"\n              value=\"DATA_LOSS\" \n               data-aria-controls=\"DataLoss\"/>\n              <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"DataLoss\">Data loss</label>\n              <span class=\"form-hint\">Missing transactions where data has been received from only either of Exela or Bulk scan</span>\n          </div>\n\n         <div class=\"govuk-radios__item\">\n              <input \n              id=\"UnprocessedTransactions\"\n              class=\"govuk-radios__input\"\n              formControlName=\"selectedreport\"\n              (click)=\"validateDates('UNPROCESSED')\"\n              name=\"selectedreport\"\n              type=\"radio\"\n              value=\"UNPROCESSED\" \n              data-aria-controls=\"UnprocessedTransactions\"/>\n              <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"UnprocessedTransactions\">Unprocessed transactions</label>\n              <span class=\"form-hint\">Transaction records that are still unprocessed by staff.</span>\n         </div>\n\n         <div class=\"govuk-radios__item\">\n            <input \n            id=\"ProcessedUnallocated\"\n            class=\"govuk-radios__input\"\n            formControlName=\"selectedreport\"\n            name=\"selectedreport\"\n            (click)=\"validateDates('PROCESSED_UNALLOCATED')\"\n            type=\"radio\"\n            value=\"PROCESSED_UNALLOCATED\" \n            data-aria-controls=\"ProcessedUnallocated\"/>\n            <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"ProcessedUnallocated\">Processed unallocated</label>\n            <span class=\"form-hint\">Payments that are marked as \u2018Unidentified\u2019 or \u2018Transferred\u2019 (Unsolicited requests)</span>\n         </div>\n\n         <div class=\"govuk-radios__item\">\n            <input \n            id=\"ShortfallsandSurplus\"\n            class=\"govuk-radios__input\"\n            formControlName=\"selectedreport\"\n            name=\"selectedreport\"\n            (click)=\"validateDates('SURPLUS_AND_SHORTFALL')\"\n            type=\"radio\"\n            value=\"SURPLUS_AND_SHORTFALL\" \n            data-aria-controls=\"ShortfallsandSurplus\"/>\n            <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"ShortfallsandSurplus\">Under payment and Over payment</label>\n            <span class=\"form-hint\">Requests where balances are marked as Under payment/Over payment further case management.\n               E.g: Refund approval, Customer contact</span>\n         </div>\n         <div class=\"govuk-radios__item\" *ngIf=\"ISPAYMENTSTATUSENABLED\">\n            <input \n            id=\"PaymentFailureEvent\"\n            class=\"govuk-radios__input\"\n            formControlName=\"selectedreport\"\n            name=\"selectedreport\"\n            (click)=\"validateDates('PAYMENT_FAILURE_EVENT')\"\n            type=\"radio\"\n            value=\"PAYMENT_FAILURE_EVENT\" \n            data-aria-controls=\"PaymentFailureEvent\"/>\n            <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"PaymentFailureEvent\">Payment failure event</label>\n            <span class=\"form-hint\">Failed payment transaction details</span>\n         </div>\n       </div>\n     </div>\n     <div  class=\"govuk-form-group\">\n      <div class=\"datefrom\">\n      <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"date-from\">Date from</label>\n      <input (change)=\"getSelectedFromDate()\" [max]=\"getToday()\" class=\"form-control\" id=\"date-from\" name=\"date-from\" type=\"date\"  formControlName=\"startDate\" required/>\n      </div>\n\n      <div class=\"dateto\">\n      <label class=\"govuk-label govuk-radios__label govuk-label--m\" for=\"date-to\">Date to</label>\n      <input (change)=\"getSelectedFromDate()\" [max]=\"getToday()\" class=\"form-control\" id=\"date-to\" name=\"search\" type=\"date\" formControlName=\"endDate\" required/>\n      </div>\n     </div>\n   <p class=\"inline-error-message\" *ngIf=\"isStartDateLesthanEndDate || isDateRangeBetnWeek || isDateBetwnMonth\">\n      <span *ngIf=\"isStartDateLesthanEndDate\">Please select 'Date From' less than or equal to 'Date To'</span>\n      <span *ngIf=\"isDateRangeBetnWeek\"> Please select the date range between 7 days</span>\n      <span *ngIf=\"isDateBetwnMonth\"> Please select the date range between 30 days</span>\n   </p>\n    <div class=\"btnsubmit\">\n     <button type=\"submit\" (click)=\"downloadReport()\" class=\"button\" [disabled]=\"!reportsForm.valid || isDownLoadButtondisabled || isStartDateLesthanEndDate || isDateRangeBetnWeek\">Download report</button>\n   </div>\n </form>\n    \n", styles: [".govuk-radios__input:focus+.govuk-radios__label:before{border-width:4px;box-shadow:0 0 0 4px #ffaf00}.datefrom{width:50%;float:left}.dateto{width:50%;float:right}.govuk-label--m{font-size:large}.form-hint{padding-left:.7em}.header{margin-top:10px;margin-bottom:15px}.btnsubmit{margin-bottom:30px}.inline-error-message{color:#a71414;font-weight:700;margin-top:10px}\n"] }]
    }], function () { return [{ type: XlFileService }, { type: ErrorHandlerService }, { type: i1$1.FormBuilder }, { type: BulkScaningPaymentService }, { type: PaymentViewService }]; }, { ISPAYMENTSTATUSENABLED: [{
            type: Input
        }] }); })();

class IserviceRequestCardPayment {
    amount;
    currency;
    language;
    constructor(amount) {
        this.amount = amount;
        this.currency = 'GBP';
        this.language = 'string';
    }
}

class IserviceRequestPbaPayment {
    account_number;
    amount;
    currency;
    customer_reference;
    organisation_name;
    constructor(account_number, amount, customer_reference, orgName) {
        this.account_number = account_number;
        this.amount = amount;
        this.currency = 'GBP';
        this.customer_reference = customer_reference;
        this.organisation_name = orgName;
    }
}

function PbaPaymentComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3)(1, "ol", 4)(2, "li", 5)(3, "a", 6);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_div_1_Template_a_click_3_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r10.gotoCasetransationPage()); });
    i0.ɵɵtext(4, "Back");
    i0.ɵɵelementEnd()()()();
} }
function PbaPaymentComponent_ng_container_0_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14)(1, "h2", 15);
    i0.ɵɵtext(2, " There is a problem ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 16)(4, "ul", 17)(5, "li", 18);
    i0.ɵɵtext(6, " Your PBA account cannot be found. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "li", 18);
    i0.ɵɵtext(8, " If you know your organisation has a PBA, try again. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "li", 18);
    i0.ɵɵtext(10, " You can also pay by credit or debit card. ");
    i0.ɵɵelementEnd()()()();
} }
function PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_option_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 34);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const pbaAccount_r19 = ctx.$implicit;
    i0.ɵɵpropertyInterpolate("value", pbaAccount_r19);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(pbaAccount_r19);
} }
function PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 19)(1, "label", 35);
    i0.ɵɵtext(2, " Enter a reference for your PBA account statements ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 36);
    i0.ɵɵtext(4, " This should be your own unique reference to identify the case. It will appear on your statements. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "input", 37);
    i0.ɵɵlistener("change", function PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_div_8_Template_input_change_5_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(5); return i0.ɵɵresetView(ctx_r20.selectpbaaccount($event)); });
    i0.ɵɵelementEnd()();
} }
function PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 28)(1, "div", 29)(2, "label", 30);
    i0.ɵɵtext(3, " Select a PBA ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "select", 31);
    i0.ɵɵlistener("change", function PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_Template_select_change_4_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(4); return i0.ɵɵresetView(ctx_r22.selectpbaaccount($event)); });
    i0.ɵɵelementStart(5, "option", 32);
    i0.ɵɵtext(6, "Select option");
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(7, PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_option_7_Template, 2, 2, "option", 33);
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(8, PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_div_8_Template, 6, 0, "div", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngForOf", ctx_r16.pbaAccountList);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r16.errorMsg && ctx_r16.selectedPbaAccount);
} }
function PbaPaymentComponent_ng_container_0_div_2_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 19)(1, "fieldset", 20)(2, "div", 21)(3, "div", 22)(4, "input", 23);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_div_2_div_8_Template_input_click_4_listener() { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r24.selectPaymentMethod("PBA")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "label", 24);
    i0.ɵɵtext(6, " Pay fee using Payment by Account (PBA) ");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(7, PbaPaymentComponent_ng_container_0_div_2_div_8_div_7_Template, 9, 2, "div", 25);
    i0.ɵɵelementStart(8, "div", 22)(9, "input", 26);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_div_2_div_8_Template_input_click_9_listener() { i0.ɵɵrestoreView(_r25); const ctx_r26 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r26.selectPaymentMethod("CARD")); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "label", 27);
    i0.ɵɵtext(11, " Pay by credit or debit card ");
    i0.ɵɵelementEnd()()()()();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", ctx_r13.isPbaAccountSelected);
} }
function PbaPaymentComponent_ng_container_0_div_2_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 38)(1, "button", 39);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_div_2_div_9_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r28); const ctx_r27 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r27.gotoCasetransationPage()); });
    i0.ɵɵtext(2, " View Service Request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "button", 40);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_div_2_div_9_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r28); const ctx_r29 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r29.cardPayment()); });
    i0.ɵɵtext(4, " Pay by card ");
    i0.ɵɵelementEnd()();
} }
function PbaPaymentComponent_ng_container_0_div_2_div_10_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Continue");
    i0.ɵɵelementEnd();
} }
function PbaPaymentComponent_ng_container_0_div_2_div_10_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "Confirm payment");
    i0.ɵɵelementEnd();
} }
function PbaPaymentComponent_ng_container_0_div_2_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r33 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 38)(1, "button", 41);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_div_2_div_10_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r33); const ctx_r32 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r32.saveAndContinue()); });
    i0.ɵɵtemplate(2, PbaPaymentComponent_ng_container_0_div_2_div_10_span_2_Template, 2, 0, "span", 0);
    i0.ɵɵtemplate(3, PbaPaymentComponent_ng_container_0_div_2_div_10_span_3_Template, 2, 0, "span", 0);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", ctx_r15.isContinueButtondisabled);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r15.isPBADropdownSelected);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r15.isPBADropdownSelected);
} }
function PbaPaymentComponent_ng_container_0_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtemplate(1, PbaPaymentComponent_ng_container_0_div_2_div_1_Template, 11, 0, "div", 8);
    i0.ɵɵelementStart(2, "div", 9)(3, "label", 10);
    i0.ɵɵtext(4, " Amount to pay ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "span", 11);
    i0.ɵɵtext(6);
    i0.ɵɵpipe(7, "currency");
    i0.ɵɵelementEnd()();
    i0.ɵɵtemplate(8, PbaPaymentComponent_ng_container_0_div_2_div_8_Template, 12, 1, "div", 12);
    i0.ɵɵtemplate(9, PbaPaymentComponent_ng_container_0_div_2_div_9_Template, 5, 0, "div", 13);
    i0.ɵɵtemplate(10, PbaPaymentComponent_ng_container_0_div_2_div_10_Template, 4, 3, "div", 13);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.errorMsg);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(7, 5, ctx_r2.pbaPayOrderRef.orderTotalFees, "GBP", "symbol", "1.2-2"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r2.errorMsg);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.errorMsg);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r2.errorMsg);
} }
function PbaPaymentComponent_ng_container_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r35 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 45)(5, "span", 46);
    i0.ɵɵtext(6, "!");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "strong", 47)(8, "span", 48);
    i0.ɵɵtext(9, "Warning");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(10, "h2", 49);
    i0.ɵɵtext(11, "You don\u2019t have a registered PBA.");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(12, "div", 50)(13, "h2", 51);
    i0.ɵɵtext(14, "Pay by credit or debit card");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(15, "p", 52);
    i0.ɵɵtext(16, " We recommend that you apply to get a new PBA to pay for fees. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(17, "p", 53);
    i0.ɵɵtext(18, " you can also pay by credit or debit card if you need to pay now ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(19, "p", 54)(20, "button", 40);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_3_Template_button_click_20_listener() { i0.ɵɵrestoreView(_r35); const ctx_r34 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r34.cardPayment()); });
    i0.ɵɵtext(21, " Pay by card ");
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(22, "div", 50)(23, "h2", 51);
    i0.ɵɵtext(24, "Register an existing PBA with MyHMCTS");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(25, "p", 52);
    i0.ɵɵtext(26, " You may find it easier in future to pay by PBA, your organisation administrator will need to email ");
    i0.ɵɵelementStart(27, "a", 55);
    i0.ɵɵtext(28, "MyHMCTSsupport@justice.gov.uk");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(29, " to ask for your PBA to be registered with your MyHMCTS account. You should include your organisation name and PBA number. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(30, "p", 52);
    i0.ɵɵtext(31, " It can then take up to 3 days for your account to be updated. You\u2019ll need to start your claim again to pay the fee. ");
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(32, "div", 50)(33, "h2", 51);
    i0.ɵɵtext(34, "Apply to get a new PBA ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(35, "p", 52);
    i0.ɵɵtext(36, " You\u2019ll need to provide details for you and your organisation, including the required credit limit for your account. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(37, "p", 52);
    i0.ɵɵtext(38, " Once your account has been registered, you\u2019ll need to start your claim again to pay the fee. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(39, "p", 52);
    i0.ɵɵtext(40, " Read more information on ");
    i0.ɵɵelementStart(41, "a", 56);
    i0.ɵɵtext(42, "registering for PBA");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(43, ". ");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementContainerEnd();
} }
function PbaPaymentComponent_ng_container_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r37 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 14)(5, "h2", 15);
    i0.ɵɵtext(6, " There is a problem ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "div", 16)(8, "ul", 17)(9, "li", 18);
    i0.ɵɵtext(10, " You don't have enough funds in your PBA account to pay for this fee. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "li", 18);
    i0.ɵɵtext(12, " If you have already topped up your PBA account, wait up to 24 hours for the new balance to become available. ");
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(13, "div", 50)(14, "h2", 51);
    i0.ɵɵtext(15, "Should you need any further advice");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(16, "p", 52);
    i0.ɵɵtext(17, " Email ");
    i0.ɵɵelementStart(18, "a", 57);
    i0.ɵɵtext(19, "MiddleOffice.DDservices@liberata.com");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, " or call ");
    i0.ɵɵelementStart(21, "a", 58);
    i0.ɵɵtext(22, "01633 652 125");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, " (option 3) to try to fix the issue. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "p", 52);
    i0.ɵɵtext(25, " you can also pay by credit or debit card. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(26, "div", 38)(27, "button", 39);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_4_Template_button_click_27_listener() { i0.ɵɵrestoreView(_r37); const ctx_r36 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r36.gotoCasetransationPage()); });
    i0.ɵɵtext(28, " View Service Request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(29, "button", 40);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_4_Template_button_click_29_listener() { i0.ɵɵrestoreView(_r37); const ctx_r38 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r38.cardPayment()); });
    i0.ɵɵtext(30, " Pay by card ");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementContainerEnd();
} }
function PbaPaymentComponent_ng_container_0_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r40 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 14)(5, "h2", 15);
    i0.ɵɵtext(6, " There is a problem ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "div", 16)(8, "ul", 17)(9, "li", 18);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(11, "div", 50)(12, "h2", 51);
    i0.ɵɵtext(13, "Should you need any further advice");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "p", 59);
    i0.ɵɵtext(15, " Email ");
    i0.ɵɵelementStart(16, "a", 57);
    i0.ɵɵtext(17, "MiddleOffice.DDservices@liberata.com");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, " or call ");
    i0.ɵɵelementStart(19, "a", 58);
    i0.ɵɵtext(20, "01633 652 125");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, " (option 3) to try to fix the issue. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "p", 52);
    i0.ɵɵtext(23, " you can also pay by credit or debit card. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "div", 38)(25, "button", 39);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_5_Template_button_click_25_listener() { i0.ɵɵrestoreView(_r40); const ctx_r39 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r39.gotoCasetransationPage()); });
    i0.ɵɵtext(26, " View Service Request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "button", 40);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_5_Template_button_click_27_listener() { i0.ɵɵrestoreView(_r40); const ctx_r41 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r41.cardPayment()); });
    i0.ɵɵtext(28, " Pay by card ");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate1(" Your PBA account (", ctx_r5.selectedPbaAccount, ") no longer exists. ");
} }
function PbaPaymentComponent_ng_container_0_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 14)(5, "h2", 15);
    i0.ɵɵtext(6, " There is a problem ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "div", 16)(8, "ul", 17)(9, "li", 18);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd()()()();
    i0.ɵɵelementStart(11, "div", 50)(12, "h2", 51);
    i0.ɵɵtext(13, "Should you need any further advice");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "p", 59);
    i0.ɵɵtext(15, " Email ");
    i0.ɵɵelementStart(16, "a", 57);
    i0.ɵɵtext(17, "MiddleOffice.DDservices@liberata.com");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, " or call ");
    i0.ɵɵelementStart(19, "a", 58);
    i0.ɵɵtext(20, "01633 652 125");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, " (option 3) to try to fix the issue. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(22, "p", 52);
    i0.ɵɵtext(23, " you can also pay by credit or debit card. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(24, "div", 38)(25, "button", 39);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_6_Template_button_click_25_listener() { i0.ɵɵrestoreView(_r43); const ctx_r42 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r42.gotoCasetransationPage()); });
    i0.ɵɵtext(26, " View Service Request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(27, "button", 40);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_6_Template_button_click_27_listener() { i0.ɵɵrestoreView(_r43); const ctx_r44 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r44.cardPayment()); });
    i0.ɵɵtext(28, " Pay by card ");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate1(" Your PBA account (", ctx_r6.selectedPbaAccount, ") has been put on hold. ");
} }
function PbaPaymentComponent_ng_container_0_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r46 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 50)(5, "h2", 60);
    i0.ɵɵtext(6, "Sorry, there is a problem with the service");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "p", 52);
    i0.ɵɵtext(8, " Try again later. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "p", 52);
    i0.ɵɵtext(10, " you can also pay by credit or debit card. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(11, "div", 38)(12, "button", 39);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_7_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r45.gotoCasetransationPage()); });
    i0.ɵɵtext(13, " View Service Request ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(14, "button", 40);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_7_Template_button_click_14_listener() { i0.ɵɵrestoreView(_r46); const ctx_r47 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r47.cardPayment()); });
    i0.ɵɵtext(15, " Pay by card ");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementContainerEnd();
} }
function PbaPaymentComponent_ng_container_0_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    const _r49 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 61)(5, "h1", 62);
    i0.ɵɵtext(6, " Payment successful ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "div", 63);
    i0.ɵɵtext(8, " Your payment reference is ");
    i0.ɵɵelement(9, "br");
    i0.ɵɵelementStart(10, "strong");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(12, "p", 52)(13, "a", 64);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_8_Template_a_click_13_listener() { i0.ɵɵrestoreView(_r49); const ctx_r48 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r48.gotoCasetransationPage()); });
    i0.ɵɵtext(14, "View service requests");
    i0.ɵɵelementEnd()()()()();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r8.pbaAccountrPaymentResult.payment_reference);
} }
function PbaPaymentComponent_ng_container_0_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r51 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 42)(2, "main", 43)(3, "div", 44)(4, "div", 50)(5, "h2", 60);
    i0.ɵɵtext(6, "Sorry, there is a problem with the service");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "p", 52);
    i0.ɵɵtext(8, " Try again later. ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "p", 52)(10, "a", 64);
    i0.ɵɵlistener("click", function PbaPaymentComponent_ng_container_0_ng_container_9_Template_a_click_10_listener() { i0.ɵɵrestoreView(_r51); const ctx_r50 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r50.gotoCasetransationPage()); });
    i0.ɵɵtext(11, "View service requests");
    i0.ɵɵelementEnd()()()()()();
    i0.ɵɵelementContainerEnd();
} }
function PbaPaymentComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, PbaPaymentComponent_ng_container_0_div_1_Template, 5, 0, "div", 1);
    i0.ɵɵtemplate(2, PbaPaymentComponent_ng_container_0_div_2_Template, 11, 10, "div", 2);
    i0.ɵɵtemplate(3, PbaPaymentComponent_ng_container_0_ng_container_3_Template, 44, 0, "ng-container", 0);
    i0.ɵɵtemplate(4, PbaPaymentComponent_ng_container_0_ng_container_4_Template, 31, 0, "ng-container", 0);
    i0.ɵɵtemplate(5, PbaPaymentComponent_ng_container_0_ng_container_5_Template, 29, 1, "ng-container", 0);
    i0.ɵɵtemplate(6, PbaPaymentComponent_ng_container_0_ng_container_6_Template, 29, 1, "ng-container", 0);
    i0.ɵɵtemplate(7, PbaPaymentComponent_ng_container_0_ng_container_7_Template, 16, 0, "ng-container", 0);
    i0.ɵɵtemplate(8, PbaPaymentComponent_ng_container_0_ng_container_8_Template, 15, 1, "ng-container", 0);
    i0.ɵɵtemplate(9, PbaPaymentComponent_ng_container_0_ng_container_9_Template, 12, 0, "ng-container", 0);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.errorMsg && !ctx_r0.isPBAAccountPaymentSuccess && !ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ((ctx_r0.pbaAccountList == null ? null : ctx_r0.pbaAccountList.length) > 0 || ctx_r0.errorMsg) && !ctx_r0.isInSufficiantFund && !ctx_r0.isPBAAccountNotExist && !ctx_r0.isPBAServerError && !ctx_r0.isPBAAccountHold && !ctx_r0.isPBAAccountPaymentSuccess && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (ctx_r0.pbaAccountList == null ? null : ctx_r0.pbaAccountList.length) <= 0 && !ctx_r0.errorMsg && ctx_r0.isGetPBAAccountSucceed && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isInSufficiantFund && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isPBAAccountNotExist && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isPBAAccountHold && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isPBAServerError && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.isPBAAccountPaymentSuccess && ctx_r0.isCardPaymentSuccess);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r0.isCardPaymentSuccess);
} }
const BS_ENABLE_FLAG = 'bulk-scan-enabling-fe';
class PbaPaymentComponent {
    paymentLibComponent;
    paymentViewService;
    pbaPayOrderRef;
    viewStatus;
    pbaAccountList;
    isPBAAccountHold = false;
    errorMsg;
    isCardPaymentSuccess = true;
    isInSufficiantFund = false;
    isPBAAccountNotExist = false;
    isPBAServerError = false;
    isGetPBAAccountSucceed = false;
    selectedPbaAccount = '';
    pbaAccountRef = '';
    isPbaAccountSelected = false;
    isCardPaymentSelected = false;
    isPBADropdownSelected = false;
    isContinueButtondisabled = true;
    isPBAAccountPaymentSuccess = false;
    pbaAccountrPaymentResult;
    orgName = '';
    constructor(paymentLibComponent, paymentViewService) {
        this.paymentLibComponent = paymentLibComponent;
        this.paymentViewService = paymentViewService;
    }
    ngOnInit() {
        this.pbaPayOrderRef = this.paymentLibComponent.pbaPayOrderRef;
        this.viewStatus = 'pba-payment';
        this.errorMsg = null;
        this.paymentViewService.getPBAaccountDetails()
            .subscribe(result => {
            this.isGetPBAAccountSucceed = true;
            this.orgName = result.organisationEntityResponse.name;
            this.pbaAccountList = result.organisationEntityResponse.paymentAccount;
        }, error => {
            this.errorMsg = error;
        });
    }
    selectpbaaccount(args) {
        if (args.currentTarget.id === 'pbaAccountNumber') {
            this.isPBADropdownSelected = true;
            this.selectedPbaAccount = args.target.value;
        }
        if (args.currentTarget.id === 'pbaAccountRef') {
            this.pbaAccountRef = args.target.value;
        }
        if (this.selectedPbaAccount !== '' && this.pbaAccountRef !== "") {
            this.isContinueButtondisabled = false;
        }
        else {
            this.isContinueButtondisabled = true;
        }
    }
    saveAndContinue() {
        if (this.isPbaAccountSelected) {
            this.isInSufficiantFund = false;
            this.isPBAAccountNotExist = false;
            this.isPBAServerError = false;
            this.isPBAAccountPaymentSuccess = false;
            this.isContinueButtondisabled = true;
            if (this.pbaAccountList.indexOf(this.selectedPbaAccount) !== -1) {
                const requestBody = new IserviceRequestPbaPayment(this.selectedPbaAccount, this.pbaPayOrderRef.orderTotalFees, this.pbaAccountRef, this.orgName);
                setTimeout(() => {
                    this.paymentViewService.postPBAaccountPayment(this.pbaPayOrderRef.orderRefId, requestBody)
                        .subscribe(r => {
                        try {
                            this.pbaAccountrPaymentResult = JSON.parse(r);
                        }
                        catch (e) {
                            this.pbaAccountrPaymentResult = r;
                        }
                        this.isPBAAccountPaymentSuccess = true;
                    }, e => {
                        if (e.status == '402') {
                            this.isInSufficiantFund = true;
                        }
                        else if (e.status == '410') {
                            this.isPBAAccountNotExist = true;
                        }
                        else if (e.status == '412') {
                            this.isPBAAccountHold = true;
                        }
                        else {
                            this.isPBAServerError = true;
                        }
                    });
                }, 5000);
            }
            else {
                this.isPBAServerError = true;
            }
        }
        else if (this.isCardPaymentSelected) {
            this.cardPayment();
        }
    }
    cardPayment() {
        this.isCardPaymentSuccess = true;
        const requestBody = new IserviceRequestCardPayment(this.pbaPayOrderRef.orderTotalFees);
        this.paymentViewService.postWays2PayCardPayment(this.pbaPayOrderRef.orderRefId, requestBody)
            .subscribe(result => {
            const paymentUrl = JSON.parse(result).next_url;
            window.location.href = paymentUrl;
        }, error => {
            this.isCardPaymentSuccess = false;
        });
    }
    selectPaymentMethod(type) {
        if (type === 'PBA') {
            this.isPbaAccountSelected = true;
            this.isCardPaymentSelected = false;
            this.isPBADropdownSelected = false;
            this.isContinueButtondisabled = true;
            this.selectedPbaAccount = null;
        }
        else if (type === 'CARD') {
            this.isPbaAccountSelected = false;
            this.isCardPaymentSelected = true;
            this.isPBADropdownSelected = false;
            this.isContinueButtondisabled = false;
        }
    }
    gotoCasetransationPage() {
        this.paymentLibComponent.viewName = 'case-transactions';
        this.paymentLibComponent.TAKEPAYMENT = false;
        this.paymentLibComponent.ISBSENABLE = true;
        this.paymentLibComponent.isFromServiceRequestPage = true;
    }
    static ɵfac = function PbaPaymentComponent_Factory(t) { return new (t || PbaPaymentComponent)(i0.ɵɵdirectiveInject(PaymentLibComponent), i0.ɵɵdirectiveInject(PaymentViewService)); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PbaPaymentComponent, selectors: [["ccpay-pba-payment"]], inputs: { pbaPayOrderRef: "pbaPayOrderRef" }, decls: 1, vars: 1, consts: [[4, "ngIf"], ["class", "govuk-breadcrumbs", 4, "ngIf"], ["class", "pba-payment", 4, "ngIf"], [1, "govuk-breadcrumbs"], [1, "govuk-breadcrumbs__list"], [1, "govuk-breadcrumbs__list-item"], ["href", "javascript:void(0)", 1, "govuk-back-link", "pba-payments-16-font", 3, "click"], [1, "pba-payment"], ["class", "govuk-error-summary pba-payments-error-box--size", "aria-labelledby", "error-summary-title", 4, "ngIf"], [1, "govuk-form-group", "margin-top-10-px"], [1, "govuk-label", "pba-payments-govuk__label", "pba-payments-19-font"], [1, "pba-payments-19-font"], ["class", "govuk-form-group", 4, "ngIf"], ["class", "govuk-button--group", 4, "ngIf"], ["aria-labelledby", "error-summary-title", 1, "govuk-error-summary", "pba-payments-error-box--size"], ["id", "error-summary-title", 1, "govuk-error-summary__title", "govuk-error-summary__title-custom", "pba-payments-24-font"], [1, "govuk-error-summary__body"], [1, "govuk-list", "govuk-error-summary__list"], [1, "pba-payments-error-16-font"], [1, "govuk-form-group"], ["aria-describedby", "contact-hint", 1, "govuk-fieldset"], ["data-module", "govuk-radios", 1, "govuk-radios"], [1, "govuk-radios__item"], ["id", "pbaAccount", "name", "paymentSelection", "type", "radio", "value", "PBA", "data-aria-controls", "pba-account", 1, "govuk-radios__input", 3, "click"], ["for", "pbaAccount", 1, "govuk-label", "govuk-radios__label", "pba-payments-19-font", "pba-payments-font-bld"], ["class", "govuk-radios__conditional", "id", "conditional-contact", 4, "ngIf"], ["id", "cardPayment", "name", "paymentSelection", "type", "radio", "value", "card", "data-aria-controls", "card-payment", 1, "govuk-radios__input", 3, "click"], ["for", "cardPayment", 1, "govuk-label", "govuk-radios__label", "pba-payments-19-font", "pba-payments-font-bld"], ["id", "conditional-contact", 1, "govuk-radios__conditional"], [1, "govuk-form-group", "pba-payments-select-box--size"], ["for", "pbaAccountNumber", 1, "govuk-label", "pba-payments-govuk__label", "pba-payments-19-font"], ["id", "pbaAccountNumber", 1, "form-control", "short-input", 3, "change"], ["value", "", "selected", "selected"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["for", "pbaAccountNumber", 1, "govuk-label", "pba-payments-govuk__label", "pba-payments-24-font"], ["id", "event-name-hint", 1, "govuk-hint", "pba-payments-19-font", "pba-payment-width"], ["id", "pbaAccountRef", "name", "pbaAccountRef", "type", "text", "aria-describedby", "pbaAccountRef-hint", 1, "govuk-input", "pba-payments-ref-box--size", "pba-payments-19-font", 3, "change"], [1, "govuk-button--group"], ["type", "button", 1, "button", "pba-payments-19-font", "govuk-button--secondary", "pba-payments-margin-10", 3, "click"], ["type", "submit", 1, "button", "pba-payments-19-font", "pba-payments-20-margin", 3, "click"], ["type", "submit", 1, "button", "pba-payments-19-font", "pba-payments-20-margin", 3, "disabled", "click"], [1, "govuk-width-container"], ["id", "main-content", "role", "main", 1, "govuk-main-wrapper", "govuk-main-wrapper--l"], [1, "govuk-grid-row"], [1, "govuk-warning-text"], ["aria-hidden", "true", 1, "govuk-warning-text__icon"], [1, "govuk-warning-text__text"], [1, "govuk-warning-text__assistive"], [1, "warning-heading-m"], [1, "pba-payments-margin-top-10"], [1, "heading-medium"], [1, "govuk-body", "pba-payments-19-font"], [1, "govuk-bod", "ypba-payments-19-font"], [1, "govuk-body"], ["href", "mailto: MyHMCTSsupport@justice.gov.uk"], ["target", "_blank", "href", "https://www.gov.uk/guidance/hmcts-payment-by-account-for-online-services"], ["href", "mailto:MiddleOffice.DDservices@liberata.com"], ["href", "tel:01633-652-125"], [1, "govuk-body", "pba-payments-19-font", "govuk-body-width"], [1, "pba-payments-heading-lg"], [1, "govuk-panel", "govuk-panel--confirmation", "pba-payments--confirmation"], [1, "govuk-panel__title", "pba-payments--title"], [1, "govuk-panel__body", "pba-payments__body"], ["href", "javascript:void(0)", 3, "click"]], template: function PbaPaymentComponent_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, PbaPaymentComponent_ng_container_0_Template, 10, 9, "ng-container", 0);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.viewStatus === "pba-payment");
        } }, dependencies: [i3.NgForOf, i3.NgIf, i1$1.NgSelectOption, i1$1.ɵNgSelectMultipleOption, i3.CurrencyPipe], styles: [".pba-payments-govuk__label[_ngcontent-%COMP%]{font-weight:700;line-height:1.31578947}.pba-payments-19-font[_ngcontent-%COMP%]{font-size:19px}.pba-payments-font-bld[_ngcontent-%COMP%]{font-weight:700}.pba-payments-16-font[_ngcontent-%COMP%]{font-size:16px}.pba-payments-24-font[_ngcontent-%COMP%]{font-size:24px}.pba-payments-20-margin[_ngcontent-%COMP%]{margin-bottom:20px}.pba-payments-select-box--size[_ngcontent-%COMP%]{width:40%}.pba-payments-error-box--size[_ngcontent-%COMP%]{width:80%}.pba-payments-ref-box--size[_ngcontent-%COMP%]{width:60%}.pba-payments-error-16-font[_ngcontent-%COMP%]{font-size:16px;line-height:34px}.pba-payments-margin-10[_ngcontent-%COMP%]{margin-right:10px}.pba-payments-margin-top-10[_ngcontent-%COMP%]{margin-top:15px}.pba-payments-heading-lg[_ngcontent-%COMP%]{font-size:40px;font-weight:700;line-height:72px}.pba-payments--confirmation[_ngcontent-%COMP%]{background:#00703c!important}.pba-payments__body[_ngcontent-%COMP%]{font-size:36px!important}.pba-payments--title[_ngcontent-%COMP%]{font-size:48px!important}.warning-heading-m[_ngcontent-%COMP%]{font-size:29px;font-weight:700}.pba-payment-width[_ngcontent-%COMP%]{width:75%}.margin-top-10-px[_ngcontent-%COMP%]{margin-top:10px}.govuk-error-summary[_ngcontent-%COMP%]:focus{outline:3px solid #ffdd00}.govuk-body-width[_ngcontent-%COMP%]{width:750px}"] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PbaPaymentComponent, [{
        type: Component,
        args: [{ selector: 'ccpay-pba-payment', template: "<ng-container *ngIf=\"viewStatus === 'pba-payment'\">\n\n  <div class=\"govuk-breadcrumbs\" *ngIf=\"!errorMsg && !isPBAAccountPaymentSuccess && !isCardPaymentSuccess\">\n    <ol class=\"govuk-breadcrumbs__list\">\n      <li class=\"govuk-breadcrumbs__list-item\">\n        <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPage()\" class=\"govuk-back-link pba-payments-16-font\">Back</a>\n      </li>\n    </ol>\n  </div>\n  <div class=\"pba-payment\" *ngIf=\"(pbaAccountList?.length > 0 || errorMsg) && !isInSufficiantFund && !isPBAAccountNotExist && !isPBAServerError && !isPBAAccountHold && !isPBAAccountPaymentSuccess && isCardPaymentSuccess\">\n    \n    <div *ngIf=\"errorMsg\" class=\"govuk-error-summary pba-payments-error-box--size\" aria-labelledby=\"error-summary-title\" >\n      <h2 class=\"govuk-error-summary__title govuk-error-summary__title-custom pba-payments-24-font\" id=\"error-summary-title\">\n        There is a problem\n      </h2>\n      <div class=\"govuk-error-summary__body\">\n        <ul class=\"govuk-list govuk-error-summary__list\">\n          <li class=\"pba-payments-error-16-font\">\n            Your PBA account cannot be found.\n          </li>\n          <li class=\"pba-payments-error-16-font\">\n            If you know your organisation has a PBA, try again.\n          </li>\n          <li class=\"pba-payments-error-16-font\">\n            You can also pay by credit or debit card.\n          </li>\n        </ul>\n      </div>\n    </div>\n    <!-- <h1 class=\"heading-medium margin-top-10-px\">Pay fee using Payment by Account (PBA)</h1> -->\n    <div class=\"govuk-form-group margin-top-10-px\">\n      <label class=\"govuk-label pba-payments-govuk__label pba-payments-19-font\">\n        Amount to pay \n      </label>\n      <span class=\"pba-payments-19-font\">{{pbaPayOrderRef.orderTotalFees | currency :'GBP':'symbol':'1.2-2'}}</span>\n    </div>\n\n    <div class=\"govuk-form-group\" *ngIf=\"!errorMsg\">\n      <fieldset class=\"govuk-fieldset\" aria-describedby=\"contact-hint\">\n        <div class=\"govuk-radios\" data-module=\"govuk-radios\">\n          <div class=\"govuk-radios__item\">\n            <input class=\"govuk-radios__input\" id=\"pbaAccount\" name=\"paymentSelection\" type=\"radio\" value=\"PBA\" (click)=\"selectPaymentMethod('PBA')\" data-aria-controls=\"pba-account\">\n            <label class=\"govuk-label govuk-radios__label pba-payments-19-font pba-payments-font-bld\" for=\"pbaAccount\">\n              Pay fee using Payment by Account (PBA)\n            </label>\n          </div>\n          <div class=\"govuk-radios__conditional\" id=\"conditional-contact\" *ngIf=\"isPbaAccountSelected\">\n            <div class=\"govuk-form-group pba-payments-select-box--size\">\n              <label class=\"govuk-label pba-payments-govuk__label pba-payments-19-font\" for=\"pbaAccountNumber\">\n                Select a PBA  \n              </label>\n              <select class=\"form-control short-input\" id=\"pbaAccountNumber\" (change)=\"selectpbaaccount($event)\">\n                <option value=\"\" selected='selected'>Select option</option>\n                <option  *ngFor=\"let pbaAccount of pbaAccountList;\" value=\"{{pbaAccount}}\">{{pbaAccount}}</option>\n              </select>\n            </div>\n            <div class=\"govuk-form-group\" *ngIf=\"!errorMsg && selectedPbaAccount\">\n              <label class=\"govuk-label pba-payments-govuk__label pba-payments-24-font\" for=\"pbaAccountNumber\">\n                Enter a reference for your PBA account statements \n              </label>\n              <div id=\"event-name-hint\" class=\"govuk-hint pba-payments-19-font pba-payment-width\">\n                This should be your own unique reference to identify the case. It will appear on your statements.\n            </div>\n            <input class=\"govuk-input pba-payments-ref-box--size pba-payments-19-font\" id=\"pbaAccountRef\" (change)=\"selectpbaaccount($event)\" name=\"pbaAccountRef\" type=\"text\" aria-describedby=\"pbaAccountRef-hint\">\n            </div>\n    \n          </div>\n          <div class=\"govuk-radios__item\">\n            <input class=\"govuk-radios__input\" id=\"cardPayment\" name=\"paymentSelection\" type=\"radio\" value=\"card\" (click)=\"selectPaymentMethod('CARD')\" data-aria-controls=\"card-payment\">\n            <label class=\"govuk-label govuk-radios__label pba-payments-19-font pba-payments-font-bld\" for=\"cardPayment\">\n              Pay by credit or debit card\n            </label>\n          </div>\n        </div>\n      </fieldset>\n    </div>\n\n    <div class=\"govuk-button--group\"  *ngIf=\"errorMsg\">\n      <button type=\"button\" class=\"button pba-payments-19-font govuk-button--secondary pba-payments-margin-10\" (click)=\"gotoCasetransationPage()\">\n        View Service Request\n      </button>\n      <button type=\"submit\" class=\"button pba-payments-19-font pba-payments-20-margin\" (click)=\"cardPayment()\">\n        Pay by card\n      </button>\n    </div>\n    <div class=\"govuk-button--group\"  *ngIf=\"!errorMsg\">\n      <button type=\"submit\" [disabled]=\"isContinueButtondisabled\" class=\"button pba-payments-19-font pba-payments-20-margin\" (click)=\"saveAndContinue()\">\n        <span *ngIf=\"!isPBADropdownSelected\">Continue</span>\n        <span *ngIf=\"isPBADropdownSelected\">Confirm payment</span>\n      </button>\n    </div>\n  </div>\n<ng-container *ngIf=\"pbaAccountList?.length <= 0 && !errorMsg && isGetPBAAccountSucceed && isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-warning-text\">\n          <span class=\"govuk-warning-text__icon\" aria-hidden=\"true\">!</span>\n          <strong class=\"govuk-warning-text__text\">\n            <span class=\"govuk-warning-text__assistive\">Warning</span>\n            <h2 class=\"warning-heading-m\">You don\u2019t have a registered PBA.</h2>\n          </strong>\n        </div>\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"heading-medium\">Pay by credit or debit card</h2>\n          <p class=\"govuk-body pba-payments-19-font\">\n            We recommend that you apply to get a new PBA to pay for fees.\n          </p>\n          <p class=\"govuk-bod ypba-payments-19-font\">\n            you can also pay by credit or debit card if you need to pay now\n          </p>\n          <p class=\"govuk-body\">\n            <button type=\"submit\" (click)=\"cardPayment()\" class=\"button pba-payments-19-font pba-payments-20-margin\">\n              Pay by card\n            </button>\n          </p>\n          \n        </div>\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"heading-medium\">Register an existing PBA with MyHMCTS</h2>\n          <p class=\"govuk-body pba-payments-19-font\">\n            You may find it easier in future to pay by PBA, your organisation administrator will need to \n            email <a href=\"mailto: MyHMCTSsupport@justice.gov.uk\">MyHMCTSsupport@justice.gov.uk</a> to ask for your PBA to be registered with your \n            MyHMCTS account. You should include your organisation name and PBA number.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            It can then take up to 3 days for your account to be updated. You\u2019ll need to start your claim \n            again to pay the fee.\n          </p>\n        </div>\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"heading-medium\">Apply to get a new PBA </h2>\n          <p class=\"govuk-body pba-payments-19-font\">\n            You\u2019ll need to provide details for you and your organisation, including the required credit\n             limit for your account.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            Once your account has been registered, you\u2019ll need to start your claim again to pay the fee.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            Read more information on <a target=\"_blank\" href=\"https://www.gov.uk/guidance/hmcts-payment-by-account-for-online-services\">registering for PBA</a>.\n          </p>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"isInSufficiantFund && isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-error-summary pba-payments-error-box--size\" aria-labelledby=\"error-summary-title\">\n          <h2 class=\"govuk-error-summary__title govuk-error-summary__title-custom pba-payments-24-font\" id=\"error-summary-title\">\n            There is a problem\n          </h2>\n          <div class=\"govuk-error-summary__body\">\n            <ul class=\"govuk-list govuk-error-summary__list\">\n              <li class=\"pba-payments-error-16-font\">\n                You don't have enough funds in your PBA account to pay for this fee.\n              </li>\n              <li class=\"pba-payments-error-16-font\">\n                If you have already topped up your PBA account, wait up to 24 hours for the new balance to become available.\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"heading-medium\">Should you need any further advice</h2>\n          <p class=\"govuk-body pba-payments-19-font\">\n            Email <a href=\"mailto:MiddleOffice.DDservices@liberata.com\">MiddleOffice.DDservices@liberata.com</a> or call <a href=\"tel:01633-652-125\">01633 652 125</a> (option 3) to try to fix the issue.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            you can also pay by credit or debit card.\n          </p>\n          <div class=\"govuk-button--group\">\n            <button type=\"button\" class=\"button pba-payments-19-font govuk-button--secondary pba-payments-margin-10\" (click)=\"gotoCasetransationPage()\">\n              View Service Request\n            </button>\n            <button type=\"submit\" class=\"button pba-payments-19-font pba-payments-20-margin\" (click)=\"cardPayment()\">\n              Pay by card\n            </button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"isPBAAccountNotExist && isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-error-summary pba-payments-error-box--size\" aria-labelledby=\"error-summary-title\">\n          <h2 class=\"govuk-error-summary__title govuk-error-summary__title-custom pba-payments-24-font\" id=\"error-summary-title\">\n            There is a problem\n          </h2>\n          <div class=\"govuk-error-summary__body\">\n            <ul class=\"govuk-list govuk-error-summary__list\">\n              <li class=\"pba-payments-error-16-font\">\n                Your PBA account ({{selectedPbaAccount}}) no longer exists.\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"heading-medium\">Should you need any further advice</h2>\n          <p class=\"govuk-body pba-payments-19-font govuk-body-width\">\n            Email <a href=\"mailto:MiddleOffice.DDservices@liberata.com\">MiddleOffice.DDservices@liberata.com</a> or call <a href=\"tel:01633-652-125\">01633 652 125</a> (option 3) to try to fix the issue.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            you can also pay by credit or debit card.\n          </p>\n          <div class=\"govuk-button--group\">\n            <button type=\"button\" class=\"button pba-payments-19-font govuk-button--secondary pba-payments-margin-10\" (click)=\"gotoCasetransationPage()\">\n              View Service Request\n            </button>\n            <button type=\"submit\" class=\"button pba-payments-19-font pba-payments-20-margin\" (click)=\"cardPayment()\">\n              Pay by card\n            </button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"isPBAAccountHold && isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-error-summary pba-payments-error-box--size\" aria-labelledby=\"error-summary-title\">\n          <h2 class=\"govuk-error-summary__title govuk-error-summary__title-custom pba-payments-24-font\" id=\"error-summary-title\">\n            There is a problem\n          </h2>\n          <div class=\"govuk-error-summary__body\">\n            <ul class=\"govuk-list govuk-error-summary__list\">\n              <li class=\"pba-payments-error-16-font\">\n                Your PBA account ({{selectedPbaAccount}}) has been put on hold.\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"heading-medium\">Should you need any further advice</h2>\n          <p class=\"govuk-body pba-payments-19-font govuk-body-width\">\n            Email <a href=\"mailto:MiddleOffice.DDservices@liberata.com\">MiddleOffice.DDservices@liberata.com</a> or call <a href=\"tel:01633-652-125\">01633 652 125</a> (option 3) to try to fix the issue.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            you can also pay by credit or debit card.\n          </p>\n          <div class=\"govuk-button--group\">\n            <button type=\"button\" class=\"button pba-payments-19-font govuk-button--secondary pba-payments-margin-10\" (click)=\"gotoCasetransationPage()\">\n              View Service Request\n            </button>\n            <button type=\"submit\" class=\"button pba-payments-19-font pba-payments-20-margin\" (click)=\"cardPayment()\">\n              Pay by card\n            </button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"isPBAServerError && isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"pba-payments-heading-lg\">Sorry, there is a problem with the service</h2>\n          <p class=\"govuk-body pba-payments-19-font\">\n            Try again later.\n          </p>\n          <p class=\"govuk-body pba-payments-19-font\">\n            you can also pay by credit or debit card.\n          </p>\n          <div class=\"govuk-button--group\">\n            <button type=\"button\" class=\"button pba-payments-19-font govuk-button--secondary pba-payments-margin-10\" (click)=\"gotoCasetransationPage()\">\n              View Service Request\n            </button>\n            <button type=\"submit\" class=\"button pba-payments-19-font pba-payments-20-margin\" (click)=\"cardPayment()\">\n              Pay by card\n            </button>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"isPBAAccountPaymentSuccess && isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"govuk-panel govuk-panel--confirmation pba-payments--confirmation\">\n          <h1 class=\"govuk-panel__title pba-payments--title\">\n              Payment successful\n          </h1>\n          <div class=\"govuk-panel__body pba-payments__body\">\n              Your payment reference is <br><strong>{{pbaAccountrPaymentResult.payment_reference}}</strong>\n          </div>\n      </div>\n      <p class=\"govuk-body pba-payments-19-font\">\n        <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPage()\">View service requests</a>\n      </p>\n      </div>\n    </main>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"!isCardPaymentSuccess\">\n  <div class=\"govuk-width-container\">\n    <main class=\"govuk-main-wrapper govuk-main-wrapper--l\" id=\"main-content\" role=\"main\">\n      <div class=\"govuk-grid-row\">\n        <div class=\"pba-payments-margin-top-10\">\n          <h2 class=\"pba-payments-heading-lg\">Sorry, there is a problem with the service</h2>\n          <p class=\"govuk-body pba-payments-19-font\">\n            Try again later.\n          </p>\n          <!-- <p class=\"govuk-body pba-payments-19-font\">\n            you can also <a href=\"javascript:void(0)\" (click)=\"cardPayment()\" >pay by credit or debit card</a>.\n          </p> -->\n          <p class=\"govuk-body pba-payments-19-font\">\n            <a href=\"javascript:void(0)\" (click)=\"gotoCasetransationPage()\">View service requests</a>\n          </p>\n        </div>\n      </div>\n    </main>\n  </div>\n</ng-container>\n</ng-container>\n\n\n\n", styles: [".pba-payments-govuk__label{font-weight:700;line-height:1.31578947}.pba-payments-19-font{font-size:19px}.pba-payments-font-bld{font-weight:700}.pba-payments-16-font{font-size:16px}.pba-payments-24-font{font-size:24px}.pba-payments-20-margin{margin-bottom:20px}.pba-payments-select-box--size{width:40%}.pba-payments-error-box--size{width:80%}.pba-payments-ref-box--size{width:60%}.pba-payments-error-16-font{font-size:16px;line-height:34px}.pba-payments-margin-10{margin-right:10px}.pba-payments-margin-top-10{margin-top:15px}.pba-payments-heading-lg{font-size:40px;font-weight:700;line-height:72px}.pba-payments--confirmation{background:#00703c!important}.pba-payments__body{font-size:36px!important}.pba-payments--title{font-size:48px!important}.warning-heading-m{font-size:29px;font-weight:700}.pba-payment-width{width:75%}.margin-top-10-px{margin-top:10px}.govuk-error-summary:focus{outline:3px solid #ffdd00}.govuk-body-width{width:750px}\n"] }]
    }], function () { return [{ type: PaymentLibComponent }, { type: PaymentViewService }]; }, { pbaPayOrderRef: [{
            type: Input
        }] }); })();

class PaymentLibModule {
    static ɵfac = function PaymentLibModule_Factory(t) { return new (t || PaymentLibModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: PaymentLibModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [
            { provide: LoggerService, useClass: ConsoleLoggerService },
            XlFileService,
            WebComponentHttpClient
        ], imports: [CommonModule,
            HttpClientModule,
            FormsModule,
            ReactiveFormsModule,
            MatTableModule,
            MatPaginatorModule,
            MatSortModule,
            MatFormFieldModule,
            MatInputModule] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentLibModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MatTableModule,
                    MatPaginatorModule,
                    MatSortModule,
                    MatFormFieldModule,
                    MatInputModule,
                    // BrowserAnimationsModule,
                    // NoopAnimationsModule
                ],
                declarations: [
                    PaymentLibComponent,
                    PaymentListComponent,
                    PaymentViewComponent,
                    PbaPaymentComponent,
                    ContactDetailsComponent,
                    ProcessRefundComponent,
                    RefundListComponent,
                    CardDetailsComponent,
                    PageNotFoundComponent,
                    StatusHistoryComponent,
                    MarkUnidentifiedPaymentComponent,
                    MarkUnsolicitedPaymentComponent,
                    UnprocessedPaymentsComponent,
                    ProcessedPaymentsComponent,
                    AllocatePaymentsComponent,
                    PbaDetailsComponent,
                    CaseTransactionsComponent,
                    FeeSummaryComponent,
                    AddRemissionComponent,
                    CcdHyphensPipe,
                    CapitalizePipe,
                    keyValuePipe,
                    SanitizeHtmlPipe,
                    ReportsComponent,
                    ErrorBannerComponent,
                    TableComponent,
                    RefundStatusComponent,
                    ServiceRequestComponent,
                    NotificationPreviewComponent
                ],
                exports: [PaymentLibComponent],
                providers: [
                    { provide: LoggerService, useClass: ConsoleLoggerService },
                    XlFileService,
                    WebComponentHttpClient
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(PaymentLibModule, { declarations: [PaymentLibComponent,
        PaymentListComponent,
        PaymentViewComponent,
        PbaPaymentComponent,
        ContactDetailsComponent,
        ProcessRefundComponent,
        RefundListComponent,
        CardDetailsComponent,
        PageNotFoundComponent,
        StatusHistoryComponent,
        MarkUnidentifiedPaymentComponent,
        MarkUnsolicitedPaymentComponent,
        UnprocessedPaymentsComponent,
        ProcessedPaymentsComponent,
        AllocatePaymentsComponent,
        PbaDetailsComponent,
        CaseTransactionsComponent,
        FeeSummaryComponent,
        AddRemissionComponent,
        CcdHyphensPipe,
        CapitalizePipe,
        keyValuePipe,
        SanitizeHtmlPipe,
        ReportsComponent,
        ErrorBannerComponent,
        TableComponent,
        RefundStatusComponent,
        ServiceRequestComponent,
        NotificationPreviewComponent], imports: [CommonModule,
        HttpClientModule,
        FormsModule,
        ReactiveFormsModule,
        MatTableModule,
        MatPaginatorModule,
        MatSortModule,
        MatFormFieldModule,
        MatInputModule], exports: [PaymentLibComponent] }); })();
i0.ɵɵsetComponentScope(PaymentLibComponent, [i3.NgIf, PaymentListComponent,
    PaymentViewComponent,
    PbaPaymentComponent,
    ProcessRefundComponent,
    RefundListComponent,
    MarkUnidentifiedPaymentComponent,
    MarkUnsolicitedPaymentComponent,
    AllocatePaymentsComponent,
    CaseTransactionsComponent,
    FeeSummaryComponent,
    ReportsComponent,
    RefundStatusComponent], []);
i0.ɵɵsetComponentScope(AddRemissionComponent, [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.NgSelectOption, i1$1.ɵNgSelectMultipleOption, i1$1.DefaultValueAccessor, i1$1.NumberValueAccessor, i1$1.CheckboxControlValueAccessor, i1$1.SelectControlValueAccessor, i1$1.RadioControlValueAccessor, i1$1.NgControlStatus, i1$1.NgControlStatusGroup, i1$1.MaxLengthValidator, i1$1.PatternValidator, i1$1.NgForm, i1$1.FormGroupDirective, i1$1.FormControlName, i1$1.FormGroupName, i1$1.FormArrayName, PaymentViewComponent,
    ContactDetailsComponent,
    ServiceRequestComponent,
    NotificationPreviewComponent], [i3.CurrencyPipe, CcdHyphensPipe]);
i0.ɵɵsetComponentScope(ServiceRequestComponent, [i3.NgClass, i3.NgForOf, i3.NgIf, i1$1.ɵNgNoValidate, i1$1.NgControlStatusGroup, i1$1.NgForm, PaymentViewComponent,
    ContactDetailsComponent,
    CaseTransactionsComponent,
    AddRemissionComponent,
    NotificationPreviewComponent], [i3.DecimalPipe, i3.CurrencyPipe, i3.DatePipe, CcdHyphensPipe]);

/*
 * Public API Surface of payment-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PaymentLibComponent, PaymentLibModule, PaymentLibService };
//# sourceMappingURL=hmcts-ccpay-web-component.mjs.map
