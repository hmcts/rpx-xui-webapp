{"type":"auditAdvisory","data":{"resolution":{"id":1767,"path":"xlsx","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.15.6","paths":["xlsx"]}],"id":1767,"created":"2021-07-22T19:54:07.912Z","updated":"2021-07-22T19:54:18.553Z","deleted":null,"title":"Denial of Service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"xlsx","cves":["CVE-2021-32014"],"vulnerable_versions":"<0.17.0","patched_versions":">=0.17.0","overview":"SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (CPU consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js.","recommendation":"Upgrade to version 0.17.0 or later","references":"- [GitHub Advisory](https://github.com/advisories/GHSA-8vcr-vxm8-293m)\n- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-32014)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1767"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1780,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.7","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar"]},{"version":"4.4.16","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar"]}],"id":1780,"created":"2021-08-31T16:10:17.945Z","updated":"2021-08-31T16:12:52.860Z","deleted":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"tar","cves":["CVE-2021-37712"],"vulnerable_versions":"<4.4.18 || >=5.0.0 <5.0.10 || >=6.0.0 <6.1.9","patched_versions":">=4.4.18 <5.0.0 || >=5.0.10 <6.0.0 || >=6.1.9","overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","recommendation":"Upgrade to versions 4.4.18, 5.0.10, 6.1.9 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-37712)\n- [GitHub Advisory](https://github.com/advisories/GHSA-qq89-hq3f-393p)\n","access":"public","severity":"high","cwe":"CWE-22","metadata":{"module_type":"","exploitability":7,"affected_components":""},"url":"https://npmjs.com/advisories/1780"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1780,"path":"@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.7","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar"]},{"version":"4.4.16","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar"]}],"id":1780,"created":"2021-08-31T16:10:17.945Z","updated":"2021-08-31T16:12:52.860Z","deleted":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"tar","cves":["CVE-2021-37712"],"vulnerable_versions":"<4.4.18 || >=5.0.0 <5.0.10 || >=6.0.0 <6.1.9","patched_versions":">=4.4.18 <5.0.0 || >=5.0.10 <6.0.0 || >=6.1.9","overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","recommendation":"Upgrade to versions 4.4.18, 5.0.10, 6.1.9 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-37712)\n- [GitHub Advisory](https://github.com/advisories/GHSA-qq89-hq3f-393p)\n","access":"public","severity":"high","cwe":"CWE-22","metadata":{"module_type":"","exploitability":7,"affected_components":""},"url":"https://npmjs.com/advisories/1780"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1781,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.7","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar"]},{"version":"4.4.16","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar"]}],"id":1781,"created":"2021-08-31T16:10:27.513Z","updated":"2021-08-31T16:12:58.622Z","deleted":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"tar","cves":["CVE-2021-37713"],"vulnerable_versions":"<4.4.18 || >=5.0.0 <5.0.10 || >=6.0.0 <6.1.9","patched_versions":">=4.4.18 <5.0.0 || >=5.0.10 <6.0.0 || >=6.1.9","overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","recommendation":"Upgrade to versions 4.4.18, 5.0.10, 6.1.9 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-37713)\n- [GitHub Advisory](https://github.com/advisories/GHSA-5955-9wpr-37jh)\n","access":"public","severity":"high","cwe":"CWE-22","metadata":{"module_type":"","exploitability":7,"affected_components":""},"url":"https://npmjs.com/advisories/1781"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1781,"path":"@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.7","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar"]},{"version":"4.4.16","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar"]}],"id":1781,"created":"2021-08-31T16:10:27.513Z","updated":"2021-08-31T16:12:58.622Z","deleted":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"tar","cves":["CVE-2021-37713"],"vulnerable_versions":"<4.4.18 || >=5.0.0 <5.0.10 || >=6.0.0 <6.1.9","patched_versions":">=4.4.18 <5.0.0 || >=5.0.10 <6.0.0 || >=6.1.9","overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","recommendation":"Upgrade to versions 4.4.18, 5.0.10, 6.1.9 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-37713)\n- [GitHub Advisory](https://github.com/advisories/GHSA-5955-9wpr-37jh)\n","access":"public","severity":"high","cwe":"CWE-22","metadata":{"module_type":"","exploitability":7,"affected_components":""},"url":"https://npmjs.com/advisories/1781"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1751,"path":"@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/architect>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/schematics>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/angular>@angular-devkit/core>chokidar>glob-parent","@hmcts/ccd-case-ui-toolkit>@angular/cli>@schematics/update>@angular-devkit/core>chokidar>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>anymatch>micromatch>parse-glob>glob-base>glob-parent"]},{"version":"2.0.0","paths":["@hmcts/ccd-case-ui-toolkit>@angular/compiler-cli>chokidar>glob-parent"]}],"id":1751,"created":"2021-06-07T21:57:10.135Z","updated":"2021-06-07T21:58:07.745Z","deleted":null,"title":"Regular expression denial of service","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"glob-parent","cves":["CVE-2020-28469"],"vulnerable_versions":"<5.1.2","patched_versions":">=5.1.2","overview":"`glob-parent` before 5.1.2 has a regular expression denial of service vulnerability. The enclosure regex used to check for strings ending in enclosure containing path separator.","recommendation":"Upgrade to version 5.1.2 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2020-28469)\n- [GitHub Advisory](https://github.com/advisories/GHSA-ww39-953v-wcq6)\n","access":"public","severity":"moderate","cwe":"CWE-400","metadata":{"module_type":"","exploitability":5,"affected_components":""},"url":"https://npmjs.com/advisories/1751"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1780,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.7","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar"]},{"version":"4.4.16","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar"]}],"id":1780,"created":"2021-08-31T16:10:17.945Z","updated":"2021-08-31T16:12:52.860Z","deleted":null,"title":"Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"tar","cves":["CVE-2021-37712"],"vulnerable_versions":"<4.4.18 || >=5.0.0 <5.0.10 || >=6.0.0 <6.1.9","patched_versions":">=4.4.18 <5.0.0 || >=5.0.10 <6.0.0 || >=6.1.9","overview":"### Impact\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\n\nThis logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\n\nThe v3 branch of `node-tar` has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of `node-tar`. If this is not possible, a workaround is available below.\n\n### Patches\n\n6.1.9 || 5.0.10 || 4.4.18\n\n### Workarounds\n\nUsers may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.\n\n```js\nconst tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) => {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n```\n\nUsers are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.\n\n#### Fix\n\nThe problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:\n\n1. The `String.normalize('NFKD')` method is used to first normalize all unicode to its maximally compatible and multi-code-point form.\n2. All slashes are normalized to `/` on Windows systems (on posix systems, `\\` is a valid filename character, and thus left intact).\n3. When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.\n","recommendation":"Upgrade to versions 4.4.18, 5.0.10, 6.1.9 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-37712)\n- [GitHub Advisory](https://github.com/advisories/GHSA-qq89-hq3f-393p)\n","access":"public","severity":"high","cwe":"CWE-22","metadata":{"module_type":"","exploitability":7,"affected_components":""},"url":"https://npmjs.com/advisories/1780"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1781,"path":"@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"6.1.7","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>npm-registry-fetch>make-fetch-happen>cacache>tar","@hmcts/ccd-case-ui-toolkit>npm-registry-fetch>make-fetch-happen>cacache>tar"]},{"version":"4.4.16","paths":["@hmcts/ccd-case-ui-toolkit>@angular/cli>pacote>tar"]}],"id":1781,"created":"2021-08-31T16:10:27.513Z","updated":"2021-08-31T16:12:58.622Z","deleted":null,"title":"Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization","found_by":{"link":"","name":"Anonymous","email":""},"reported_by":{"link":"","name":"Anonymous","email":""},"module_name":"tar","cves":["CVE-2021-37713"],"vulnerable_versions":"<4.4.18 || >=5.0.0 <5.0.10 || >=6.0.0 <6.1.9","patched_versions":">=4.4.18 <5.0.0 || >=5.0.10 <6.0.0 || >=6.1.9","overview":"### Impact\n\nArbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution\n\nnode-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\n\nThis logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`.  If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory.\n\nAdditionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path.\n\nThis only affects users of `node-tar` on Windows systems.\n\n### Patches\n\n4.4.18 || 5.0.10 || 6.1.9\n\n### Workarounds\n\nThere is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.\n\nUsers are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.\n\n### Fix\n\nThe fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".\n\nAdditionally, a path starting with a drive letter and then two dots, like `c:../`, would bypass the check for `..` path portions.  This is checked properly in the patched versions.\n\nFinally, a defense in depth check is added, such that if the `entry.absolute` is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.\n","recommendation":"Upgrade to versions 4.4.18, 5.0.10, 6.1.9 or later","references":"- [CVE](https://nvd.nist.gov/vuln/detail/CVE-2021-37713)\n- [GitHub Advisory](https://github.com/advisories/GHSA-5955-9wpr-37jh)\n","access":"public","severity":"high","cwe":"CWE-22","metadata":{"module_type":"","exploitability":7,"affected_components":""},"url":"https://npmjs.com/advisories/1781"}}}
