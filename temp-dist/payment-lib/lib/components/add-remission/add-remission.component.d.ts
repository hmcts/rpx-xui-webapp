import { OnInit, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup, FormArray } from '@angular/forms';
import { IFee } from '../../interfaces/IFee';
import { Router } from '@angular/router';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { PaymentLibComponent } from '../../payment-lib.component';
import { IPayment } from '../../interfaces/IPayment';
import { RefundsService } from '../../services/refunds/refunds.service';
import { NotificationService } from '../../services/notification/notification.service';
import { IRefundReasons } from '../../interfaces/IRefundReasons';
import { IRefundContactDetails } from '../../interfaces/IRefundContactDetails';
import { ChangeDetectorRef } from '@angular/core';
import { IRemission } from '../../interfaces/IRemission';
import { OrderslistService } from '../../services/orderslist.service';
import { IPaymentGroup } from '../../interfaces/IPaymentGroup';
import * as i0 from "@angular/core";
export declare class AddRemissionComponent implements OnInit {
    private formBuilder;
    private router;
    private paymentViewService;
    private notificationService;
    private paymentLibComponent;
    private refundService;
    private cd;
    private OrderslistService;
    fee: IFee;
    fees: any[];
    payment: IPayment;
    remission: IRemission;
    ccdCaseNumber: string;
    caseType: string;
    viewCompStatus: string;
    paymentGroupRef: string;
    isTurnOff: boolean;
    isRefundRemission: boolean;
    isStrategicFixEnable: boolean;
    paidAmount: any;
    isFromRefundListPage: boolean;
    isFromPaymentDetailPage: boolean;
    isFromServiceRequestPage: boolean;
    isFullyRefund: boolean;
    feeamount: number;
    refundPaymentReference: string;
    isFromRefundStatusPage: boolean;
    changeRefundReason: string;
    isServiceRequest: string;
    LOGGEDINUSERROLES: string[];
    orderDetail: any[];
    orderRef: string;
    orderStatus: string;
    orderParty: string;
    orderCreated: Date;
    orderCCDEvent: string;
    takePayment: boolean;
    orderFeesTotal: number;
    orderTotalPayments: number;
    orderRemissionTotal: number;
    cancelRemission: EventEmitter<void>;
    refundListReason: EventEmitter<{
        reason: string;
        code: string;
    }>;
    refundListAmount: EventEmitter<string>;
    refundFees: EventEmitter<IFee[]>;
    refund: {
        reason: {
            duplicate: string;
            humanerror: string;
            caseWithdrawn: string;
            other: string;
        };
    };
    contactDetailsObj: IRefundContactDetails;
    notification: any;
    remissionForm: FormGroup;
    hasErrors: boolean;
    viewStatus: string;
    errorMessage: any;
    option: string;
    isConfirmationBtnDisabled: boolean;
    bsPaymentDcnNumber: string;
    selectedValue: string;
    amount: any;
    retroRemission: boolean;
    remissionReference: string;
    refundReference: string;
    refundAmount: string;
    paymentExplanationHasError: boolean;
    refundReason: string;
    selectedRefundReason: string;
    selectedRefundReasonCode: string;
    displayRefundReason: string;
    refundCode: string;
    remessionPayment: IPayment;
    isRemissionCodeEmpty: boolean;
    remissionCodeHasError: boolean;
    isAmountEmpty: boolean;
    isReasonEmpty: boolean;
    amountHasError: boolean;
    isRemissionLessThanFeeError: boolean;
    refundHasError: boolean;
    isPaymentSuccess: boolean;
    isRemissionApplied: boolean;
    remissionamt: number;
    elementId: any;
    commonRefundReasons: any[];
    showReasonText: boolean;
    isRefundReasonsSelected: boolean;
    default: string;
    reasonLength: number;
    refundReasons: IRefundReasons[];
    pattern1: string;
    pattern2: string;
    sendOrderDetail: any[];
    sendOrderRef: string;
    paymentReference: string;
    class: string;
    errorMsg: any[];
    totalRefundAmount: number;
    quantityUpdated: number;
    fullRefund: boolean;
    allowedRefundAmount: number;
    isRemissionsMatch: boolean;
    paymentFees: IFee[];
    paymentGroup: IPaymentGroup;
    isStatusAllocated: boolean;
    isFromCheckAnsPage: boolean;
    refundAmtForFeeVolumes: number;
    paymentObj: IPayment;
    templateInstructionType: string;
    notificationPreview: boolean;
    component: {
        account_number: string;
        amount: number;
        case_reference: string;
        ccd_case_number: string;
        channel: string;
        currency: string;
        customer_reference: string;
        date_created: string;
        date_updated: string;
        description: string;
        method: string;
        organisation_name: string;
        payment_allocation: any[];
        reference: string;
        service_name: string;
        site_id: string;
        status: string;
    };
    constructor(formBuilder: FormBuilder, router: Router, paymentViewService: PaymentViewService, notificationService: NotificationService, paymentLibComponent: PaymentLibComponent, refundService: RefundsService, cd: ChangeDetectorRef, OrderslistService: OrderslistService);
    ngOnInit(): void;
    goToPaymentViewComponent(): void;
    refundFeesList(): void;
    get feesList(): FormArray<any>;
    noneSelected(): boolean;
    check_en(i: any, v1: any, AppAmt: any, Volume: any): void;
    addRemission(): void;
    confirmRemission(): void;
    resetRemissionForm(val: any, field: any): void;
    addRemissionCode(): void;
    gotoAddRetroRemissionCodePage(): void;
    gotoCheckRetroRemissionPage(payment: IPayment): void;
    gotoAmountRetroRemission(): void;
    gotoProcessRetroRemissionPage(): void;
    gotoProcessRetroRemission(note?: IRefundContactDetails): void;
    confirmRetroRemission(): void;
    processRefund(): void;
    gotoIssueRefundConfirmation(payment: IPayment): void;
    gotoIssueRefundPage(): void;
    gotoIssuePage(isFullyRefund: any): void;
    calAmtToRefund(value: any, amount: any, volume: any, i: any): void;
    gotoContactDetailsPage(note?: IRefundContactDetails): void;
    getRefundReasons(): void;
    getErrorClass(elementId: any): void;
    changeIssueRefundReason(): void;
    confirmIssueRefund(isFullyRefund: any): void;
    gotoRefundReasonPage(): void;
    selectRadioButton(key: any, value: any): void;
    selectchange(args: any): void;
    getContactDetails(obj: IRefundContactDetails, type: any): void;
    gotoPartialFeeRefundScreen(): void;
    gotoServiceRequestPage(event: any): void;
    gotoAddressPage(note?: IRefundContactDetails): void;
    gotoRemissionSuccess(event: Event): void;
    gotoCasetransationPage(): void;
    gotoCasetransationPageCancelBtnClicked(event: Event): void;
    resetOrderData(): void;
    changeRefundAmount(): void;
    getFormattedCurrency(currency: number): string | number;
    showNotificationPreview(): void;
    hideNotificationPreview(): void;
    getTemplateInstructionType(paymentReference: string, payment?: IPayment): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AddRemissionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AddRemissionComponent, "ccpay-add-remission", never, { "fee": { "alias": "fee"; "required": false; }; "fees": { "alias": "fees"; "required": false; }; "payment": { "alias": "payment"; "required": false; }; "remission": { "alias": "remission"; "required": false; }; "ccdCaseNumber": { "alias": "ccdCaseNumber"; "required": false; }; "caseType": { "alias": "caseType"; "required": false; }; "viewCompStatus": { "alias": "viewCompStatus"; "required": false; }; "paymentGroupRef": { "alias": "paymentGroupRef"; "required": false; }; "isTurnOff": { "alias": "isTurnOff"; "required": false; }; "isRefundRemission": { "alias": "isRefundRemission"; "required": false; }; "isStrategicFixEnable": { "alias": "isStrategicFixEnable"; "required": false; }; "paidAmount": { "alias": "paidAmount"; "required": false; }; "isFromRefundListPage": { "alias": "isFromRefundListPage"; "required": false; }; "isFromPaymentDetailPage": { "alias": "isFromPaymentDetailPage"; "required": false; }; "isFromServiceRequestPage": { "alias": "isFromServiceRequestPage"; "required": false; }; "isFullyRefund": { "alias": "isFullyRefund"; "required": false; }; "feeamount": { "alias": "feeamount"; "required": false; }; "refundPaymentReference": { "alias": "refundPaymentReference"; "required": false; }; "isFromRefundStatusPage": { "alias": "isFromRefundStatusPage"; "required": false; }; "changeRefundReason": { "alias": "changeRefundReason"; "required": false; }; "isServiceRequest": { "alias": "isServiceRequest"; "required": false; }; "LOGGEDINUSERROLES": { "alias": "LOGGEDINUSERROLES"; "required": false; }; "orderDetail": { "alias": "orderDetail"; "required": false; }; "orderRef": { "alias": "orderRef"; "required": false; }; "orderStatus": { "alias": "orderStatus"; "required": false; }; "orderParty": { "alias": "orderParty"; "required": false; }; "orderCreated": { "alias": "orderCreated"; "required": false; }; "orderCCDEvent": { "alias": "orderCCDEvent"; "required": false; }; "takePayment": { "alias": "takepayment"; "required": false; }; "orderFeesTotal": { "alias": "orderFeesTotal"; "required": false; }; "orderTotalPayments": { "alias": "orderTotalPayments"; "required": false; }; "orderRemissionTotal": { "alias": "orderRemissionTotal"; "required": false; }; }, { "cancelRemission": "cancelRemission"; "refundListReason": "refundListReason"; "refundListAmount": "refundListAmount"; "refundFees": "refundFees"; }, never, never, false, never>;
}
//# sourceMappingURL=add-remission.component.d.ts.map