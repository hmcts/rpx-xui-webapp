import { Injectable } from '@angular/core';
import { timer } from 'rxjs';
import { delayWhen, finalize, mergeMap, retryWhen, tap, timeout } from 'rxjs/operators';
import * as i0 from "@angular/core";
class ArtificialDelayContext {
    constructor(preferredDelay) {
        this.preferredDelay = preferredDelay;
        this.artificialDelayOn = true;
        this.selectedDelay = this.selectActualDelayTime();
    }
    ;
    switchArtificialDelays(status) {
        this.artificialDelayOn = status;
        this.selectedDelay = this.selectActualDelayTime();
    }
    turnOnArtificialDelays() {
        this.switchArtificialDelays(true);
    }
    turnOffArtificialDelays() {
        this.switchArtificialDelays(false);
    }
    getActualDelay() {
        return this.artificialDelayOn ? this.selectedDelay : 0;
    }
    shouldApplyArtificialDelay() {
        return this.preferredDelay > 0;
    }
    selectActualDelayTime() {
        return Date.now() % 2 == 0 ? this.preferredDelay : 1;
    }
}
export class RetryUtil {
    pipeTimeoutMechanismOn(in$, preferredArtificialDelay, timeoutPeriods) {
        const artificialDelayContext = new ArtificialDelayContext(preferredArtificialDelay);
        console.info(`Piping a retry mechanism with timeouts {${timeoutPeriods}}.`);
        console.info(`Artificial delay will be applied: ${artificialDelayContext.shouldApplyArtificialDelay()}.`);
        let out$ = in$;
        if (artificialDelayContext.shouldApplyArtificialDelay()) {
            console.info(`Preferred artificial delay: ${preferredArtificialDelay} seconds. Actual delay selected: ${artificialDelayContext.getActualDelay()}`);
            out$ = this.pipeArtificialDelayOn(out$, artificialDelayContext);
        }
        out$ = this.pipeTimeOutControlOn(out$, timeoutPeriods);
        out$ = this.pipeRetryMechanismOn(out$, artificialDelayContext);
        return out$;
    }
    pipeTimeOutControlOn(in$, timeoutPeriods) {
        const timeOutAfterSeconds = timeoutPeriods[0];
        console.info(`Piping timeout control with ${timeOutAfterSeconds} seconds.`);
        const out$ = in$.pipe(timeout(timeOutAfterSeconds * 1000));
        return out$;
    }
    pipeRetryMechanismOn(in$, artificialDelayContext) {
        const retryStrategy = (errors) => {
            return errors.pipe(mergeMap((error, i) => {
                console.error(`Mapping error ${error?.name}, ${i}`);
                console.error(error);
                if (error?.name === 'TimeoutError' && i === 0) {
                    artificialDelayContext.turnOffArtificialDelays();
                    console.info('Will retry, after a timeout error.');
                }
                else {
                    console.error('Will NOT retry.');
                    throw error;
                }
                return timer(0);
            }), finalize(() => console.log('We are done!')));
        };
        const out$ = in$.pipe(retryWhen(retryStrategy));
        return out$;
    }
    pipeArtificialDelayOn(in$, artificialDelayContext) {
        let out$ = in$.pipe(tap(() => {
            console.log(`Artificially delaying for ${artificialDelayContext.getActualDelay()} seconds..`);
        }));
        out$ = out$.pipe(delayWhen(() => timer(artificialDelayContext.getActualDelay() * 1000)));
        out$ = out$.pipe(tap(() => {
            console.log(`Artificially delayed for ${artificialDelayContext.getActualDelay()} seconds..`);
        }));
        return out$;
    }
}
RetryUtil.ɵfac = function RetryUtil_Factory(t) { return new (t || RetryUtil)(); };
RetryUtil.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RetryUtil, factory: RetryUtil.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RetryUtil, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,