import { OnInit } from '@angular/core';
import { RefundsService } from '../../services/refunds/refunds.service';
import { NotificationService } from '../../services/notification/notification.service';
import { FormBuilder, FormGroup } from '@angular/forms';
import { IRefundList } from '../../interfaces/IRefundList';
import { IRefundsNotifications } from '../../interfaces/IRefundsNotifications';
import { OrderslistService } from '../../services/orderslist.service';
import { IRefundContactDetails } from '../../interfaces/IRefundContactDetails';
import { IRefundStatus } from '../../interfaces/IRefundStatus';
import { PaymentLibComponent } from '../../payment-lib.component';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { IPayment } from '../../interfaces/IPayment';
import { IFee } from '../../interfaces/IFee';
import { IRefundFee } from '../../interfaces/IRefundFee';
import * as i0 from "@angular/core";
export declare class RefundStatusComponent implements OnInit {
    private formBuilder;
    private refundService;
    private notificationService;
    private paymentLibComponent;
    private OrderslistService;
    private paymentViewService;
    LOGGEDINUSERROLES: string[];
    API_ROOT: string;
    ccdCaseNumber: string;
    isTurnOff: boolean;
    orderParty: string;
    refundStatusForm: FormGroup;
    selectedRefundReason: string;
    rejectedRefundList: IRefundList[];
    notificationList: any;
    notification: any;
    approvalStatus: string;
    rejectStatus: string;
    errorMessage: any;
    viewName: string;
    refundReason: string;
    refundlist: IRefundList;
    bsPaymentDcnNumber: string;
    isCallFromRefundList: boolean;
    refundButtonState: string;
    isAmountEmpty: boolean;
    isReasonEmpty: boolean;
    amountHasError: boolean;
    isRemissionLessThanFeeError: boolean;
    refundHasError: boolean;
    refundReasons: any[];
    refundStatusHistories: IRefundStatus[];
    refundNotifications: IRefundStatus[];
    isResendOperationSuccess: boolean;
    isEditDetailsClicked: boolean;
    isEditAddressDeatilsClicked: boolean;
    addressDetails: IRefundContactDetails;
    refundReference: string;
    refundAmount: string;
    refundCode: string;
    isRefundBtnDisabled: boolean;
    isFromPayBubble: boolean;
    oldRefundReason: string;
    refundreason: string;
    navigationpage: string;
    isLastUpdatedByCurrentUser: boolean;
    isProcessRefund: boolean;
    changedAmount: number;
    isRemissionsMatch: boolean;
    payment: IPayment;
    changeRefundReason: string;
    fees: IFee[];
    refundFees: IRefundFee[];
    paymentObj: IPayment;
    templateInstructionType: string;
    notificationSentViewIndex: number;
    notificationPreview: boolean;
    notificationSentView: boolean;
    allowedRolesToAccessRefund: string[];
    constructor(formBuilder: FormBuilder, refundService: RefundsService, notificationService: NotificationService, paymentLibComponent: PaymentLibComponent, OrderslistService: OrderslistService, paymentViewService: PaymentViewService);
    ngOnInit(): void;
    getRefundsStatusHistoryList(): void;
    getRefundsNotification(): void;
    goToRefundView(refundlist: IRefundList, navigationpage: string): void;
    loadCaseTransactionPage(): void;
    loadRefundListPage(): void;
    gotoReviewDetailsPage(event: any): void;
    gotoReviewAndReSubmitPage(): void;
    gotoRefundReasonPage(refundReason: string): void;
    gotoAmountPage(): void;
    goToReviewAndSubmitView(): void;
    resetRemissionForm(val: any, field: any): void;
    selectRadioButton(key: any, value: any): void;
    getRefundListReason(refundListReason: any): void;
    getRefundAmount(amount: number): void;
    getRefundFees(fees: IFee[]): void;
    gotoReviewRefundConfirmationPage(): void;
    gotoEditAddressDetails(note: IRefundsNotifications): void;
    getContactDetails(obj: IRefundContactDetails): void;
    getContactDetailsForRefundList(obj: IRefundContactDetails): void;
    gotoEditDetailsPage(note?: any, view?: string): void;
    submitEditDetail(): void;
    putResend(notification: IRefundsNotifications): void;
    gotoRefundViewPageCancelBtnClicked(event: Event): void;
    gotoRefundReviewAndSubmitViewPageCancelBtnClicked(event: Event): void;
    goToRefundProcessComponent(refundReference: string, refundList: IRefundList): void;
    getTemplateInstructionType(payment: IPayment, paymentReference: string): void;
    showNotificationPreview(): void;
    hideNotificationPreview(): void;
    showNotificationSentView(index: number): void;
    hideNotificationSentView(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RefundStatusComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RefundStatusComponent, "ccpay-refund-status", never, { "LOGGEDINUSERROLES": { "alias": "LOGGEDINUSERROLES"; "required": false; }; "API_ROOT": { "alias": "API_ROOT"; "required": false; }; "ccdCaseNumber": { "alias": "ccdCaseNumber"; "required": false; }; "isTurnOff": { "alias": "isTurnOff"; "required": false; }; "orderParty": { "alias": "orderParty"; "required": false; }; }, {}, never, never, false, never>;
}
//# sourceMappingURL=refund-status.component.d.ts.map