import { ComplexFieldOverride } from '../components/case-editor/domain/wizard-page-field-complex-override.model';
import { WizardPageField } from '../components/case-editor/domain/wizard-page-field.model';
import { WizardPage } from '../components/case-editor/domain/wizard-page.model';
import { CaseEventTrigger } from '../domain/case-view/case-event-trigger.model';
import { CaseFieldBuilder } from './case-field-builder';
export const textFieldType = () => {
    return {
        id: 'Text',
        type: 'Text',
        complex_fields: []
    };
};
export const createCaseEventTrigger = (id, name, caseId, showSummary, caseFields, wizardPages = [], canSaveDraft = false) => {
    const eventTrigger = new CaseEventTrigger();
    eventTrigger.id = id;
    eventTrigger.name = name;
    eventTrigger.case_id = caseId;
    eventTrigger.show_summary = showSummary;
    eventTrigger.wizard_pages = wizardPages;
    eventTrigger.event_token = 'test-token';
    eventTrigger.case_fields = caseFields;
    eventTrigger.can_save_draft = canSaveDraft;
    return eventTrigger;
};
export const aCaseField = (id, label, type, displayContext, showSummaryContentOption, typeComplexFields = [], retainHiddenValue, hidden) => {
    return ({
        id: id || 'personFirstName',
        field_type: {
            id: type.toString() || 'Text',
            type: type || 'Text',
            complex_fields: typeComplexFields || []
        },
        display_context: displayContext || 'OPTIONAL',
        label: label || 'First name',
        show_summary_content_option: showSummaryContentOption,
        retain_hidden_value: retainHiddenValue || false,
        hidden: hidden || false
    });
};
export const createWizardPage = (id, label, order, wizardPageFields = [], caseFields = [], showCondition, parsedShowCondition = null) => {
    const wizardPage = new WizardPage();
    wizardPage.id = id;
    wizardPage.label = label;
    wizardPage.order = order;
    wizardPage.wizard_page_fields = wizardPageFields;
    wizardPage.case_fields = caseFields;
    wizardPage.show_condition = showCondition;
    wizardPage.parsedShowCondition = parsedShowCondition;
    return wizardPage;
};
export const createWizardPageField = (id, order, pageColumnNumber, complexFieldOverrides = []) => {
    const wizardPageField = new WizardPageField();
    wizardPageField.case_field_id = id;
    wizardPageField.order = order;
    wizardPageField.page_column_no = pageColumnNumber;
    wizardPageField.complex_field_overrides = complexFieldOverrides;
    return wizardPageField;
};
export const createComplexFieldOverride = (id, order, displayContext, label, hint, showCondition) => {
    const complexFieldOverride = new ComplexFieldOverride();
    complexFieldOverride.complex_field_element_id = id;
    complexFieldOverride.display_context = displayContext;
    complexFieldOverride.label = label;
    complexFieldOverride.hint_text = hint;
    complexFieldOverride.show_condition = showCondition;
    return complexFieldOverride;
};
export const createHiddenComplexFieldOverride = (id) => {
    const complexFieldOverride = new ComplexFieldOverride();
    complexFieldOverride.complex_field_element_id = id;
    complexFieldOverride.display_context = 'HIDDEN';
    return complexFieldOverride;
};
export const createCaseField = (id, label, hint, fieldType, displayContext, order = undefined, showCondition = undefined, acls = undefined, hidden) => {
    return CaseFieldBuilder.create()
        .withId(id || 'personFirstName')
        .withFieldType(fieldType || textFieldType())
        .withDisplayContext(displayContext || 'OPTIONAL')
        .withLabel(label || 'First name')
        .withHintText(hint || 'First name hint text')
        .withShowSummaryContentOption(0)
        .withOrder(order)
        .withShowCondition(showCondition || undefined)
        .withACLs(acls)
        .withHidden(hidden || false)
        .build();
};
export const newCaseField = (id, label, hint, fieldType, displayContext, order = undefined) => {
    return CaseFieldBuilder.create()
        .withId(id || 'personFirstName')
        .withFieldType(fieldType || textFieldType())
        .withDisplayContext(displayContext || 'OPTIONAL')
        .withHintText(hint || 'First name hint text')
        .withLabel(label || 'First name')
        .withOrder(order)
        .withShowSummaryContentOption(0);
};
export const createFieldType = (typeId, type, complexFields = [], collectionFieldType = undefined) => {
    return {
        id: typeId || 'Text',
        type: type || 'Text',
        complex_fields: complexFields || [],
        collection_field_type: collectionFieldType || undefined
    };
};
export const createFixedListFieldType = (typeId, fixedListItems = []) => {
    return {
        id: `FixedList-${typeId}`,
        type: 'FixedList',
        fixed_list_items: fixedListItems || []
    };
};
export const createMultiSelectListFieldType = (typeId, fixedListItems = []) => {
    return {
        id: `MultiSelectList-${typeId}`,
        type: 'MultiSelectList',
        fixed_list_items: fixedListItems || []
    };
};
export const createACL = (role, aclCreate, aclRead, aclUpdate, aclDelete) => {
    return ({
        role: role || 'roleX',
        create: aclCreate,
        read: aclRead,
        update: aclUpdate,
        delete: aclDelete
    });
};
//# sourceMappingURL=data:application/json;base64,