[{"__symbolic":"module","version":4,"metadata":{"ReadComplexFieldCollectionTableComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"../base-field/abstract-field-read.component","name":"AbstractFieldReadComponent","line":122,"character":62},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"ccd-read-complex-field-collection-table","template":"\n     <div class=\"complex-panel\" [hidden]=\"caseField.hidden\">\n          <dl class=\"complex-panel-title\"><dt><span class=\"text-16\">{{caseField.label}}</span></dt><dd></dd></dl>\n          <table class=\"complex-panel-table\">\n            <tbody>\n            <!-- <COMPLEX table field header>-->\n            <tr>\n              <ng-container *ngFor=\"let heading of columns\">\n                <ng-container *ngFor=\"let name of columnsAllLabels | keyvalue:keepOriginalOrder\">\n                  <th *ngIf=\"heading.trim() == name.key\">\n                    <span class=\"text-16\">{{name.value.label}}</span>\n                    <a href=\"javascript:void(0)\" (click)=\"sortRowsByColumns(name.key)\"  class=\"sort-widget\" [innerHTML]=\"sortWidget(name.value)\"></a>\n                  </th>\n                </ng-container>\n              </ng-container>\n              <th></th>\n            </tr>\n            <!-- </COMPLEX table field header>-->\n            <ng-container *ngFor=\"let item of rows; let i = index; trackBy:trackByIndex;\" >\n              <!-- <COMPLEX table collapsed view>-->\n              <tr class=\"new-table-row accordion-heading\" (click)=\"isHidden[i] = !isHidden[i]\">\n                <ng-container *ngFor=\"let heading of columns\">\n                  <ng-container  *ngFor=\"let name of item | keyvalue\">\n                    <td *ngIf=\"heading.trim() == name.key\" class=\"text-16\">\n                      <div *ngIf=\"name.value;else showEmptyTd\">\n                        <ccd-field-read [caseField]=\"{\n                          id: name.key,\n                          label: name.value.label,\n                          field_type: this.columnsHorizontalLabel[name.key].type,\n                          value: name.value\n                        }\" [context]=\"context\"></ccd-field-read>\n                      </div>\n                      <ng-template #showEmptyTd><div>&nbsp;</div></ng-template>\n                    </td>\n\n                  </ng-container>\n                </ng-container>\n                  <td>\n                    <div style=\"float: right;\">\n                      <a href=\"javascript:void(0)\"> <img src=\"{{ getImage(i) }}\" class=\"accordion-image\"/></a>\n                    </div>\n                   </td>\n              </tr>\n              <!-- </COMPLEX table collapsed view>-->\n              <!-- <COMPLEX table expanded view>-->\n              <tr [hidden]=\"isHidden[i]\">\n                <td [colSpan]=\"columns.length +1\">\n                  <table class=\"complex-panel-table\">\n                    <tbody>\n                  \n                    <ng-container *ngFor=\"let vLabel of columnsVerticalLabel | keyvalue:keepOriginalOrder\">\n                      <ng-container  *ngFor=\"let name of item | keyvalue\">\n                        <ng-container *ngIf=\"vLabel.key == name.key && isNotBlank(name.value)\" >\n                        <!-- <COMPLEX table expandable body simple field>-->\n\n                        <tr class=\"complex-panel-simple-field accordion-body\"\n                            ccdConditionalShow [caseField]=\"vLabel.value.caseField\" [contextFields]=\"caseField | ccdFieldsFilter :true :i\">\n                          <th><span class=\"text-16\">{{vLabel.value.label}}</span></th>\n                          <td *ngIf=\"vLabel.value.type !== 'Complex'\" class=\"text-16\">\n                            <ccd-field-read [caseField]=\"{\n                              id: name.key,\n                              label: vLabel.label,\n                              field_type: vLabel.value.caseField.field_type,\n                              value: name.value\n                            }\" [context]=\"context\"></ccd-field-read>\n                          </td>\n                        </tr>\n                      \n                        <!-- </COMPLEX table expandable body simple field>-->\n                        <!-- <COMPLEX table expandable body complex field>-->\n\n                        <tr *ngIf=\"vLabel.value.type === 'Complex' && addCaseFieldValue(vLabel.value.caseField, name.value)\">\n                          <td colspan=\"2\">\n                            <ng-container *ngFor=\"let field of vLabel.value.caseField | ccdFieldsFilter\">\n                              <ng-container *ngIf=\"(field | ccdIsCompound); else SimpleRow\">\n                                <tr class=\"complex-panel-compound-field\" ccdConditionalShow ccdLabelSubstitutor [caseField]=\"field\"\n                                    [contextFields]=\"vLabel.value.caseField | ccdFieldsFilter\">\n                                  <td colspan=\"2\">\n                                    <span class=\"text-16\"><ccd-field-read [caseField]=\"field\" [context]=\"context\"></ccd-field-read></span>\n                                  </td>\n                                </tr>\n                              </ng-container>\n                              <ng-template #SimpleRow>\n                                <tr class=\"complex-panel-nested-field\" ccdConditionalShow ccdLabelSubstitutor [caseField]=\"field\"\n                                    [contextFields]=\"vLabel.value.caseField  | ccdFieldsFilter\">\n                                  <th><span class=\"text-16\">{{field.label}}</span></th>\n                                  <td *ngIf=\"!name.value.hasOwnProperty('CaseReference')\">\n                                    <span class=\"text-16\"><ccd-field-read [caseField]=\"field\" [context]=\"context\"></ccd-field-read></span>\n                                  </td>\n                                  <td *ngIf=\"name.value.hasOwnProperty('CaseReference')\">\n                                    <ccd-read-case-link-field [caseField]=\"addCaseReferenceValue(field, name.value.CaseReference)\" [context]=\"context\"></ccd-read-case-link-field>\n                                  </td>\n                                </tr>\n                              </ng-template>\n                            </ng-container>\n                          </td>\n                        </tr>\n                        <!-- <COMPLEX table expandable body complex field>-->\n                      </ng-container>\n                      </ng-container>\n                    </ng-container>\n                    </tbody>\n                  </table>\n                </td>\n              </tr>\n              <!-- </COMPLEX table expanded view>-->\n            </ng-container>\n            </tbody>\n          </table>\n        </div>\n  ","styles":["\n    .complex-panel{margin:13px 0px;border:1px solid #bfc1c3}.complex-panel .complex-panel-title{background-color:#dee0e2;padding:5px;border-bottom:1px solid #bfc1c3;font-weight:bold;display:block;color:#0b0c0c;padding-bottom:2px;font-family:\"nta\",Arial,sans-serif;font-weight:700;text-transform:none;font-size:16px;line-height:1.25}@media (min-width: 641px){.complex-panel .complex-panel-title{font-size:19px;line-height:1.31579}}.complex-panel .complex-panel-table>tbody>tr>th{vertical-align:top}.complex-panel .complex-panel-table>tbody>tr:last-child>th{border-bottom:none}.complex-panel .complex-panel-table th{padding-left:5px;font-weight:bold;border-bottom:none}.complex-panel .complex-panel-table td{padding-left:5px;padding-top:0;padding-bottom:0;border-bottom:none}.complex-panel .new-table-row{border-top:1px solid #bfc1c3}.complex-panel .complex-panel-simple-field th{padding-left:5px;padding-top:0px;padding-bottom:0px;width:295px}.complex-panel .complex-panel-nested-field th{padding-left:33px;padding-top:0px;padding-bottom:0px;width:200px}.complex-panel .complex-panel-compound-field td{padding:5px;border-bottom:none}.sort-widget{cursor:pointer;text-decoration:none;color:#0b0c0c}.accordion-wrapper{margin-bottom:20px}.accordion-wrapper .heading-medium{margin:0px}.accordion-wrapper .accordion-heading{border-top:1px solid #bfc1c3;padding-top:20px;padding-bottom:10px;height:20px;cursor:pointer}.accordion-wrapper .accordion-heading .accordion-image{width:25px;margin-right:20px}.accordion-wrapper .accordion-body{margin-top:20px;margin-right:20px}.accordion-wrapper .last-accordion{border-bottom:1px solid #bfc1c3;padding-bottom:30px}\n  "]}]}],"members":{"ngOnInit":[{"__symbolic":"method"}],"populateHorizontalLabels":[{"__symbolic":"method"}],"populateLabels":[{"__symbolic":"method"}],"populateCaseFieldValuesIntoRows":[{"__symbolic":"method"}],"getImage":[{"__symbolic":"method"}],"addCaseFieldValue":[{"__symbolic":"method"}],"isNotBlank":[{"__symbolic":"method"}],"addCaseReferenceValue":[{"__symbolic":"method"}],"isVerticleDataNotEmpty":[{"__symbolic":"method"}],"sortRowsByColumns":[{"__symbolic":"method"}],"isSortAscending":[{"__symbolic":"method"}],"sortWidget":[{"__symbolic":"method"}],"trackByIndex":[{"__symbolic":"method"}]}}}}]