import { OnInit } from '@angular/core';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { NotificationService } from '../../services/notification/notification.service';
import { PaymentLibComponent } from '../../payment-lib.component';
import { IPaymentGroup } from '../../interfaces/IPaymentGroup';
import { IFee } from '../../interfaces/IFee';
import { IPayment } from '../../interfaces/IPayment';
import { IRemission } from '../../interfaces/IRemission';
import { ChangeDetectorRef } from '@angular/core';
import { IPaymentFailure } from '../../interfaces/IPaymentFailure';
import { OrderslistService } from '../../services/orderslist.service';
import { IRefundContactDetails } from '../../interfaces/IRefundContactDetails';
import * as i0 from "@angular/core";
export declare class PaymentViewComponent implements OnInit {
    private paymentViewService;
    private notificationService;
    private paymentLibComponent;
    private cd;
    private OrderslistService;
    isTurnOff: boolean;
    isTakePayment: boolean;
    caseType: boolean;
    orderRef: string;
    orderStatus: string;
    orderTotalPayments: number;
    payment: IPayment;
    LOGGEDINUSERROLES: string[];
    ISPAYMENTSTATUSENABLED: string;
    orderParty: string;
    orderCreated: Date;
    orderCCDEvent: string;
    orderFeesTotal: number;
    orderRemissionTotal: number;
    orderDetail: any[];
    fees: any;
    isFullyRefund: boolean;
    isServiceRequest: string;
    errorMsg: string;
    paymentGroup: IPaymentGroup;
    errorMessage: string;
    ccdCaseNumber: string;
    selectedOption: string;
    dcnNumber: string;
    isStatusAllocated: boolean;
    isRemissionsMatch: boolean;
    feeId: IFee;
    viewStatus: string;
    isRefundRemission: boolean;
    isStrategicFixEnable: boolean;
    isAddFeeBtnEnabled: boolean;
    isIssueRefunfBtnEnable: boolean;
    allowedRolesToAccessRefund: string[];
    remissions: IRemission[];
    allPaymentsFailure: IPaymentFailure[];
    selectedPaymentsStatus: IPaymentFailure;
    remissionFeeAmt: number;
    isRefundRemissionBtnEnable: boolean;
    serviceReference: string;
    isFromServiceRequestPage: boolean;
    isFromPaymentDetailPage: boolean;
    paymentFees: IFee[];
    paymentType: string;
    isContinueBtnDisabled: boolean;
    viewCompStatus: string;
    contactDetailsObj: IRefundContactDetails;
    notification: any;
    isConfirmationBtnDisabled: boolean;
    refundReference: string;
    refundAmount: string;
    templateInstructionType: string;
    notificationPreview: boolean;
    constructor(paymentViewService: PaymentViewService, notificationService: NotificationService, paymentLibComponent: PaymentLibComponent, cd: ChangeDetectorRef, OrderslistService: OrderslistService);
    ngAfterContentChecked(): void;
    ngOnInit(): void;
    get isCardPayment(): boolean;
    get isTelephonyPayment(): boolean;
    goToPaymentList(): void;
    getOverPaymentValue(): number;
    goToServiceRequestPage(): void;
    goToCaseTransationPage(event: any): void;
    addRemission(fee: IFee): void;
    checkForFees(paymentGroup: any): boolean;
    processRefund(): void;
    gotoAddressPage(note?: IRefundContactDetails): void;
    addRefundForRemission(payment: IPayment, remission: IRemission[], fees: any): void;
    goToPaymentViewComponent(): void;
    issueRefund(paymentgrp: IPaymentGroup): void;
    getRemissionByFeeCode(feeCode: string, remissions: IRemission[]): IRemission;
    chkIsIssueRefundBtnEnable(payment: IPayment): boolean;
    chkIsAddRefundBtnEnable(remission: IRemission): boolean;
    chkIsAddRemissionBtnEnable(fee: IFee): boolean;
    selectPymentOption(paymentType: string): void;
    continuePayment(paymentgrp: IPaymentGroup): void;
    gotoPaymentSelectPage(event: Event): void;
    getContactDetails(obj: IRefundContactDetails): void;
    resetOrderData(): void;
    goToPaymentFailuePage(payment: any): void;
    goBackToPaymentView(event: any): void;
    getTemplateInstructionType(payment: IPayment): void;
    showNotificationPreview(): void;
    hideNotificationPreview(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaymentViewComponent, "ccpay-payment-view", never, { "isTurnOff": { "alias": "isTurnOff"; "required": false; }; "isTakePayment": { "alias": "isTakePayment"; "required": false; }; "caseType": { "alias": "caseType"; "required": false; }; "orderRef": { "alias": "orderRef"; "required": false; }; "orderStatus": { "alias": "orderStatus"; "required": false; }; "orderTotalPayments": { "alias": "orderTotalPayments"; "required": false; }; "payment": { "alias": "payment"; "required": false; }; "LOGGEDINUSERROLES": { "alias": "LOGGEDINUSERROLES"; "required": false; }; "ISPAYMENTSTATUSENABLED": { "alias": "ISPAYMENTSTATUSENABLED"; "required": false; }; "orderParty": { "alias": "orderParty"; "required": false; }; "orderCreated": { "alias": "orderCreated"; "required": false; }; "orderCCDEvent": { "alias": "orderCCDEvent"; "required": false; }; "orderFeesTotal": { "alias": "orderFeesTotal"; "required": false; }; "orderRemissionTotal": { "alias": "orderRemissionTotal"; "required": false; }; "orderDetail": { "alias": "orderDetail"; "required": false; }; "isServiceRequest": { "alias": "isServiceRequest"; "required": false; }; }, {}, never, never, false, never>;
}
//# sourceMappingURL=payment-view.component.d.ts.map