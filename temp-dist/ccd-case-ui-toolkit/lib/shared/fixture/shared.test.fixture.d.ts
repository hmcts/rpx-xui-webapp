import { ComplexFieldOverride } from '../components/case-editor/domain/wizard-page-field-complex-override.model';
import { WizardPageField } from '../components/case-editor/domain/wizard-page-field.model';
import { WizardPage } from '../components/case-editor/domain/wizard-page.model';
import { ShowCondition } from '../directives/conditional-show/domain/conditional-show.model';
import { CaseEventTrigger } from '../domain/case-view/case-event-trigger.model';
import { AccessControlList } from '../domain/definition/access-control-list.model';
import { CaseField } from '../domain/definition/case-field.model';
import { FieldTypeEnum } from '../domain/definition/field-type-enum.model';
import { FieldType } from '../domain/definition/field-type.model';
import { FixedListItem } from '../domain/definition/fixed-list-item.model';
import { CaseFieldBuilder } from './case-field-builder';
export declare const textFieldType: () => FieldType;
export declare const createCaseEventTrigger: (id: string, name: string, caseId: string, showSummary: boolean, caseFields: CaseField[], wizardPages?: any[], canSaveDraft?: boolean) => CaseEventTrigger;
export declare const aCaseField: (id: string, label: string, type: FieldTypeEnum, displayContext: string, showSummaryContentOption: number, typeComplexFields?: CaseField[], retainHiddenValue?: boolean, hidden?: boolean) => CaseField;
export declare const createWizardPage: (id: string, label: string, order: number, wizardPageFields: WizardPageField[], caseFields: CaseField[], showCondition: string, parsedShowCondition?: ShowCondition) => WizardPage;
export declare const createWizardPageField: (id: string, order: number, pageColumnNumber: number, complexFieldOverrides?: ComplexFieldOverride[]) => WizardPageField;
export declare const createComplexFieldOverride: (id: string, order: number, displayContext: string, label: string, hint: string, showCondition: string) => ComplexFieldOverride;
export declare const createHiddenComplexFieldOverride: (id: string) => ComplexFieldOverride;
export declare const createCaseField: (id: string, label: string, hint: string, fieldType: FieldType, displayContext: string, order?: any, showCondition?: any, acls?: AccessControlList[], hidden?: boolean) => CaseField;
export declare const newCaseField: (id: string, label: string, hint: string, fieldType: FieldType, displayContext: string, order?: any) => CaseFieldBuilder;
export declare const createFieldType: (typeId: string, type: FieldTypeEnum, complexFields?: CaseField[], collectionFieldType?: FieldType) => FieldType;
export declare const createFixedListFieldType: (typeId: string, fixedListItems?: FixedListItem[]) => FieldType;
export declare const createMultiSelectListFieldType: (typeId: string, fixedListItems?: FixedListItem[]) => FieldType;
export declare const createACL: (role: string, aclCreate: boolean, aclRead: boolean, aclUpdate: boolean, aclDelete: boolean) => AccessControlList;
//# sourceMappingURL=shared.test.fixture.d.ts.map