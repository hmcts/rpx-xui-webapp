import { OrderService } from '../../../services/order/order.service';
export class Wizard {
    constructor(wizardPages) {
        this.orderService = new OrderService();
        this.pages = this.orderService.sort(wizardPages);
    }
    firstPage(canShow) {
        return this.pages.find(page => canShow(page));
    }
    getPage(pageId, canShow) {
        const foundPage = this.findPage(pageId);
        if (!foundPage) {
            throw new Error(`No page for ID: ${pageId}`);
        }
        return canShow(foundPage) ? foundPage : undefined;
    }
    findWizardPage(caseFieldId) {
        return this.pages.find(wizardPage => wizardPage.case_fields &&
            wizardPage.case_fields?.filter(caseField => caseField.id === caseFieldId).length > 0);
    }
    nextPage(pageId, canShow) {
        const currentIndex = this.findExistingIndex(pageId);
        return this.pages
            .slice(currentIndex + 1)
            .find(page => canShow(page));
    }
    previousPage(pageId, canShow) {
        const currentIndex = this.findExistingIndex(pageId);
        return this.pages
            .slice(0, currentIndex)
            .reverse()
            .find(page => canShow(page));
    }
    hasPage(pageId) {
        return !!this.findPage(pageId);
    }
    hasPreviousPage(pageId, canShow) {
        return !!this.previousPage(pageId, canShow);
    }
    reverse() {
        return this.pages.slice().reverse();
    }
    findPage(pageId) {
        return this.pages.find(page => pageId === page.id);
    }
    findExistingIndex(pageId) {
        const index = this.pages.findIndex(page => pageId === page.id);
        if (-1 === index) {
            throw new Error(`No page for ID: ${pageId}`);
        }
        return index;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l6YXJkLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2NkLWNhc2UtdWktdG9vbGtpdC9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL2Nhc2UtZWRpdG9yL2RvbWFpbi93aXphcmQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBR3JFLE1BQU0sT0FBTyxNQUFNO0lBS2pCLFlBQVksV0FBeUI7UUFGcEIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR2pELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLFNBQVMsQ0FBQyxPQUE4QjtRQUM3QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxNQUFjLEVBQUUsT0FBOEI7UUFDM0QsTUFBTSxTQUFTLEdBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM5QztRQUNELE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sY0FBYyxDQUFDLFdBQW1CO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVztZQUN2RCxVQUFVLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssV0FBVyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFTSxRQUFRLENBQUMsTUFBYyxFQUFFLE9BQThCO1FBQzVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVwRCxPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7YUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLFlBQVksQ0FBQyxNQUFjLEVBQUUsT0FBOEI7UUFDaEUsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBELE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDZCxLQUFLLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQzthQUN0QixPQUFPLEVBQUU7YUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sT0FBTyxDQUFDLE1BQWM7UUFDM0IsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sZUFBZSxDQUFDLE1BQWMsRUFBRSxPQUE4QjtRQUNuRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU8sUUFBUSxDQUFDLE1BQWM7UUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLGlCQUFpQixDQUFDLE1BQWM7UUFDdEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDOUM7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByZWRpY2F0ZSB9IGZyb20gJy4uLy4uLy4uL2RvbWFpbi9wcmVkaWNhdGUubW9kZWwnO1xuaW1wb3J0IHsgT3JkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvb3JkZXIvb3JkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBXaXphcmRQYWdlIH0gZnJvbSAnLi93aXphcmQtcGFnZS5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBXaXphcmQge1xuICBwdWJsaWMgcGFnZXM6IFdpemFyZFBhZ2VbXTtcblxuICBwcml2YXRlIHJlYWRvbmx5IG9yZGVyU2VydmljZSA9IG5ldyBPcmRlclNlcnZpY2UoKTtcblxuICBjb25zdHJ1Y3Rvcih3aXphcmRQYWdlczogV2l6YXJkUGFnZVtdKSB7XG4gICAgdGhpcy5wYWdlcyA9IHRoaXMub3JkZXJTZXJ2aWNlLnNvcnQod2l6YXJkUGFnZXMpO1xuICB9XG5cbiAgcHVibGljIGZpcnN0UGFnZShjYW5TaG93OiBQcmVkaWNhdGU8V2l6YXJkUGFnZT4pOiBXaXphcmRQYWdlIHtcbiAgICByZXR1cm4gdGhpcy5wYWdlcy5maW5kKHBhZ2UgPT4gY2FuU2hvdyhwYWdlKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGFnZShwYWdlSWQ6IHN0cmluZywgY2FuU2hvdzogUHJlZGljYXRlPFdpemFyZFBhZ2U+KTogV2l6YXJkUGFnZSB7XG4gICAgY29uc3QgZm91bmRQYWdlOiBXaXphcmRQYWdlID0gdGhpcy5maW5kUGFnZShwYWdlSWQpO1xuICAgIGlmICghZm91bmRQYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHBhZ2UgZm9yIElEOiAke3BhZ2VJZH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhblNob3coZm91bmRQYWdlKSA/IGZvdW5kUGFnZSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBmaW5kV2l6YXJkUGFnZShjYXNlRmllbGRJZDogc3RyaW5nKTogV2l6YXJkUGFnZSB7XG4gICAgcmV0dXJuIHRoaXMucGFnZXMuZmluZCh3aXphcmRQYWdlID0+IHdpemFyZFBhZ2UuY2FzZV9maWVsZHMgJiZcbiAgICAgICAgd2l6YXJkUGFnZS5jYXNlX2ZpZWxkcz8uZmlsdGVyKGNhc2VGaWVsZCA9PiBjYXNlRmllbGQuaWQgPT09IGNhc2VGaWVsZElkKS5sZW5ndGggPiAwKTtcbiAgfVxuXG4gIHB1YmxpYyBuZXh0UGFnZShwYWdlSWQ6IHN0cmluZywgY2FuU2hvdzogUHJlZGljYXRlPFdpemFyZFBhZ2U+KTogV2l6YXJkUGFnZSB7XG4gICAgY29uc3QgY3VycmVudEluZGV4ID0gdGhpcy5maW5kRXhpc3RpbmdJbmRleChwYWdlSWQpO1xuXG4gICAgcmV0dXJuIHRoaXMucGFnZXNcbiAgICAgIC5zbGljZShjdXJyZW50SW5kZXggKyAxKVxuICAgICAgLmZpbmQocGFnZSA9PiBjYW5TaG93KHBhZ2UpKTtcbiAgfVxuXG4gIHB1YmxpYyBwcmV2aW91c1BhZ2UocGFnZUlkOiBzdHJpbmcsIGNhblNob3c6IFByZWRpY2F0ZTxXaXphcmRQYWdlPik6IFdpemFyZFBhZ2Uge1xuICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHRoaXMuZmluZEV4aXN0aW5nSW5kZXgocGFnZUlkKTtcblxuICAgIHJldHVybiB0aGlzLnBhZ2VzXG4gICAgICAuc2xpY2UoMCwgY3VycmVudEluZGV4KVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbmQocGFnZSA9PiBjYW5TaG93KHBhZ2UpKTtcbiAgfVxuXG4gIHB1YmxpYyBoYXNQYWdlKHBhZ2VJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5maW5kUGFnZShwYWdlSWQpO1xuICB9XG5cbiAgcHVibGljIGhhc1ByZXZpb3VzUGFnZShwYWdlSWQ6IHN0cmluZywgY2FuU2hvdzogUHJlZGljYXRlPFdpemFyZFBhZ2U+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5wcmV2aW91c1BhZ2UocGFnZUlkLCBjYW5TaG93KTtcbiAgfVxuXG4gIHB1YmxpYyByZXZlcnNlKCk6IFdpemFyZFBhZ2VbXSB7XG4gICAgcmV0dXJuIHRoaXMucGFnZXMuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRQYWdlKHBhZ2VJZDogc3RyaW5nKTogV2l6YXJkUGFnZSB7XG4gICAgcmV0dXJuIHRoaXMucGFnZXMuZmluZChwYWdlID0+IHBhZ2VJZCA9PT0gcGFnZS5pZCk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRFeGlzdGluZ0luZGV4KHBhZ2VJZDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMucGFnZXMuZmluZEluZGV4KHBhZ2UgPT4gcGFnZUlkID09PSBwYWdlLmlkKTtcblxuICAgIGlmICgtMSA9PT0gaW5kZXgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcGFnZSBmb3IgSUQ6ICR7cGFnZUlkfWApO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxufVxuIl19