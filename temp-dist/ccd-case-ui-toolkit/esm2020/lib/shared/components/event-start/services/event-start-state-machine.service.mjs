import { Injectable } from '@angular/core';
import { StateMachine } from '@edium/fsm';
import { EventStartStates } from '../models';
import * as i0 from "@angular/core";
const EVENT_STATE_MACHINE = 'EVENT STATE MACHINE';
export class EventStartStateMachineService {
    initialiseStateMachine(context) {
        return new StateMachine(EVENT_STATE_MACHINE, context);
    }
    createStates(stateMachine) {
        // Initial state
        this.stateCheckForMatchingTasks = stateMachine.createState(EventStartStates.CHECK_FOR_MATCHING_TASKS, false, this.entryActionForStateCheckForMatchingTasks);
        // States based on number of tasks available
        this.stateNoTask = stateMachine.createState(EventStartStates.NO_TASK, false, this.entryActionForStateNoTask);
        this.stateOneOrMoreTasks = stateMachine.createState(EventStartStates.ONE_OR_MORE_TASKS, false, this.entryActionForStateOneOrMoreTasks);
        // States based on number of tasks assigned to user
        this.stateTaskUnassigned = stateMachine.createState(EventStartStates.TASK_UNASSIGNED, false, this.entryActionForStateTaskUnAssigned);
        this.stateTaskAssignedToUser = stateMachine.createState(EventStartStates.TASK_ASSIGNED_TO_USER, false, this.entryActionForStateTaskAssignedToUser);
        this.stateOneTaskAssignedToUser = stateMachine.createState(EventStartStates.ONE_TASK_ASSIGNED_TO_USER, false, this.entryActionForStateOneTaskAssignedToUser);
        this.stateMultipleTasksAssignedToUser = stateMachine.createState(EventStartStates.MULTIPLE_TASKS_ASSIGNED_TO_USER, false, this.entryActionForStateMultipleTasksAssignedToUser);
        // Create final state, the second param isComplete is set to true to make sure state machine finished running
        this.stateFinal = stateMachine.createState(EventStartStates.FINAL, true, this.finalAction);
    }
    addTransitions() {
        // Initial transition
        this.addTransitionsForStateCheckForMatchingTasks();
        // Transitions based on number of tasks available
        this.addTransitionsForStateNoTask();
        this.addTransitionsForStateOneOrMoreTasks();
        // Transitions based on number of tasks assigned to user
        this.addTransitionsForStateTaskUnassigned();
        this.addTransitionsForStateTaskAssignedToUser();
        this.addTransitionsForStateOneTaskAssignedToUser();
        this.addTransitionsForStateMultipleTasksAssignedToUser();
    }
    startStateMachine(stateMachine) {
        stateMachine.start(this.stateCheckForMatchingTasks);
    }
    /**
     * Initial entry action for state check for matching tasks, decided based on the number of tasks
     */
    entryActionForStateCheckForMatchingTasks(state, context) {
        const taskCount = context && context.tasks ? context.tasks.length : 0;
        if (taskCount === 0) {
            // Trigger state no task
            state.trigger(EventStartStates.NO_TASK);
        }
        else {
            // Trigger state one or more tasks
            state.trigger(EventStartStates.ONE_OR_MORE_TASKS);
        }
    }
    entryActionForStateNoTask(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventStartStates.FINAL);
        // Navigate to no tasks available error page
        context.router.navigate([`/cases/case-details/${context.caseId}/no-tasks-available`], { relativeTo: context.route });
    }
    entryActionForStateOneOrMoreTasks(state, context) {
        state.trigger(EventStartStates.TASK_ASSIGNED_TO_USER);
    }
    entryActionForStateMultipleTasks(state, context) {
        state.trigger(EventStartStates.MULTIPLE_TASKS_ASSIGNED_TO_USER);
    }
    entryActionForStateTaskAssignedToUser(state, context) {
        // Get number of tasks assigned to user
        const userInfoStr = context.sessionStorageService.getItem('userDetails');
        const userInfo = JSON.parse(userInfoStr);
        const tasksAssignedToUser = context.tasks.filter(x => x.task_state !== 'unassigned' && x.assignee === userInfo.id || x.assignee === userInfo.uid);
        // Check if user initiated the event from task tab
        const isEventInitiatedFromTaskTab = context.taskId !== undefined && tasksAssignedToUser.findIndex(x => x.id === context.taskId) > -1;
        if (isEventInitiatedFromTaskTab) {
            // User initiated event from task tab
            state.trigger(EventStartStates.ONE_TASK_ASSIGNED_TO_USER);
        }
        else {
            // User initiated event from dropdown
            switch (tasksAssignedToUser.length) {
                case 0:
                    // No tasks assigned to user, trigger state task unassigned
                    state.trigger(EventStartStates.TASK_UNASSIGNED);
                    break;
                case 1:
                    // One task assigned to user
                    state.trigger(EventStartStates.ONE_TASK_ASSIGNED_TO_USER);
                    break;
                default:
                    // Multiple tasks assigned to user, trigger state multiple tasks assigned to user
                    state.trigger(EventStartStates.MULTIPLE_TASKS_ASSIGNED_TO_USER);
                    break;
            }
        }
    }
    entryActionForStateTaskUnAssigned(state, context) {
        let navigationURL = '';
        let theQueryParams = {};
        if (context.tasks[0].assignee) {
            // Task is assigned to some other user, navigate to task assigned error page
            navigationURL = `/cases/case-details/${context.caseId}/task-assigned`;
            theQueryParams = context.tasks[0];
        }
        else {
            // Task is unassigned, navigate to task unassigned error page
            navigationURL = `/cases/case-details/${context.caseId}/task-unassigned`;
        }
        // Trigger final state to complete processing of state machine
        state.trigger(EventStartStates.FINAL);
        // Navigate
        context.router.navigate([`${navigationURL}`], { queryParams: theQueryParams, relativeTo: context.route });
    }
    entryActionForStateOneTaskAssignedToUser(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventStartStates.FINAL);
        // Get task assigned to user
        let task = context.tasks.find(x => x.id === context.taskId);
        if (!task) {
            task = context.tasks[0];
        }
        // Store task to session
        context.sessionStorageService.setItem('taskToComplete', JSON.stringify(task));
        // Allow user to perform the event
        context.router.navigate([`/cases/case-details/${context.caseId}/trigger/${context.eventId}`], { queryParams: { isComplete: true }, relativeTo: context.route });
    }
    entryActionForStateMultipleTasksAssignedToUser(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventStartStates.FINAL);
        // Navigate to multiple tasks exist error page
        context.router.navigate([`/cases/case-details/${context.caseId}/multiple-tasks-exist`], { relativeTo: context.route });
    }
    finalAction(state) {
        // Final actions can be performed here, the state machine finished running
        // console.log('FINAL', state);
        return;
    }
    addTransitionsForStateCheckForMatchingTasks() {
        // No tasks
        this.stateCheckForMatchingTasks.addTransition(EventStartStates.NO_TASK, this.stateNoTask);
        // One task
        this.stateCheckForMatchingTasks.addTransition(EventStartStates.ONE_OR_MORE_TASKS, this.stateOneOrMoreTasks);
    }
    addTransitionsForStateNoTask() {
        this.stateNoTask.addTransition(EventStartStates.FINAL, this.stateFinal);
    }
    addTransitionsForStateOneOrMoreTasks() {
        this.stateOneOrMoreTasks.addTransition(EventStartStates.TASK_ASSIGNED_TO_USER, this.stateTaskAssignedToUser);
    }
    addTransitionsForStateTaskUnassigned() {
        this.stateTaskUnassigned.addTransition(EventStartStates.FINAL, this.stateFinal);
    }
    addTransitionsForStateTaskAssignedToUser() {
        this.stateTaskAssignedToUser.addTransition(EventStartStates.ONE_TASK_ASSIGNED_TO_USER, this.stateOneTaskAssignedToUser);
        this.stateTaskAssignedToUser.addTransition(EventStartStates.TASK_UNASSIGNED, this.stateTaskUnassigned);
        this.stateTaskAssignedToUser.addTransition(EventStartStates.MULTIPLE_TASKS_ASSIGNED_TO_USER, this.stateMultipleTasksAssignedToUser);
        this.stateTaskAssignedToUser.addTransition(EventStartStates.FINAL, this.stateFinal);
    }
    addTransitionsForStateOneTaskAssignedToUser() {
        this.stateOneTaskAssignedToUser.addTransition(EventStartStates.FINAL, this.stateFinal);
    }
    addTransitionsForStateMultipleTasksAssignedToUser() {
        this.stateMultipleTasksAssignedToUser.addTransition(EventStartStates.FINAL, this.stateFinal);
    }
}
EventStartStateMachineService.ɵfac = function EventStartStateMachineService_Factory(t) { return new (t || EventStartStateMachineService)(); };
EventStartStateMachineService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EventStartStateMachineService, factory: EventStartStateMachineService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(EventStartStateMachineService, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,