import { Pipe } from '@angular/core';
import * as moment from 'moment';
import { FormatTranslatorService } from '../../../services/case-fields/format-translator.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/case-fields/format-translator.service";
export class DatePipe {
    /**
     * constructor to allow format translator to be injected
     * @param formatTrans format translator
     */
    constructor(formatTrans) {
        this.formatTrans = formatTrans;
    }
    transform(value, zone, format) {
        let resultDate = null;
        const ISO_FORMAT = 'YYYY-MM-DDTHH:mm:ss.SSSZ';
        if (value) {
            // included to avoid editing the hour twice on second pass through
            // this occurs on case details when datepipe is applied twice
            if (!value.includes('T')) {
                zone = 'utc';
            }
            const match = value.match(DatePipe.DATE_FORMAT_REGEXP);
            // Make sure we actually have a match.
            if (match) {
                let offsetDate = null;
                const date = this.getDate(match);
                if (zone === 'local') {
                    offsetDate = this.getOffsetDate(date);
                }
                else {
                    offsetDate = this.getDate(match);
                }
                // 'short' format is meaningful to formatDate, but not the same meaning as in the unit tests
                if (this.formatTrans && format && format !== 'short') {
                    // support for java style formatting strings for dates
                    format = this.translateDateFormat(format);
                    resultDate = moment(date).format(format);
                }
                else {
                    // RDM-1149 changed the pipe logic so that it doesn't add an hour to 'Summer Time' dates on DateTime field type
                    resultDate = `${offsetDate.getDate()} ${DatePipe.MONTHS[offsetDate.getMonth()]} ${offsetDate.getFullYear()}`;
                    if (match[4] && match[5] && match[6] && format !== 'short') {
                        resultDate += ', ';
                        resultDate += `${this.getHour(offsetDate.getHours().toString())}:`;
                        resultDate += `${this.pad(offsetDate.getMinutes())}:`;
                        resultDate += `${this.pad(offsetDate.getSeconds())} `;
                        resultDate += (this.toInt(offsetDate.getHours().toString()) >= 12) ? 'PM' : 'AM';
                    }
                }
            }
            else {
                // EUI-2667. See if what we've been given is actually a formatted date that
                // we could attempt to do something with.
                const parsedDate = Date.parse(value);
                // We successfully parsed it so let's use it.
                if (!isNaN(parsedDate)) {
                    const d = new Date(parsedDate);
                    // If what we received didn't include time, don't include it here either.
                    if (value.indexOf(':') < 0) {
                        const shortDate = d.toLocaleDateString('en-GB');
                        const shortISO = shortDate.split('/').reverse().join('-');
                        return this.transform(shortISO, zone, format);
                    }
                    // If it did include time, we want a full ISO string.
                    const thisMoment = moment(d).format(ISO_FORMAT);
                    return this.transform(thisMoment, zone, format);
                }
            }
        }
        return resultDate;
    }
    translateDateFormat(format) {
        if (this.formatTrans) {
            return this.formatTrans.translate(format);
        }
        else {
            return format;
        }
    }
    getOffsetDate(date) {
        const localOffset = -date.getTimezoneOffset() / 60;
        return new Date(date.getTime() + localOffset * 3600 * 1000);
    }
    getDate(match) {
        const year = this.toInt(match[1]);
        const month = this.toInt(match[2]) - 1;
        const day = this.toInt(match[3]);
        let resultDate;
        if (match[4] && match[5] && match[6]) {
            const hour = this.toInt(match[4]);
            const minutes = this.toInt(match[5]);
            const seconds = this.toInt(match[6]);
            resultDate = new Date(year, month, day, hour, minutes, seconds, 0);
        }
        else {
            resultDate = new Date(year, month, day);
        }
        return resultDate;
    }
    getHour(hourStr) {
        let hourNum = this.toInt(hourStr);
        if (hourNum > 12) {
            hourNum = hourNum - 12;
        }
        else if (hourNum === 0) {
            hourNum = 12;
        }
        return hourNum;
    }
    toInt(str) {
        return parseInt(str, 10);
    }
    pad(num, padNum = 2) {
        const val = num !== undefined ? num.toString() : '';
        return val.length >= padNum ? val : new Array(padNum - val.length + 1).join('0') + val;
    }
}
DatePipe.DATE_FORMAT_REGEXP = new RegExp('^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?|Z)?$');
//    1        2       3         4          5          6          7          8  9     10      11
DatePipe.MONTHS = [
    ['Jan'], ['Feb'], ['Mar'], ['Apr'], ['May'], ['Jun'], ['Jul'], ['Aug'], ['Sep'], ['Oct'], ['Nov'], ['Dec'],
];
DatePipe.ɵfac = function DatePipe_Factory(t) { return new (t || DatePipe)(i0.ɵɵdirectiveInject(i1.FormatTranslatorService, 16)); };
DatePipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "ccdDate", type: DatePipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DatePipe, [{
        type: Pipe,
        args: [{
                name: 'ccdDate'
            }]
    }], function () { return [{ type: i1.FormatTranslatorService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,