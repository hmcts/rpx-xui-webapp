import { Injectable } from '@angular/core';
import { StateMachine } from '@edium/fsm';
import { throwError } from 'rxjs';
import { TaskState } from '../../../domain/work-allocation/Task';
import { EventCompletionPortalTypes } from '../domain/event-completion-portal-types.model';
import { EventCompletionStates } from '../domain/event-completion-states.enum.model';
import * as i0 from "@angular/core";
const EVENT_COMPLETION_STATE_MACHINE = 'EVENT COMPLETION STATE MACHINE';
export class EventCompletionStateMachineService {
    initialiseStateMachine(context) {
        return new StateMachine(EVENT_COMPLETION_STATE_MACHINE, context);
    }
    startStateMachine(stateMachine) {
        stateMachine.start(this.stateCheckTasksCanBeCompleted);
    }
    createStates(stateMachine) {
        // Initial state
        this.stateCheckTasksCanBeCompleted = stateMachine.createState(EventCompletionStates.CheckTasksCanBeCompleted, false, this.entryActionForStateCheckTasksCanBeCompleted);
        this.stateCompleteEventAndTask = stateMachine.createState(EventCompletionStates.CompleteEventAndTask, false, this.entryActionForStateCompleteEventAndTask);
        this.stateTaskCompletedOrCancelled = stateMachine.createState(EventCompletionStates.TaskCompetedOrCancelled, false, this.entryActionForStateTaskCompletedOrCancelled);
        this.stateTaskAssignedToAnotherUser = stateMachine.createState(EventCompletionStates.TaskAssignedToAnotherUser, false, this.entryActionForStateTaskAssignedToAnotherUser);
        this.stateTaskUnassigned = stateMachine.createState(EventCompletionStates.TaskUnassigned, false, this.entryActionForStateTaskUnassigned);
        // Create final state, the second param isComplete is set to true to make sure state machine finished running
        this.stateFinal = stateMachine.createState(EventCompletionStates.Final, true, this.entryActionForStateFinal);
    }
    addTransitions() {
        // Initial transition
        this.addTransitionsForStateCheckTasksCanBeCompleted();
        this.addTransitionsForStateTaskCompletedOrCancelled();
        this.addTransitionsForStateCompleteEventAndTask();
        this.addTransitionsForStateTaskAssignedToAnotherUser();
        this.addTransitionsForStateTaskUnassigned();
    }
    entryActionForStateCheckTasksCanBeCompleted(state, context) {
        context.workAllocationService.getTask(context.task.id).subscribe(taskResponse => {
            if (taskResponse && taskResponse.task && taskResponse.task.task_state) {
                switch (taskResponse.task.task_state.toUpperCase()) {
                    case TaskState.Unassigned:
                        // Task unassigned
                        state.trigger(EventCompletionStates.TaskUnassigned);
                        break;
                    case TaskState.Completed:
                    case TaskState.Cancelled:
                    case TaskState.Terminated:
                        // Task completed or cancelled
                        state.trigger(EventCompletionStates.TaskCompetedOrCancelled);
                        break;
                    case TaskState.Assigned:
                        // Task is in assigned state
                        if (taskResponse.task.assignee === context.task.assignee) {
                            // Task still assigned to current user, complete event and task
                            state.trigger(EventCompletionStates.CompleteEventAndTask);
                        }
                        else {
                            // Task has been reassigned to another user, display error message
                            context.reassignedTask = taskResponse.task;
                            state.trigger(EventCompletionStates.TaskAssignedToAnotherUser);
                        }
                        break;
                    default:
                        // Allow user to complete the event
                        state.trigger(EventCompletionStates.CompleteEventAndTask);
                        break;
                }
            }
        }, error => {
            context.alertService.error(error.message);
            return throwError(error);
        });
    }
    entryActionForStateTaskCompletedOrCancelled(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventCompletionStates.Final);
        // Load case event completion task cancelled component
        context.component.showPortal(EventCompletionPortalTypes.TaskCancelled);
    }
    entryActionForStateCompleteEventAndTask(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventCompletionStates.Final);
        const taskStr = context.sessionStorageService.getItem('taskToComplete');
        if (taskStr) {
            // Task is in session storage
            const task = JSON.parse(taskStr);
            // Task already assigned to current user, just complete task
            context.workAllocationService.completeTask(task.id).subscribe(response => {
                // Emit event can be completed event
                context.component.eventCanBeCompleted.emit(true);
            }, error => {
                // Emit event cannot be completed event
                context.component.eventCanBeCompleted.emit(false);
                context.alertService.error(error.message);
                return throwError(error);
            });
        }
        else {
            // Emit event cannot be completed event
            context.component.eventCanBeCompleted.emit(false);
        }
    }
    entryActionForStateTaskAssignedToAnotherUser(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventCompletionStates.Final);
        // Load case event completion task reassigned component
        context.component.showPortal(EventCompletionPortalTypes.TaskReassigned);
    }
    entryActionForStateTaskUnassigned(state, context) {
        // Trigger final state to complete processing of state machine
        state.trigger(EventCompletionStates.Final);
        // Get task details
        const taskStr = context.sessionStorageService.getItem('taskToComplete');
        if (taskStr) {
            // Task is in session storage
            const task = JSON.parse(taskStr);
            // Assign and complete task
            context.workAllocationService.assignAndCompleteTask(task.id).subscribe(response => {
                // Emit event can be completed event
                context.component.eventCanBeCompleted.emit(true);
            }, error => {
                // Emit event cannot be completed event
                context.component.eventCanBeCompleted.emit(false);
                context.alertService.error(error.message);
                return throwError(error);
            });
        }
        else {
            // Emit event cannot be completed event
            context.component.eventCanBeCompleted.emit(false);
        }
    }
    entryActionForStateFinal(state, context) {
        // Final actions can be performed here, the state machine finished running
        console.log('FINAL');
    }
    addTransitionsForStateCheckTasksCanBeCompleted() {
        // Complete event and task
        this.stateCheckTasksCanBeCompleted.addTransition(EventCompletionStates.CompleteEventAndTask, this.stateCompleteEventAndTask);
        // Task completed or cancelled
        this.stateCheckTasksCanBeCompleted.addTransition(EventCompletionStates.TaskCompetedOrCancelled, this.stateTaskCompletedOrCancelled);
        // Task assigned to another user
        this.stateCheckTasksCanBeCompleted.addTransition(EventCompletionStates.TaskAssignedToAnotherUser, this.stateTaskAssignedToAnotherUser);
        // Task unassigned
        this.stateCheckTasksCanBeCompleted.addTransition(EventCompletionStates.TaskUnassigned, this.stateTaskUnassigned);
    }
    addTransitionsForStateTaskCompletedOrCancelled() {
        this.stateTaskCompletedOrCancelled.addTransition(EventCompletionStates.Final, this.stateFinal);
    }
    addTransitionsForStateCompleteEventAndTask() {
        this.stateCompleteEventAndTask.addTransition(EventCompletionStates.Final, this.stateFinal);
    }
    addTransitionsForStateTaskAssignedToAnotherUser() {
        this.stateTaskAssignedToAnotherUser.addTransition(EventCompletionStates.Final, this.stateFinal);
    }
    addTransitionsForStateTaskUnassigned() {
        this.stateTaskUnassigned.addTransition(EventCompletionStates.Final, this.stateFinal);
    }
}
EventCompletionStateMachineService.ɵfac = function EventCompletionStateMachineService_Factory(t) { return new (t || EventCompletionStateMachineService)(); };
EventCompletionStateMachineService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EventCompletionStateMachineService, factory: EventCompletionStateMachineService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(EventCompletionStateMachineService, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,