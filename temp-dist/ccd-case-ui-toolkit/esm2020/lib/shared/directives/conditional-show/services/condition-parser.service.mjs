import * as _score from 'underscore';
import { FieldsUtils } from '../../../services/fields/fields.utils';
import { ShowCondition } from '../../conditional-show/domain/conditional-show.model';
import peg from './condition.peg';
export class ConditionParser {
    /**
     * Parse the raw formula and output structured condition data
     * that can be used in evaluating show/hide logic
     * @param condition raw formula e.g. TextField = "Hello"
     */
    static parse(condition) {
        if (!condition) {
            return null;
        }
        condition = condition.replace(/CONTAINS/g, ' CONTAINS');
        return peg.parse(condition.trim(), {});
    }
    /**
     * Evaluate the current fields against the conditions
     * @param fields the current page fields and their value
     * @param conditions The PegJS formula output
     */
    static evaluate(fields, conditions, path) {
        if (!conditions || conditions.length === 0) {
            return true;
        }
        const validJoinComparators = ['AND', 'OR'];
        return conditions.reduce((accumulator, condition, index) => {
            const isJoinComparator = (comparator) => (typeof comparator === 'string' && validJoinComparators.indexOf(comparator) !== -1);
            if (isJoinComparator(condition)) {
                return accumulator;
            }
            let currentConditionResult = true;
            if (Array.isArray(condition)) {
                currentConditionResult = this.evaluate(fields, condition);
                if (isJoinComparator(conditions[index - 1])) {
                    return this.evaluateJoin(accumulator, conditions[index - 1], currentConditionResult);
                }
            }
            if (condition.comparator) {
                const formula = condition.fieldReference + condition.comparator + condition.value;
                currentConditionResult = this.matchEqualityCondition(fields, formula, path);
            }
            if (isJoinComparator(conditions[index - 1])) {
                return this.evaluateJoin(accumulator, conditions[index - 1], currentConditionResult);
            }
            return currentConditionResult;
        }, true);
    }
    static evaluateJoin(leftResult, comparator, rightResult) {
        // tslint:disable-next-line:switch-default
        switch (comparator) {
            case 'OR': return leftResult || rightResult;
            case 'AND': return leftResult && rightResult;
        }
    }
    static matchEqualityCondition(fields, condition, path) {
        const [field, conditionSeparator] = this.getField(condition);
        const [head, ...tail] = field.split('.');
        const currentValue = this.findValueForComplexCondition(fields, head, tail, path);
        const expectedValue = this.unquoted(condition.split(conditionSeparator)[1]);
        if (conditionSeparator === ShowCondition.CONTAINS) {
            return this.checkValueContains(expectedValue, currentValue);
        }
        else {
            return this.checkValueEquals(expectedValue, currentValue, conditionSeparator);
        }
    }
    static getValue(fields, head) {
        if (this.isDynamicList(fields[head])) {
            return fields[head].value.code;
        }
        else {
            return fields[head];
        }
    }
    static isDynamicList(dynamiclist) {
        return !_score.isEmpty(dynamiclist) &&
            (_score.has(dynamiclist, 'value') && _score.has(dynamiclist, 'list_items'));
    }
    static getField(condition) {
        let separator = ShowCondition.CONTAINS;
        if (condition.indexOf(ShowCondition.CONTAINS) < 0) {
            separator = ShowCondition.CONDITION_EQUALS;
            if (condition.indexOf(ShowCondition.CONDITION_NOT_EQUALS) > -1) {
                separator = ShowCondition.CONDITION_NOT_EQUALS;
            }
        }
        return [condition.split(separator)[0], separator];
    }
    static checkValueEquals(expectedValue, currentValue, conditionSeparaor) {
        if (expectedValue.search('[,]') > -1) { // for  multi-select list
            return this.checkMultiSelectListEquals(expectedValue, currentValue, conditionSeparaor);
        }
        else if (expectedValue.endsWith('*') && currentValue && conditionSeparaor !== ShowCondition.CONDITION_NOT_EQUALS) {
            if (typeof currentValue === 'string') {
                return currentValue.startsWith(this.removeStarChar(expectedValue));
            }
            return expectedValue === '*';
        }
        else {
            // changed from '===' to '==' to cover number field conditions
            if (conditionSeparaor === ShowCondition.CONDITION_NOT_EQUALS) {
                return this.checkValueNotEquals(expectedValue, currentValue);
            }
            else {
                return currentValue == expectedValue || this.okIfBothEmpty(expectedValue, currentValue); // tslint:disable-line
            }
        }
    }
    static checkValueNotEquals(expectedValue, currentValue) {
        const formatCurrentValue = currentValue ? currentValue.toString().trim() : '';
        if ('*' === expectedValue && formatCurrentValue !== '') {
            return false;
        }
        const formatExpectedValue = expectedValue ? expectedValue.toString().trim() : '';
        return formatCurrentValue != formatExpectedValue; // tslint:disable-line
    }
    static checkMultiSelectListEquals(expectedValue, currentValue, conditionSeparator) {
        const expectedValues = expectedValue.split(',').sort().toString();
        const values = currentValue ? currentValue.sort().toString() : '';
        if (conditionSeparator === ShowCondition.CONDITION_NOT_EQUALS) {
            return expectedValues !== values;
        }
        else {
            return expectedValues === values;
        }
    }
    static checkValueContains(expectedValue, currentValue) {
        if (expectedValue.search(',') > -1) {
            const expectedValues = expectedValue.split(',').sort();
            const values = currentValue ? currentValue.sort().toString() : '';
            return expectedValues.every(item => values.search(item) >= 0);
        }
        else {
            const values = currentValue && Array.isArray(currentValue) ? currentValue.toString() : '';
            return values.search(expectedValue) >= 0;
        }
    }
    static unquoted(str) {
        return str.replace(/^"|"$/g, '');
    }
    static findValueForComplexCondition(fields, head, tail, path) {
        if (!fields) {
            return undefined;
        }
        if (tail.length === 0) {
            return this.getValue(fields, head);
        }
        else {
            if (FieldsUtils.isArray(fields[head])) {
                return this.findValueForComplexConditionInArray(fields, head, tail, path);
            }
            else {
                return this.findValueForComplexConditionForPathIfAny(fields, head, tail, path);
            }
        }
    }
    static findValueForComplexConditionForPathIfAny(fields, head, tail, path) {
        if (path) {
            const [_, ...pathTail] = path.split(/[_]+/g);
            return this.findValueForComplexCondition(fields[head], tail[0], tail.slice(1), pathTail.join('_'));
        }
        else if (!fields[head]) {
            return this.findValueForComplexCondition(fields, tail[0], tail.slice(1), path);
        }
        else {
            return this.findValueForComplexCondition(fields[head], tail[0], tail.slice(1), path);
        }
    }
    static findValueForComplexConditionInArray(fields, head, tail, path) {
        // use the path to resolve which array element we refer to
        if (path.startsWith(head)) {
            const [_, ...pathTail] = path.split(/[_]+/g);
            if (pathTail.length > 0) {
                try {
                    const arrayIndex = Number.parseInt(pathTail[0], 10);
                    const [__, ...dropNumberPath] = pathTail;
                    return (fields[head][arrayIndex] !== undefined) ? this.findValueForComplexCondition(fields[head][arrayIndex]['value'], tail[0], tail.slice(1), dropNumberPath.join('_')) : null;
                }
                catch (e) {
                    console.error('Error while parsing number', pathTail[0], e);
                }
            }
        }
        else {
            console.error('Path in formArray should start with ', head, ', full path: ', path);
        }
    }
    static removeStarChar(str) {
        if (str && str.indexOf('*') > -1) {
            return str.substring(0, str.indexOf('*'));
        }
        return str;
    }
    static okIfBothEmpty(right, value) {
        return value === null && (right === '');
    }
}
//# sourceMappingURL=data:application/json;base64,