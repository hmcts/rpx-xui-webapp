import { OnInit } from '@angular/core';
import { PaymentLibComponent } from '../../payment-lib.component';
import { IPaymentGroup } from '../../interfaces/IPaymentGroup';
import { CaseTransactionsService } from '../../services/case-transactions/case-transactions.service';
import { BulkScaningPaymentService } from '../../services/bulk-scaning-payment/bulk-scaning-payment.service';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { OrderslistService } from '../../services/orderslist.service';
import { IFee } from '../../interfaces/IFee';
import { IPayment } from '../../interfaces/IPayment';
import { IRemission } from '../../interfaces/IRemission';
import { IPaymentView } from '../../interfaces/IPaymentView';
import { IOrderReferenceFee } from '../../interfaces/IOrderReferenceFee';
import { Router } from '@angular/router';
import * as i0 from "@angular/core";
export declare class CaseTransactionsComponent implements OnInit {
    private router;
    private paymentViewService;
    private bulkScaningPaymentService;
    private caseTransactionsService;
    private paymentLibComponent;
    private OrderslistService;
    LOGGEDINUSERROLES: string[];
    isTakePayment: boolean;
    isFromServiceRequestPage: boolean;
    takePayment: boolean;
    ccdCaseNumber: string;
    excReference: string;
    paymentGroups: any[];
    payments: IPayment[];
    nonPayments: IPayment[];
    allPayments: IPayment[];
    remissions: IRemission[];
    fees: IFee[];
    errorMessage: string;
    totalFees: number;
    totalPayments: number;
    totalNonOffPayments: number;
    totalRemissions: number;
    selectedOption: string;
    dcnNumber: string;
    paymentRef: string;
    isTurnOff: boolean;
    isRefundRemission: boolean;
    isStrategicFixEnable: boolean;
    isAddFeeBtnEnabled: boolean;
    isExceptionRecord: boolean;
    isUnprocessedRecordSelected: boolean;
    exceptionRecordReference: string;
    isAnyFeeGroupAvilable: boolean;
    isHistoricGroupAvailable: boolean;
    isBulkScanEnable: any;
    isRemissionsMatch: boolean;
    viewStatus: string;
    isRemoveBtnDisabled: boolean;
    feeId: IFee;
    clAmountDue: number;
    overPaymentAmount: number;
    unprocessedRecordCount: number;
    isFeeRecordsExist: boolean;
    isGrpOutstandingAmtPositive: boolean;
    totalRefundAmount: number;
    caseType: String;
    payment: IPayment;
    paymentGroup: IPaymentGroup;
    paymentView: IPaymentView;
    orderDetail: any[];
    isAddRemissionEnable: boolean;
    orderRemissionDetails: any[];
    orderLevelFees: IOrderReferenceFee[];
    ispaymentGroupApisuccess: boolean;
    cpoDetails: any;
    orderRef: string;
    orderStatus: string;
    orderParty: string;
    orderCreated: Date;
    orderCCDEvent: string;
    serviceRequestValue: string;
    orderAddBtnEnable: boolean;
    orderFeesTotal: number;
    orderRemissionTotal: number;
    orderTotalPayments: number;
    orderPendingPayments: number;
    isCPODown: boolean;
    test: boolean;
    isPBA: boolean;
    isIssueRefunfBtnEnable: boolean;
    isAddRemissionBtnEnabled: boolean;
    isRefundRemissionBtnEnable: boolean;
    allowedRolesToAccessRefund: string[];
    isEligible4PBAPayment: string[];
    currentDate: Date;
    navigationpage: string;
    remissionFeeAmt: number;
    constructor(router: Router, paymentViewService: PaymentViewService, bulkScaningPaymentService: BulkScaningPaymentService, caseTransactionsService: CaseTransactionsService, paymentLibComponent: PaymentLibComponent, OrderslistService: OrderslistService);
    ngOnInit(): void;
    setDefaults(): void;
    getAllocationStatus(payments: any): any;
    checkForExceptionRecord(): void;
    calculateOrderFeesAmounts(): void;
    resetOrderVariables(): void;
    goToOrderViewDetailSection(orderReferenceObj: any): void;
    redirectToOrderFeeSearchPage(event: any, orderef: any): void;
    calculateAmounts(): void;
    calculateRefundAmount(): number;
    getGroupOutstandingAmount(paymentGroup: IPaymentGroup): number;
    redirectToFeeSearchPage(event: any): void;
    addRemission(fee: IFee): void;
    addRefundForRemission(payment: IPayment, remission: IRemission[], fees: any): void;
    redirectToremissionPage(event: any): void;
    goToServiceRequestPage(): void;
    redirectToReportsPage(event: any): void;
    loadFeeSummaryPage(paymentGroup: IPaymentGroup): void;
    goToPaymentViewComponent(paymentGroup: any): void;
    goToPayementView(paymentGroupReference: string, paymentReference: string, paymentMethod: string): void;
    selectedUnprocessedFeeEvent(unprocessedRecordId: string): void;
    getUnprocessedFeeCount(unProcessedRecordCount: number): void;
    calculateAmountDue(fee: IFee): number | "0.00";
    confirmRemoveFee(fee: IFee): void;
    cancelRemoval(): void;
    removeFee(fee: any): void;
    isCheckAmountdueExist(amountDue: any): boolean;
    issueRefund(payment: IPayment): void;
    chkForAddRemission(feeCode: string): boolean;
    chkForPBAPayment(): boolean;
    chkIssueRefundBtnEnable(payment: IPayment): boolean;
    chkIsRefundRemissionBtnEnable(): boolean;
    check4AllowedRoles2AccessRefund: () => boolean;
    check4AllowedRoles2AccessPBApayment: () => boolean;
    allowFurtherAccessAfter4Days: (payment: IPayment) => boolean;
    loadPBAAccountPage(orderRef: IPayment): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CaseTransactionsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CaseTransactionsComponent, "ccpay-case-transactions", never, { "LOGGEDINUSERROLES": { "alias": "LOGGEDINUSERROLES"; "required": false; }; "isTakePayment": { "alias": "isTakePayment"; "required": false; }; "isFromServiceRequestPage": { "alias": "isFromServiceRequestPage"; "required": false; }; }, {}, never, never, false, never>;
}
//# sourceMappingURL=case-transactions.component.d.ts.map