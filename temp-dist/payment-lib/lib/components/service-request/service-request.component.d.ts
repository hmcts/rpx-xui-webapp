import { OnInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { PaymentLibComponent } from '../../payment-lib.component';
import { IPayment } from '../../interfaces/IPayment';
import { IRemission } from '../../interfaces/IRemission';
import { IPaymentView } from '../../interfaces/IPaymentView';
import { IOrderReferenceFee } from '../../interfaces/IOrderReferenceFee';
import { IFee } from '../../interfaces/IFee';
import { IPaymentGroup } from '../../interfaces/IPaymentGroup';
import { Router } from '@angular/router';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { NotificationService } from '../../services/notification/notification.service';
import { OrderslistService } from '../../services/orderslist.service';
import { IRefundContactDetails } from '../../interfaces/IRefundContactDetails';
import * as i0 from "@angular/core";
export declare class ServiceRequestComponent implements OnInit {
    private paymentLibComponent;
    private paymentViewService;
    private OrderslistService;
    private notificationService;
    private cd;
    private router;
    LOGGEDINUSERROLES: string[];
    viewStatus: string;
    orderDetail: any[];
    orderRef: string;
    orderStatus: string;
    orderParty: string;
    orderCreated: Date;
    orderCCDEvent: string;
    orderFeesTotal: number;
    orderTotalPayments: number;
    orderRemissionTotal: number;
    paymentGroupList: IPaymentGroup;
    takePayment: boolean;
    ccdCaseNumber: boolean;
    isServiceRequest: string;
    goToServiceRquestComponent: EventEmitter<any>;
    viewCompStatus: any;
    servicerequest: string;
    paymentType: string;
    excReference: string;
    paymentGroups: any[];
    payments: IPayment[];
    nonPayments: IPayment[];
    allPayments: IPayment[];
    remissions: IRemission[];
    paymentFees: IFee[];
    fees: any;
    errorMessage: string;
    totalFees: number;
    totalPayments: number;
    totalNonOffPayments: number;
    totalRemissions: number;
    selectedOption: string;
    dcnNumber: string;
    paymentRef: string;
    isTurnOff: boolean;
    isRefundRemission: boolean;
    isStrategicFixEnable: boolean;
    isAddFeeBtnEnabled: boolean;
    isExceptionRecord: boolean;
    isUnprocessedRecordSelected: boolean;
    exceptionRecordReference: string;
    isAnyFeeGroupAvilable: boolean;
    isHistoricGroupAvailable: boolean;
    isBulkScanEnable: any;
    isRemissionsMatch: boolean;
    isRemoveBtnDisabled: boolean;
    feeId: IFee;
    clAmountDue: number;
    unprocessedRecordCount: number;
    isFeeRecordsExist: boolean;
    isGrpOutstandingAmtPositive: boolean;
    totalRefundAmount: Number;
    caseType: String;
    isConfirmationBtnDisabled: boolean;
    refundReference: string;
    refundAmount: string;
    payment: IPayment;
    paymentGroup: IPaymentGroup;
    paymentView: IPaymentView;
    isAddRemissionEnable: boolean;
    orderRemissionDetails: any[];
    orderLevelFees: IOrderReferenceFee[];
    cpoDetails: any;
    serviceRequestValue: string;
    orderAddBtnEnable: boolean;
    isFromPaymentDetailPage: boolean;
    contactDetailsObj: IRefundContactDetails;
    notification: any;
    isCPODown: boolean;
    test: boolean;
    isPBA: boolean;
    isIssueRefunfBtnEnable: boolean;
    isAddRemissionBtnEnabled: boolean;
    isRefundRemissionBtnEnable: boolean;
    allowedRolesToAccessRefund: string[];
    isFromServiceRequestPage: boolean;
    navigationpage: string;
    remissionFeeAmt: number;
    isContinueBtnDisabled: boolean;
    isFullyRefund: boolean;
    templateInstructionType: string;
    notificationPreview: boolean;
    constructor(paymentLibComponent: PaymentLibComponent, paymentViewService: PaymentViewService, OrderslistService: OrderslistService, notificationService: NotificationService, cd: ChangeDetectorRef, router: Router);
    ngOnInit(): void;
    goToServiceRequestPage(): void;
    goToCaseTransationPage(event: any): void;
    addRemission(fee: IFee): void;
    addRefundForRemission(payment: IPayment, remission: IRemission[], fees: any): void;
    cancelRemoval(): void;
    removeFee(fee: any): void;
    issueRefund(payment: IPayment): void;
    goToPayementView(paymentGroupReference: string, paymentReference: string, paymentMethod: string): void;
    goToPaymentViewComponent(paymentGroup: any): void;
    chkIsIssueRefundBtnEnable(payment: IPayment): boolean;
    chkIsAddRefundBtnEnable(remission: IRemission): boolean;
    chkIsAddRemissionBtnEnable(fee: IFee): boolean;
    resetOrderData(): void;
    selectPymentOption(paymentType: string): void;
    goToPaymentViewComp(): void;
    continuePayment(paymentgrp: IPaymentGroup): void;
    getContactDetails(obj: IRefundContactDetails): void;
    gotoPaymentSelectPage(event: Event): void;
    gotoAddressPage(note?: IRefundContactDetails): void;
    processRefund(): void;
    getOverPaymentValue(): number;
    getTemplateInstructionType(payment: IPayment): void;
    showNotificationPreview(): void;
    hideNotificationPreview(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ServiceRequestComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ServiceRequestComponent, "ccpay-service-request", never, { "LOGGEDINUSERROLES": { "alias": "LOGGEDINUSERROLES"; "required": false; }; "viewStatus": { "alias": "viewStatus"; "required": false; }; "orderDetail": { "alias": "orderDetail"; "required": false; }; "orderRef": { "alias": "orderRef"; "required": false; }; "orderStatus": { "alias": "orderStatus"; "required": false; }; "orderParty": { "alias": "orderParty"; "required": false; }; "orderCreated": { "alias": "orderCreated"; "required": false; }; "orderCCDEvent": { "alias": "orderCCDEvent"; "required": false; }; "orderFeesTotal": { "alias": "orderFeesTotal"; "required": false; }; "orderTotalPayments": { "alias": "orderTotalPayments"; "required": false; }; "orderRemissionTotal": { "alias": "orderRemissionTotal"; "required": false; }; "paymentGroupList": { "alias": "paymentGroupList"; "required": false; }; "takePayment": { "alias": "takePayment"; "required": false; }; "ccdCaseNumber": { "alias": "ccdCaseNumber"; "required": false; }; "isServiceRequest": { "alias": "isServiceRequest"; "required": false; }; }, { "goToServiceRquestComponent": "goToServiceRquestComponent"; }, never, never, false, never>;
}
//# sourceMappingURL=service-request.component.d.ts.map