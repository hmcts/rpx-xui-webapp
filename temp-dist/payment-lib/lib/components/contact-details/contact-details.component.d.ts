import { OnInit, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { PaymentLibComponent } from '../../payment-lib.component';
import { NotificationService } from '../../services/notification/notification.service';
import * as i0 from "@angular/core";
export declare class ContactDetailsComponent implements OnInit {
    private formBuilder;
    private notificationService;
    private paymentLibComponent;
    isEditOperation: boolean;
    isEditOperationInRefundList: boolean;
    addressObj: any;
    assignContactDetails: EventEmitter<any>;
    assignContactDetailsInFefundsList: EventEmitter<any>;
    redirectToIssueRefund: EventEmitter<any>;
    pageTitle: string;
    errorMessage: string;
    isEmailSAddressClicked: boolean;
    isShowPickAddress: boolean;
    isPostcodeClicked: boolean;
    isManualAddressClicked: boolean;
    emailAddressForm: FormGroup;
    postCodeForm: FormGroup;
    manualAddressForm: FormGroup;
    addressPostcodeList: any[];
    postcodeAddress: any;
    isAddressBoxEmpty: boolean;
    isEmailEmpty: boolean;
    emailHasError: boolean;
    isPostcodeEmpty: boolean;
    postcodeHasError: boolean;
    isaddressLine1Empty: boolean;
    addressLine1HasError: boolean;
    addressLine2HasError: boolean;
    isTownOrCityEmpty: boolean;
    townOrCityHasError: boolean;
    isCountyEmpty: boolean;
    countyHasError: boolean;
    isMPostcodeEmpty: boolean;
    mpostcodeHasError: boolean;
    isCountryEmpty: boolean;
    constructor(formBuilder: FormBuilder, notificationService: NotificationService, paymentLibComponent: PaymentLibComponent);
    ngOnInit(): void;
    setEditDetails(): void;
    selectContactOption(type: any, isLinkedClied: any): void;
    finalFormSubmit(): void;
    postcodeValidation(str: any): void;
    redirection(event: any): void;
    resetForm(val: any, field: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactDetailsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactDetailsComponent, "ccpay-contact-details", never, { "isEditOperation": { "alias": "isEditOperation"; "required": false; }; "isEditOperationInRefundList": { "alias": "isEditOperationInRefundList"; "required": false; }; "addressObj": { "alias": "addressObj"; "required": false; }; }, { "assignContactDetails": "assignContactDetails"; "assignContactDetailsInFefundsList": "assignContactDetailsInFefundsList"; "redirectToIssueRefund": "redirectToIssueRefund"; }, never, never, false, never>;
}
//# sourceMappingURL=contact-details.component.d.ts.map