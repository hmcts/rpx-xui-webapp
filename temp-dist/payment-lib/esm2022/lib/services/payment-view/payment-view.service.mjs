import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { PaymentLibService } from '../../payment-lib.service';
import { WebComponentHttpClient } from '../shared/httpclient/webcomponent.http.client';
import { ErrorHandlerService } from '../shared/error-handler.service';
import { catchError } from 'rxjs/operators';
import { LoggerService } from '../shared/logger/logger.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../shared/httpclient/webcomponent.http.client";
import * as i3 from "../shared/logger/logger.service";
import * as i4 from "../shared/error-handler.service";
import * as i5 from "../../payment-lib.service";
//import { error } from '@angular/compiler/src/util';
export class PaymentViewService {
    http;
    https;
    logger;
    errorHandlerService;
    paymentLibService;
    ordersList = new BehaviorSubject([]);
    meta;
    constructor(http, https, logger, errorHandlerService, paymentLibService) {
        this.http = http;
        this.https = https;
        this.logger = logger;
        this.errorHandlerService = errorHandlerService;
        this.paymentLibService = paymentLibService;
    }
    getPaymentDetails(paymentReference, paymentMethod) {
        this.logger.info('Payment-view-service getPaymentDetails for: ', paymentReference);
        if (paymentMethod == undefined || paymentMethod == null) {
            return this.http.get(`${this.paymentLibService.API_ROOT}/payments/${paymentReference}`, {
                withCredentials: true
            })
                .pipe(catchError(this.errorHandlerService.handleError));
        }
        else {
            return this.http.get(paymentMethod === 'card' || paymentMethod === 'cash' || paymentMethod === 'cheque' || paymentMethod === 'postal order' ?
                `${this.paymentLibService.API_ROOT}/card-payments/${paymentReference}` :
                `${this.paymentLibService.API_ROOT}/credit-account-payments/${paymentReference}`, {
                withCredentials: true
            })
                .pipe(catchError(this.errorHandlerService.handleError));
        }
    }
    getPaymentGroupDetails(paymentGroupReference) {
        this.logger.info('Payment-view-service getPaymentGroupDetails for: ', paymentGroupReference);
        return this.http.get(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupReference}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getApportionPaymentDetails(paymentReference) {
        this.logger.info('Payment-view-service getPaymentGroupDetails for: ', paymentReference);
        return this.http.get(`${this.paymentLibService.API_ROOT}/payment-groups/fee-pay-apportion/${paymentReference}`, {
            withCredentials: true
        })
            .pipe(catchError(this.errorHandlerService.handleError));
    }
    getPBAaccountDetails() {
        const url = `${this.paymentLibService.API_ROOT}/pba-accounts`;
        return this.http.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    postWays2PayCardPayment(serviceRef, body) {
        const url = `${this.paymentLibService.API_ROOT}/service-request/${serviceRef}/card-payments`;
        const rurl = this.paymentLibService.CARDPAYMENTRETURNURL.replace('.prod', '');
        body['return-url'] = `${rurl}/payment`;
        return this.https.post(url, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPBAaccountPayment(serviceRef, body) {
        let randomKey = 'idam-key-' + Math.random().toString().split('.').join('-');
        body['idempotency_key'] = randomKey;
        const url = `${this.paymentLibService.API_ROOT}/service-request/${serviceRef}/pba-payments`;
        return this.https.post(url, body);
    }
    postBSPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/bulk-scan-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSUnidentifiedPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-allocations`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSUnsolicitedPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-allocations`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postBSAllocationPayments(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-allocations`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPaymentGroupWithRemissions(paymentGroupReference, feeId, body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupReference}/fees/${feeId}/remissions`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    deleteFeeFromPaymentGroup(feeId) {
        this.logger.info('Payment-view-service deleteFeeFromPaymentGroup for: ', feeId);
        return this.https.delete(`${this.paymentLibService.API_ROOT}/fees/${feeId}`).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPaymentToPayHub(body, paymentGroupRef) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupRef}/card-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postPaymentAntennaToPayHub(body, paymentGroupRef) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupRef}/telephony-card-payments`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    downloadSelectedReport(reportName, startDate, endDate) {
        const url = `${this.paymentLibService.API_ROOT}/report/data?date_from=${startDate}&date_to=${endDate}&report_type=${reportName}`;
        return this.https.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    downloadFailureReport(startDate, endDate) {
        const url = `${this.paymentLibService.API_ROOT}/payment-failures/failure-report?date_from=${startDate}&date_to=${endDate}`;
        return this.https.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    getBSfeature() {
        return this.https.get('api/payment-history/bulk-scan-feature', { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    getSiteID() {
        return this.https.get('api/payment-history/refdata/legacy-sites', { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    getPartyDetails(caseNumber) {
        const url = `${this.paymentLibService.API_ROOT}/case-payment-orders?case_ids=${caseNumber}`;
        return this.https.get(url, { withCredentials: true }).pipe(catchError(this.errorHandlerService.handleError));
    }
    setOrdersList(orderLevelFees) {
        this.ordersList.next(Object.assign([], orderLevelFees));
    }
    getOrdersList() {
        return this.ordersList;
    }
    //issue refund
    postRefundsReason(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/refund-for-payment`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    // retro remissions
    postPaymentGroupWithRetroRemissions(paymentGroupReference, feeId, body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/payment-groups/${paymentGroupReference}/fees/${feeId}/retro-remission`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    postRefundRetroRemission(body) {
        return this.https.post(`${this.paymentLibService.API_ROOT}/refund-retro-remission`, body).pipe(catchError(this.errorHandlerService.handleError));
    }
    getPaymentFailure(paymentReference) {
        return this.https.get(`${this.paymentLibService.API_ROOT}/payment-failures/${paymentReference}`, {
            withCredentials: true
        }).pipe(catchError(this.errorHandlerService.handleError));
    }
    static ɵfac = function PaymentViewService_Factory(t) { return new (t || PaymentViewService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WebComponentHttpClient), i0.ɵɵinject(i3.LoggerService), i0.ɵɵinject(i4.ErrorHandlerService), i0.ɵɵinject(i5.PaymentLibService)); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentViewService, factory: PaymentViewService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentViewService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.WebComponentHttpClient }, { type: i3.LoggerService }, { type: i4.ErrorHandlerService }, { type: i5.PaymentLibService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,