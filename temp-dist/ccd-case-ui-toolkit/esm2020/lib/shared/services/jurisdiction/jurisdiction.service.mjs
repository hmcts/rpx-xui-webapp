import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { HttpService } from '../http';
import * as i0 from "@angular/core";
import * as i1 from "../http";
export class JurisdictionService {
    constructor(httpService) {
        this.httpService = httpService;
        this.selectedJurisdictionSource = new Subject();
        this.selectedJurisdiction = this.selectedJurisdictionSource.asObservable();
    }
    getJurisdictions() {
        return this.httpService.get('/aggregated/caseworkers/:uid/jurisdictions?access=read');
    }
    announceSelectedJurisdiction(jurisdiction) {
        this.selectedJurisdictionSource.next(jurisdiction);
    }
    searchJudicialUsers(searchTerm, serviceId) {
        return this.httpService.post('api/prd/judicial/getJudicialUsersSearch', { searchString: searchTerm, serviceCode: serviceId });
    }
    searchJudicialUsersByPersonalCodes(personalCodes) {
        return this.httpService.post('api/prd/judicial/searchJudicialUserByPersonalCodes', { personal_code: personalCodes });
    }
}
JurisdictionService.ɵfac = function JurisdictionService_Factory(t) { return new (t || JurisdictionService)(i0.ɵɵinject(i1.HttpService)); };
JurisdictionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: JurisdictionService, factory: JurisdictionService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(JurisdictionService, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianVyaXNkaWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jY2QtY2FzZS11aS10b29sa2l0L3NyYy9saWIvc2hhcmVkL3NlcnZpY2VzL2p1cmlzZGljdGlvbi9qdXJpc2RpY3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7O0FBR3RDLE1BQU0sT0FBTyxtQkFBbUI7SUFLOUIsWUFBNkIsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFIcEMsK0JBQTBCLEdBQUcsSUFBSSxPQUFPLEVBQWdCLENBQUM7UUFJeEUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM3RSxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsd0RBQXdELENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRU0sNEJBQTRCLENBQUMsWUFBMEI7UUFDNUQsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sbUJBQW1CLENBQUMsVUFBa0IsRUFBRSxTQUFpQjtRQUM5RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHlDQUF5QyxFQUFFLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNoSSxDQUFDO0lBRU0sa0NBQWtDLENBQUMsYUFBdUI7UUFDL0QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxvREFBb0QsRUFBRSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZILENBQUM7O3NGQXZCVSxtQkFBbUI7eUVBQW5CLG1CQUFtQixXQUFuQixtQkFBbUI7dUZBQW5CLG1CQUFtQjtjQUQvQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSnVyaXNkaWN0aW9uIH0gZnJvbSAnLi4vLi4vZG9tYWluL2RlZmluaXRpb24vanVyaXNkaWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IEp1ZGljaWFsVXNlck1vZGVsIH0gZnJvbSAnLi4vLi4vZG9tYWluL2p1cmlzZGljdGlvbic7XG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4uL2h0dHAnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSnVyaXNkaWN0aW9uU2VydmljZSB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBzZWxlY3RlZEp1cmlzZGljdGlvblNvdXJjZSA9IG5ldyBTdWJqZWN0PEp1cmlzZGljdGlvbj4oKTtcbiAgcHVibGljIHJlYWRvbmx5IHNlbGVjdGVkSnVyaXNkaWN0aW9uOiBPYnNlcnZhYmxlPEp1cmlzZGljdGlvbj47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBodHRwU2VydmljZTogSHR0cFNlcnZpY2UpIHtcbiAgICB0aGlzLnNlbGVjdGVkSnVyaXNkaWN0aW9uID0gdGhpcy5zZWxlY3RlZEp1cmlzZGljdGlvblNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRKdXJpc2RpY3Rpb25zKCk6IE9ic2VydmFibGU8SnVyaXNkaWN0aW9uW10+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwU2VydmljZS5nZXQoJy9hZ2dyZWdhdGVkL2Nhc2V3b3JrZXJzLzp1aWQvanVyaXNkaWN0aW9ucz9hY2Nlc3M9cmVhZCcpO1xuICB9XG5cbiAgcHVibGljIGFubm91bmNlU2VsZWN0ZWRKdXJpc2RpY3Rpb24oanVyaXNkaWN0aW9uOiBKdXJpc2RpY3Rpb24pOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdGVkSnVyaXNkaWN0aW9uU291cmNlLm5leHQoanVyaXNkaWN0aW9uKTtcbiAgfVxuXG4gIHB1YmxpYyBzZWFyY2hKdWRpY2lhbFVzZXJzKHNlYXJjaFRlcm06IHN0cmluZywgc2VydmljZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEp1ZGljaWFsVXNlck1vZGVsW10+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwU2VydmljZS5wb3N0KCdhcGkvcHJkL2p1ZGljaWFsL2dldEp1ZGljaWFsVXNlcnNTZWFyY2gnLCB7IHNlYXJjaFN0cmluZzogc2VhcmNoVGVybSwgc2VydmljZUNvZGU6IHNlcnZpY2VJZCB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzZWFyY2hKdWRpY2lhbFVzZXJzQnlQZXJzb25hbENvZGVzKHBlcnNvbmFsQ29kZXM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxKdWRpY2lhbFVzZXJNb2RlbFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFNlcnZpY2UucG9zdCgnYXBpL3ByZC9qdWRpY2lhbC9zZWFyY2hKdWRpY2lhbFVzZXJCeVBlcnNvbmFsQ29kZXMnLCB7IHBlcnNvbmFsX2NvZGU6IHBlcnNvbmFsQ29kZXMgfSk7XG4gIH1cbn1cbiJdfQ==