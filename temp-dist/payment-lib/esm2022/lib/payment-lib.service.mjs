import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PaymentLibService {
    API_ROOT;
    BULKSCAN_API_ROOT;
    REFUNDS_API_ROOT;
    NOTIFICATION_API_ROOT;
    CARDPAYMENTRETURNURL;
    constructor() { }
    setApiRootUrl(apiRoot) {
        this.API_ROOT = apiRoot;
    }
    getApiRootUrl() {
        return this.API_ROOT;
    }
    setBulkScanApiRootUrl(bulkscanapiRoot) {
        this.BULKSCAN_API_ROOT = bulkscanapiRoot;
    }
    getBulkScanApiRootUrl() {
        return this.BULKSCAN_API_ROOT;
    }
    setRefundndsApiRootUrl(refundsapiRoot) {
        this.REFUNDS_API_ROOT = refundsapiRoot;
    }
    getRefundsApiRootUrl() {
        return this.REFUNDS_API_ROOT;
    }
    setNoticationApiRootUrl(notificationapiRoot) {
        this.NOTIFICATION_API_ROOT = notificationapiRoot;
    }
    getNoticationApiRootUrl() {
        return this.NOTIFICATION_API_ROOT;
    }
    setCardPaymentReturnUrl(cardPaymentReturnUrl) {
        this.CARDPAYMENTRETURNURL = cardPaymentReturnUrl;
    }
    getCardPaymentReturnUrl() {
        return this.CARDPAYMENTRETURNURL;
    }
    static ɵfac = function PaymentLibService_Factory(t) { return new (t || PaymentLibService)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentLibService, factory: PaymentLibService.ɵfac, providedIn: 'root' });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PaymentLibService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1saWIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3BheW1lbnQtbGliL3NyYy9saWIvcGF5bWVudC1saWIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFFBQVEsQ0FBUztJQUNqQixpQkFBaUIsQ0FBUztJQUMxQixnQkFBZ0IsQ0FBUztJQUN6QixxQkFBcUIsQ0FBUztJQUM5QixvQkFBb0IsQ0FBUztJQUU3QixnQkFBZ0IsQ0FBQztJQUVqQixhQUFhLENBQUMsT0FBZTtRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQscUJBQXFCLENBQUMsZUFBdUI7UUFDM0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGVBQWUsQ0FBQztJQUMzQyxDQUFDO0lBRUQscUJBQXFCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxjQUFzQjtRQUMzQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztJQUNELHVCQUF1QixDQUFDLG1CQUEyQjtRQUNqRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsbUJBQW1CLENBQUM7SUFDbkQsQ0FBQztJQUVELHVCQUF1QjtRQUNyQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsdUJBQXVCLENBQUMsb0JBQTRCO1FBQ2xELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsdUJBQXVCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ25DLENBQUM7MkVBNUNVLGlCQUFpQjtnRUFBakIsaUJBQWlCLFdBQWpCLGlCQUFpQixtQkFIaEIsTUFBTTs7dUZBR1AsaUJBQWlCO2NBSjdCLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBQYXltZW50TGliU2VydmljZSB7XG4gIEFQSV9ST09UOiBzdHJpbmc7XG4gIEJVTEtTQ0FOX0FQSV9ST09UOiBzdHJpbmc7XG4gIFJFRlVORFNfQVBJX1JPT1Q6IHN0cmluZztcbiAgTk9USUZJQ0FUSU9OX0FQSV9ST09UOiBzdHJpbmc7XG4gIENBUkRQQVlNRU5UUkVUVVJOVVJMOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBzZXRBcGlSb290VXJsKGFwaVJvb3Q6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuQVBJX1JPT1QgPSBhcGlSb290O1xuICB9XG5cbiAgZ2V0QXBpUm9vdFVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLkFQSV9ST09UO1xuICB9XG5cbiAgc2V0QnVsa1NjYW5BcGlSb290VXJsKGJ1bGtzY2FuYXBpUm9vdDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5CVUxLU0NBTl9BUElfUk9PVCA9IGJ1bGtzY2FuYXBpUm9vdDtcbiAgfVxuXG4gIGdldEJ1bGtTY2FuQXBpUm9vdFVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLkJVTEtTQ0FOX0FQSV9ST09UO1xuICB9XG5cbiAgc2V0UmVmdW5kbmRzQXBpUm9vdFVybChyZWZ1bmRzYXBpUm9vdDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5SRUZVTkRTX0FQSV9ST09UID0gcmVmdW5kc2FwaVJvb3Q7XG4gIH1cblxuICBnZXRSZWZ1bmRzQXBpUm9vdFVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLlJFRlVORFNfQVBJX1JPT1Q7XG4gIH1cbiAgc2V0Tm90aWNhdGlvbkFwaVJvb3RVcmwobm90aWZpY2F0aW9uYXBpUm9vdDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5OT1RJRklDQVRJT05fQVBJX1JPT1QgPSBub3RpZmljYXRpb25hcGlSb290O1xuICB9XG5cbiAgZ2V0Tm90aWNhdGlvbkFwaVJvb3RVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5OT1RJRklDQVRJT05fQVBJX1JPT1Q7XG4gIH1cbiAgc2V0Q2FyZFBheW1lbnRSZXR1cm5VcmwoY2FyZFBheW1lbnRSZXR1cm5Vcmw6IHN0cmluZyk6dm9pZCB7XG4gICAgdGhpcy5DQVJEUEFZTUVOVFJFVFVSTlVSTCA9IGNhcmRQYXltZW50UmV0dXJuVXJsO1xuICB9XG4gIGdldENhcmRQYXltZW50UmV0dXJuVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuQ0FSRFBBWU1FTlRSRVRVUk5VUkw7XG4gIH1cbn1cbiJdfQ==