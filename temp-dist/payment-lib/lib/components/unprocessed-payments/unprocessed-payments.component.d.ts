import { OnInit, EventEmitter } from '@angular/core';
import { BulkScaningPaymentService } from '../../services/bulk-scaning-payment/bulk-scaning-payment.service';
import { PaymentLibComponent } from '../../payment-lib.component';
import { IBSPayments } from '../../interfaces/IBSPayments';
import { Router } from '@angular/router';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { OrderslistService } from '../../services/orderslist.service';
import * as i0 from "@angular/core";
export declare class UnprocessedPaymentsComponent implements OnInit {
    private router;
    private bulkScaningPaymentService;
    private paymentLibComponent;
    private paymentViewService;
    private OrderslistService;
    FEE_RECORDS_EXISTS: boolean;
    PAYMENTREF: string;
    ISTURNOFF: boolean;
    IS_BUTTON_ENABLE: boolean;
    IS_OS_AMT_AVAILABLE: boolean;
    ISSFENABLE: boolean;
    PAYMENTSLENGTH: Number;
    LEVEL: Number;
    selectedUnprocessedFeeEvent: EventEmitter<string>;
    getUnprocessedFeeCount: EventEmitter<string>;
    viewStatus: string;
    unassignedRecordList: IBSPayments;
    upPaymentErrorMessage: string;
    ccdCaseNumber: string;
    recordId: string;
    isRecordExist: boolean;
    dcnNumber: string;
    selectedOption: string;
    isUnprocessedRecordSelected: boolean;
    isAllocateToExistingFeebtnEnabled: boolean;
    isMarkAsUnidentifiedbtnEnabled: boolean;
    isAllocatedToNewFeebtnEnabled: boolean;
    isExceptionCase: boolean;
    serviceId: string;
    isBulkScanEnable: any;
    isTurnOff: boolean;
    isStFixEnable: any;
    unassignedRecordSelectedList: IBSPayments;
    unassignedRecordListLength: number;
    showContent: boolean;
    constructor(router: Router, bulkScaningPaymentService: BulkScaningPaymentService, paymentLibComponent: PaymentLibComponent, paymentViewService: PaymentViewService, OrderslistService: OrderslistService);
    ngOnInit(): void;
    getUnassignedPaymentlist(): void;
    setValuesForUnassignedRecord(unassignedPayments: any): void;
    formatUnassignedRecordId(ID: Number): string;
    trimUnderscore(method: string): string;
    redirectToFeeSearchPage(event: any, dcn_reference: any): void;
    loadUnsolicitedPage(viewName: string, dcn_reference: any): void;
    unprocessedPaymentSelectEvent(selectedRecordReference: any): void;
    resetButtons(): void;
    goToAllocatePage(dcn_reference: any): void;
    validateButtons(): void;
    unprocessedPaymentUnSelectEvent(event: any): void;
    showDetailRow(event: any, obj: any, i: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<UnprocessedPaymentsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UnprocessedPaymentsComponent, "ccpay-app-unprocessed-payments", never, { "FEE_RECORDS_EXISTS": { "alias": "FEE_RECORDS_EXISTS"; "required": false; }; "PAYMENTREF": { "alias": "PAYMENTREF"; "required": false; }; "ISTURNOFF": { "alias": "ISTURNOFF"; "required": false; }; "IS_BUTTON_ENABLE": { "alias": "IS_BUTTON_ENABLE"; "required": false; }; "IS_OS_AMT_AVAILABLE": { "alias": "IS_OS_AMT_AVAILABLE"; "required": false; }; "ISSFENABLE": { "alias": "ISSFENABLE"; "required": false; }; "PAYMENTSLENGTH": { "alias": "PAYMENTSLENGTH"; "required": false; }; "LEVEL": { "alias": "LEVEL"; "required": false; }; }, { "selectedUnprocessedFeeEvent": "selectedUnprocessedFeeEvent"; "getUnprocessedFeeCount": "getUnprocessedFeeCount"; }, never, never, false, never>;
}
//# sourceMappingURL=unprocessed-payments.component.d.ts.map