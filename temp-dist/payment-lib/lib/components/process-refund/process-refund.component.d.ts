import { OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { RefundsService } from '../../services/refunds/refunds.service';
import { IRefundAction } from '../../interfaces/IRefundAction';
import { IRefundList } from '../../interfaces/IRefundList';
import { IPayment } from '../../interfaces/IPayment';
import { IRefundRejectReason } from '../../interfaces/IRefundRejectReason';
import { OrderslistService } from '../../services/orderslist.service';
import { NotificationService } from '../../services/notification/notification.service';
import { PaymentViewService } from '../../services/payment-view/payment-view.service';
import { PaymentLibComponent } from '../../payment-lib.component';
import { ActivatedRoute, Router } from '@angular/router';
import { INotificationPreview } from '../../interfaces/INotificationPreview';
import * as i0 from "@angular/core";
export declare class ProcessRefundComponent implements OnInit {
    private RefundsService;
    private paymentViewService;
    private formBuilder;
    private OrderslistService;
    private notificationService;
    private paymentLibComponent;
    private router;
    private activeRoute;
    refundReference: string;
    refundlistsource: IRefundList;
    processRefundForm: FormGroup;
    errorMessage: {
        title: string;
        body: string;
        showError: any;
    };
    sendmeback: string;
    viewStatus: string;
    refundActionList: IRefundAction[];
    refundRejectReasonList: IRefundRejectReason[];
    isSendMeBackClicked: boolean;
    isRejectClicked: boolean;
    isOtherClicked: boolean;
    isSuccesspageEnable: boolean;
    refundActionsHasError: boolean;
    refundRejectReasonHasError: boolean;
    isReasonFieldEmpty: boolean;
    isReasonFieldInvalid: boolean;
    reasonFieldMinHasError: boolean;
    reasonFieldMaxHasError: boolean;
    isReasonEmpty: boolean;
    isReasonInvalid: boolean;
    successMsg: string;
    navigationpage: string;
    ccdCaseNumber: string;
    isFromRefundListPage: boolean;
    cpoDetails: any;
    isCPODown: boolean;
    isConfirmButtondisabled: boolean;
    paymentObj: IPayment;
    templateInstructionType: string;
    notificationPreview: boolean;
    notificationPreviewObj: INotificationPreview;
    constructor(RefundsService: RefundsService, paymentViewService: PaymentViewService, formBuilder: FormBuilder, OrderslistService: OrderslistService, notificationService: NotificationService, paymentLibComponent: PaymentLibComponent, router: Router, activeRoute: ActivatedRoute);
    ngOnInit(): void;
    checkRefundActions(code: string): void;
    getNotificationPreviewObj(notificationPreviewObj: INotificationPreview): void;
    processRefundSubmit(): void;
    getErrorMessage(isErrorExist: any, status: any, errorMsg: any, err: any): {
        title: string;
        body: string;
        showError: any;
    };
    loadRefundListPage(): void;
    loadRefundsHomePage(): void;
    redirecttoRefundListPage(): void;
    loadCaseTransactionPage(): void;
    resetForm(vals: any, field: any): void;
    goToCaseReview(): void;
    getTemplateInstructionType(payment: IPayment, paymentReference: string): void;
    showNotificationPreview(): void;
    hideNotificationPreview(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProcessRefundComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProcessRefundComponent, "ccpay-process-refund", never, { "refundReference": { "alias": "refundReference"; "required": false; }; "refundlistsource": { "alias": "refundlistsource"; "required": false; }; }, {}, never, never, false, never>;
}
//# sourceMappingURL=process-refund.component.d.ts.map