import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AbstractAppConfig } from '../../../app.config';
import { Draft, DRAFT_PREFIX } from '../../domain/draft.model';
import { HttpErrorService, HttpService } from '../http';
import * as i0 from "@angular/core";
import * as i1 from "../http";
import * as i2 from "../../../app.config";
export class DraftService {
    constructor(http, appConfig, errorService) {
        this.http = http;
        this.appConfig = appConfig;
        this.errorService = errorService;
    }
    createDraft(ctid, eventData) {
        const saveDraftEndpoint = this.appConfig.getCreateOrUpdateDraftsUrl(ctid);
        const headers = new HttpHeaders()
            .set('experimental', 'true')
            .set('Accept', DraftService.V2_MEDIATYPE_DRAFT_CREATE)
            .set('Content-Type', 'application/json');
        return this.http
            .post(saveDraftEndpoint, eventData, { headers, observe: 'body' })
            .pipe(catchError((error) => {
            this.errorService.setError(error);
            return throwError(error);
        }));
    }
    updateDraft(ctid, draftId, eventData) {
        const saveDraftEndpoint = this.appConfig.getCreateOrUpdateDraftsUrl(ctid) + draftId;
        const headers = new HttpHeaders()
            .set('experimental', 'true')
            .set('Accept', DraftService.V2_MEDIATYPE_DRAFT_UPDATE)
            .set('Content-Type', 'application/json');
        return this.http
            .put(saveDraftEndpoint, eventData, { headers, observe: 'body' })
            .pipe(catchError((error) => {
            this.errorService.setError(error);
            return throwError(error);
        }));
    }
    getDraft(draftId) {
        const url = this.appConfig.getViewOrDeleteDraftsUrl(draftId.slice(DRAFT_PREFIX.length));
        const headers = new HttpHeaders()
            .set('experimental', 'true')
            .set('Accept', DraftService.V2_MEDIATYPE_DRAFT_READ)
            .set('Content-Type', 'application/json');
        return this.http
            .get(url, { headers, observe: 'body' })
            .pipe(catchError((error) => {
            this.errorService.setError(error);
            return throwError(error);
        }));
    }
    deleteDraft(draftId) {
        const url = this.appConfig.getViewOrDeleteDraftsUrl(draftId.slice(DRAFT_PREFIX.length));
        const headers = new HttpHeaders()
            .set('experimental', 'true')
            .set('Accept', DraftService.V2_MEDIATYPE_DRAFT_DELETE)
            .set('Content-Type', 'application/json');
        return this.http
            .delete(url, { headers, observe: 'body' }).pipe(catchError((error) => {
            this.errorService.setError(error);
            return throwError(error);
        }));
    }
    createOrUpdateDraft(caseTypeId, draftId, caseEventData) {
        if (!draftId) {
            return this.createDraft(caseTypeId, caseEventData);
        }
        else {
            return this.updateDraft(caseTypeId, Draft.stripDraftId(draftId), caseEventData);
        }
    }
}
DraftService.V2_MEDIATYPE_DRAFT_CREATE = 'application/vnd.uk.gov.hmcts.ccd-data-store-api.ui-draft-create.v2+json;charset=UTF-8';
DraftService.V2_MEDIATYPE_DRAFT_UPDATE = 'application/vnd.uk.gov.hmcts.ccd-data-store-api.ui-draft-update.v2+json;charset=UTF-8';
DraftService.V2_MEDIATYPE_DRAFT_READ = 'application/vnd.uk.gov.hmcts.ccd-data-store-api.ui-draft-read.v2+json;charset=UTF-8';
DraftService.V2_MEDIATYPE_DRAFT_DELETE = 'application/vnd.uk.gov.hmcts.ccd-data-store-api.ui-draft-delete.v2+json;charset=UTF-8';
DraftService.ɵfac = function DraftService_Factory(t) { return new (t || DraftService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.AbstractAppConfig), i0.ɵɵinject(i1.HttpErrorService)); };
DraftService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DraftService, factory: DraftService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DraftService, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpService }, { type: i2.AbstractAppConfig }, { type: i1.HttpErrorService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,