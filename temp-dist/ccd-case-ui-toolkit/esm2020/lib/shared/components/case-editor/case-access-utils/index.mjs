export class CaseAccessUtils {
    getMappedRoleCategory(roles = [], roleCategories = []) {
        const roleKeywords = roles.join().split('-').join().split(',');
        if (this.roleOrCategoryExists(CaseAccessUtils.JUDGE_ROLE, CaseAccessUtils.JUDGE_ROLE_CATEGORY, roleKeywords, roleCategories)) {
            return CaseAccessUtils.JUDGE_ROLE_CATEGORY;
        }
        else if (this.roleOrCategoryExists(CaseAccessUtils.PROFESSIONAL_ROLE, CaseAccessUtils.PROFESSIONAL_ROLE_CATEGORY, roleKeywords, roleCategories)) {
            return CaseAccessUtils.PROFESSIONAL_ROLE_CATEGORY;
        }
        else if (this.roleOrCategoryExists(CaseAccessUtils.CITIZEN_ROLE, CaseAccessUtils.CITIZEN_ROLE_CATEGORY, roleKeywords, roleCategories)) {
            return CaseAccessUtils.CITIZEN_ROLE_CATEGORY;
        }
        else if (this.roleOrCategoryExists(CaseAccessUtils.ADMIN_ROLE, CaseAccessUtils.ADMIN_ROLE_CATEGORY, roleKeywords, roleCategories)) {
            return CaseAccessUtils.ADMIN_ROLE_CATEGORY;
        }
        else if (this.roleOrCategoryExists(CaseAccessUtils.CTSC_ROLE, CaseAccessUtils.CTSC_ROLE_CATEGORY, roleKeywords, roleCategories)) {
            return CaseAccessUtils.CTSC_ROLE_CATEGORY;
        }
        else {
            return CaseAccessUtils.LEGAL_OPERATIONS_ROLE_CATEGORY;
        }
    }
    roleOrCategoryExists(roleKeyword, roleCategory, roleKeywords, roleCategories) {
        const categoryExists = roleCategories.indexOf(roleCategory) > -1;
        const keywordExists = roleKeywords.indexOf(roleKeyword) > -1;
        return categoryExists ? categoryExists : keywordExists;
    }
    getAMRoleName(accessType, aMRole) {
        let roleName = '';
        switch (aMRole) {
            case CaseAccessUtils.JUDGE_ROLE_CATEGORY:
                roleName = `${accessType}-access-${CaseAccessUtils.JUDGE_ROLE_NAME}`;
                break;
            case CaseAccessUtils.PROFESSIONAL_ROLE_CATEGORY:
                roleName = `${accessType}-access-${CaseAccessUtils.PROFESSIONAL_ROLE_NAME}`;
                break;
            case CaseAccessUtils.CITIZEN_ROLE_CATEGORY:
                roleName = `${accessType}-access-${CaseAccessUtils.CITIZEN_ROLE_NAME}`;
                break;
            case CaseAccessUtils.ADMIN_ROLE_CATEGORY:
                roleName = `${accessType}-access-${CaseAccessUtils.ADMIN_ROLE_NAME}`;
                break;
            case CaseAccessUtils.CTSC_ROLE_CATEGORY:
                roleName = `${accessType}-access-${CaseAccessUtils.CTSC_ROLE_NAME}`;
                break;
            default:
                roleName = `${accessType}-access-${CaseAccessUtils.LEGAL_OPERATIONS_ROLE_NAME}`;
                break;
        }
        return roleName;
    }
    getAMPayload(assignerId, actorId, roleName, roleCategory, grantType, caseId, details, beginTime = null, endTime = null, isNew = false) {
        const process = details.caseReference !== undefined ? 'challenged-access' : 'specific-access';
        const payload = {
            roleRequest: {
                assignerId,
                process,
                reference: `${caseId}/${roleName}/${actorId}`,
                replaceExisting: true
            },
            requestedRoles: [{
                    actorIdType: 'IDAM',
                    actorId,
                    roleType: 'CASE',
                    roleName,
                    classification: 'PUBLIC',
                    roleCategory,
                    grantType,
                    beginTime,
                    endTime,
                    attributes: {
                        caseId,
                        isNew,
                        accessReason: JSON.stringify(details),
                    },
                    notes: [{
                            userId: assignerId,
                            time: new Date(),
                            comment: JSON.stringify(details)
                        }]
                }]
        };
        return payload;
    }
}
// User role mapping
CaseAccessUtils.JUDGE_ROLE = 'judge';
CaseAccessUtils.JUDGE_ROLE_CATEGORY = 'JUDICIAL';
CaseAccessUtils.JUDGE_ROLE_NAME = 'judiciary';
CaseAccessUtils.ADMIN_ROLE = 'admin';
CaseAccessUtils.ADMIN_ROLE_CATEGORY = 'ADMIN';
CaseAccessUtils.ADMIN_ROLE_NAME = 'admin';
CaseAccessUtils.PROFESSIONAL_ROLE = 'solicitor';
CaseAccessUtils.PROFESSIONAL_ROLE_CATEGORY = 'PROFESSIONAL';
CaseAccessUtils.PROFESSIONAL_ROLE_NAME = 'professional';
CaseAccessUtils.LEGAL_OPERATIONS_ROLE = 'caseworker';
CaseAccessUtils.LEGAL_OPERATIONS_ROLE_CATEGORY = 'LEGAL_OPERATIONS';
CaseAccessUtils.LEGAL_OPERATIONS_ROLE_NAME = 'legal-ops';
CaseAccessUtils.CITIZEN_ROLE = 'citizen';
CaseAccessUtils.CITIZEN_ROLE_CATEGORY = 'CITIZEN';
CaseAccessUtils.CITIZEN_ROLE_NAME = 'citizen';
CaseAccessUtils.CTSC_ROLE = 'ctsc';
CaseAccessUtils.CTSC_ROLE_CATEGORY = 'CTSC';
CaseAccessUtils.CTSC_ROLE_NAME = 'ctsc';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jY2QtY2FzZS11aS10b29sa2l0L3NyYy9saWIvc2hhcmVkL2NvbXBvbmVudHMvY2FzZS1lZGl0b3IvY2FzZS1hY2Nlc3MtdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxPQUFPLGVBQWU7SUFxQmpCLHFCQUFxQixDQUFDLFFBQWtCLEVBQUUsRUFBRSxpQkFBMkIsRUFBRTtRQUU1RSxNQUFNLFlBQVksR0FBYSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6RSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsY0FBYyxDQUFDLEVBQUU7WUFDMUgsT0FBTyxlQUFlLENBQUMsbUJBQW1CLENBQUM7U0FDOUM7YUFBTSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQ2xFLGVBQWUsQ0FBQywwQkFBMEIsRUFBRSxZQUFZLEVBQUUsY0FBYyxDQUFDLEVBQUU7WUFDM0UsT0FBTyxlQUFlLENBQUMsMEJBQTBCLENBQUM7U0FDckQ7YUFBTSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUM3RCxlQUFlLENBQUMscUJBQXFCLEVBQUUsWUFBWSxFQUFFLGNBQWMsQ0FBQyxFQUFFO1lBQ3RFLE9BQU8sZUFBZSxDQUFDLHFCQUFxQixDQUFDO1NBQ2hEO2FBQU0sSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFDM0QsZUFBZSxDQUFDLG1CQUFtQixFQUFFLFlBQVksRUFBRSxjQUFjLENBQUMsRUFBRTtZ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b0JBQ0QsS0FBSyxFQUFFLENBQUM7NEJBQ04sTUFBTSxFQUFFLFVBQVU7NEJBQ2xCLElBQUksRUFBRSxJQUFJLElBQUksRUFBRTs0QkFDaEIsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO3lCQUNqQyxDQUFDO2lCQUNMLENBQUM7U0FDTCxDQUFDO1FBRUYsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQzs7QUE1SEQsb0JBQW9CO0FBQ0csMEJBQVUsR0FBRyxPQUFPLENBQUM7QUFDckIsbUNBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQ2pDLCtCQUFlLEdBQUcsV0FBVyxDQUFDO0FBQzlCLDBCQUFVLEdBQUcsT0FBTyxDQUFDO0FBQ3JCLG1DQUFtQixHQUFHLE9BQU8sQ0FBQztBQUM5QiwrQkFBZSxHQUFHLE9BQU8sQ0FBQztBQUMxQixpQ0FBaUIsR0FBRyxXQUFXLENBQUM7QUFDaEMsMENBQTBCLEdBQUcsY0FBYyxDQUFDO0FBQzVDLHNDQUFzQixHQUFHLGNBQWMsQ0FBQztBQUN4QyxxQ0FBcUIsR0FBRyxZQUFZLENBQUM7QUFDckMsOENBQThCLEdBQUcsa0JBQWtCLENBQUM7QUFDcEQsMENBQTBCLEdBQUcsV0FBVyxDQUFDO0FBQ3pDLDRCQUFZLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLHFDQUFxQixHQUFHLFNBQVMsQ0FBQztBQUNsQyxpQ0FBaUIsR0FBRyxTQUFTLENBQUM7QUFDOUIseUJBQVMsR0FBRyxNQUFNLENBQUM7QUFDbkIsa0NBQWtCLEdBQUcsTUFBTSxDQUFDO0FBQzVCLDhCQUFjLEdBQUcsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbGxlbmdlZEFjY2Vzc1JlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9kb21haW4vY2FzZS12aWV3L2NoYWxsZW5nZWQtYWNjZXNzLXJlcXVlc3QubW9kZWwnO1xuaW1wb3J0IHsgUm9sZUNhdGVnb3J5LCBSb2xlR3JhbnRUeXBlQ2F0ZWdvcnksIFJvbGVSZXF1ZXN0UGF5bG9hZCB9IGZyb20gJy4uLy4uLy4uL2RvbWFpbi9jYXNlLXZpZXcvcm9sZS1yZXF1ZXN0Lm1vZGVsJztcbmltcG9ydCB7IFNwZWNpZmljQWNjZXNzUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2RvbWFpbi9jYXNlLXZpZXcvc3BlY2lmaWMtYWNjZXNzLXJlcXVlc3QubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgQ2FzZUFjY2Vzc1V0aWxzIHtcbiAgICAvLyBVc2VyIHJvbGUgbWFwcGluZ1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSlVER0VfUk9MRSA9ICdqdWRnZSc7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBKVURHRV9ST0xFX0NBVEVHT1JZID0gJ0pVRElDSUFMJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEpVREdFX1JPTEVfTkFNRSA9ICdqdWRpY2lhcnknO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQURNSU5fUk9MRSA9ICdhZG1pbic7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBBRE1JTl9ST0xFX0NBVEVHT1JZID0gJ0FETUlOJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFETUlOX1JPTEVfTkFNRSA9ICdhZG1pbic7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9GRVNTSU9OQUxfUk9MRSA9ICdzb2xpY2l0b3InO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUFJPRkVTU0lPTkFMX1JPTEVfQ0FURUdPUlkgPSAnUFJPRkVTU0lPTkFMJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBST0ZFU1NJT05BTF9ST0xFX05BTUUgPSAncHJvZmVzc2lvbmFsJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExFR0FMX09QRVJBVElPTlNfUk9MRSA9ICdjYXNld29ya2VyJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExFR0FMX09QRVJBVElPTlNfUk9MRV9DQVRFR09SWSA9ICdMRUdBTF9PUEVSQVRJT05TJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExFR0FMX09QRVJBVElPTlNfUk9MRV9OQU1FID0gJ2xlZ2FsLW9wcyc7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBDSVRJWkVOX1JPTEUgPSAnY2l0aXplbic7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBDSVRJWkVOX1JPTEVfQ0FURUdPUlkgPSAnQ0lUSVpFTic7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBDSVRJWkVOX1JPTEVfTkFNRSA9ICdjaXRpemVuJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENUU0NfUk9MRSA9ICdjdHNjJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENUU0NfUk9MRV9DQVRFR09SWSA9ICdDVFNDJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENUU0NfUk9MRV9OQU1FID0gJ2N0c2MnO1xuXG4gICAgcHVibGljIGdldE1hcHBlZFJvbGVDYXRlZ29yeShyb2xlczogc3RyaW5nW10gPSBbXSwgcm9sZUNhdGVnb3JpZXM6IHN0cmluZ1tdID0gW10pOiBSb2xlQ2F0ZWdvcnkge1xuXG4gICAgICAgIGNvbnN0IHJvbGVLZXl3b3Jkczogc3RyaW5nW10gPSByb2xlcy5qb2luKCkuc3BsaXQoJy0nKS5qb2luKCkuc3BsaXQoJywnKTtcblxuICAgICAgICBpZiAodGhpcy5yb2xlT3JDYXRlZ29yeUV4aXN0cyhDYXNlQWNjZXNzVXRpbHMuSlVER0VfUk9MRSwgQ2FzZUFjY2Vzc1V0aWxzLkpVREdFX1JPTEVfQ0FURUdPUlksIHJvbGVLZXl3b3Jkcywgcm9sZUNhdGVnb3JpZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FzZUFjY2Vzc1V0aWxzLkpVREdFX1JPTEVfQ0FURUdPUlk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlT3JDYXRlZ29yeUV4aXN0cyhDYXNlQWNjZXNzVXRpbHMuUFJPRkVTU0lPTkFMX1JPTEUsXG4gICAgICAgICAgICBDYXNlQWNjZXNzVXRpbHMuUFJPRkVTU0lPTkFMX1JPTEVfQ0FURUdPUlksIHJvbGVLZXl3b3Jkcywgcm9sZUNhdGVnb3JpZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FzZUFjY2Vzc1V0aWxzLlBST0ZFU1NJT05BTF9ST0xFX0NBVEVHT1JZO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucm9sZU9yQ2F0ZWdvcnlFeGlzdHMoQ2FzZUFjY2Vzc1V0aWxzLkNJVElaRU5fUk9MRSxcbiAgICAgICAgICAgIENhc2VBY2Nlc3NVdGlscy5DSVRJWkVOX1JPTEVfQ0FURUdPUlksIHJvbGVLZXl3b3Jkcywgcm9sZUNhdGVnb3JpZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FzZUFjY2Vzc1V0aWxzLkNJVElaRU5fUk9MRV9DQVRFR09SWTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJvbGVPckNhdGVnb3J5RXhpc3RzKENhc2VBY2Nlc3NVdGlscy5BRE1JTl9ST0xFLFxuICAgICAgICAgICAgQ2FzZUFjY2Vzc1V0aWxzLkFETUlOX1JPTEVfQ0FURUdPUlksIHJvbGVLZXl3b3Jkcywgcm9sZUNhdGVnb3JpZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FzZUFjY2Vzc1V0aWxzLkFETUlOX1JPTEVfQ0FURUdPUlk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlT3JDYXRlZ29yeUV4aXN0cyhDYXNlQWNjZXNzVXRpbHMuQ1RTQ19ST0xFLFxuICAgICAgICAgICAgQ2FzZUFjY2Vzc1V0aWxzLkNUU0NfUk9MRV9DQVRFR09SWSwgcm9sZUtleXdvcmRzLCByb2xlQ2F0ZWdvcmllcykpIHtcbiAgICAgICAgICAgIHJldHVybiBDYXNlQWNjZXNzVXRpbHMuQ1RTQ19ST0xFX0NBVEVHT1JZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIENhc2VBY2Nlc3NVdGlscy5MRUdBTF9PUEVSQVRJT05TX1JPTEVfQ0FURUdPUlk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyByb2xlT3JDYXRlZ29yeUV4aXN0cyhyb2xlS2V5d29yZDogc3RyaW5nLCByb2xlQ2F0ZWdvcnk6IHN0cmluZywgcm9sZUtleXdvcmRzOiBzdHJpbmdbXSwgcm9sZUNhdGVnb3JpZXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5RXhpc3RzID0gcm9sZUNhdGVnb3JpZXMuaW5kZXhPZihyb2xlQ2F0ZWdvcnkpID4gLTE7XG4gICAgICAgIGNvbnN0IGtleXdvcmRFeGlzdHMgPSByb2xlS2V5d29yZHMuaW5kZXhPZihyb2xlS2V5d29yZCkgPiAtMTtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3J5RXhpc3RzID8gY2F0ZWdvcnlFeGlzdHMgOiBrZXl3b3JkRXhpc3RzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBTVJvbGVOYW1lKGFjY2Vzc1R5cGU6IHN0cmluZywgYU1Sb2xlOiBSb2xlQ2F0ZWdvcnkpOiBzdHJpbmcge1xuXG4gICAgICAgIGxldCByb2xlTmFtZSA9ICcnO1xuXG4gICAgICAgIHN3aXRjaCAoYU1Sb2xlKSB7XG4gICAgICAgICAgICBjYXNlIENhc2VBY2Nlc3NVdGlscy5KVURHRV9ST0xFX0NBVEVHT1JZOlxuICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gYCR7YWNjZXNzVHlwZX0tYWNjZXNzLSR7Q2FzZUFjY2Vzc1V0aWxzLkpVREdFX1JPTEVfTkFNRX1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDYXNlQWNjZXNzVXRpbHMuUFJPRkVTU0lPTkFMX1JPTEVfQ0FURUdPUlk6XG4gICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBgJHthY2Nlc3NUeXBlfS1hY2Nlc3MtJHtDYXNlQWNjZXNzVXRpbHMuUFJPRkVTU0lPTkFMX1JPTEVfTkFNRX1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDYXNlQWNjZXNzVXRpbHMuQ0lUSVpFTl9ST0xFX0NBVEVHT1JZOlxuICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gYCR7YWNjZXNzVHlwZX0tYWNjZXNzLSR7Q2FzZUFjY2Vzc1V0aWxzLkNJVElaRU5fUk9MRV9OQU1FfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENhc2VBY2Nlc3NVdGlscy5BRE1JTl9ST0xFX0NBVEVHT1JZOlxuICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gYCR7YWNjZXNzVHlwZX0tYWNjZXNzLSR7Q2FzZUFjY2Vzc1V0aWxzLkFETUlOX1JPTEVfTkFNRX1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDYXNlQWNjZXNzVXRpbHMuQ1RTQ19ST0xFX0NBVEVHT1JZOlxuICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gYCR7YWNjZXNzVHlwZX0tYWNjZXNzLSR7Q2FzZUFjY2Vzc1V0aWxzLkNUU0NfUk9MRV9OQU1FfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gYCR7YWNjZXNzVHlwZX0tYWNjZXNzLSR7Q2FzZUFjY2Vzc1V0aWxzLkxFR0FMX09QRVJBVElPTlNfUk9MRV9OQU1FfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcm9sZU5hbWU7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QU1QYXlsb2FkKFxuICAgICAgICBhc3NpZ25lcklkOiBzdHJpbmcsXG4gICAgICAgIGFjdG9ySWQ6IHN0cmluZyxcbiAgICAgICAgcm9sZU5hbWU6IHN0cmluZyxcbiAgICAgICAgcm9sZUNhdGVnb3J5OiBSb2xlQ2F0ZWdvcnksXG4gICAgICAgIGdyYW50VHlwZTogUm9sZUdyYW50VHlwZUNhdGVnb3J5LFxuICAgICAgICBjYXNlSWQ6IHN0cmluZyxcbiAgICAgICAgZGV0YWlsczogQ2hhbGxlbmdlZEFjY2Vzc1JlcXVlc3QgfCBTcGVjaWZpY0FjY2Vzc1JlcXVlc3QsXG4gICAgICAgIGJlZ2luVGltZTogRGF0ZSA9IG51bGwsXG4gICAgICAgIGVuZFRpbWU6IERhdGUgPSBudWxsLFxuICAgICAgICBpc05ldyA9IGZhbHNlLFxuICAgICk6IFJvbGVSZXF1ZXN0UGF5bG9hZCB7XG4gICAgICAgIGNvbnN0IHByb2Nlc3MgPSAgKGRldGFpbHMgYXMgQ2hhbGxlbmdlZEFjY2Vzc1JlcXVlc3QpLmNhc2VSZWZlcmVuY2UgIT09IHVuZGVmaW5lZCA/ICdjaGFsbGVuZ2VkLWFjY2VzcycgOiAnc3BlY2lmaWMtYWNjZXNzJztcblxuICAgICAgICBjb25zdCBwYXlsb2FkOiBSb2xlUmVxdWVzdFBheWxvYWQgPSB7XG4gICAgICAgICAgICByb2xlUmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIGFzc2lnbmVySWQsXG4gICAgICAgICAgICAgICAgcHJvY2VzcyxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2U6IGAke2Nhc2VJZH0vJHtyb2xlTmFtZX0vJHthY3RvcklkfWAsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUV4aXN0aW5nOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWVzdGVkUm9sZXM6IFt7XG4gICAgICAgICAgICAgICAgYWN0b3JJZFR5cGU6ICdJREFNJyxcbiAgICAgICAgICAgICAgICBhY3RvcklkLFxuICAgICAgICAgICAgICAgIHJvbGVUeXBlOiAnQ0FTRScsXG4gICAgICAgICAgICAgICAgcm9sZU5hbWUsXG4gICAgICAgICAgICAgICAgY2xhc3NpZmljYXRpb246ICdQVUJMSUMnLFxuICAgICAgICAgICAgICAgIHJvbGVDYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBncmFudFR5cGUsXG4gICAgICAgICAgICAgICAgYmVnaW5UaW1lLFxuICAgICAgICAgICAgICAgIGVuZFRpbWUsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgY2FzZUlkLFxuICAgICAgICAgICAgICAgICAgaXNOZXcsXG4gICAgICAgICAgICAgICAgICBhY2Nlc3NSZWFzb246IEpTT04uc3RyaW5naWZ5KGRldGFpbHMpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbm90ZXM6IFt7XG4gICAgICAgICAgICAgICAgICB1c2VySWQ6IGFzc2lnbmVySWQsXG4gICAgICAgICAgICAgICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgY29tbWVudDogSlNPTi5zdHJpbmdpZnkoZGV0YWlscylcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICB9XG59XG4iXX0=