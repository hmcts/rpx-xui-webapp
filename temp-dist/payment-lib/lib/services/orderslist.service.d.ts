import { Observable, BehaviorSubject } from 'rxjs';
import { IOrderReferenceFee } from '../interfaces/IOrderReferenceFee';
import { IRefundList } from '../interfaces/IRefundList';
import { IPaymentView } from '../interfaces/IPaymentView';
import * as i0 from "@angular/core";
export declare class OrderslistService {
    private ordersList;
    private refundView;
    private caseType;
    getcaseType: Observable<string>;
    private feeExists;
    getFeeExist: Observable<boolean>;
    private ccdCaseNumber;
    getCCDCaseNumberforRefund: Observable<string>;
    private isFromServiceRequestPage;
    getisFromServiceRequestPage: Observable<boolean>;
    private OrderRefId;
    getOrderRefId: Observable<string>;
    private navigationPage;
    getnavigationPage: Observable<string>;
    private orderRef;
    getorderRef: Observable<string>;
    private orderCCDEvent;
    getorderCCDEvent: Observable<string>;
    private orderCreated;
    getorderCreated: Observable<Date>;
    private orderParty;
    getorderParty: Observable<string>;
    private orderRemissionTotal;
    getorderRemissionTotal: Observable<number>;
    private orderFeesTotal;
    getorderFeesTotal: Observable<number>;
    private orderTotalPayments;
    getorderTotalPayments: Observable<number>;
    private rolesList;
    private orderDetail;
    private paymentPageView;
    constructor();
    setOrdersList(orderLevelFees: IOrderReferenceFee[]): void;
    getOrdersList(): BehaviorSubject<IOrderReferenceFee[]>;
    setRefundView(refundList: IRefundList): void;
    getRefundView(): BehaviorSubject<IRefundList>;
    setCaseType(caseType: string): void;
    getCaseType(): BehaviorSubject<string>;
    setCCDCaseNumber(ccdCaseNumber: string): void;
    getCCDCaseNumber(): BehaviorSubject<string>;
    setFeeExists(feeExists: boolean): void;
    getFeeExists(): BehaviorSubject<boolean>;
    setisFromServiceRequestPage(isFromServiceRequestPage: boolean): void;
    getisFromServiceRequestPages(): BehaviorSubject<boolean>;
    setOrderRefId(OrderRefId: string): void;
    getSelectedOrderRefId(): BehaviorSubject<string>;
    setnavigationPage(navigationPage: string): void;
    getnavigationPageValue(): BehaviorSubject<string>;
    setpaymentPageView(paymentpageList: IPaymentView): void;
    getpaymentPageView(): BehaviorSubject<IPaymentView>;
    setUserRolesList(rolesList: any[]): void;
    getUserRolesList(): BehaviorSubject<any[]>;
    setorderDetail(orderDetail: any[]): void;
    getorderDetail(): BehaviorSubject<any[]>;
    setOrderRef(orderRef: string): void;
    getorderRefs(): BehaviorSubject<string>;
    setorderCCDEvent(orderCCDEvent: string): void;
    getorderCCDEvents(): BehaviorSubject<string>;
    setorderCreated(orderCreated: Date): void;
    getorderCreateds(): BehaviorSubject<Date>;
    setorderParty(orderParty: string): void;
    getorderPartys(): BehaviorSubject<string>;
    setorderRemissionTotal(orderRemissionTotal: number): void;
    getorderRemissionTotals(): BehaviorSubject<number>;
    setorderFeesTotal(orderFeesTotal: number): void;
    getorderFeesTotals(): BehaviorSubject<number>;
    setorderTotalPayments(orderTotalPayments: number): void;
    getoorderTotalPaymentss(): BehaviorSubject<number>;
    static ɵfac: i0.ɵɵFactoryDeclaration<OrderslistService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<OrderslistService>;
}
//# sourceMappingURL=orderslist.service.d.ts.map