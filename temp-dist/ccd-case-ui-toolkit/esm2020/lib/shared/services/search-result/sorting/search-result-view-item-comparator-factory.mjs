import { Injectable } from '@angular/core';
import { isUndefined } from 'util';
import * as i0 from "@angular/core";
export class SearchResultViewItemComparatorFactory {
    createSearchResultViewItemComparator(column) {
        const fieldId = column.case_field_id;
        switch (column.case_field_type.type) {
            case ('MultiSelectList'): {
                return this.textArrayComparator(fieldId);
            }
            case ('Number'):
            case ('MoneyGBP'): {
                return this.numberComparator(fieldId);
            }
            case ('Text'):
            case ('TextArea'):
            case ('Email'):
            case ('Date'):
            case ('DateTime'):
            case ('Label'):
            case ('Postcode'):
            case ('YesOrNo'):
            case ('PhoneUK'):
            case ('FixedList'): {
                return this.stringComparator(fieldId);
            }
            default: {
                return undefined;
            }
        }
    }
    numberComparator(fieldId) {
        return {
            compare(a, b) {
                let fieldA = a.case_fields[fieldId];
                let fieldB = b.case_fields[fieldId];
                fieldA = isUndefined(fieldA) || fieldA === null ? 0 : fieldA;
                fieldB = isUndefined(fieldB) || fieldB === null ? 0 : fieldB;
                return fieldA - fieldB;
            }
        };
    }
    stringComparator(fieldId) {
        return {
            compare(a, b) {
                let fieldA = a.case_fields[fieldId];
                let fieldB = b.case_fields[fieldId];
                fieldA = isUndefined(fieldA) || fieldA === null ? '' : fieldA.toLowerCase();
                fieldB = isUndefined(fieldB) || fieldB === null ? '' : fieldB.toLowerCase();
                return fieldA === fieldB ? 0 : fieldA > fieldB ? 1 : -1;
            }
        };
    }
    textArrayComparator(fieldId) {
        return {
            compare(a, b) {
                let fieldA = a.case_fields[fieldId];
                let fieldB = b.case_fields[fieldId];
                fieldA = isUndefined(fieldA) || fieldA === null ? '' : fieldA.join().toLowerCase();
                fieldB = isUndefined(fieldB) || fieldB === null ? '' : fieldB.join().toLowerCase();
                return fieldA === fieldB ? 0 : fieldA > fieldB ? 1 : -1;
            }
        };
    }
}
SearchResultViewItemComparatorFactory.ɵfac = function SearchResultViewItemComparatorFactory_Factory(t) { return new (t || SearchResultViewItemComparatorFactory)(); };
SearchResultViewItemComparatorFactory.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SearchResultViewItemComparatorFactory, factory: SearchResultViewItemComparatorFactory.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SearchResultViewItemComparatorFactory, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXJlc3VsdC12aWV3LWl0ZW0tY29tcGFyYXRvci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2NkLWNhc2UtdWktdG9vbGtpdC9zcmMvbGliL3NoYXJlZC9zZXJ2aWNlcy9zZWFyY2gtcmVzdWx0L3NvcnRpbmcvc2VhcmNoLXJlc3VsdC12aWV3LWl0ZW0tY29tcGFyYXRvci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFNbkMsTUFBTSxPQUFPLHFDQUFxQztJQUN6QyxvQ0FBb0MsQ0FBQyxNQUE4QjtRQUN4RSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQ3JDLFFBQVEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDbkMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztnQkFDeEIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUM7WUFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNmLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNkLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDZixLQUFLLENBQUMsVUFBVSxDQUFDLENB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QUFDLENBQUM7WUFDMUQsQ0FBQztTQUNnQyxDQUFDO0lBQ3RDLENBQUM7OzBIQS9EVSxxQ0FBcUM7MkZBQXJDLHFDQUFxQyxXQUFyQyxxQ0FBcUM7dUZBQXJDLHFDQUFxQztjQURqRCxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7IFNlYXJjaFJlc3VsdFZpZXdDb2x1bW4gfSBmcm9tICcuLi8uLi8uLi9kb21haW4vc2VhcmNoL3NlYXJjaC1yZXN1bHQtdmlldy1jb2x1bW4ubW9kZWwnO1xuaW1wb3J0IHsgU2VhcmNoUmVzdWx0Vmlld0l0ZW0gfSBmcm9tICcuLi8uLi8uLi9kb21haW4vc2VhcmNoL3NlYXJjaC1yZXN1bHQtdmlldy1pdGVtLm1vZGVsJztcbmltcG9ydCB7IFNlYXJjaFJlc3VsdFZpZXdJdGVtQ29tcGFyYXRvciB9IGZyb20gJy4uLy4uLy4uL2RvbWFpbi9zZWFyY2gvc29ydGluZy9zZWFyY2gtcmVzdWx0LXZpZXctaXRlbS1jb21wYXJhdG9yJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlYXJjaFJlc3VsdFZpZXdJdGVtQ29tcGFyYXRvckZhY3Rvcnkge1xuICBwdWJsaWMgY3JlYXRlU2VhcmNoUmVzdWx0Vmlld0l0ZW1Db21wYXJhdG9yKGNvbHVtbjogU2VhcmNoUmVzdWx0Vmlld0NvbHVtbik6IFNlYXJjaFJlc3VsdFZpZXdJdGVtQ29tcGFyYXRvciB7XG4gICAgY29uc3QgZmllbGRJZCA9IGNvbHVtbi5jYXNlX2ZpZWxkX2lkO1xuICAgIHN3aXRjaCAoY29sdW1uLmNhc2VfZmllbGRfdHlwZS50eXBlKSB7XG4gICAgICBjYXNlICgnTXVsdGlTZWxlY3RMaXN0Jyk6IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dEFycmF5Q29tcGFyYXRvcihmaWVsZElkKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgKCdOdW1iZXInKTpcbiAgICAgIGNhc2UgKCdNb25leUdCUCcpOiB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlckNvbXBhcmF0b3IoZmllbGRJZCk7XG4gICAgICB9XG4gICAgICBjYXNlICgnVGV4dCcpOlxuICAgICAgY2FzZSAoJ1RleHRBcmVhJyk6XG4gICAgICBjYXNlICgnRW1haWwnKTpcbiAgICAgIGNhc2UgKCdEYXRlJyk6XG4gICAgICBjYXNlICgnRGF0ZVRpbWUnKTpcbiAgICAgIGNhc2UgKCdMYWJlbCcpOlxuICAgICAgY2FzZSAoJ1Bvc3Rjb2RlJyk6XG4gICAgICBjYXNlICgnWWVzT3JObycpOlxuICAgICAgY2FzZSAoJ1Bob25lVUsnKTpcbiAgICAgIGNhc2UgKCdGaXhlZExpc3QnKToge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmdDb21wYXJhdG9yKGZpZWxkSWQpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbnVtYmVyQ29tcGFyYXRvcihmaWVsZElkOiBzdHJpbmcpOiBTZWFyY2hSZXN1bHRWaWV3SXRlbUNvbXBhcmF0b3Ige1xuICAgIHJldHVybiB7XG4gICAgICBjb21wYXJlKGE6IFNlYXJjaFJlc3VsdFZpZXdJdGVtLCBiOiBTZWFyY2hSZXN1bHRWaWV3SXRlbSkge1xuICAgICAgICBsZXQgZmllbGRBID0gYS5jYXNlX2ZpZWxkc1tmaWVsZElkXTtcbiAgICAgICAgbGV0IGZpZWxkQiA9IGIuY2FzZV9maWVsZHNbZmllbGRJZF07XG4gICAgICAgIGZpZWxkQSA9IGlzVW5kZWZpbmVkKGZpZWxkQSkgfHwgZmllbGRBID09PSBudWxsID8gMCA6IGZpZWxkQTtcbiAgICAgICAgZmllbGRCID0gaXNVbmRlZmluZWQoZmllbGRCKSB8fCBmaWVsZEIgPT09IG51bGwgPyAwIDogZmllbGRCO1xuICAgICAgICByZXR1cm4gZmllbGRBIC0gZmllbGRCO1xuICAgICAgfVxuICAgIH0gYXMgU2VhcmNoUmVzdWx0Vmlld0l0ZW1Db21wYXJhdG9yO1xuICB9XG5cbiAgcHJpdmF0ZSBzdHJpbmdDb21wYXJhdG9yKGZpZWxkSWQ6IHN0cmluZykge1xuICAgIHJldHVybiB7XG4gICAgICBjb21wYXJlKGE6IFNlYXJjaFJlc3VsdFZpZXdJdGVtLCBiOiBTZWFyY2hSZXN1bHRWaWV3SXRlbSkge1xuICAgICAgICBsZXQgZmllbGRBID0gYS5jYXNlX2ZpZWxkc1tmaWVsZElkXTtcbiAgICAgICAgbGV0IGZpZWxkQiA9IGIuY2FzZV9maWVsZHNbZmllbGRJZF07XG4gICAgICAgIGZpZWxkQSA9IGlzVW5kZWZpbmVkKGZpZWxkQSkgfHwgZmllbGRBID09PSBudWxsID8gJycgOiBmaWVsZEEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZmllbGRCID0gaXNVbmRlZmluZWQoZmllbGRCKSB8fCBmaWVsZEIgPT09IG51bGwgPyAnJyA6IGZpZWxkQi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gZmllbGRBID09PSBmaWVsZEIgPyAwIDogZmllbGRBID4gZmllbGRCID8gMSA6IC0xO1xuICAgICAgfVxuICAgIH0gYXMgU2VhcmNoUmVzdWx0Vmlld0l0ZW1Db21wYXJhdG9yO1xuICB9XG5cbiAgcHJpdmF0ZSB0ZXh0QXJyYXlDb21wYXJhdG9yKGZpZWxkSWQ6IHN0cmluZykge1xuICAgIHJldHVybiB7XG4gICAgICBjb21wYXJlKGE6IFNlYXJjaFJlc3VsdFZpZXdJdGVtLCBiOiBTZWFyY2hSZXN1bHRWaWV3SXRlbSkge1xuICAgICAgICBsZXQgZmllbGRBID0gYS5jYXNlX2ZpZWxkc1tmaWVsZElkXTtcbiAgICAgICAgbGV0IGZpZWxkQiA9IGIuY2FzZV9maWVsZHNbZmllbGRJZF07XG4gICAgICAgIGZpZWxkQSA9IGlzVW5kZWZpbmVkKGZpZWxkQSkgfHwgZmllbGRBID09PSBudWxsID8gJycgOiBmaWVsZEEuam9pbigpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGZpZWxkQiA9IGlzVW5kZWZpbmVkKGZpZWxkQikgfHwgZmllbGRCID09PSBudWxsID8gJycgOiBmaWVsZEIuam9pbigpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBmaWVsZEEgPT09IGZpZWxkQiA/IDAgOiBmaWVsZEEgPiBmaWVsZEIgPyAxIDogLTE7XG4gICAgICB9XG4gICAgfSBhcyBTZWFyY2hSZXN1bHRWaWV3SXRlbUNvbXBhcmF0b3I7XG4gIH1cbn1cbiJdfQ==