import { Pipe } from '@angular/core';
import { ShowCondition } from '../../directives/conditional-show/domain/conditional-show.model';
import { FieldsUtils } from '../../services/fields/fields.utils';
import * as i0 from "@angular/core";
export class FieldsFilterPipe {
    /**
     * Complex type should have at least on simple field descendant with a value.
     */
    static isValidComplex(field, values) {
        values = values || {};
        const type = field.field_type;
        const value = FieldsFilterPipe.getValue(field, values);
        const hasChildrenWithValue = type.complex_fields.find(f => {
            return FieldsFilterPipe.keepField(f, value);
        });
        return !!hasChildrenWithValue;
    }
    static isEmpty(value) {
        return FieldsFilterPipe.EMPTY_VALUES.indexOf(value) !== -1
            || value.length === 0;
    }
    static isCompound(field) {
        return FieldsFilterPipe.NESTED_TYPES[field.field_type.type];
    }
    static isValidCompound(field, value) {
        return FieldsFilterPipe.isCompound(field)
            && FieldsFilterPipe.NESTED_TYPES[field.field_type.type](field, value);
    }
    static keepField(field, value) {
        // We shouldn't ditch labels.
        if (field.field_type.type === 'Label' && (field.label || '').length > 0) {
            return true;
        }
        value = value || {};
        if (FieldsFilterPipe.isCompound(field)) {
            return FieldsFilterPipe.isValidCompound(field, value);
        }
        return !FieldsFilterPipe.isEmpty(field.value)
            || !FieldsFilterPipe.isEmpty(value[field.id]);
    }
    static getValue(field, values, index) {
        let value;
        if (index >= 0) {
            value = values[index].value[field.id];
        }
        else {
            value = values[field.id];
        }
        return FieldsFilterPipe.isEmpty(field.value) ? value : field.value;
    }
    /**
     * Filter out fields having no data to display and harmonise field values coming parent's value.
     */
    transform(complexField, keepEmpty, index, stripHidden = false) {
        if (!complexField || !complexField.field_type) {
            return [];
        }
        const fields = complexField.field_type.complex_fields || [];
        const values = complexField.value || {};
        const checkConditionsAgainst = { [complexField.id]: values };
        return fields
            .filter(f => {
            if (stripHidden && f.show_condition) {
                const cond = ShowCondition.getInstance(f.show_condition);
                return cond.match(checkConditionsAgainst);
            }
            return true;
        })
            .map(f => {
            const clone = FieldsUtils.cloneObject(f);
            const value = FieldsFilterPipe.getValue(f, values, index);
            if (!FieldsFilterPipe.isEmpty(value)) {
                clone.value = value;
            }
            return clone;
        })
            .filter(f => keepEmpty || FieldsFilterPipe.keepField(f))
            .map(f => {
            if (!f.display_context) {
                f.display_context = complexField.display_context;
            }
            return f;
        });
    }
}
FieldsFilterPipe.EMPTY_VALUES = [
    undefined,
    null,
    '',
    {}
];
FieldsFilterPipe.NESTED_TYPES = {
    Complex: FieldsFilterPipe.isValidComplex
};
FieldsFilterPipe.ɵfac = function FieldsFilterPipe_Factory(t) { return new (t || FieldsFilterPipe)(); };
FieldsFilterPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "ccdFieldsFilter", type: FieldsFilterPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FieldsFilterPipe, [{
        type: Pipe,
        args: [{
                name: 'ccdFieldsFilter'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,